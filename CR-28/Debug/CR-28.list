
CR-28.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099dc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08009ca8  08009ca8  00019ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d34  08009d34  00019d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d3c  08009d3c  00019d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009d40  08009d40  00019d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e0  24000010  08009d54  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002f0  08009d54  000202f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000198bf  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000278e  00000000  00000000  000398fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001288  00000000  00000000  0003c090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011b0  00000000  00000000  0003d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003480f  00000000  00000000  0003e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001789a  00000000  00000000  00072cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f6fa  00000000  00000000  0008a571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e9c6b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005134  00000000  00000000  001e9cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009c90 	.word	0x08009c90

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009c90 	.word	0x08009c90

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fea4 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f80e 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 fb20 	bl	8000c60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000620:	f000 fafe 	bl	8000c20 <MX_DMA_Init>
  MX_ADC1_Init();
 8000624:	f000 f878 	bl	8000718 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000628:	f000 faae 	bl	8000b88 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 800062c:	f000 f9e4 	bl	80009f8 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8000630:	f000 fa46 	bl	8000ac0 <MX_FDCAN3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x24>
	...

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09c      	sub	sp, #112	; 0x70
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	224c      	movs	r2, #76	; 0x4c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f009 fb1a 	bl	8009c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2220      	movs	r2, #32
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f009 fb14 	bl	8009c80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000658:	2004      	movs	r0, #4
 800065a:	f004 fd5f 	bl	800511c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <SystemClock_Config+0xdc>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066a:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <SystemClock_Config+0xdc>)
 800066c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xdc>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067e:	bf00      	nop
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemClock_Config+0xdc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800068c:	d1f8      	bne.n	8000680 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068e:	2302      	movs	r3, #2
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000692:	2301      	movs	r3, #1
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069e:	2300      	movs	r3, #0
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80006a6:	230c      	movs	r3, #12
 80006a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b6:	230c      	movs	r3, #12
 80006b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fd82 	bl	80051d0 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d2:	f000 fb0d 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	233f      	movs	r3, #63	; 0x3f
 80006d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006e6:	2340      	movs	r3, #64	; 0x40
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 f941 	bl	8005984 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000708:	f000 faf2 	bl	8000cf0 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3770      	adds	r7, #112	; 0x70
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58024800 	.word	0x58024800

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2224      	movs	r2, #36	; 0x24
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f009 faa5 	bl	8009c80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000736:	4b9f      	ldr	r3, [pc, #636]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000738:	4a9f      	ldr	r2, [pc, #636]	; (80009b8 <MX_ADC1_Init+0x2a0>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800073c:	4b9d      	ldr	r3, [pc, #628]	; (80009b4 <MX_ADC1_Init+0x29c>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000742:	4b9c      	ldr	r3, [pc, #624]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000748:	4b9a      	ldr	r3, [pc, #616]	; (80009b4 <MX_ADC1_Init+0x29c>)
 800074a:	2201      	movs	r2, #1
 800074c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b99      	ldr	r3, [pc, #612]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000750:	2204      	movs	r2, #4
 8000752:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000754:	4b97      	ldr	r3, [pc, #604]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000756:	2200      	movs	r2, #0
 8000758:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800075a:	4b96      	ldr	r3, [pc, #600]	; (80009b4 <MX_ADC1_Init+0x29c>)
 800075c:	2201      	movs	r2, #1
 800075e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 16;
 8000760:	4b94      	ldr	r3, [pc, #592]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000762:	2210      	movs	r2, #16
 8000764:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b93      	ldr	r3, [pc, #588]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076e:	4b91      	ldr	r3, [pc, #580]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000774:	4b8f      	ldr	r3, [pc, #572]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000776:	2200      	movs	r2, #0
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800077a:	4b8e      	ldr	r3, [pc, #568]	; (80009b4 <MX_ADC1_Init+0x29c>)
 800077c:	2203      	movs	r2, #3
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000780:	4b8c      	ldr	r3, [pc, #560]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000782:	2200      	movs	r2, #0
 8000784:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000786:	4b8b      	ldr	r3, [pc, #556]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000788:	2200      	movs	r2, #0
 800078a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800078c:	4b89      	ldr	r3, [pc, #548]	; (80009b4 <MX_ADC1_Init+0x29c>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	4887      	ldr	r0, [pc, #540]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000796:	f001 f8bb 	bl	8001910 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007a0:	f000 faa6 	bl	8000cf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ac:	4619      	mov	r1, r3
 80007ae:	4881      	ldr	r0, [pc, #516]	; (80009b4 <MX_ADC1_Init+0x29c>)
 80007b0:	f002 f8f6 	bl	80029a0 <HAL_ADCEx_MultiModeConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80007ba:	f000 fa99 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007be:	4b7f      	ldr	r3, [pc, #508]	; (80009bc <MX_ADC1_Init+0x2a4>)
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c2:	2306      	movs	r3, #6
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d0:	2304      	movs	r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4874      	ldr	r0, [pc, #464]	; (80009b4 <MX_ADC1_Init+0x29c>)
 80007e4:	f001 fa9c 	bl	8001d20 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80007ee:	f000 fa7f 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007f2:	4b73      	ldr	r3, [pc, #460]	; (80009c0 <MX_ADC1_Init+0x2a8>)
 80007f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007f6:	230c      	movs	r3, #12
 80007f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	486d      	ldr	r0, [pc, #436]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000800:	f001 fa8e 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800080a:	f000 fa71 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800080e:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <MX_ADC1_Init+0x2ac>)
 8000810:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000812:	2312      	movs	r3, #18
 8000814:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4866      	ldr	r0, [pc, #408]	; (80009b4 <MX_ADC1_Init+0x29c>)
 800081c:	f001 fa80 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000826:	f000 fa63 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800082a:	4b67      	ldr	r3, [pc, #412]	; (80009c8 <MX_ADC1_Init+0x2b0>)
 800082c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800082e:	2318      	movs	r3, #24
 8000830:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	485f      	ldr	r0, [pc, #380]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000838:	f001 fa72 	bl	8001d20 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8000842:	f000 fa55 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000846:	4b61      	ldr	r3, [pc, #388]	; (80009cc <MX_ADC1_Init+0x2b4>)
 8000848:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800084a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4857      	ldr	r0, [pc, #348]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000856:	f001 fa63 	bl	8001d20 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8000860:	f000 fa46 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000864:	4b5a      	ldr	r3, [pc, #360]	; (80009d0 <MX_ADC1_Init+0x2b8>)
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000868:	f44f 7383 	mov.w	r3, #262	; 0x106
 800086c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	4850      	ldr	r0, [pc, #320]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000874:	f001 fa54 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800087e:	f000 fa37 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000882:	4b54      	ldr	r3, [pc, #336]	; (80009d4 <MX_ADC1_Init+0x2bc>)
 8000884:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000886:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800088a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4848      	ldr	r0, [pc, #288]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000892:	f001 fa45 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 800089c:	f000 fa28 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008a0:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <MX_ADC1_Init+0x2c0>)
 80008a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008a4:	f44f 7389 	mov.w	r3, #274	; 0x112
 80008a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4841      	ldr	r0, [pc, #260]	; (80009b4 <MX_ADC1_Init+0x29c>)
 80008b0:	f001 fa36 	bl	8001d20 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 80008ba:	f000 fa19 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <MX_ADC1_Init+0x2c4>)
 80008c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80008c2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80008c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	4839      	ldr	r0, [pc, #228]	; (80009b4 <MX_ADC1_Init+0x29c>)
 80008ce:	f001 fa27 	bl	8001d20 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80008d8:	f000 fa0a 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <MX_ADC1_Init+0x2c8>)
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80008e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	4619      	mov	r1, r3
 80008ea:	4832      	ldr	r0, [pc, #200]	; (80009b4 <MX_ADC1_Init+0x29c>)
 80008ec:	f001 fa18 	bl	8001d20 <HAL_ADC_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 80008f6:	f000 f9fb 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008fa:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <MX_ADC1_Init+0x2cc>)
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80008fe:	f240 2306 	movw	r3, #518	; 0x206
 8000902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	482a      	ldr	r0, [pc, #168]	; (80009b4 <MX_ADC1_Init+0x29c>)
 800090a:	f001 fa09 	bl	8001d20 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0x200>
  {
    Error_Handler();
 8000914:	f000 f9ec 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <MX_ADC1_Init+0x2d0>)
 800091a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800091c:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000920:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4823      	ldr	r0, [pc, #140]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000928:	f001 f9fa 	bl	8001d20 <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0x21e>
  {
    Error_Handler();
 8000932:	f000 f9dd 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <MX_ADC1_Init+0x2d4>)
 8000938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800093a:	f240 2312 	movw	r3, #530	; 0x212
 800093e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	481b      	ldr	r0, [pc, #108]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000946:	f001 f9eb 	bl	8001d20 <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x23c>
  {
    Error_Handler();
 8000950:	f000 f9ce 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_ADC1_Init+0x2d8>)
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000958:	f44f 7306 	mov.w	r3, #536	; 0x218
 800095c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000964:	f001 f9dc 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0x25a>
  {
    Error_Handler();
 800096e:	f000 f9bf 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_ADC1_Init+0x2dc>)
 8000974:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_ADC1_Init+0x29c>)
 8000982:	f001 f9cd 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0x278>
  {
    Error_Handler();
 800098c:	f000 f9b0 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000990:	f240 3306 	movw	r3, #774	; 0x306
 8000994:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_ADC1_Init+0x29c>)
 800099c:	f001 f9c0 	bl	8001d20 <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x292>
  {
    Error_Handler();
 80009a6:	f000 f9a3 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400002c 	.word	0x2400002c
 80009b8:	40022000 	.word	0x40022000
 80009bc:	08600004 	.word	0x08600004
 80009c0:	0c900008 	.word	0x0c900008
 80009c4:	10c00010 	.word	0x10c00010
 80009c8:	14f00020 	.word	0x14f00020
 80009cc:	1d500080 	.word	0x1d500080
 80009d0:	21800100 	.word	0x21800100
 80009d4:	25b00200 	.word	0x25b00200
 80009d8:	2a000400 	.word	0x2a000400
 80009dc:	2e300800 	.word	0x2e300800
 80009e0:	3ac04000 	.word	0x3ac04000
 80009e4:	3ef08000 	.word	0x3ef08000
 80009e8:	43210000 	.word	0x43210000
 80009ec:	47520000 	.word	0x47520000
 80009f0:	4b840000 	.word	0x4b840000
 80009f4:	4fb80000 	.word	0x4fb80000

080009f8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 80009fe:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <MX_FDCAN2_Init+0xc4>)
 8000a00:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a22:	2210      	movs	r2, #16
 8000a24:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_FDCAN2_Init+0xc0>)
 8000aa6:	f003 fe2d 	bl	8004704 <HAL_FDCAN_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ab0:	f000 f91e 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000114 	.word	0x24000114
 8000abc:	4000a400 	.word	0x4000a400

08000ac0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <MX_FDCAN3_Init+0xc4>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000ae2:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000aea:	2210      	movs	r2, #16
 8000aec:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b32:	2204      	movs	r2, #4
 8000b34:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b3e:	2204      	movs	r2, #4
 8000b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_FDCAN3_Init+0xc0>)
 8000b6e:	f003 fdc9 	bl	8004704 <HAL_FDCAN_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000b78:	f000 f8ba 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	240001b4 	.word	0x240001b4
 8000b84:	4000d400 	.word	0x4000d400

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f007 fe49 	bl	8008868 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 f888 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000be4:	f008 ff4f 	bl	8009a86 <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 f87f 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bf6:	f008 ff84 	bl	8009b02 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 f876 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000c06:	f008 ff05 	bl	8009a14 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f86e 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000254 	.word	0x24000254
 8000c1c:	40011000 	.word	0x40011000

08000c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_DMA_Init+0x3c>)
 8000c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <MX_DMA_Init+0x3c>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_DMA_Init+0x3c>)
 8000c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	200b      	movs	r0, #11
 8000c4a:	f002 f866 	bl	8002d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c4e:	200b      	movs	r0, #11
 8000c50:	f002 f87d 	bl	8002d4e <HAL_NVIC_EnableIRQ>

}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c6e:	f043 0320 	orr.w	r3, r3, #32
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	f003 0320 	and.w	r3, r3, #32
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a10      	ldr	r2, [pc, #64]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_GPIO_Init+0x8c>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_MspInit+0x30>)
 8000d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d08:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x30>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x30>)
 8000d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	58024400 	.word	0x58024400

08000d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0bc      	sub	sp, #240	; 0xf0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	22b8      	movs	r2, #184	; 0xb8
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f008 ff95 	bl	8009c80 <memset>
  if(hadc->Instance==ADC1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a71      	ldr	r2, [pc, #452]	; (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	f040 80db 	bne.w	8000f18 <HAL_ADC_MspInit+0x1e8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d72:	230c      	movs	r3, #12
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000d76:	2305      	movs	r3, #5
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d82:	23c0      	movs	r3, #192	; 0xc0
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 f97f 	bl	800609c <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000da4:	f7ff ffa4 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000da8:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000daa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dae:	4a5d      	ldr	r2, [pc, #372]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000db0:	f043 0320 	orr.w	r3, r3, #32
 8000db4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000db8:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000dba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b57      	ldr	r3, [pc, #348]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a55      	ldr	r2, [pc, #340]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b53      	ldr	r3, [pc, #332]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b4f      	ldr	r3, [pc, #316]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	4a4e      	ldr	r2, [pc, #312]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df4:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	4a46      	ldr	r2, [pc, #280]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e12:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	4a3f      	ldr	r2, [pc, #252]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000e28:	f043 0320 	orr.w	r3, r3, #32
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	f003 0320 	and.w	r3, r3, #32
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e3e:	2333      	movs	r3, #51	; 0x33
 8000e40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e44:	2303      	movs	r3, #3
 8000e46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e54:	4619      	mov	r1, r3
 8000e56:	4834      	ldr	r0, [pc, #208]	; (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000e58:	f003 ffb8 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e5c:	23ff      	movs	r3, #255	; 0xff
 8000e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e72:	4619      	mov	r1, r3
 8000e74:	482d      	ldr	r0, [pc, #180]	; (8000f2c <HAL_ADC_MspInit+0x1fc>)
 8000e76:	f003 ffa9 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e90:	4619      	mov	r1, r3
 8000e92:	4827      	ldr	r0, [pc, #156]	; (8000f30 <HAL_ADC_MspInit+0x200>)
 8000e94:	f003 ff9a 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4820      	ldr	r0, [pc, #128]	; (8000f34 <HAL_ADC_MspInit+0x204>)
 8000eb4:	f003 ff8a 	bl	8004dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000eba:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <HAL_ADC_MspInit+0x20c>)
 8000ebc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000ec0:	2209      	movs	r2, #9
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ede:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000efe:	f001 ff41 	bl	8002d84 <HAL_DMA_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_ADC_MspInit+0x1dc>
    {
      Error_Handler();
 8000f08:	f7ff fef2 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000f10:	659a      	str	r2, [r3, #88]	; 0x58
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <HAL_ADC_MspInit+0x208>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	37f0      	adds	r7, #240	; 0xf0
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40022000 	.word	0x40022000
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58020800 	.word	0x58020800
 8000f2c:	58020000 	.word	0x58020000
 8000f30:	58020400 	.word	0x58020400
 8000f34:	58021400 	.word	0x58021400
 8000f38:	2400009c 	.word	0x2400009c
 8000f3c:	40020010 	.word	0x40020010

08000f40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ba      	sub	sp, #232	; 0xe8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	22b8      	movs	r2, #184	; 0xb8
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f008 fe8d 	bl	8009c80 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <HAL_FDCAN_MspInit+0x188>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d151      	bne.n	8001014 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f74:	f04f 0300 	mov.w	r3, #0
 8000f78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 f887 	bl	800609c <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000f94:	f7ff feac 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f98:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_FDCAN_MspInit+0x18c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_FDCAN_MspInit+0x18c>)
 8000fa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000fa2:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_FDCAN_MspInit+0x18c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10e      	bne.n	8000fc8 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000faa:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8000fac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fb0:	4a47      	ldr	r2, [pc, #284]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000fba:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8000fbc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a40      	ldr	r2, [pc, #256]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fe6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001000:	2309      	movs	r3, #9
 8001002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800100a:	4619      	mov	r1, r3
 800100c:	4831      	ldr	r0, [pc, #196]	; (80010d4 <HAL_FDCAN_MspInit+0x194>)
 800100e:	f003 fedd 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001012:	e054      	b.n	80010be <HAL_FDCAN_MspInit+0x17e>
  else if(hfdcan->Instance==FDCAN3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <HAL_FDCAN_MspInit+0x198>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d14f      	bne.n	80010be <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800101e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800102a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800102e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	4618      	mov	r0, r3
 8001038:	f005 f830 	bl	800609c <HAL_RCCEx_PeriphCLKConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001042:	f7ff fe55 	bl	8000cf0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_FDCAN_MspInit+0x18c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_FDCAN_MspInit+0x18c>)
 800104e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_FDCAN_MspInit+0x18c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10e      	bne.n	8001076 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 800105a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 800106a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800106e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_FDCAN_MspInit+0x190>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001094:	23c0      	movs	r3, #192	; 0xc0
 8001096:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <HAL_FDCAN_MspInit+0x19c>)
 80010ba:	f003 fe87 	bl	8004dcc <HAL_GPIO_Init>
}
 80010be:	bf00      	nop
 80010c0:	37e8      	adds	r7, #232	; 0xe8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	4000a400 	.word	0x4000a400
 80010cc:	240002e8 	.word	0x240002e8
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58020400 	.word	0x58020400
 80010d8:	4000d400 	.word	0x4000d400
 80010dc:	58021400 	.word	0x58021400

080010e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0b8      	sub	sp, #224	; 0xe0
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	22b8      	movs	r2, #184	; 0xb8
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f008 fdbd 	bl	8009c80 <memset>
  if(huart->Instance==USART1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <HAL_UART_MspInit+0xc8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d146      	bne.n	800119e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001110:	f04f 0201 	mov.w	r2, #1
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4618      	mov	r0, r3
 8001128:	f004 ffb8 	bl	800609c <HAL_RCCEx_PeriphCLKConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001132:	f7ff fddd 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_UART_MspInit+0xcc>)
 8001138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_UART_MspInit+0xcc>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_UART_MspInit+0xcc>)
 8001148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_MspInit+0xcc>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_UART_MspInit+0xcc>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_UART_MspInit+0xcc>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001172:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001176:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800118c:	2304      	movs	r3, #4
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_UART_MspInit+0xd0>)
 800119a:	f003 fe17 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	37e0      	adds	r7, #224	; 0xe0
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40011000 	.word	0x40011000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58020400 	.word	0x58020400

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f920 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <DMA1_Stream0_IRQHandler+0x10>)
 800120e:	f002 f913 	bl	8003438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2400009c 	.word	0x2400009c

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <SystemInit+0xd0>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a31      	ldr	r2, [pc, #196]	; (80012ec <SystemInit+0xd0>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <SystemInit+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	2b06      	cmp	r3, #6
 800123a:	d807      	bhi.n	800124c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800123c:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <SystemInit+0xd4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 030f 	bic.w	r3, r3, #15
 8001244:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <SystemInit+0xd4>)
 8001246:	f043 0307 	orr.w	r3, r3, #7
 800124a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <SystemInit+0xd8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <SystemInit+0xd8>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <SystemInit+0xd8>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <SystemInit+0xd8>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4924      	ldr	r1, [pc, #144]	; (80012f4 <SystemInit+0xd8>)
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <SystemInit+0xdc>)
 8001266:	4013      	ands	r3, r2
 8001268:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <SystemInit+0xd4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <SystemInit+0xd4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 030f 	bic.w	r3, r3, #15
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <SystemInit+0xd4>)
 8001280:	f043 0307 	orr.w	r3, r3, #7
 8001284:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <SystemInit+0xd8>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <SystemInit+0xd8>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <SystemInit+0xd8>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <SystemInit+0xd8>)
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <SystemInit+0xe0>)
 800129c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <SystemInit+0xd8>)
 80012a0:	4a17      	ldr	r2, [pc, #92]	; (8001300 <SystemInit+0xe4>)
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <SystemInit+0xd8>)
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <SystemInit+0xe8>)
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <SystemInit+0xd8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <SystemInit+0xd8>)
 80012b2:	4a14      	ldr	r2, [pc, #80]	; (8001304 <SystemInit+0xe8>)
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <SystemInit+0xd8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <SystemInit+0xd8>)
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <SystemInit+0xe8>)
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <SystemInit+0xd8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <SystemInit+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <SystemInit+0xd8>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <SystemInit+0xd8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <SystemInit+0xec>)
 80012dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	52002000 	.word	0x52002000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80012fc:	02020200 	.word	0x02020200
 8001300:	01ff0000 	.word	0x01ff0000
 8001304:	01010280 	.word	0x01010280
 8001308:	52004000 	.word	0x52004000

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001310:	f7ff ff84 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	; (800134c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	; (8001358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133a:	f008 fc6f 	bl	8009c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff f967 	bl	8000610 <main>
  bx  lr
 8001342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001348:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800134c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001350:	08009d44 	.word	0x08009d44
  ldr r2, =_sbss
 8001354:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001358:	240002f0 	.word	0x240002f0

0800135c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC3_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001366:	2003      	movs	r0, #3
 8001368:	f001 fccc 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800136c:	f004 fcc0 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_Init+0x68>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	4913      	ldr	r1, [pc, #76]	; (80013cc <HAL_Init+0x6c>)
 800137e:	5ccb      	ldrb	r3, [r1, r3]
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_Init+0x68>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_Init+0x6c>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	fa22 f303 	lsr.w	r3, r2, r3
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x70>)
 80013a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <HAL_Init+0x74>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 f814 	bl	80013d8 <HAL_InitTick>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e002      	b.n	80013c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ba:	f7ff fc9f 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	58024400 	.word	0x58024400
 80013cc:	08009cf4 	.word	0x08009cf4
 80013d0:	24000004 	.word	0x24000004
 80013d4:	24000000 	.word	0x24000000

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_InitTick+0x60>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e021      	b.n	8001430 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_InitTick+0x64>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_InitTick+0x60>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fcb1 	bl	8002d6a <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f001 fc7b 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_InitTick+0x68>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2400000c 	.word	0x2400000c
 800143c:	24000000 	.word	0x24000000
 8001440:	24000008 	.word	0x24000008

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2400000c 	.word	0x2400000c
 8001468:	240002ec 	.word	0x240002ec

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	240002ec 	.word	0x240002ec

08001484 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3360      	adds	r3, #96	; 0x60
 80014fe:	461a      	mov	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <LL_ADC_SetOffset+0x60>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d10b      	bne.n	8001528 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4313      	orrs	r3, r2
 800151e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001526:	e00b      	b.n	8001540 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	430b      	orrs	r3, r1
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	58026000 	.word	0x58026000

08001550 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3360      	adds	r3, #96	; 0x60
 800155e:	461a      	mov	r2, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	611a      	str	r2, [r3, #16]
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00e      	beq.n	80015e2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3360      	adds	r3, #96	; 0x60
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	601a      	str	r2, [r3, #0]
  }
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	58026000 	.word	0x58026000

080015f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <LL_ADC_SetOffsetSaturation+0x40>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d10e      	bne.n	8001626 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3360      	adds	r3, #96	; 0x60
 800160c:	461a      	mov	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	431a      	orrs	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	58026000 	.word	0x58026000

08001638 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <LL_ADC_SetOffsetSign+0x40>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d10e      	bne.n	800166a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3360      	adds	r3, #96	; 0x60
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	58026000 	.word	0x58026000

0800167c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3360      	adds	r3, #96	; 0x60
 800168c:	461a      	mov	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <LL_ADC_SetOffsetState+0x50>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d108      	bne.n	80016b0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80016ae:	e007      	b.n	80016c0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	58026000 	.word	0x58026000

080016d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3330      	adds	r3, #48	; 0x30
 80016e0:	461a      	mov	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	4413      	add	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	211f      	movs	r1, #31
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	0e9b      	lsrs	r3, r3, #26
 8001708:	f003 011f 	and.w	r1, r3, #31
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	431a      	orrs	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3314      	adds	r3, #20
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	0e5b      	lsrs	r3, r3, #25
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	0d1b      	lsrs	r3, r3, #20
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2107      	movs	r1, #7
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	401a      	ands	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0d1b      	lsrs	r3, r3, #20
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	431a      	orrs	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001772:	bf00      	nop
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d115      	bne.n	80017c0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0318 	and.w	r3, r3, #24
 80017aa:	4914      	ldr	r1, [pc, #80]	; (80017fc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80017ac:	40d9      	lsrs	r1, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	400b      	ands	r3, r1
 80017b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017b6:	431a      	orrs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017be:	e014      	b.n	80017ea <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0318 	and.w	r3, r3, #24
 80017d6:	4909      	ldr	r1, [pc, #36]	; (80017fc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80017d8:	40d9      	lsrs	r1, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	400b      	ands	r3, r1
 80017de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017e2:	431a      	orrs	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	58026000 	.word	0x58026000
 80017fc:	000fffff 	.word	0x000fffff

08001800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <LL_ADC_DisableDeepPowerDown+0x20>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6093      	str	r3, [r2, #8]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	5fffffc0 	.word	0x5fffffc0

08001824 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001838:	d101      	bne.n	800183e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <LL_ADC_EnableInternalRegulator+0x24>)
 800185a:	4013      	ands	r3, r2
 800185c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	6fffffc0 	.word	0x6fffffc0

08001874 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001888:	d101      	bne.n	800188e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <LL_ADC_IsEnabled+0x18>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <LL_ADC_IsEnabled+0x1a>
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d101      	bne.n	80018da <LL_ADC_REG_IsConversionOngoing+0x18>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d101      	bne.n	8001900 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1ee      	b.n	8001d08 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff f9f9 	bl	8000d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff67 	bl	8001824 <LL_ADC_IsDeepPowerDownEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff4d 	bl	8001800 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff82 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d114      	bne.n	80019a0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff66 	bl	800184c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001980:	4b8e      	ldr	r3, [pc, #568]	; (8001bbc <HAL_ADC_Init+0x2ac>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	4a8e      	ldr	r2, [pc, #568]	; (8001bc0 <HAL_ADC_Init+0x2b0>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	3301      	adds	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001992:	e002      	b.n	800199a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3b01      	subs	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f9      	bne.n	8001994 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff65 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10d      	bne.n	80019cc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b4:	f043 0210 	orr.w	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff76 	bl	80018c2 <LL_ADC_REG_IsConversionOngoing>
 80019d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 8188 	bne.w	8001cf6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 8184 	bne.w	8001cf6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff4a 	bl	800189c <LL_ADC_IsEnabled>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d136      	bne.n	8001a7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6c      	ldr	r2, [pc, #432]	; (8001bc4 <HAL_ADC_Init+0x2b4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d004      	beq.n	8001a22 <HAL_ADC_Init+0x112>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6a      	ldr	r2, [pc, #424]	; (8001bc8 <HAL_ADC_Init+0x2b8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10e      	bne.n	8001a40 <HAL_ADC_Init+0x130>
 8001a22:	4868      	ldr	r0, [pc, #416]	; (8001bc4 <HAL_ADC_Init+0x2b4>)
 8001a24:	f7ff ff3a 	bl	800189c <LL_ADC_IsEnabled>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	4867      	ldr	r0, [pc, #412]	; (8001bc8 <HAL_ADC_Init+0x2b8>)
 8001a2c:	f7ff ff36 	bl	800189c <LL_ADC_IsEnabled>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4323      	orrs	r3, r4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	e008      	b.n	8001a52 <HAL_ADC_Init+0x142>
 8001a40:	4862      	ldr	r0, [pc, #392]	; (8001bcc <HAL_ADC_Init+0x2bc>)
 8001a42:	f7ff ff2b 	bl	800189c <LL_ADC_IsEnabled>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d012      	beq.n	8001a7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5a      	ldr	r2, [pc, #360]	; (8001bc4 <HAL_ADC_Init+0x2b4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d004      	beq.n	8001a6a <HAL_ADC_Init+0x15a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_ADC_Init+0x2b8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x15e>
 8001a6a:	4a59      	ldr	r2, [pc, #356]	; (8001bd0 <HAL_ADC_Init+0x2c0>)
 8001a6c:	e000      	b.n	8001a70 <HAL_ADC_Init+0x160>
 8001a6e:	4a59      	ldr	r2, [pc, #356]	; (8001bd4 <HAL_ADC_Init+0x2c4>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7ff fd04 	bl	8001484 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_ADC_Init+0x2bc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d129      	bne.n	8001ada <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7e5b      	ldrb	r3, [r3, #25]
 8001a8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a90:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001a96:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d013      	beq.n	8001ac8 <HAL_ADC_Init+0x1b8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_ADC_Init+0x1b4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b1c      	cmp	r3, #28
 8001aae:	d007      	beq.n	8001ac0 <HAL_ADC_Init+0x1b0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b18      	cmp	r3, #24
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_Init+0x1ac>
 8001ab8:	2318      	movs	r3, #24
 8001aba:	e006      	b.n	8001aca <HAL_ADC_Init+0x1ba>
 8001abc:	2300      	movs	r3, #0
 8001abe:	e004      	b.n	8001aca <HAL_ADC_Init+0x1ba>
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	e002      	b.n	8001aca <HAL_ADC_Init+0x1ba>
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	e000      	b.n	8001aca <HAL_ADC_Init+0x1ba>
 8001ac8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001aca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	e00e      	b.n	8001af8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7e5b      	ldrb	r3, [r3, #25]
 8001ade:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ae4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001aea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d106      	bne.n	8001b10 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	3b01      	subs	r3, #1
 8001b08:	045b      	lsls	r3, r3, #17
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d009      	beq.n	8001b2c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <HAL_ADC_Init+0x2bc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d115      	bne.n	8001b62 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_ADC_Init+0x2c8>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	69b9      	ldr	r1, [r7, #24]
 8001b46:	430b      	orrs	r3, r1
 8001b48:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	e009      	b.n	8001b76 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_ADC_Init+0x2cc>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	69b9      	ldr	r1, [r7, #24]
 8001b72:	430b      	orrs	r3, r1
 8001b74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fea1 	bl	80018c2 <LL_ADC_REG_IsConversionOngoing>
 8001b80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff feae 	bl	80018e8 <LL_ADC_INJ_IsConversionOngoing>
 8001b8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f040 808e 	bne.w	8001cb2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f040 808a 	bne.w	8001cb2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_ADC_Init+0x2bc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d11b      	bne.n	8001be0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e1b      	ldrb	r3, [r3, #24]
 8001bac:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bb4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	e018      	b.n	8001bee <HAL_ADC_Init+0x2de>
 8001bbc:	24000000 	.word	0x24000000
 8001bc0:	053e2d63 	.word	0x053e2d63
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	40022100 	.word	0x40022100
 8001bcc:	58026000 	.word	0x58026000
 8001bd0:	40022300 	.word	0x40022300
 8001bd4:	58026300 	.word	0x58026300
 8001bd8:	fff04007 	.word	0xfff04007
 8001bdc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e1b      	ldrb	r3, [r3, #24]
 8001be4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_ADC_Init+0x400>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	69b9      	ldr	r1, [r7, #24]
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d137      	bne.n	8001c7c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <HAL_ADC_Init+0x404>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d116      	bne.n	8001c4a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_ADC_Init+0x408>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	e020      	b.n	8001c8c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_ADC_Init+0x40c>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c58:	3a01      	subs	r2, #1
 8001c5a:	0411      	lsls	r1, r2, #16
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c60:	4311      	orrs	r1, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	e007      	b.n	8001c8c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <HAL_ADC_Init+0x404>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d002      	beq.n	8001cb2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fd63 	bl	8002778 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f023 010f 	bic.w	r1, r3, #15
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd2:	e007      	b.n	8001ce4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 020f 	bic.w	r2, r2, #15
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	f023 0303 	bic.w	r3, r3, #3
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	661a      	str	r2, [r3, #96]	; 0x60
 8001cf4:	e007      	b.n	8001d06 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	f043 0210 	orr.w	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3724      	adds	r7, #36	; 0x24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	ffffbffc 	.word	0xffffbffc
 8001d14:	58026000 	.word	0x58026000
 8001d18:	fc00f81f 	.word	0xfc00f81f
 8001d1c:	fc00f81e 	.word	0xfc00f81e

08001d20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b0b9      	sub	sp, #228	; 0xe4
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d3a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4aa9      	ldr	r2, [pc, #676]	; (8001fe8 <HAL_ADC_ConfigChannel+0x2c8>)
 8001d42:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x34>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f000 bcfa 	b.w	8002748 <HAL_ADC_ConfigChannel+0xa28>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fdae 	bl	80018c2 <LL_ADC_REG_IsConversionOngoing>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f040 84de 	bne.w	800272a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a9e      	ldr	r2, [pc, #632]	; (8001fec <HAL_ADC_ConfigChannel+0x2cc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d033      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d108      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x76>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2201      	movs	r2, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	e01d      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0xb2>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	e004      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8001dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2201      	movs	r2, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	69d1      	ldr	r1, [r2, #28]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	f7ff fc6f 	bl	80016d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fd63 	bl	80018c2 <LL_ADC_REG_IsConversionOngoing>
 8001dfc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fd6f 	bl	80018e8 <LL_ADC_INJ_IsConversionOngoing>
 8001e0a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 8270 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f040 826b 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f7ff fc7a 	bl	8001728 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6c      	ldr	r2, [pc, #432]	; (8001fec <HAL_ADC_ConfigChannel+0x2cc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10d      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e58:	e032      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e5a:	4b65      	ldr	r3, [pc, #404]	; (8001ff0 <HAL_ADC_ConfigChannel+0x2d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e66:	d10b      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x160>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	e01d      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x19c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x186>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	e00a      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x19c>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d048      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6919      	ldr	r1, [r3, #16]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ed8:	f7ff fb08 	bl	80014ec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a42      	ldr	r2, [pc, #264]	; (8001fec <HAL_ADC_ConfigChannel+0x2cc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d119      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f7ff fba0 	bl	8001638 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6919      	ldr	r1, [r3, #16]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1f0>
 8001f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0e:	e000      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x1f2>
 8001f10:	2300      	movs	r3, #0
 8001f12:	461a      	mov	r2, r3
 8001f14:	f7ff fb6e 	bl	80015f4 <LL_ADC_SetOffsetSaturation>
 8001f18:	e1ee      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6919      	ldr	r1, [r3, #16]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d102      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x212>
 8001f2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f30:	e000      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x214>
 8001f32:	2300      	movs	r3, #0
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff fb3b 	bl	80015b0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6919      	ldr	r1, [r3, #16]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	7e1b      	ldrb	r3, [r3, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d102      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x230>
 8001f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f4e:	e000      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x232>
 8001f50:	2300      	movs	r3, #0
 8001f52:	461a      	mov	r2, r3
 8001f54:	f7ff fb12 	bl	800157c <LL_ADC_SetDataRightShift>
 8001f58:	e1ce      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_ADC_ConfigChannel+0x2cc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	f040 8181 	bne.w	8002268 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff faef 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x272>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fae4 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	e01e      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x2b0>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fad9 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8001fb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8001fb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	e004      	b.n	8001fce <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8001fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10b      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x2d4>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	e01e      	b.n	8002026 <HAL_ADC_ConfigChannel+0x306>
 8001fe8:	47ff0000 	.word	0x47ff0000
 8001fec:	58026000 	.word	0x58026000
 8001ff0:	5c001000 	.word	0x5c001000
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800200c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e004      	b.n	8002026 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800201c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	429a      	cmp	r2, r3
 8002028:	d106      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fb22 	bl	800167c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fa86 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x344>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fa7b 	bl	8001550 <LL_ADC_GetOffsetChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	f003 021f 	and.w	r2, r3, #31
 8002062:	e01e      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x382>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fa70 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800208a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e004      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002096:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x39a>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0e9b      	lsrs	r3, r3, #26
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	e018      	b.n	80020ec <HAL_ADC_ConfigChannel+0x3cc>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80020ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80020d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80020de:	2320      	movs	r3, #32
 80020e0:	e004      	b.n	80020ec <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80020e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	2101      	movs	r1, #1
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fabf 	bl	800167c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2102      	movs	r1, #2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fa23 	bl	8001550 <LL_ADC_GetOffsetChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <HAL_ADC_ConfigChannel+0x40a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2102      	movs	r1, #2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fa18 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	e01e      	b.n	8002168 <HAL_ADC_ConfigChannel+0x448>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2102      	movs	r1, #2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fa0d 	bl	8001550 <LL_ADC_GetOffsetChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800214c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002158:	2320      	movs	r3, #32
 800215a:	e004      	b.n	8002166 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800215c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x460>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	e014      	b.n	80021aa <HAL_ADC_ConfigChannel+0x48a>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800218e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e004      	b.n	80021aa <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80021a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d106      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fa60 	bl	800167c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2103      	movs	r1, #3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f9c4 	bl	8001550 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x4c8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2103      	movs	r1, #3
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f9b9 	bl	8001550 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	e017      	b.n	8002218 <HAL_ADC_ConfigChannel+0x4f8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2103      	movs	r1, #3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f9ae 	bl	8001550 <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002202:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800220a:	2320      	movs	r3, #32
 800220c:	e003      	b.n	8002216 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800220e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x510>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	e011      	b.n	8002254 <HAL_ADC_ConfigChannel+0x534>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800223e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002240:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e003      	b.n	8002254 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800224c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	429a      	cmp	r2, r3
 8002256:	d14f      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	2103      	movs	r1, #3
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fa0b 	bl	800167c <LL_ADC_SetOffsetState>
 8002266:	e047      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	069b      	lsls	r3, r3, #26
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800228a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002292:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	069b      	lsls	r3, r3, #26
 800229c:	429a      	cmp	r2, r3
 800229e:	d107      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022ae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	069b      	lsls	r3, r3, #26
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d107      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	069b      	lsls	r3, r3, #26
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff facd 	bl	800189c <LL_ADC_IsEnabled>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 8219 	bne.w	800273c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	461a      	mov	r2, r3
 8002318:	f7ff fa32 	bl	8001780 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4aa1      	ldr	r2, [pc, #644]	; (80025a8 <HAL_ADC_ConfigChannel+0x888>)
 8002322:	4293      	cmp	r3, r2
 8002324:	f040 812e 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x630>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	3301      	adds	r3, #1
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2b09      	cmp	r3, #9
 8002346:	bf94      	ite	ls
 8002348:	2301      	movls	r3, #1
 800234a:	2300      	movhi	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e019      	b.n	8002384 <HAL_ADC_ConfigChannel+0x664>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e003      	b.n	8002374 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800236c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2b09      	cmp	r3, #9
 800237c:	bf94      	ite	ls
 800237e:	2301      	movls	r3, #1
 8002380:	2300      	movhi	r3, #0
 8002382:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002384:	2b00      	cmp	r3, #0
 8002386:	d079      	beq.n	800247c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002390:	2b00      	cmp	r3, #0
 8002392:	d107      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x684>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	3301      	adds	r3, #1
 800239c:	069b      	lsls	r3, r3, #26
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a2:	e015      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x6b0>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80023b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80023b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e003      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80023c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	069b      	lsls	r3, r3, #26
 80023cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x6d0>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	3301      	adds	r3, #1
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	2101      	movs	r1, #1
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	e017      	b.n	8002420 <HAL_ADC_ConfigChannel+0x700>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e003      	b.n	8002414 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800240c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3301      	adds	r3, #1
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	ea42 0103 	orr.w	r1, r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x726>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	3301      	adds	r3, #1
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	051b      	lsls	r3, r3, #20
 8002444:	e018      	b.n	8002478 <HAL_ADC_ConfigChannel+0x758>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e003      	b.n	800246a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002478:	430b      	orrs	r3, r1
 800247a:	e07e      	b.n	800257a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x778>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	3301      	adds	r3, #1
 8002490:	069b      	lsls	r3, r3, #26
 8002492:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002496:	e015      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x7a4>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	069b      	lsls	r3, r3, #26
 80024c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x7c4>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	3301      	adds	r3, #1
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	e017      	b.n	8002514 <HAL_ADC_ConfigChannel+0x7f4>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	61bb      	str	r3, [r7, #24]
  return result;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10d      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x820>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	3301      	adds	r3, #1
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	3b1e      	subs	r3, #30
 8002538:	051b      	lsls	r3, r3, #20
 800253a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800253e:	e01b      	b.n	8002578 <HAL_ADC_ConfigChannel+0x858>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	60fb      	str	r3, [r7, #12]
  return result;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002558:	2320      	movs	r3, #32
 800255a:	e003      	b.n	8002564 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f003 021f 	and.w	r2, r3, #31
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	3b1e      	subs	r3, #30
 8002572:	051b      	lsls	r3, r3, #20
 8002574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002578:	430b      	orrs	r3, r1
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	4619      	mov	r1, r3
 8002580:	f7ff f8d2 	bl	8001728 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f280 80d7 	bge.w	800273c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_ADC_ConfigChannel+0x88c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x882>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_ADC_ConfigChannel+0x890>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10a      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x898>
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_ADC_ConfigChannel+0x894>)
 80025a4:	e009      	b.n	80025ba <HAL_ADC_ConfigChannel+0x89a>
 80025a6:	bf00      	nop
 80025a8:	47ff0000 	.word	0x47ff0000
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40022100 	.word	0x40022100
 80025b4:	40022300 	.word	0x40022300
 80025b8:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_ADC_ConfigChannel+0xa30>)
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe ff88 	bl	80014d0 <LL_ADC_GetCommonPathInternalCh>
 80025c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a62      	ldr	r2, [pc, #392]	; (8002754 <HAL_ADC_ConfigChannel+0xa34>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x8b8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a61      	ldr	r2, [pc, #388]	; (8002758 <HAL_ADC_ConfigChannel+0xa38>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10e      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x8d6>
 80025d8:	485e      	ldr	r0, [pc, #376]	; (8002754 <HAL_ADC_ConfigChannel+0xa34>)
 80025da:	f7ff f95f 	bl	800189c <LL_ADC_IsEnabled>
 80025de:	4604      	mov	r4, r0
 80025e0:	485d      	ldr	r0, [pc, #372]	; (8002758 <HAL_ADC_ConfigChannel+0xa38>)
 80025e2:	f7ff f95b 	bl	800189c <LL_ADC_IsEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4323      	orrs	r3, r4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	e008      	b.n	8002608 <HAL_ADC_ConfigChannel+0x8e8>
 80025f6:	4859      	ldr	r0, [pc, #356]	; (800275c <HAL_ADC_ConfigChannel+0xa3c>)
 80025f8:	f7ff f950 	bl	800189c <LL_ADC_IsEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8084 	beq.w	8002716 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a53      	ldr	r2, [pc, #332]	; (8002760 <HAL_ADC_ConfigChannel+0xa40>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d132      	bne.n	800267e <HAL_ADC_ConfigChannel+0x95e>
 8002618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800261c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d12c      	bne.n	800267e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_ADC_ConfigChannel+0xa3c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f040 8086 	bne.w	800273c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a47      	ldr	r2, [pc, #284]	; (8002754 <HAL_ADC_ConfigChannel+0xa34>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x924>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a46      	ldr	r2, [pc, #280]	; (8002758 <HAL_ADC_ConfigChannel+0xa38>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x928>
 8002644:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_ADC_ConfigChannel+0xa44>)
 8002646:	e000      	b.n	800264a <HAL_ADC_ConfigChannel+0x92a>
 8002648:	4a41      	ldr	r2, [pc, #260]	; (8002750 <HAL_ADC_ConfigChannel+0xa30>)
 800264a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800264e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f7fe ff28 	bl	80014aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800265a:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_ADC_ConfigChannel+0xa48>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	4a42      	ldr	r2, [pc, #264]	; (800276c <HAL_ADC_ConfigChannel+0xa4c>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	3301      	adds	r3, #1
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800266e:	e002      	b.n	8002676 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3b01      	subs	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800267c:	e05e      	b.n	800273c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <HAL_ADC_ConfigChannel+0xa50>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d120      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x9aa>
 8002688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800268c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11a      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a30      	ldr	r2, [pc, #192]	; (800275c <HAL_ADC_ConfigChannel+0xa3c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d14e      	bne.n	800273c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <HAL_ADC_ConfigChannel+0xa34>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d004      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x992>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_ADC_ConfigChannel+0xa38>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x996>
 80026b2:	4a2c      	ldr	r2, [pc, #176]	; (8002764 <HAL_ADC_ConfigChannel+0xa44>)
 80026b4:	e000      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x998>
 80026b6:	4a26      	ldr	r2, [pc, #152]	; (8002750 <HAL_ADC_ConfigChannel+0xa30>)
 80026b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7fe fef1 	bl	80014aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026c8:	e038      	b.n	800273c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a29      	ldr	r2, [pc, #164]	; (8002774 <HAL_ADC_ConfigChannel+0xa54>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d133      	bne.n	800273c <HAL_ADC_ConfigChannel+0xa1c>
 80026d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d12d      	bne.n	800273c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_ADC_ConfigChannel+0xa3c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d128      	bne.n	800273c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_ADC_ConfigChannel+0xa34>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x9de>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_ADC_ConfigChannel+0xa38>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x9e2>
 80026fe:	4a19      	ldr	r2, [pc, #100]	; (8002764 <HAL_ADC_ConfigChannel+0xa44>)
 8002700:	e000      	b.n	8002704 <HAL_ADC_ConfigChannel+0x9e4>
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <HAL_ADC_ConfigChannel+0xa30>)
 8002704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f7fe fecb 	bl	80014aa <LL_ADC_SetCommonPathInternalCh>
 8002714:	e012      	b.n	800273c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002728:	e008      	b.n	800273c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002744:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002748:	4618      	mov	r0, r3
 800274a:	37e4      	adds	r7, #228	; 0xe4
 800274c:	46bd      	mov	sp, r7
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	58026300 	.word	0x58026300
 8002754:	40022000 	.word	0x40022000
 8002758:	40022100 	.word	0x40022100
 800275c:	58026000 	.word	0x58026000
 8002760:	c7520000 	.word	0xc7520000
 8002764:	40022300 	.word	0x40022300
 8002768:	24000000 	.word	0x24000000
 800276c:	053e2d63 	.word	0x053e2d63
 8002770:	c3210000 	.word	0xc3210000
 8002774:	cb840000 	.word	0xcb840000

08002778 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6c      	ldr	r2, [pc, #432]	; (8002938 <ADC_ConfigureBoostMode+0x1c0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <ADC_ConfigureBoostMode+0x1c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6b      	ldr	r2, [pc, #428]	; (800293c <ADC_ConfigureBoostMode+0x1c4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d109      	bne.n	80027a8 <ADC_ConfigureBoostMode+0x30>
 8002794:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <ADC_ConfigureBoostMode+0x1c8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e008      	b.n	80027ba <ADC_ConfigureBoostMode+0x42>
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <ADC_ConfigureBoostMode+0x1cc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01c      	beq.n	80027f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027be:	f003 fc11 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 80027c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027cc:	d010      	beq.n	80027f0 <ADC_ConfigureBoostMode+0x78>
 80027ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d2:	d873      	bhi.n	80028bc <ADC_ConfigureBoostMode+0x144>
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d002      	beq.n	80027e0 <ADC_ConfigureBoostMode+0x68>
 80027da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027de:	d16d      	bne.n	80028bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	60fb      	str	r3, [r7, #12]
        break;
 80027ee:	e068      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	60fb      	str	r3, [r7, #12]
        break;
 80027f6:	e064      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	f004 fdec 	bl	80073dc <HAL_RCCEx_GetPeriphCLKFreq>
 8002804:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800280e:	d051      	beq.n	80028b4 <ADC_ConfigureBoostMode+0x13c>
 8002810:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002814:	d854      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 8002816:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800281a:	d047      	beq.n	80028ac <ADC_ConfigureBoostMode+0x134>
 800281c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002820:	d84e      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 8002822:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002826:	d03d      	beq.n	80028a4 <ADC_ConfigureBoostMode+0x12c>
 8002828:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800282c:	d848      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 800282e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002832:	d033      	beq.n	800289c <ADC_ConfigureBoostMode+0x124>
 8002834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002838:	d842      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 800283a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800283e:	d029      	beq.n	8002894 <ADC_ConfigureBoostMode+0x11c>
 8002840:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002844:	d83c      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 8002846:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800284a:	d01a      	beq.n	8002882 <ADC_ConfigureBoostMode+0x10a>
 800284c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002850:	d836      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 8002852:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002856:	d014      	beq.n	8002882 <ADC_ConfigureBoostMode+0x10a>
 8002858:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800285c:	d830      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 800285e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002862:	d00e      	beq.n	8002882 <ADC_ConfigureBoostMode+0x10a>
 8002864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002868:	d82a      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 800286a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800286e:	d008      	beq.n	8002882 <ADC_ConfigureBoostMode+0x10a>
 8002870:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002874:	d824      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x148>
 8002876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800287a:	d002      	beq.n	8002882 <ADC_ConfigureBoostMode+0x10a>
 800287c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002880:	d11e      	bne.n	80028c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0c9b      	lsrs	r3, r3, #18
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	60fb      	str	r3, [r7, #12]
        break;
 8002892:	e016      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	60fb      	str	r3, [r7, #12]
        break;
 800289a:	e012      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	60fb      	str	r3, [r7, #12]
        break;
 80028a2:	e00e      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	60fb      	str	r3, [r7, #12]
        break;
 80028aa:	e00a      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	09db      	lsrs	r3, r3, #7
 80028b0:	60fb      	str	r3, [r7, #12]
        break;
 80028b2:	e006      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	60fb      	str	r3, [r7, #12]
        break;
 80028ba:	e002      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80028bc:	bf00      	nop
 80028be:	e000      	b.n	80028c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80028c0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <ADC_ConfigureBoostMode+0x1d0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d808      	bhi.n	80028e2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028e0:	e025      	b.n	800292e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <ADC_ConfigureBoostMode+0x1d4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d80a      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fc:	609a      	str	r2, [r3, #8]
}
 80028fe:	e016      	b.n	800292e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <ADC_ConfigureBoostMode+0x1d8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d80a      	bhi.n	800291e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	e007      	b.n	800292e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800292c:	609a      	str	r2, [r3, #8]
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	40022100 	.word	0x40022100
 8002940:	40022300 	.word	0x40022300
 8002944:	58026300 	.word	0x58026300
 8002948:	005f5e10 	.word	0x005f5e10
 800294c:	00bebc20 	.word	0x00bebc20
 8002950:	017d7840 	.word	0x017d7840

08002954 <LL_ADC_IsEnabled>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <LL_ADC_IsEnabled+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_IsEnabled+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_REG_IsConversionOngoing>:
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d101      	bne.n	8002992 <LL_ADC_REG_IsConversionOngoing+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b0a3      	sub	sp, #140	; 0x8c
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e0c1      	b.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d102      	bne.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029d8:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e001      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0a0      	b.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ffb9 	bl	800297a <LL_ADC_REG_IsConversionOngoing>
 8002a08:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ffb2 	bl	800297a <LL_ADC_REG_IsConversionOngoing>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f040 8081 	bne.w	8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d17c      	bne.n	8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a48      	ldr	r2, [pc, #288]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a46      	ldr	r2, [pc, #280]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002a3a:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a3c:	e000      	b.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002a3e:	4b46      	ldr	r3, [pc, #280]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a40:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d039      	beq.n	8002abe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a3a      	ldr	r2, [pc, #232]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d004      	beq.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a39      	ldr	r2, [pc, #228]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10e      	bne.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002a70:	4836      	ldr	r0, [pc, #216]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a72:	f7ff ff6f 	bl	8002954 <LL_ADC_IsEnabled>
 8002a76:	4604      	mov	r4, r0
 8002a78:	4835      	ldr	r0, [pc, #212]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a7a:	f7ff ff6b 	bl	8002954 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4323      	orrs	r3, r4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf0c      	ite	eq
 8002a86:	2301      	moveq	r3, #1
 8002a88:	2300      	movne	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	e008      	b.n	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002a8e:	4833      	ldr	r0, [pc, #204]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002a90:	f7ff ff60 	bl	8002954 <LL_ADC_IsEnabled>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d047      	beq.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002aa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	6811      	ldr	r1, [r2, #0]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	6892      	ldr	r2, [r2, #8]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002abc:	e03a      	b.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002abe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ac6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ac8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d004      	beq.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10e      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8002ade:	481b      	ldr	r0, [pc, #108]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ae0:	f7ff ff38 	bl	8002954 <LL_ADC_IsEnabled>
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	481a      	ldr	r0, [pc, #104]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ae8:	f7ff ff34 	bl	8002954 <LL_ADC_IsEnabled>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4323      	orrs	r3, r4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e008      	b.n	8002b0e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002afc:	4817      	ldr	r0, [pc, #92]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002afe:	f7ff ff29 	bl	8002954 <LL_ADC_IsEnabled>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d010      	beq.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b1e:	e009      	b.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002b32:	e000      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002b3e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	378c      	adds	r7, #140	; 0x8c
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40022100 	.word	0x40022100
 8002b54:	40022300 	.word	0x40022300
 8002b58:	58026300 	.word	0x58026300
 8002b5c:	58026000 	.word	0x58026000
 8002b60:	fffff0e0 	.word	0xfffff0e0

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x40>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b92:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x40>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	60d3      	str	r3, [r2, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00
 8002ba8:	05fa0000 	.word	0x05fa0000

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f7ff ff8e 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff29 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d28:	f7ff ff40 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff90 	bl	8002c58 <NVIC_EncodePriority>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff5f 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff33 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ffa4 	bl	8002cc0 <SysTick_Config>
 8002d78:	4603      	mov	r3, r0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	f7fe fb6e 	bl	800146c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e314      	b.n	80033c6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a66      	ldr	r2, [pc, #408]	; (8002f3c <HAL_DMA_Init+0x1b8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d04a      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_DMA_Init+0x1bc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d045      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a63      	ldr	r2, [pc, #396]	; (8002f44 <HAL_DMA_Init+0x1c0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d040      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a62      	ldr	r2, [pc, #392]	; (8002f48 <HAL_DMA_Init+0x1c4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d03b      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a60      	ldr	r2, [pc, #384]	; (8002f4c <HAL_DMA_Init+0x1c8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d036      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5f      	ldr	r2, [pc, #380]	; (8002f50 <HAL_DMA_Init+0x1cc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d031      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5d      	ldr	r2, [pc, #372]	; (8002f54 <HAL_DMA_Init+0x1d0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d02c      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a5c      	ldr	r2, [pc, #368]	; (8002f58 <HAL_DMA_Init+0x1d4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d027      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a5a      	ldr	r2, [pc, #360]	; (8002f5c <HAL_DMA_Init+0x1d8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d022      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a59      	ldr	r2, [pc, #356]	; (8002f60 <HAL_DMA_Init+0x1dc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d01d      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a57      	ldr	r2, [pc, #348]	; (8002f64 <HAL_DMA_Init+0x1e0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d018      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a56      	ldr	r2, [pc, #344]	; (8002f68 <HAL_DMA_Init+0x1e4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a54      	ldr	r2, [pc, #336]	; (8002f6c <HAL_DMA_Init+0x1e8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00e      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a53      	ldr	r2, [pc, #332]	; (8002f70 <HAL_DMA_Init+0x1ec>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a51      	ldr	r2, [pc, #324]	; (8002f74 <HAL_DMA_Init+0x1f0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_DMA_Init+0xb8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <HAL_DMA_Init+0x1f4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d101      	bne.n	8002e40 <HAL_DMA_Init+0xbc>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_DMA_Init+0xbe>
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 813c 	beq.w	80030c0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <HAL_DMA_Init+0x1b8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d04a      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a36      	ldr	r2, [pc, #216]	; (8002f40 <HAL_DMA_Init+0x1bc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d045      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a34      	ldr	r2, [pc, #208]	; (8002f44 <HAL_DMA_Init+0x1c0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d040      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a33      	ldr	r2, [pc, #204]	; (8002f48 <HAL_DMA_Init+0x1c4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d03b      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a31      	ldr	r2, [pc, #196]	; (8002f4c <HAL_DMA_Init+0x1c8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d036      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <HAL_DMA_Init+0x1cc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d031      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <HAL_DMA_Init+0x1d0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02c      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <HAL_DMA_Init+0x1d4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d027      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <HAL_DMA_Init+0x1d8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d022      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2a      	ldr	r2, [pc, #168]	; (8002f60 <HAL_DMA_Init+0x1dc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d01d      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a28      	ldr	r2, [pc, #160]	; (8002f64 <HAL_DMA_Init+0x1e0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d018      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <HAL_DMA_Init+0x1e4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <HAL_DMA_Init+0x1e8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a24      	ldr	r2, [pc, #144]	; (8002f70 <HAL_DMA_Init+0x1ec>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <HAL_DMA_Init+0x1f0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_DMA_Init+0x174>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <HAL_DMA_Init+0x1f4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <HAL_DMA_Init+0x186>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e007      	b.n	8002f1a <HAL_DMA_Init+0x196>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f1a:	e02f      	b.n	8002f7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f1c:	f7fe faa6 	bl	800146c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d928      	bls.n	8002f7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2203      	movs	r2, #3
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e244      	b.n	80033c6 <HAL_DMA_Init+0x642>
 8002f3c:	40020010 	.word	0x40020010
 8002f40:	40020028 	.word	0x40020028
 8002f44:	40020040 	.word	0x40020040
 8002f48:	40020058 	.word	0x40020058
 8002f4c:	40020070 	.word	0x40020070
 8002f50:	40020088 	.word	0x40020088
 8002f54:	400200a0 	.word	0x400200a0
 8002f58:	400200b8 	.word	0x400200b8
 8002f5c:	40020410 	.word	0x40020410
 8002f60:	40020428 	.word	0x40020428
 8002f64:	40020440 	.word	0x40020440
 8002f68:	40020458 	.word	0x40020458
 8002f6c:	40020470 	.word	0x40020470
 8002f70:	40020488 	.word	0x40020488
 8002f74:	400204a0 	.word	0x400204a0
 8002f78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1c8      	bne.n	8002f1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4b84      	ldr	r3, [pc, #528]	; (80031a8 <HAL_DMA_Init+0x424>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002fa2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d107      	bne.n	8002fe0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b28      	cmp	r3, #40	; 0x28
 8002fe6:	d903      	bls.n	8002ff0 <HAL_DMA_Init+0x26c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b2e      	cmp	r3, #46	; 0x2e
 8002fee:	d91f      	bls.n	8003030 <HAL_DMA_Init+0x2ac>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ff6:	d903      	bls.n	8003000 <HAL_DMA_Init+0x27c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b42      	cmp	r3, #66	; 0x42
 8002ffe:	d917      	bls.n	8003030 <HAL_DMA_Init+0x2ac>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b46      	cmp	r3, #70	; 0x46
 8003006:	d903      	bls.n	8003010 <HAL_DMA_Init+0x28c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b48      	cmp	r3, #72	; 0x48
 800300e:	d90f      	bls.n	8003030 <HAL_DMA_Init+0x2ac>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b4e      	cmp	r3, #78	; 0x4e
 8003016:	d903      	bls.n	8003020 <HAL_DMA_Init+0x29c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b52      	cmp	r3, #82	; 0x52
 800301e:	d907      	bls.n	8003030 <HAL_DMA_Init+0x2ac>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b73      	cmp	r3, #115	; 0x73
 8003026:	d905      	bls.n	8003034 <HAL_DMA_Init+0x2b0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b77      	cmp	r3, #119	; 0x77
 800302e:	d801      	bhi.n	8003034 <HAL_DMA_Init+0x2b0>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_DMA_Init+0x2b2>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003040:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f023 0307 	bic.w	r3, r3, #7
 8003058:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b04      	cmp	r3, #4
 800306a:	d117      	bne.n	800309c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00e      	beq.n	800309c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f001 f9b6 	bl	80043f0 <DMA_CheckFifoParam>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2240      	movs	r2, #64	; 0x40
 800308e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e194      	b.n	80033c6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 f8f1 	bl	800428c <DMA_CalcBaseAndBitshift>
 80030aa:	4603      	mov	r3, r0
 80030ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	223f      	movs	r2, #63	; 0x3f
 80030b8:	409a      	lsls	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	e0ca      	b.n	8003256 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a39      	ldr	r2, [pc, #228]	; (80031ac <HAL_DMA_Init+0x428>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d022      	beq.n	8003110 <HAL_DMA_Init+0x38c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <HAL_DMA_Init+0x42c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01d      	beq.n	8003110 <HAL_DMA_Init+0x38c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a36      	ldr	r2, [pc, #216]	; (80031b4 <HAL_DMA_Init+0x430>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d018      	beq.n	8003110 <HAL_DMA_Init+0x38c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a35      	ldr	r2, [pc, #212]	; (80031b8 <HAL_DMA_Init+0x434>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <HAL_DMA_Init+0x38c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a33      	ldr	r2, [pc, #204]	; (80031bc <HAL_DMA_Init+0x438>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00e      	beq.n	8003110 <HAL_DMA_Init+0x38c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <HAL_DMA_Init+0x43c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_DMA_Init+0x38c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <HAL_DMA_Init+0x440>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_DMA_Init+0x38c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <HAL_DMA_Init+0x444>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_DMA_Init+0x390>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_DMA_Init+0x392>
 8003114:	2300      	movs	r3, #0
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8094 	beq.w	8003244 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_DMA_Init+0x428>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d021      	beq.n	800316a <HAL_DMA_Init+0x3e6>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <HAL_DMA_Init+0x42c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d01c      	beq.n	800316a <HAL_DMA_Init+0x3e6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_DMA_Init+0x430>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d017      	beq.n	800316a <HAL_DMA_Init+0x3e6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_DMA_Init+0x434>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d012      	beq.n	800316a <HAL_DMA_Init+0x3e6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <HAL_DMA_Init+0x438>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00d      	beq.n	800316a <HAL_DMA_Init+0x3e6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <HAL_DMA_Init+0x43c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d008      	beq.n	800316a <HAL_DMA_Init+0x3e6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <HAL_DMA_Init+0x440>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <HAL_DMA_Init+0x3e6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <HAL_DMA_Init+0x444>)
 8003168:	4293      	cmp	r3, r2
 800316a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_DMA_Init+0x448>)
 8003188:	4013      	ands	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d01d      	beq.n	80031d0 <HAL_DMA_Init+0x44c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d102      	bne.n	80031a2 <HAL_DMA_Init+0x41e>
 800319c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031a0:	e017      	b.n	80031d2 <HAL_DMA_Init+0x44e>
 80031a2:	2300      	movs	r3, #0
 80031a4:	e015      	b.n	80031d2 <HAL_DMA_Init+0x44e>
 80031a6:	bf00      	nop
 80031a8:	fe10803f 	.word	0xfe10803f
 80031ac:	58025408 	.word	0x58025408
 80031b0:	5802541c 	.word	0x5802541c
 80031b4:	58025430 	.word	0x58025430
 80031b8:	58025444 	.word	0x58025444
 80031bc:	58025458 	.word	0x58025458
 80031c0:	5802546c 	.word	0x5802546c
 80031c4:	58025480 	.word	0x58025480
 80031c8:	58025494 	.word	0x58025494
 80031cc:	fffe000f 	.word	0xfffe000f
 80031d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003200:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b6e      	ldr	r3, [pc, #440]	; (80033d0 <HAL_DMA_Init+0x64c>)
 8003218:	4413      	add	r3, r2
 800321a:	4a6e      	ldr	r2, [pc, #440]	; (80033d4 <HAL_DMA_Init+0x650>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	009a      	lsls	r2, r3, #2
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f001 f82f 	bl	800428c <DMA_CalcBaseAndBitshift>
 800322e:	4603      	mov	r3, r0
 8003230:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2201      	movs	r2, #1
 800323c:	409a      	lsls	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	e008      	b.n	8003256 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2203      	movs	r2, #3
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0b7      	b.n	80033c6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a5f      	ldr	r2, [pc, #380]	; (80033d8 <HAL_DMA_Init+0x654>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d072      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_DMA_Init+0x658>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d06d      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5c      	ldr	r2, [pc, #368]	; (80033e0 <HAL_DMA_Init+0x65c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d068      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5a      	ldr	r2, [pc, #360]	; (80033e4 <HAL_DMA_Init+0x660>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d063      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a59      	ldr	r2, [pc, #356]	; (80033e8 <HAL_DMA_Init+0x664>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d05e      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a57      	ldr	r2, [pc, #348]	; (80033ec <HAL_DMA_Init+0x668>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d059      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a56      	ldr	r2, [pc, #344]	; (80033f0 <HAL_DMA_Init+0x66c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d054      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a54      	ldr	r2, [pc, #336]	; (80033f4 <HAL_DMA_Init+0x670>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04f      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a53      	ldr	r2, [pc, #332]	; (80033f8 <HAL_DMA_Init+0x674>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04a      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a51      	ldr	r2, [pc, #324]	; (80033fc <HAL_DMA_Init+0x678>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d045      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a50      	ldr	r2, [pc, #320]	; (8003400 <HAL_DMA_Init+0x67c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d040      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a4e      	ldr	r2, [pc, #312]	; (8003404 <HAL_DMA_Init+0x680>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d03b      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4d      	ldr	r2, [pc, #308]	; (8003408 <HAL_DMA_Init+0x684>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d036      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a4b      	ldr	r2, [pc, #300]	; (800340c <HAL_DMA_Init+0x688>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4a      	ldr	r2, [pc, #296]	; (8003410 <HAL_DMA_Init+0x68c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d02c      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a48      	ldr	r2, [pc, #288]	; (8003414 <HAL_DMA_Init+0x690>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d027      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a47      	ldr	r2, [pc, #284]	; (8003418 <HAL_DMA_Init+0x694>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a45      	ldr	r2, [pc, #276]	; (800341c <HAL_DMA_Init+0x698>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a44      	ldr	r2, [pc, #272]	; (8003420 <HAL_DMA_Init+0x69c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a42      	ldr	r2, [pc, #264]	; (8003424 <HAL_DMA_Init+0x6a0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_DMA_Init+0x6a4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3f      	ldr	r2, [pc, #252]	; (800342c <HAL_DMA_Init+0x6a8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a3e      	ldr	r2, [pc, #248]	; (8003430 <HAL_DMA_Init+0x6ac>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_Init+0x5c2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3c      	ldr	r2, [pc, #240]	; (8003434 <HAL_DMA_Init+0x6b0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_DMA_Init+0x5c6>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_DMA_Init+0x5c8>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d032      	beq.n	80033b6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f001 f8c9 	bl	80044e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b80      	cmp	r3, #128	; 0x80
 800335c:	d102      	bne.n	8003364 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003378:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d010      	beq.n	80033a4 <HAL_DMA_Init+0x620>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d80c      	bhi.n	80033a4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f001 f946 	bl	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e008      	b.n	80033b6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	a7fdabf8 	.word	0xa7fdabf8
 80033d4:	cccccccd 	.word	0xcccccccd
 80033d8:	40020010 	.word	0x40020010
 80033dc:	40020028 	.word	0x40020028
 80033e0:	40020040 	.word	0x40020040
 80033e4:	40020058 	.word	0x40020058
 80033e8:	40020070 	.word	0x40020070
 80033ec:	40020088 	.word	0x40020088
 80033f0:	400200a0 	.word	0x400200a0
 80033f4:	400200b8 	.word	0x400200b8
 80033f8:	40020410 	.word	0x40020410
 80033fc:	40020428 	.word	0x40020428
 8003400:	40020440 	.word	0x40020440
 8003404:	40020458 	.word	0x40020458
 8003408:	40020470 	.word	0x40020470
 800340c:	40020488 	.word	0x40020488
 8003410:	400204a0 	.word	0x400204a0
 8003414:	400204b8 	.word	0x400204b8
 8003418:	58025408 	.word	0x58025408
 800341c:	5802541c 	.word	0x5802541c
 8003420:	58025430 	.word	0x58025430
 8003424:	58025444 	.word	0x58025444
 8003428:	58025458 	.word	0x58025458
 800342c:	5802546c 	.word	0x5802546c
 8003430:	58025480 	.word	0x58025480
 8003434:	58025494 	.word	0x58025494

08003438 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003444:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_DMA_IRQHandler+0x1ac>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a67      	ldr	r2, [pc, #412]	; (80035e8 <HAL_DMA_IRQHandler+0x1b0>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5f      	ldr	r2, [pc, #380]	; (80035ec <HAL_DMA_IRQHandler+0x1b4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_DMA_IRQHandler+0x1b8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_DMA_IRQHandler+0x1c0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a59      	ldr	r2, [pc, #356]	; (80035fc <HAL_DMA_IRQHandler+0x1c4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a57      	ldr	r2, [pc, #348]	; (8003600 <HAL_DMA_IRQHandler+0x1c8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_DMA_IRQHandler+0x1cc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a54      	ldr	r2, [pc, #336]	; (8003608 <HAL_DMA_IRQHandler+0x1d0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a53      	ldr	r2, [pc, #332]	; (800360c <HAL_DMA_IRQHandler+0x1d4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a51      	ldr	r2, [pc, #324]	; (8003610 <HAL_DMA_IRQHandler+0x1d8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_DMA_IRQHandler+0x1dc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a4e      	ldr	r2, [pc, #312]	; (8003618 <HAL_DMA_IRQHandler+0x1e0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a4d      	ldr	r2, [pc, #308]	; (800361c <HAL_DMA_IRQHandler+0x1e4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a4b      	ldr	r2, [pc, #300]	; (8003620 <HAL_DMA_IRQHandler+0x1e8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a4a      	ldr	r2, [pc, #296]	; (8003624 <HAL_DMA_IRQHandler+0x1ec>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_IRQHandler+0xd2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a48      	ldr	r2, [pc, #288]	; (8003628 <HAL_DMA_IRQHandler+0x1f0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_DMA_IRQHandler+0xd6>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_DMA_IRQHandler+0xd8>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 842b 	beq.w	8003d6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2208      	movs	r2, #8
 8003520:	409a      	lsls	r2, r3
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80a2 	beq.w	8003670 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <HAL_DMA_IRQHandler+0x1b4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d04a      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <HAL_DMA_IRQHandler+0x1b8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d045      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d040      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <HAL_DMA_IRQHandler+0x1c0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d03b      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <HAL_DMA_IRQHandler+0x1c4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d036      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_DMA_IRQHandler+0x1c8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d031      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a25      	ldr	r2, [pc, #148]	; (8003604 <HAL_DMA_IRQHandler+0x1cc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d02c      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a24      	ldr	r2, [pc, #144]	; (8003608 <HAL_DMA_IRQHandler+0x1d0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d027      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a22      	ldr	r2, [pc, #136]	; (800360c <HAL_DMA_IRQHandler+0x1d4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d022      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_DMA_IRQHandler+0x1d8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d01d      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <HAL_DMA_IRQHandler+0x1dc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_DMA_IRQHandler+0x1e0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_DMA_IRQHandler+0x1e4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_DMA_IRQHandler+0x1e8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a19      	ldr	r2, [pc, #100]	; (8003624 <HAL_DMA_IRQHandler+0x1ec>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_DMA_IRQHandler+0x194>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a18      	ldr	r2, [pc, #96]	; (8003628 <HAL_DMA_IRQHandler+0x1f0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d12f      	bne.n	800362c <HAL_DMA_IRQHandler+0x1f4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e02e      	b.n	8003640 <HAL_DMA_IRQHandler+0x208>
 80035e2:	bf00      	nop
 80035e4:	24000000 	.word	0x24000000
 80035e8:	1b4e81b5 	.word	0x1b4e81b5
 80035ec:	40020010 	.word	0x40020010
 80035f0:	40020028 	.word	0x40020028
 80035f4:	40020040 	.word	0x40020040
 80035f8:	40020058 	.word	0x40020058
 80035fc:	40020070 	.word	0x40020070
 8003600:	40020088 	.word	0x40020088
 8003604:	400200a0 	.word	0x400200a0
 8003608:	400200b8 	.word	0x400200b8
 800360c:	40020410 	.word	0x40020410
 8003610:	40020428 	.word	0x40020428
 8003614:	40020440 	.word	0x40020440
 8003618:	40020458 	.word	0x40020458
 800361c:	40020470 	.word	0x40020470
 8003620:	40020488 	.word	0x40020488
 8003624:	400204a0 	.word	0x400204a0
 8003628:	400204b8 	.word	0x400204b8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2208      	movs	r2, #8
 800365e:	409a      	lsls	r2, r3
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d06e      	beq.n	8003764 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a69      	ldr	r2, [pc, #420]	; (8003830 <HAL_DMA_IRQHandler+0x3f8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d04a      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a67      	ldr	r2, [pc, #412]	; (8003834 <HAL_DMA_IRQHandler+0x3fc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d045      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a66      	ldr	r2, [pc, #408]	; (8003838 <HAL_DMA_IRQHandler+0x400>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d040      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a64      	ldr	r2, [pc, #400]	; (800383c <HAL_DMA_IRQHandler+0x404>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d03b      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a63      	ldr	r2, [pc, #396]	; (8003840 <HAL_DMA_IRQHandler+0x408>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d036      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a61      	ldr	r2, [pc, #388]	; (8003844 <HAL_DMA_IRQHandler+0x40c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d031      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a60      	ldr	r2, [pc, #384]	; (8003848 <HAL_DMA_IRQHandler+0x410>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d02c      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a5e      	ldr	r2, [pc, #376]	; (800384c <HAL_DMA_IRQHandler+0x414>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d027      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a5d      	ldr	r2, [pc, #372]	; (8003850 <HAL_DMA_IRQHandler+0x418>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_DMA_IRQHandler+0x41c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01d      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5a      	ldr	r2, [pc, #360]	; (8003858 <HAL_DMA_IRQHandler+0x420>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d018      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_DMA_IRQHandler+0x424>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a57      	ldr	r2, [pc, #348]	; (8003860 <HAL_DMA_IRQHandler+0x428>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a55      	ldr	r2, [pc, #340]	; (8003864 <HAL_DMA_IRQHandler+0x42c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a54      	ldr	r2, [pc, #336]	; (8003868 <HAL_DMA_IRQHandler+0x430>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2ee>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a52      	ldr	r2, [pc, #328]	; (800386c <HAL_DMA_IRQHandler+0x434>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10a      	bne.n	800373c <HAL_DMA_IRQHandler+0x304>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e003      	b.n	8003744 <HAL_DMA_IRQHandler+0x30c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	2201      	movs	r2, #1
 8003752:	409a      	lsls	r2, r3
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	f043 0202 	orr.w	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2204      	movs	r2, #4
 800376e:	409a      	lsls	r2, r3
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 808f 	beq.w	8003898 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <HAL_DMA_IRQHandler+0x3f8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d04a      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2a      	ldr	r2, [pc, #168]	; (8003834 <HAL_DMA_IRQHandler+0x3fc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d045      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a29      	ldr	r2, [pc, #164]	; (8003838 <HAL_DMA_IRQHandler+0x400>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d040      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_DMA_IRQHandler+0x404>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d03b      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a26      	ldr	r2, [pc, #152]	; (8003840 <HAL_DMA_IRQHandler+0x408>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d036      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a24      	ldr	r2, [pc, #144]	; (8003844 <HAL_DMA_IRQHandler+0x40c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d031      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a23      	ldr	r2, [pc, #140]	; (8003848 <HAL_DMA_IRQHandler+0x410>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d02c      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_DMA_IRQHandler+0x414>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d027      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a20      	ldr	r2, [pc, #128]	; (8003850 <HAL_DMA_IRQHandler+0x418>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_DMA_IRQHandler+0x41c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01d      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <HAL_DMA_IRQHandler+0x420>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d018      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1b      	ldr	r2, [pc, #108]	; (800385c <HAL_DMA_IRQHandler+0x424>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <HAL_DMA_IRQHandler+0x428>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00e      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <HAL_DMA_IRQHandler+0x42c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_DMA_IRQHandler+0x430>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_DMA_IRQHandler+0x3e2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a15      	ldr	r2, [pc, #84]	; (800386c <HAL_DMA_IRQHandler+0x434>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d12a      	bne.n	8003870 <HAL_DMA_IRQHandler+0x438>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e023      	b.n	8003878 <HAL_DMA_IRQHandler+0x440>
 8003830:	40020010 	.word	0x40020010
 8003834:	40020028 	.word	0x40020028
 8003838:	40020040 	.word	0x40020040
 800383c:	40020058 	.word	0x40020058
 8003840:	40020070 	.word	0x40020070
 8003844:	40020088 	.word	0x40020088
 8003848:	400200a0 	.word	0x400200a0
 800384c:	400200b8 	.word	0x400200b8
 8003850:	40020410 	.word	0x40020410
 8003854:	40020428 	.word	0x40020428
 8003858:	40020440 	.word	0x40020440
 800385c:	40020458 	.word	0x40020458
 8003860:	40020470 	.word	0x40020470
 8003864:	40020488 	.word	0x40020488
 8003868:	400204a0 	.word	0x400204a0
 800386c:	400204b8 	.word	0x400204b8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2204      	movs	r2, #4
 8003886:	409a      	lsls	r2, r3
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	2210      	movs	r2, #16
 80038a2:	409a      	lsls	r2, r3
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80a6 	beq.w	80039fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a85      	ldr	r2, [pc, #532]	; (8003ac8 <HAL_DMA_IRQHandler+0x690>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d04a      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a83      	ldr	r2, [pc, #524]	; (8003acc <HAL_DMA_IRQHandler+0x694>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d045      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a82      	ldr	r2, [pc, #520]	; (8003ad0 <HAL_DMA_IRQHandler+0x698>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d040      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a80      	ldr	r2, [pc, #512]	; (8003ad4 <HAL_DMA_IRQHandler+0x69c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d03b      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a7f      	ldr	r2, [pc, #508]	; (8003ad8 <HAL_DMA_IRQHandler+0x6a0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d036      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a7d      	ldr	r2, [pc, #500]	; (8003adc <HAL_DMA_IRQHandler+0x6a4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d031      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a7c      	ldr	r2, [pc, #496]	; (8003ae0 <HAL_DMA_IRQHandler+0x6a8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d02c      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7a      	ldr	r2, [pc, #488]	; (8003ae4 <HAL_DMA_IRQHandler+0x6ac>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d027      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a79      	ldr	r2, [pc, #484]	; (8003ae8 <HAL_DMA_IRQHandler+0x6b0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a77      	ldr	r2, [pc, #476]	; (8003aec <HAL_DMA_IRQHandler+0x6b4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01d      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a76      	ldr	r2, [pc, #472]	; (8003af0 <HAL_DMA_IRQHandler+0x6b8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a74      	ldr	r2, [pc, #464]	; (8003af4 <HAL_DMA_IRQHandler+0x6bc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a73      	ldr	r2, [pc, #460]	; (8003af8 <HAL_DMA_IRQHandler+0x6c0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a71      	ldr	r2, [pc, #452]	; (8003afc <HAL_DMA_IRQHandler+0x6c4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a70      	ldr	r2, [pc, #448]	; (8003b00 <HAL_DMA_IRQHandler+0x6c8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_DMA_IRQHandler+0x516>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a6e      	ldr	r2, [pc, #440]	; (8003b04 <HAL_DMA_IRQHandler+0x6cc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d10a      	bne.n	8003964 <HAL_DMA_IRQHandler+0x52c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e009      	b.n	8003978 <HAL_DMA_IRQHandler+0x540>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d03e      	beq.n	80039fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2210      	movs	r2, #16
 8003986:	409a      	lsls	r2, r3
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d108      	bne.n	80039ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d024      	beq.n	80039fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
 80039b8:	e01f      	b.n	80039fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01b      	beq.n	80039fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
 80039ca:	e016      	b.n	80039fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0208 	bic.w	r2, r2, #8
 80039e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2220      	movs	r2, #32
 8003a04:	409a      	lsls	r2, r3
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8110 	beq.w	8003c30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <HAL_DMA_IRQHandler+0x690>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d04a      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <HAL_DMA_IRQHandler+0x694>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d045      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a29      	ldr	r2, [pc, #164]	; (8003ad0 <HAL_DMA_IRQHandler+0x698>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d040      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a28      	ldr	r2, [pc, #160]	; (8003ad4 <HAL_DMA_IRQHandler+0x69c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d03b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <HAL_DMA_IRQHandler+0x6a0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d036      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a25      	ldr	r2, [pc, #148]	; (8003adc <HAL_DMA_IRQHandler+0x6a4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d031      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <HAL_DMA_IRQHandler+0x6a8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d02c      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <HAL_DMA_IRQHandler+0x6ac>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d027      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <HAL_DMA_IRQHandler+0x6b0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d022      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <HAL_DMA_IRQHandler+0x6b4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d01d      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_DMA_IRQHandler+0x6b8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d018      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <HAL_DMA_IRQHandler+0x6bc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1a      	ldr	r2, [pc, #104]	; (8003af8 <HAL_DMA_IRQHandler+0x6c0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00e      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a19      	ldr	r2, [pc, #100]	; (8003afc <HAL_DMA_IRQHandler+0x6c4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <HAL_DMA_IRQHandler+0x6c8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x678>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_DMA_IRQHandler+0x6cc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d12b      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x6d0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf14      	ite	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	e02a      	b.n	8003b1c <HAL_DMA_IRQHandler+0x6e4>
 8003ac6:	bf00      	nop
 8003ac8:	40020010 	.word	0x40020010
 8003acc:	40020028 	.word	0x40020028
 8003ad0:	40020040 	.word	0x40020040
 8003ad4:	40020058 	.word	0x40020058
 8003ad8:	40020070 	.word	0x40020070
 8003adc:	40020088 	.word	0x40020088
 8003ae0:	400200a0 	.word	0x400200a0
 8003ae4:	400200b8 	.word	0x400200b8
 8003ae8:	40020410 	.word	0x40020410
 8003aec:	40020428 	.word	0x40020428
 8003af0:	40020440 	.word	0x40020440
 8003af4:	40020458 	.word	0x40020458
 8003af8:	40020470 	.word	0x40020470
 8003afc:	40020488 	.word	0x40020488
 8003b00:	400204a0 	.word	0x400204a0
 8003b04:	400204b8 	.word	0x400204b8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8087 	beq.w	8003c30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d139      	bne.n	8003bb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0216 	bic.w	r2, r2, #22
 8003b4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x736>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0208 	bic.w	r2, r2, #8
 8003b7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	223f      	movs	r2, #63	; 0x3f
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 834a 	beq.w	800423c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
          }
          return;
 8003bb0:	e344      	b.n	800423c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02c      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
 8003bde:	e027      	b.n	8003c30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d023      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
 8003bf0:	e01e      	b.n	8003c30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10f      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0210 	bic.w	r2, r2, #16
 8003c0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8306 	beq.w	8004246 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8088 	beq.w	8003d58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <HAL_DMA_IRQHandler+0xa08>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d04a      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a79      	ldr	r2, [pc, #484]	; (8003e44 <HAL_DMA_IRQHandler+0xa0c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d045      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a77      	ldr	r2, [pc, #476]	; (8003e48 <HAL_DMA_IRQHandler+0xa10>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d040      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a76      	ldr	r2, [pc, #472]	; (8003e4c <HAL_DMA_IRQHandler+0xa14>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d03b      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a74      	ldr	r2, [pc, #464]	; (8003e50 <HAL_DMA_IRQHandler+0xa18>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d036      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a73      	ldr	r2, [pc, #460]	; (8003e54 <HAL_DMA_IRQHandler+0xa1c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d031      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a71      	ldr	r2, [pc, #452]	; (8003e58 <HAL_DMA_IRQHandler+0xa20>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02c      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a70      	ldr	r2, [pc, #448]	; (8003e5c <HAL_DMA_IRQHandler+0xa24>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d027      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a6e      	ldr	r2, [pc, #440]	; (8003e60 <HAL_DMA_IRQHandler+0xa28>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d022      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6d      	ldr	r2, [pc, #436]	; (8003e64 <HAL_DMA_IRQHandler+0xa2c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01d      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6b      	ldr	r2, [pc, #428]	; (8003e68 <HAL_DMA_IRQHandler+0xa30>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <HAL_DMA_IRQHandler+0xa34>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	; (8003e70 <HAL_DMA_IRQHandler+0xa38>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a67      	ldr	r2, [pc, #412]	; (8003e74 <HAL_DMA_IRQHandler+0xa3c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_DMA_IRQHandler+0xa40>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x8b8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a64      	ldr	r2, [pc, #400]	; (8003e7c <HAL_DMA_IRQHandler+0xa44>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d108      	bne.n	8003d02 <HAL_DMA_IRQHandler+0x8ca>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e007      	b.n	8003d12 <HAL_DMA_IRQHandler+0x8da>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3301      	adds	r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d307      	bcc.n	8003d2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f2      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x8da>
 8003d2c:	e000      	b.n	8003d30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003d46:	e003      	b.n	8003d50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8272 	beq.w	8004246 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
 8003d6a:	e26c      	b.n	8004246 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a43      	ldr	r2, [pc, #268]	; (8003e80 <HAL_DMA_IRQHandler+0xa48>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x984>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a42      	ldr	r2, [pc, #264]	; (8003e84 <HAL_DMA_IRQHandler+0xa4c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x984>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <HAL_DMA_IRQHandler+0xa50>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x984>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3f      	ldr	r2, [pc, #252]	; (8003e8c <HAL_DMA_IRQHandler+0xa54>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x984>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <HAL_DMA_IRQHandler+0xa58>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x984>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3c      	ldr	r2, [pc, #240]	; (8003e94 <HAL_DMA_IRQHandler+0xa5c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x984>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a3a      	ldr	r2, [pc, #232]	; (8003e98 <HAL_DMA_IRQHandler+0xa60>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x984>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a39      	ldr	r2, [pc, #228]	; (8003e9c <HAL_DMA_IRQHandler+0xa64>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x988>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <HAL_DMA_IRQHandler+0x98a>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 823f 	beq.w	8004246 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2204      	movs	r2, #4
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80cd 	beq.w	8003f80 <HAL_DMA_IRQHandler+0xb48>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80c7 	beq.w	8003f80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d049      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8210 	beq.w	8004240 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e28:	e20a      	b.n	8004240 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8206 	beq.w	8004240 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e3c:	e200      	b.n	8004240 <HAL_DMA_IRQHandler+0xe08>
 8003e3e:	bf00      	nop
 8003e40:	40020010 	.word	0x40020010
 8003e44:	40020028 	.word	0x40020028
 8003e48:	40020040 	.word	0x40020040
 8003e4c:	40020058 	.word	0x40020058
 8003e50:	40020070 	.word	0x40020070
 8003e54:	40020088 	.word	0x40020088
 8003e58:	400200a0 	.word	0x400200a0
 8003e5c:	400200b8 	.word	0x400200b8
 8003e60:	40020410 	.word	0x40020410
 8003e64:	40020428 	.word	0x40020428
 8003e68:	40020440 	.word	0x40020440
 8003e6c:	40020458 	.word	0x40020458
 8003e70:	40020470 	.word	0x40020470
 8003e74:	40020488 	.word	0x40020488
 8003e78:	400204a0 	.word	0x400204a0
 8003e7c:	400204b8 	.word	0x400204b8
 8003e80:	58025408 	.word	0x58025408
 8003e84:	5802541c 	.word	0x5802541c
 8003e88:	58025430 	.word	0x58025430
 8003e8c:	58025444 	.word	0x58025444
 8003e90:	58025458 	.word	0x58025458
 8003e94:	5802546c 	.word	0x5802546c
 8003e98:	58025480 	.word	0x58025480
 8003e9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d160      	bne.n	8003f6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7f      	ldr	r2, [pc, #508]	; (80040ac <HAL_DMA_IRQHandler+0xc74>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d04a      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a7d      	ldr	r2, [pc, #500]	; (80040b0 <HAL_DMA_IRQHandler+0xc78>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d045      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7c      	ldr	r2, [pc, #496]	; (80040b4 <HAL_DMA_IRQHandler+0xc7c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d040      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7a      	ldr	r2, [pc, #488]	; (80040b8 <HAL_DMA_IRQHandler+0xc80>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d03b      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a79      	ldr	r2, [pc, #484]	; (80040bc <HAL_DMA_IRQHandler+0xc84>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d036      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a77      	ldr	r2, [pc, #476]	; (80040c0 <HAL_DMA_IRQHandler+0xc88>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d031      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a76      	ldr	r2, [pc, #472]	; (80040c4 <HAL_DMA_IRQHandler+0xc8c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d02c      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a74      	ldr	r2, [pc, #464]	; (80040c8 <HAL_DMA_IRQHandler+0xc90>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d027      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a73      	ldr	r2, [pc, #460]	; (80040cc <HAL_DMA_IRQHandler+0xc94>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d022      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a71      	ldr	r2, [pc, #452]	; (80040d0 <HAL_DMA_IRQHandler+0xc98>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01d      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a70      	ldr	r2, [pc, #448]	; (80040d4 <HAL_DMA_IRQHandler+0xc9c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d018      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <HAL_DMA_IRQHandler+0xca0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6d      	ldr	r2, [pc, #436]	; (80040dc <HAL_DMA_IRQHandler+0xca4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6b      	ldr	r2, [pc, #428]	; (80040e0 <HAL_DMA_IRQHandler+0xca8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d009      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a6a      	ldr	r2, [pc, #424]	; (80040e4 <HAL_DMA_IRQHandler+0xcac>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xb12>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a68      	ldr	r2, [pc, #416]	; (80040e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <HAL_DMA_IRQHandler+0xb24>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0208 	bic.w	r2, r2, #8
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e007      	b.n	8003f6c <HAL_DMA_IRQHandler+0xb34>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8165 	beq.w	8004240 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f7e:	e15f      	b.n	8004240 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	2202      	movs	r2, #2
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80c5 	beq.w	8004120 <HAL_DMA_IRQHandler+0xce8>
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80bf 	beq.w	8004120 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2202      	movs	r2, #2
 8003fac:	409a      	lsls	r2, r3
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d018      	beq.n	8003fee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 813a 	beq.w	8004244 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fd8:	e134      	b.n	8004244 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8130 	beq.w	8004244 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fec:	e12a      	b.n	8004244 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 8089 	bne.w	800410c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_DMA_IRQHandler+0xc74>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d04a      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a29      	ldr	r2, [pc, #164]	; (80040b0 <HAL_DMA_IRQHandler+0xc78>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d045      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <HAL_DMA_IRQHandler+0xc7c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d040      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <HAL_DMA_IRQHandler+0xc80>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d03b      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a25      	ldr	r2, [pc, #148]	; (80040bc <HAL_DMA_IRQHandler+0xc84>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d036      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <HAL_DMA_IRQHandler+0xc88>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d031      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <HAL_DMA_IRQHandler+0xc8c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d02c      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <HAL_DMA_IRQHandler+0xc90>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d027      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <HAL_DMA_IRQHandler+0xc94>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d022      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_DMA_IRQHandler+0xc98>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01d      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d018      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_DMA_IRQHandler+0xca0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_DMA_IRQHandler+0xca4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <HAL_DMA_IRQHandler+0xca8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_DMA_IRQHandler+0xcac>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_DMA_IRQHandler+0xc62>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d128      	bne.n	80040ec <HAL_DMA_IRQHandler+0xcb4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0214 	bic.w	r2, r2, #20
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e027      	b.n	80040fc <HAL_DMA_IRQHandler+0xcc4>
 80040ac:	40020010 	.word	0x40020010
 80040b0:	40020028 	.word	0x40020028
 80040b4:	40020040 	.word	0x40020040
 80040b8:	40020058 	.word	0x40020058
 80040bc:	40020070 	.word	0x40020070
 80040c0:	40020088 	.word	0x40020088
 80040c4:	400200a0 	.word	0x400200a0
 80040c8:	400200b8 	.word	0x400200b8
 80040cc:	40020410 	.word	0x40020410
 80040d0:	40020428 	.word	0x40020428
 80040d4:	40020440 	.word	0x40020440
 80040d8:	40020458 	.word	0x40020458
 80040dc:	40020470 	.word	0x40020470
 80040e0:	40020488 	.word	0x40020488
 80040e4:	400204a0 	.word	0x400204a0
 80040e8:	400204b8 	.word	0x400204b8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 020a 	bic.w	r2, r2, #10
 80040fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8097 	beq.w	8004244 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800411e:	e091      	b.n	8004244 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2208      	movs	r2, #8
 800412a:	409a      	lsls	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8088 	beq.w	8004246 <HAL_DMA_IRQHandler+0xe0e>
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8082 	beq.w	8004246 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a41      	ldr	r2, [pc, #260]	; (800424c <HAL_DMA_IRQHandler+0xe14>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d04a      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a3f      	ldr	r2, [pc, #252]	; (8004250 <HAL_DMA_IRQHandler+0xe18>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d045      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3e      	ldr	r2, [pc, #248]	; (8004254 <HAL_DMA_IRQHandler+0xe1c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d040      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <HAL_DMA_IRQHandler+0xe20>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d03b      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a3b      	ldr	r2, [pc, #236]	; (800425c <HAL_DMA_IRQHandler+0xe24>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d036      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a39      	ldr	r2, [pc, #228]	; (8004260 <HAL_DMA_IRQHandler+0xe28>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d031      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a38      	ldr	r2, [pc, #224]	; (8004264 <HAL_DMA_IRQHandler+0xe2c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d02c      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a36      	ldr	r2, [pc, #216]	; (8004268 <HAL_DMA_IRQHandler+0xe30>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d027      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a35      	ldr	r2, [pc, #212]	; (800426c <HAL_DMA_IRQHandler+0xe34>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d022      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a33      	ldr	r2, [pc, #204]	; (8004270 <HAL_DMA_IRQHandler+0xe38>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a32      	ldr	r2, [pc, #200]	; (8004274 <HAL_DMA_IRQHandler+0xe3c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a30      	ldr	r2, [pc, #192]	; (8004278 <HAL_DMA_IRQHandler+0xe40>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2f      	ldr	r2, [pc, #188]	; (800427c <HAL_DMA_IRQHandler+0xe44>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2d      	ldr	r2, [pc, #180]	; (8004280 <HAL_DMA_IRQHandler+0xe48>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2c      	ldr	r2, [pc, #176]	; (8004284 <HAL_DMA_IRQHandler+0xe4c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_DMA_IRQHandler+0xdaa>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <HAL_DMA_IRQHandler+0xe50>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d108      	bne.n	80041f4 <HAL_DMA_IRQHandler+0xdbc>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 021c 	bic.w	r2, r2, #28
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e007      	b.n	8004204 <HAL_DMA_IRQHandler+0xdcc>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 020e 	bic.w	r2, r2, #14
 8004202:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
 800423a:	e004      	b.n	8004246 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800423c:	bf00      	nop
 800423e:	e002      	b.n	8004246 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004244:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004246:	3728      	adds	r7, #40	; 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40020010 	.word	0x40020010
 8004250:	40020028 	.word	0x40020028
 8004254:	40020040 	.word	0x40020040
 8004258:	40020058 	.word	0x40020058
 800425c:	40020070 	.word	0x40020070
 8004260:	40020088 	.word	0x40020088
 8004264:	400200a0 	.word	0x400200a0
 8004268:	400200b8 	.word	0x400200b8
 800426c:	40020410 	.word	0x40020410
 8004270:	40020428 	.word	0x40020428
 8004274:	40020440 	.word	0x40020440
 8004278:	40020458 	.word	0x40020458
 800427c:	40020470 	.word	0x40020470
 8004280:	40020488 	.word	0x40020488
 8004284:	400204a0 	.word	0x400204a0
 8004288:	400204b8 	.word	0x400204b8

0800428c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a42      	ldr	r2, [pc, #264]	; (80043a4 <DMA_CalcBaseAndBitshift+0x118>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04a      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a41      	ldr	r2, [pc, #260]	; (80043a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d045      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3f      	ldr	r2, [pc, #252]	; (80043ac <DMA_CalcBaseAndBitshift+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a3e      	ldr	r2, [pc, #248]	; (80043b0 <DMA_CalcBaseAndBitshift+0x124>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03b      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3c      	ldr	r2, [pc, #240]	; (80043b4 <DMA_CalcBaseAndBitshift+0x128>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d036      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d031      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a39      	ldr	r2, [pc, #228]	; (80043bc <DMA_CalcBaseAndBitshift+0x130>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <DMA_CalcBaseAndBitshift+0x134>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d027      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a36      	ldr	r2, [pc, #216]	; (80043c4 <DMA_CalcBaseAndBitshift+0x138>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a35      	ldr	r2, [pc, #212]	; (80043c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a33      	ldr	r2, [pc, #204]	; (80043cc <DMA_CalcBaseAndBitshift+0x140>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a32      	ldr	r2, [pc, #200]	; (80043d0 <DMA_CalcBaseAndBitshift+0x144>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a30      	ldr	r2, [pc, #192]	; (80043d4 <DMA_CalcBaseAndBitshift+0x148>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2f      	ldr	r2, [pc, #188]	; (80043d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2d      	ldr	r2, [pc, #180]	; (80043dc <DMA_CalcBaseAndBitshift+0x150>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <DMA_CalcBaseAndBitshift+0xa8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <DMA_CalcBaseAndBitshift+0x154>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <DMA_CalcBaseAndBitshift+0xac>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <DMA_CalcBaseAndBitshift+0xae>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d024      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	3b10      	subs	r3, #16
 8004346:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <DMA_CalcBaseAndBitshift+0x158>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004358:	5cd3      	ldrb	r3, [r2, r3]
 800435a:	461a      	mov	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d908      	bls.n	8004378 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <DMA_CalcBaseAndBitshift+0x160>)
 800436e:	4013      	ands	r3, r2
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	659a      	str	r2, [r3, #88]	; 0x58
 8004376:	e00d      	b.n	8004394 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <DMA_CalcBaseAndBitshift+0x160>)
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
 8004386:	e005      	b.n	8004394 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40020010 	.word	0x40020010
 80043a8:	40020028 	.word	0x40020028
 80043ac:	40020040 	.word	0x40020040
 80043b0:	40020058 	.word	0x40020058
 80043b4:	40020070 	.word	0x40020070
 80043b8:	40020088 	.word	0x40020088
 80043bc:	400200a0 	.word	0x400200a0
 80043c0:	400200b8 	.word	0x400200b8
 80043c4:	40020410 	.word	0x40020410
 80043c8:	40020428 	.word	0x40020428
 80043cc:	40020440 	.word	0x40020440
 80043d0:	40020458 	.word	0x40020458
 80043d4:	40020470 	.word	0x40020470
 80043d8:	40020488 	.word	0x40020488
 80043dc:	400204a0 	.word	0x400204a0
 80043e0:	400204b8 	.word	0x400204b8
 80043e4:	aaaaaaab 	.word	0xaaaaaaab
 80043e8:	08009d04 	.word	0x08009d04
 80043ec:	fffffc00 	.word	0xfffffc00

080043f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d120      	bne.n	8004446 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	2b03      	cmp	r3, #3
 800440a:	d858      	bhi.n	80044be <DMA_CheckFifoParam+0xce>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <DMA_CheckFifoParam+0x24>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004425 	.word	0x08004425
 8004418:	08004437 	.word	0x08004437
 800441c:	08004425 	.word	0x08004425
 8004420:	080044bf 	.word	0x080044bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d048      	beq.n	80044c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004434:	e045      	b.n	80044c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800443e:	d142      	bne.n	80044c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004444:	e03f      	b.n	80044c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444e:	d123      	bne.n	8004498 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	2b03      	cmp	r3, #3
 8004456:	d838      	bhi.n	80044ca <DMA_CheckFifoParam+0xda>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <DMA_CheckFifoParam+0x70>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004471 	.word	0x08004471
 8004464:	08004477 	.word	0x08004477
 8004468:	08004471 	.word	0x08004471
 800446c:	08004489 	.word	0x08004489
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
        break;
 8004474:	e030      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d025      	beq.n	80044ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004486:	e022      	b.n	80044ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004490:	d11f      	bne.n	80044d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004496:	e01c      	b.n	80044d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	2b02      	cmp	r3, #2
 800449e:	d902      	bls.n	80044a6 <DMA_CheckFifoParam+0xb6>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d003      	beq.n	80044ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044a4:	e018      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
        break;
 80044aa:	e015      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
    break;
 80044bc:	e00b      	b.n	80044d6 <DMA_CheckFifoParam+0xe6>
        break;
 80044be:	bf00      	nop
 80044c0:	e00a      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044c2:	bf00      	nop
 80044c4:	e008      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044c6:	bf00      	nop
 80044c8:	e006      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044ca:	bf00      	nop
 80044cc:	e004      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
        break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <DMA_CheckFifoParam+0xe8>
    break;
 80044d6:	bf00      	nop
    }
  }

  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a38      	ldr	r2, [pc, #224]	; (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a36      	ldr	r2, [pc, #216]	; (80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a35      	ldr	r2, [pc, #212]	; (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a33      	ldr	r2, [pc, #204]	; (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a32      	ldr	r2, [pc, #200]	; (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a30      	ldr	r2, [pc, #192]	; (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2d      	ldr	r2, [pc, #180]	; (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01a      	beq.n	8004586 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3b08      	subs	r3, #8
 8004558:	4a28      	ldr	r2, [pc, #160]	; (80045fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4b26      	ldr	r3, [pc, #152]	; (8004600 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a24      	ldr	r2, [pc, #144]	; (8004604 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004574:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004584:	e024      	b.n	80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3b10      	subs	r3, #16
 800458e:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4a1c      	ldr	r2, [pc, #112]	; (800460c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d806      	bhi.n	80045ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d902      	bls.n	80045ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3308      	adds	r3, #8
 80045ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4b18      	ldr	r3, [pc, #96]	; (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80045c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2201      	movs	r2, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	58025408 	.word	0x58025408
 80045e0:	5802541c 	.word	0x5802541c
 80045e4:	58025430 	.word	0x58025430
 80045e8:	58025444 	.word	0x58025444
 80045ec:	58025458 	.word	0x58025458
 80045f0:	5802546c 	.word	0x5802546c
 80045f4:	58025480 	.word	0x58025480
 80045f8:	58025494 	.word	0x58025494
 80045fc:	cccccccd 	.word	0xcccccccd
 8004600:	16009600 	.word	0x16009600
 8004604:	58025880 	.word	0x58025880
 8004608:	aaaaaaab 	.word	0xaaaaaaab
 800460c:	400204b8 	.word	0x400204b8
 8004610:	4002040f 	.word	0x4002040f
 8004614:	10008200 	.word	0x10008200
 8004618:	40020880 	.word	0x40020880

0800461c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04a      	beq.n	80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d847      	bhi.n	80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a25      	ldr	r2, [pc, #148]	; (80046d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a24      	ldr	r2, [pc, #144]	; (80046d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4b17      	ldr	r3, [pc, #92]	; (80046f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046a4:	671a      	str	r2, [r3, #112]	; 0x70
 80046a6:	e009      	b.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a11      	ldr	r2, [pc, #68]	; (8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80046ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3b01      	subs	r3, #1
 80046c0:	2201      	movs	r2, #1
 80046c2:	409a      	lsls	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	58025408 	.word	0x58025408
 80046d8:	5802541c 	.word	0x5802541c
 80046dc:	58025430 	.word	0x58025430
 80046e0:	58025444 	.word	0x58025444
 80046e4:	58025458 	.word	0x58025458
 80046e8:	5802546c 	.word	0x5802546c
 80046ec:	58025480 	.word	0x58025480
 80046f0:	58025494 	.word	0x58025494
 80046f4:	1600963f 	.word	0x1600963f
 80046f8:	58025940 	.word	0x58025940
 80046fc:	1000823f 	.word	0x1000823f
 8004700:	40020940 	.word	0x40020940

08004704 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b098      	sub	sp, #96	; 0x60
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800470c:	4a84      	ldr	r2, [pc, #528]	; (8004920 <HAL_FDCAN_Init+0x21c>)
 800470e:	f107 030c 	add.w	r3, r7, #12
 8004712:	4611      	mov	r1, r2
 8004714:	224c      	movs	r2, #76	; 0x4c
 8004716:	4618      	mov	r0, r3
 8004718:	f005 faa4 	bl	8009c64 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e1c6      	b.n	8004ab4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7e      	ldr	r2, [pc, #504]	; (8004924 <HAL_FDCAN_Init+0x220>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d106      	bne.n	800473e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004738:	461a      	mov	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fbf4 	bl	8000f40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0210 	bic.w	r2, r2, #16
 8004766:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004768:	f7fc fe80 	bl	800146c <HAL_GetTick>
 800476c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800476e:	e014      	b.n	800479a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004770:	f7fc fe7c 	bl	800146c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b0a      	cmp	r3, #10
 800477c:	d90d      	bls.n	800479a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2203      	movs	r2, #3
 8004792:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e18c      	b.n	8004ab4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d0e3      	beq.n	8004770 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047b8:	f7fc fe58 	bl	800146c <HAL_GetTick>
 80047bc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80047be:	e014      	b.n	80047ea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80047c0:	f7fc fe54 	bl	800146c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b0a      	cmp	r3, #10
 80047cc:	d90d      	bls.n	80047ea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047d4:	f043 0201 	orr.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2203      	movs	r2, #3
 80047e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e164      	b.n	8004ab4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0e3      	beq.n	80047c0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0202 	orr.w	r2, r2, #2
 8004806:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7c1b      	ldrb	r3, [r3, #16]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d108      	bne.n	8004822 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481e:	619a      	str	r2, [r3, #24]
 8004820:	e007      	b.n	8004832 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004830:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7c5b      	ldrb	r3, [r3, #17]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d108      	bne.n	800484c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004848:	619a      	str	r2, [r3, #24]
 800484a:	e007      	b.n	800485c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800485a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	7c9b      	ldrb	r3, [r3, #18]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d108      	bne.n	8004876 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004872:	619a      	str	r2, [r3, #24]
 8004874:	e007      	b.n	8004886 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004884:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80048aa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0210 	bic.w	r2, r2, #16
 80048ba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d108      	bne.n	80048d6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0204 	orr.w	r2, r2, #4
 80048d2:	619a      	str	r2, [r3, #24]
 80048d4:	e030      	b.n	8004938 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02c      	beq.n	8004938 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d020      	beq.n	8004928 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048f4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0210 	orr.w	r2, r2, #16
 8004904:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b03      	cmp	r3, #3
 800490c:	d114      	bne.n	8004938 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0220 	orr.w	r2, r2, #32
 800491c:	619a      	str	r2, [r3, #24]
 800491e:	e00b      	b.n	8004938 <HAL_FDCAN_Init+0x234>
 8004920:	08009ca8 	.word	0x08009ca8
 8004924:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0220 	orr.w	r2, r2, #32
 8004936:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	3b01      	subs	r3, #1
 800493e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	3b01      	subs	r3, #1
 8004946:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004948:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004950:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	3b01      	subs	r3, #1
 800495a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004960:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004962:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496c:	d115      	bne.n	800499a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	3b01      	subs	r3, #1
 800497a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800497c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	3b01      	subs	r3, #1
 8004984:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004986:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	3b01      	subs	r3, #1
 8004990:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004996:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004998:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c0:	4413      	add	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d011      	beq.n	80049ea <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80049ce:	f023 0107 	bic.w	r1, r3, #7
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	3360      	adds	r3, #96	; 0x60
 80049da:	443b      	add	r3, r7
 80049dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d011      	beq.n	8004a16 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049fa:	f023 0107 	bic.w	r1, r3, #7
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	3360      	adds	r3, #96	; 0x60
 8004a06:	443b      	add	r3, r7
 8004a08:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d012      	beq.n	8004a44 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a26:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	3360      	adds	r3, #96	; 0x60
 8004a32:	443b      	add	r3, r7
 8004a34:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d012      	beq.n	8004a72 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a54:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	3360      	adds	r3, #96	; 0x60
 8004a60:	443b      	add	r3, r7
 8004a62:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a11      	ldr	r2, [pc, #68]	; (8004abc <HAL_FDCAN_Init+0x3b8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d107      	bne.n	8004a8c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f022 0203 	bic.w	r2, r2, #3
 8004a8a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f80b 	bl	8004ac0 <FDCAN_CalcultateRamBlockAddresses>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004ab0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3760      	adds	r7, #96	; 0x60
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	4000a000 	.word	0x4000a000

08004ac0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ad6:	4ba7      	ldr	r3, [pc, #668]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0091      	lsls	r1, r2, #2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	041a      	lsls	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b16:	4b97      	ldr	r3, [pc, #604]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	0091      	lsls	r1, r2, #2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	430b      	orrs	r3, r1
 8004b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	041a      	lsls	r2, r3, #16
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b58:	4b86      	ldr	r3, [pc, #536]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	0091      	lsls	r1, r2, #2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b72:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	041a      	lsls	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004ba0:	4b74      	ldr	r3, [pc, #464]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	0091      	lsls	r1, r2, #2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	430b      	orrs	r3, r1
 8004bae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc2:	041a      	lsls	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004be8:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	0091      	lsls	r1, r2, #2
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004c14:	4b57      	ldr	r3, [pc, #348]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	0091      	lsls	r1, r2, #2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c2e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	041a      	lsls	r2, r3, #16
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004c56:	4b47      	ldr	r3, [pc, #284]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	0091      	lsls	r1, r2, #2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	430b      	orrs	r3, r1
 8004c64:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c70:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	041a      	lsls	r2, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c8c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c94:	061a      	lsls	r2, r3, #24
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca4:	4b34      	ldr	r3, [pc, #208]	; (8004d78 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009a      	lsls	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	441a      	add	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	441a      	add	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d915      	bls.n	8004d9c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004d70:	e006      	b.n	8004d80 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004d72:	bf00      	nop
 8004d74:	ffff0003 	.word	0xffff0003
 8004d78:	10002b00 	.word	0x10002b00
 8004d7c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2203      	movs	r2, #3
 8004d94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e010      	b.n	8004dbe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e005      	b.n	8004db0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3304      	adds	r3, #4
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d3f3      	bcc.n	8004da4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop

08004dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dda:	4b86      	ldr	r3, [pc, #536]	; (8004ff4 <HAL_GPIO_Init+0x228>)
 8004ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dde:	e18c      	b.n	80050fa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	2101      	movs	r1, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 817e 	beq.w	80050f4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d005      	beq.n	8004e10 <HAL_GPIO_Init+0x44>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d130      	bne.n	8004e72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e46:	2201      	movs	r2, #1
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	f003 0201 	and.w	r2, r3, #1
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d017      	beq.n	8004eae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	2203      	movs	r2, #3
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d123      	bne.n	8004f02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	08da      	lsrs	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3208      	adds	r2, #8
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	220f      	movs	r2, #15
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	08da      	lsrs	r2, r3, #3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3208      	adds	r2, #8
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0203 	and.w	r2, r3, #3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80d8 	beq.w	80050f4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f44:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <HAL_GPIO_Init+0x22c>)
 8004f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <HAL_GPIO_Init+0x22c>)
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f54:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <HAL_GPIO_Init+0x22c>)
 8004f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f62:	4a26      	ldr	r2, [pc, #152]	; (8004ffc <HAL_GPIO_Init+0x230>)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	3302      	adds	r3, #2
 8004f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	220f      	movs	r2, #15
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <HAL_GPIO_Init+0x234>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d04a      	beq.n	8005024 <HAL_GPIO_Init+0x258>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <HAL_GPIO_Init+0x238>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02b      	beq.n	8004fee <HAL_GPIO_Init+0x222>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <HAL_GPIO_Init+0x23c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d025      	beq.n	8004fea <HAL_GPIO_Init+0x21e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_GPIO_Init+0x240>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01f      	beq.n	8004fe6 <HAL_GPIO_Init+0x21a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_GPIO_Init+0x244>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d019      	beq.n	8004fe2 <HAL_GPIO_Init+0x216>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a18      	ldr	r2, [pc, #96]	; (8005014 <HAL_GPIO_Init+0x248>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_GPIO_Init+0x212>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a17      	ldr	r2, [pc, #92]	; (8005018 <HAL_GPIO_Init+0x24c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_GPIO_Init+0x20e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a16      	ldr	r2, [pc, #88]	; (800501c <HAL_GPIO_Init+0x250>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <HAL_GPIO_Init+0x20a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <HAL_GPIO_Init+0x254>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_GPIO_Init+0x206>
 8004fce:	2309      	movs	r3, #9
 8004fd0:	e029      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004fd2:	230a      	movs	r3, #10
 8004fd4:	e027      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004fd6:	2307      	movs	r3, #7
 8004fd8:	e025      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004fda:	2306      	movs	r3, #6
 8004fdc:	e023      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004fde:	2305      	movs	r3, #5
 8004fe0:	e021      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	e01f      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e01d      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e01b      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e019      	b.n	8005026 <HAL_GPIO_Init+0x25a>
 8004ff2:	bf00      	nop
 8004ff4:	58000080 	.word	0x58000080
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	58000400 	.word	0x58000400
 8005000:	58020000 	.word	0x58020000
 8005004:	58020400 	.word	0x58020400
 8005008:	58020800 	.word	0x58020800
 800500c:	58020c00 	.word	0x58020c00
 8005010:	58021000 	.word	0x58021000
 8005014:	58021400 	.word	0x58021400
 8005018:	58021800 	.word	0x58021800
 800501c:	58021c00 	.word	0x58021c00
 8005020:	58022400 	.word	0x58022400
 8005024:	2300      	movs	r3, #0
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	f002 0203 	and.w	r2, r2, #3
 800502c:	0092      	lsls	r2, r2, #2
 800502e:	4093      	lsls	r3, r2
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4313      	orrs	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005036:	4938      	ldr	r1, [pc, #224]	; (8005118 <HAL_GPIO_Init+0x34c>)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	3302      	adds	r3, #2
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800506a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	f47f ae6b 	bne.w	8004de0 <HAL_GPIO_Init+0x14>
  }
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	3724      	adds	r7, #36	; 0x24
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	58000400 	.word	0x58000400

0800511c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005124:	4b29      	ldr	r3, [pc, #164]	; (80051cc <HAL_PWREx_ConfigSupply+0xb0>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	2b06      	cmp	r3, #6
 800512e:	d00a      	beq.n	8005146 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005130:	4b26      	ldr	r3, [pc, #152]	; (80051cc <HAL_PWREx_ConfigSupply+0xb0>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d001      	beq.n	8005142 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e03f      	b.n	80051c2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e03d      	b.n	80051c2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005146:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_PWREx_ConfigSupply+0xb0>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800514e:	491f      	ldr	r1, [pc, #124]	; (80051cc <HAL_PWREx_ConfigSupply+0xb0>)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4313      	orrs	r3, r2
 8005154:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005156:	f7fc f989 	bl	800146c <HAL_GetTick>
 800515a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800515c:	e009      	b.n	8005172 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800515e:	f7fc f985 	bl	800146c <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800516c:	d901      	bls.n	8005172 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e027      	b.n	80051c2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <HAL_PWREx_ConfigSupply+0xb0>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800517a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517e:	d1ee      	bne.n	800515e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b1e      	cmp	r3, #30
 8005184:	d008      	beq.n	8005198 <HAL_PWREx_ConfigSupply+0x7c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b2e      	cmp	r3, #46	; 0x2e
 800518a:	d005      	beq.n	8005198 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b1d      	cmp	r3, #29
 8005190:	d002      	beq.n	8005198 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b2d      	cmp	r3, #45	; 0x2d
 8005196:	d113      	bne.n	80051c0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005198:	f7fc f968 	bl	800146c <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800519e:	e009      	b.n	80051b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051a0:	f7fc f964 	bl	800146c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ae:	d901      	bls.n	80051b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e006      	b.n	80051c2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_PWREx_ConfigSupply+0xb0>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0311 	and.w	r3, r3, #17
 80051bc:	2b11      	cmp	r3, #17
 80051be:	d1ef      	bne.n	80051a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	58024800 	.word	0x58024800

080051d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08c      	sub	sp, #48	; 0x30
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e3c8      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8087 	beq.w	80052fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f0:	4b88      	ldr	r3, [pc, #544]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051fa:	4b86      	ldr	r3, [pc, #536]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	2b10      	cmp	r3, #16
 8005204:	d007      	beq.n	8005216 <HAL_RCC_OscConfig+0x46>
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	2b18      	cmp	r3, #24
 800520a:	d110      	bne.n	800522e <HAL_RCC_OscConfig+0x5e>
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d10b      	bne.n	800522e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005216:	4b7f      	ldr	r3, [pc, #508]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d06c      	beq.n	80052fc <HAL_RCC_OscConfig+0x12c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d168      	bne.n	80052fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e3a2      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005236:	d106      	bne.n	8005246 <HAL_RCC_OscConfig+0x76>
 8005238:	4b76      	ldr	r3, [pc, #472]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a75      	ldr	r2, [pc, #468]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 800523e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	e02e      	b.n	80052a4 <HAL_RCC_OscConfig+0xd4>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10c      	bne.n	8005268 <HAL_RCC_OscConfig+0x98>
 800524e:	4b71      	ldr	r3, [pc, #452]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a70      	ldr	r2, [pc, #448]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	4b6e      	ldr	r3, [pc, #440]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a6d      	ldr	r2, [pc, #436]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e01d      	b.n	80052a4 <HAL_RCC_OscConfig+0xd4>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005270:	d10c      	bne.n	800528c <HAL_RCC_OscConfig+0xbc>
 8005272:	4b68      	ldr	r3, [pc, #416]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a67      	ldr	r2, [pc, #412]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4b65      	ldr	r3, [pc, #404]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a64      	ldr	r2, [pc, #400]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e00b      	b.n	80052a4 <HAL_RCC_OscConfig+0xd4>
 800528c:	4b61      	ldr	r3, [pc, #388]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a60      	ldr	r2, [pc, #384]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	4b5e      	ldr	r3, [pc, #376]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5d      	ldr	r2, [pc, #372]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 800529e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d013      	beq.n	80052d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fc f8de 	bl	800146c <HAL_GetTick>
 80052b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b4:	f7fc f8da 	bl	800146c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	; 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e356      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052c6:	4b53      	ldr	r3, [pc, #332]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0xe4>
 80052d2:	e014      	b.n	80052fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fc f8ca 	bl	800146c <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052dc:	f7fc f8c6 	bl	800146c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b64      	cmp	r3, #100	; 0x64
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e342      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ee:	4b49      	ldr	r3, [pc, #292]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x10c>
 80052fa:	e000      	b.n	80052fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 808c 	beq.w	8005424 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800530c:	4b41      	ldr	r3, [pc, #260]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005314:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005316:	4b3f      	ldr	r3, [pc, #252]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <HAL_RCC_OscConfig+0x162>
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2b18      	cmp	r3, #24
 8005326:	d137      	bne.n	8005398 <HAL_RCC_OscConfig+0x1c8>
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d132      	bne.n	8005398 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005332:	4b38      	ldr	r3, [pc, #224]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_RCC_OscConfig+0x17a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e314      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800534a:	4b32      	ldr	r3, [pc, #200]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 0219 	bic.w	r2, r3, #25
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	492f      	ldr	r1, [pc, #188]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fc f886 	bl	800146c <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005364:	f7fc f882 	bl	800146c <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e2fe      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005376:	4b27      	ldr	r3, [pc, #156]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	061b      	lsls	r3, r3, #24
 8005390:	4920      	ldr	r1, [pc, #128]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005396:	e045      	b.n	8005424 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d026      	beq.n	80053ee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053a0:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 0219 	bic.w	r2, r3, #25
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4919      	ldr	r1, [pc, #100]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b2:	f7fc f85b 	bl	800146c <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ba:	f7fc f857 	bl	800146c <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e2d3      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	061b      	lsls	r3, r3, #24
 80053e6:	490b      	ldr	r1, [pc, #44]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
 80053ec:	e01a      	b.n	8005424 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a08      	ldr	r2, [pc, #32]	; (8005414 <HAL_RCC_OscConfig+0x244>)
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fc f837 	bl	800146c <HAL_GetTick>
 80053fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005400:	e00a      	b.n	8005418 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005402:	f7fc f833 	bl	800146c <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d903      	bls.n	8005418 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e2af      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
 8005414:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005418:	4b96      	ldr	r3, [pc, #600]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1ee      	bne.n	8005402 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	d06a      	beq.n	8005506 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005430:	4b90      	ldr	r3, [pc, #576]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005438:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800543a:	4b8e      	ldr	r3, [pc, #568]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b08      	cmp	r3, #8
 8005444:	d007      	beq.n	8005456 <HAL_RCC_OscConfig+0x286>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b18      	cmp	r3, #24
 800544a:	d11b      	bne.n	8005484 <HAL_RCC_OscConfig+0x2b4>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d116      	bne.n	8005484 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005456:	4b87      	ldr	r3, [pc, #540]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_RCC_OscConfig+0x29e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	2b80      	cmp	r3, #128	; 0x80
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e282      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800546e:	4b81      	ldr	r3, [pc, #516]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	061b      	lsls	r3, r3, #24
 800547c:	497d      	ldr	r1, [pc, #500]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800547e:	4313      	orrs	r3, r2
 8005480:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005482:	e040      	b.n	8005506 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d023      	beq.n	80054d4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800548c:	4b79      	ldr	r3, [pc, #484]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a78      	ldr	r2, [pc, #480]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fb ffe8 	bl	800146c <HAL_GetTick>
 800549c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054a0:	f7fb ffe4 	bl	800146c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e260      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054b2:	4b70      	ldr	r3, [pc, #448]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054be:	4b6d      	ldr	r3, [pc, #436]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	061b      	lsls	r3, r3, #24
 80054cc:	4969      	ldr	r1, [pc, #420]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60cb      	str	r3, [r1, #12]
 80054d2:	e018      	b.n	8005506 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054d4:	4b67      	ldr	r3, [pc, #412]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a66      	ldr	r2, [pc, #408]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fb ffc4 	bl	800146c <HAL_GetTick>
 80054e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054e8:	f7fb ffc0 	bl	800146c <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e23c      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054fa:	4b5e      	ldr	r3, [pc, #376]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d036      	beq.n	8005580 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d019      	beq.n	800554e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800551c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551e:	4a55      	ldr	r2, [pc, #340]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005526:	f7fb ffa1 	bl	800146c <HAL_GetTick>
 800552a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552e:	f7fb ff9d 	bl	800146c <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e219      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005540:	4b4c      	ldr	r3, [pc, #304]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x35e>
 800554c:	e018      	b.n	8005580 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800554e:	4b49      	ldr	r3, [pc, #292]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	4a48      	ldr	r2, [pc, #288]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fb ff87 	bl	800146c <HAL_GetTick>
 800555e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fb ff83 	bl	800146c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e1ff      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005574:	4b3f      	ldr	r3, [pc, #252]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f0      	bne.n	8005562 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d036      	beq.n	80055fa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d019      	beq.n	80055c8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005594:	4b37      	ldr	r3, [pc, #220]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a36      	ldr	r2, [pc, #216]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800559a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800559e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055a0:	f7fb ff64 	bl	800146c <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055a8:	f7fb ff60 	bl	800146c <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e1dc      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055ba:	4b2e      	ldr	r3, [pc, #184]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x3d8>
 80055c6:	e018      	b.n	80055fa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055c8:	4b2a      	ldr	r3, [pc, #168]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a29      	ldr	r2, [pc, #164]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80055ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055d4:	f7fb ff4a 	bl	800146c <HAL_GetTick>
 80055d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055dc:	f7fb ff46 	bl	800146c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1c2      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055ee:	4b21      	ldr	r3, [pc, #132]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 8086 	beq.w	8005714 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <HAL_RCC_OscConfig+0x4a8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1a      	ldr	r2, [pc, #104]	; (8005678 <HAL_RCC_OscConfig+0x4a8>)
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005614:	f7fb ff2a 	bl	800146c <HAL_GetTick>
 8005618:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561c:	f7fb ff26 	bl	800146c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e1a2      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_RCC_OscConfig+0x4a8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d106      	bne.n	8005650 <HAL_RCC_OscConfig+0x480>
 8005642:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a0b      	ldr	r2, [pc, #44]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
 800564e:	e032      	b.n	80056b6 <HAL_RCC_OscConfig+0x4e6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d111      	bne.n	800567c <HAL_RCC_OscConfig+0x4ac>
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a05      	ldr	r2, [pc, #20]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	6713      	str	r3, [r2, #112]	; 0x70
 8005664:	4b03      	ldr	r3, [pc, #12]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	4a02      	ldr	r2, [pc, #8]	; (8005674 <HAL_RCC_OscConfig+0x4a4>)
 800566a:	f023 0304 	bic.w	r3, r3, #4
 800566e:	6713      	str	r3, [r2, #112]	; 0x70
 8005670:	e021      	b.n	80056b6 <HAL_RCC_OscConfig+0x4e6>
 8005672:	bf00      	nop
 8005674:	58024400 	.word	0x58024400
 8005678:	58024800 	.word	0x58024800
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b05      	cmp	r3, #5
 8005682:	d10c      	bne.n	800569e <HAL_RCC_OscConfig+0x4ce>
 8005684:	4b83      	ldr	r3, [pc, #524]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	4a82      	ldr	r2, [pc, #520]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800568a:	f043 0304 	orr.w	r3, r3, #4
 800568e:	6713      	str	r3, [r2, #112]	; 0x70
 8005690:	4b80      	ldr	r3, [pc, #512]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	4a7f      	ldr	r2, [pc, #508]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6713      	str	r3, [r2, #112]	; 0x70
 800569c:	e00b      	b.n	80056b6 <HAL_RCC_OscConfig+0x4e6>
 800569e:	4b7d      	ldr	r3, [pc, #500]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4a7c      	ldr	r2, [pc, #496]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6713      	str	r3, [r2, #112]	; 0x70
 80056aa:	4b7a      	ldr	r3, [pc, #488]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	4a79      	ldr	r2, [pc, #484]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d015      	beq.n	80056ea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fb fed5 	bl	800146c <HAL_GetTick>
 80056c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056c4:	e00a      	b.n	80056dc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fb fed1 	bl	800146c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e14b      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056dc:	4b6d      	ldr	r3, [pc, #436]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ee      	beq.n	80056c6 <HAL_RCC_OscConfig+0x4f6>
 80056e8:	e014      	b.n	8005714 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fb febf 	bl	800146c <HAL_GetTick>
 80056ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056f0:	e00a      	b.n	8005708 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fb febb 	bl	800146c <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e135      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005708:	4b62      	ldr	r3, [pc, #392]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1ee      	bne.n	80056f2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 812a 	beq.w	8005972 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800571e:	4b5d      	ldr	r3, [pc, #372]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005726:	2b18      	cmp	r3, #24
 8005728:	f000 80ba 	beq.w	80058a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b02      	cmp	r3, #2
 8005732:	f040 8095 	bne.w	8005860 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005736:	4b57      	ldr	r3, [pc, #348]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a56      	ldr	r2, [pc, #344]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800573c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005742:	f7fb fe93 	bl	800146c <HAL_GetTick>
 8005746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800574a:	f7fb fe8f 	bl	800146c <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e10b      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800575c:	4b4d      	ldr	r3, [pc, #308]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1f0      	bne.n	800574a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005768:	4b4a      	ldr	r3, [pc, #296]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800576a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800576c:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <HAL_RCC_OscConfig+0x6c8>)
 800576e:	4013      	ands	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005778:	0112      	lsls	r2, r2, #4
 800577a:	430a      	orrs	r2, r1
 800577c:	4945      	ldr	r1, [pc, #276]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	628b      	str	r3, [r1, #40]	; 0x28
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	3b01      	subs	r3, #1
 8005788:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	3b01      	subs	r3, #1
 8005792:	025b      	lsls	r3, r3, #9
 8005794:	b29b      	uxth	r3, r3
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	3b01      	subs	r3, #1
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	3b01      	subs	r3, #1
 80057ac:	061b      	lsls	r3, r3, #24
 80057ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057b2:	4938      	ldr	r1, [pc, #224]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057b8:	4b36      	ldr	r3, [pc, #216]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	4a35      	ldr	r2, [pc, #212]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057c4:	4b33      	ldr	r3, [pc, #204]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c8:	4b34      	ldr	r3, [pc, #208]	; (800589c <HAL_RCC_OscConfig+0x6cc>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057d0:	00d2      	lsls	r2, r2, #3
 80057d2:	4930      	ldr	r1, [pc, #192]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057d8:	4b2e      	ldr	r3, [pc, #184]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	f023 020c 	bic.w	r2, r3, #12
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	492b      	ldr	r1, [pc, #172]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057ea:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	f023 0202 	bic.w	r2, r3, #2
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f6:	4927      	ldr	r1, [pc, #156]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a24      	ldr	r2, [pc, #144]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005808:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a21      	ldr	r2, [pc, #132]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800580e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005814:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800581a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800581e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005820:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800582c:	4b19      	ldr	r3, [pc, #100]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a18      	ldr	r2, [pc, #96]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fb fe18 	bl	800146c <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005840:	f7fb fe14 	bl	800146c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e090      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x670>
 800585e:	e088      	b.n	8005972 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a0b      	ldr	r2, [pc, #44]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800586a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fb fdfe 	bl	800146c <HAL_GetTick>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005874:	f7fb fdfa 	bl	800146c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e076      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005886:	4b03      	ldr	r3, [pc, #12]	; (8005894 <HAL_RCC_OscConfig+0x6c4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x6a4>
 8005892:	e06e      	b.n	8005972 <HAL_RCC_OscConfig+0x7a2>
 8005894:	58024400 	.word	0x58024400
 8005898:	fffffc0c 	.word	0xfffffc0c
 800589c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058a0:	4b36      	ldr	r3, [pc, #216]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058a6:	4b35      	ldr	r3, [pc, #212]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d031      	beq.n	8005918 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f003 0203 	and.w	r2, r3, #3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d12a      	bne.n	8005918 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d122      	bne.n	8005918 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058de:	429a      	cmp	r2, r3
 80058e0:	d11a      	bne.n	8005918 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	0a5b      	lsrs	r3, r3, #9
 80058e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d111      	bne.n	8005918 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	0c1b      	lsrs	r3, r3, #16
 80058f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d108      	bne.n	8005918 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	0e1b      	lsrs	r3, r3, #24
 800590a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005912:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e02b      	b.n	8005974 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	08db      	lsrs	r3, r3, #3
 8005922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005926:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	429a      	cmp	r2, r3
 8005930:	d01f      	beq.n	8005972 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005932:	4b12      	ldr	r3, [pc, #72]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	4a11      	ldr	r2, [pc, #68]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800593e:	f7fb fd95 	bl	800146c <HAL_GetTick>
 8005942:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005944:	bf00      	nop
 8005946:	f7fb fd91 	bl	800146c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	4293      	cmp	r3, r2
 8005950:	d0f9      	beq.n	8005946 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005952:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 8005954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <HAL_RCC_OscConfig+0x7b0>)
 8005958:	4013      	ands	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800595e:	00d2      	lsls	r2, r2, #3
 8005960:	4906      	ldr	r1, [pc, #24]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 8005962:	4313      	orrs	r3, r2
 8005964:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	4a04      	ldr	r2, [pc, #16]	; (800597c <HAL_RCC_OscConfig+0x7ac>)
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3730      	adds	r7, #48	; 0x30
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	58024400 	.word	0x58024400
 8005980:	ffff0007 	.word	0xffff0007

08005984 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e19c      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005998:	4b8a      	ldr	r3, [pc, #552]	; (8005bc4 <HAL_RCC_ClockConfig+0x240>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d910      	bls.n	80059c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b87      	ldr	r3, [pc, #540]	; (8005bc4 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 020f 	bic.w	r2, r3, #15
 80059ae:	4985      	ldr	r1, [pc, #532]	; (8005bc4 <HAL_RCC_ClockConfig+0x240>)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b83      	ldr	r3, [pc, #524]	; (8005bc4 <HAL_RCC_ClockConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e184      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	4b7b      	ldr	r3, [pc, #492]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d908      	bls.n	80059f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059e4:	4b78      	ldr	r3, [pc, #480]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	4975      	ldr	r1, [pc, #468]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d010      	beq.n	8005a24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	4b70      	ldr	r3, [pc, #448]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d908      	bls.n	8005a24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a12:	4b6d      	ldr	r3, [pc, #436]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	496a      	ldr	r1, [pc, #424]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	4b64      	ldr	r3, [pc, #400]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d908      	bls.n	8005a52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a40:	4b61      	ldr	r3, [pc, #388]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	495e      	ldr	r1, [pc, #376]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69da      	ldr	r2, [r3, #28]
 8005a62:	4b59      	ldr	r3, [pc, #356]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d908      	bls.n	8005a80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a6e:	4b56      	ldr	r3, [pc, #344]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	4953      	ldr	r1, [pc, #332]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d010      	beq.n	8005aae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	4b4d      	ldr	r3, [pc, #308]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d908      	bls.n	8005aae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a9c:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f023 020f 	bic.w	r2, r3, #15
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4947      	ldr	r1, [pc, #284]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d055      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	4940      	ldr	r1, [pc, #256]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d107      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ad4:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d121      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0f6      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aec:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d115      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0ea      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d107      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b04:	4b30      	ldr	r3, [pc, #192]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0de      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b14:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0d6      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b24:	4b28      	ldr	r3, [pc, #160]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f023 0207 	bic.w	r2, r3, #7
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4925      	ldr	r1, [pc, #148]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b36:	f7fb fc99 	bl	800146c <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3c:	e00a      	b.n	8005b54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b3e:	f7fb fc95 	bl	800146c <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e0be      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b54:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d1eb      	bne.n	8005b3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d010      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d208      	bcs.n	8005b94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b82:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f023 020f 	bic.w	r2, r3, #15
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	490e      	ldr	r1, [pc, #56]	; (8005bc8 <HAL_RCC_ClockConfig+0x244>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_ClockConfig+0x240>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d214      	bcs.n	8005bcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <HAL_RCC_ClockConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 020f 	bic.w	r2, r3, #15
 8005baa:	4906      	ldr	r1, [pc, #24]	; (8005bc4 <HAL_RCC_ClockConfig+0x240>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <HAL_RCC_ClockConfig+0x240>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d005      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e086      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x34e>
 8005bc4:	52002000 	.word	0x52002000
 8005bc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d010      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	4b3f      	ldr	r3, [pc, #252]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d208      	bcs.n	8005bfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005be8:	4b3c      	ldr	r3, [pc, #240]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	4939      	ldr	r1, [pc, #228]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d010      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695a      	ldr	r2, [r3, #20]
 8005c0a:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d208      	bcs.n	8005c28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c16:	4b31      	ldr	r3, [pc, #196]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	492e      	ldr	r1, [pc, #184]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d010      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699a      	ldr	r2, [r3, #24]
 8005c38:	4b28      	ldr	r3, [pc, #160]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d208      	bcs.n	8005c56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c44:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	4922      	ldr	r1, [pc, #136]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d010      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69da      	ldr	r2, [r3, #28]
 8005c66:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d208      	bcs.n	8005c84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c72:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	4917      	ldr	r1, [pc, #92]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c84:	f000 f834 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	4912      	ldr	r1, [pc, #72]	; (8005ce0 <HAL_RCC_ClockConfig+0x35c>)
 8005c96:	5ccb      	ldrb	r3, [r1, r3]
 8005c98:	f003 031f 	and.w	r3, r3, #31
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ca2:	4b0e      	ldr	r3, [pc, #56]	; (8005cdc <HAL_RCC_ClockConfig+0x358>)
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	4a0d      	ldr	r2, [pc, #52]	; (8005ce0 <HAL_RCC_ClockConfig+0x35c>)
 8005cac:	5cd3      	ldrb	r3, [r2, r3]
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb8:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <HAL_RCC_ClockConfig+0x360>)
 8005cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cbc:	4a0a      	ldr	r2, [pc, #40]	; (8005ce8 <HAL_RCC_ClockConfig+0x364>)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <HAL_RCC_ClockConfig+0x368>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fb fb86 	bl	80013d8 <HAL_InitTick>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	58024400 	.word	0x58024400
 8005ce0:	08009cf4 	.word	0x08009cf4
 8005ce4:	24000004 	.word	0x24000004
 8005ce8:	24000000 	.word	0x24000000
 8005cec:	24000008 	.word	0x24000008

08005cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf6:	4bb3      	ldr	r3, [pc, #716]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cfe:	2b18      	cmp	r3, #24
 8005d00:	f200 8155 	bhi.w	8005fae <HAL_RCC_GetSysClockFreq+0x2be>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d71 	.word	0x08005d71
 8005d10:	08005faf 	.word	0x08005faf
 8005d14:	08005faf 	.word	0x08005faf
 8005d18:	08005faf 	.word	0x08005faf
 8005d1c:	08005faf 	.word	0x08005faf
 8005d20:	08005faf 	.word	0x08005faf
 8005d24:	08005faf 	.word	0x08005faf
 8005d28:	08005faf 	.word	0x08005faf
 8005d2c:	08005d97 	.word	0x08005d97
 8005d30:	08005faf 	.word	0x08005faf
 8005d34:	08005faf 	.word	0x08005faf
 8005d38:	08005faf 	.word	0x08005faf
 8005d3c:	08005faf 	.word	0x08005faf
 8005d40:	08005faf 	.word	0x08005faf
 8005d44:	08005faf 	.word	0x08005faf
 8005d48:	08005faf 	.word	0x08005faf
 8005d4c:	08005d9d 	.word	0x08005d9d
 8005d50:	08005faf 	.word	0x08005faf
 8005d54:	08005faf 	.word	0x08005faf
 8005d58:	08005faf 	.word	0x08005faf
 8005d5c:	08005faf 	.word	0x08005faf
 8005d60:	08005faf 	.word	0x08005faf
 8005d64:	08005faf 	.word	0x08005faf
 8005d68:	08005faf 	.word	0x08005faf
 8005d6c:	08005da3 	.word	0x08005da3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d70:	4b94      	ldr	r3, [pc, #592]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d7c:	4b91      	ldr	r3, [pc, #580]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	08db      	lsrs	r3, r3, #3
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	4a90      	ldr	r2, [pc, #576]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d8e:	e111      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d90:	4b8d      	ldr	r3, [pc, #564]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d92:	61bb      	str	r3, [r7, #24]
      break;
 8005d94:	e10e      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d96:	4b8d      	ldr	r3, [pc, #564]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d98:	61bb      	str	r3, [r7, #24]
      break;
 8005d9a:	e10b      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d9c:	4b8c      	ldr	r3, [pc, #560]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d9e:	61bb      	str	r3, [r7, #24]
      break;
 8005da0:	e108      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005da2:	4b88      	ldr	r3, [pc, #544]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005dac:	4b85      	ldr	r3, [pc, #532]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005db8:	4b82      	ldr	r3, [pc, #520]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005dc2:	4b80      	ldr	r3, [pc, #512]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	08db      	lsrs	r3, r3, #3
 8005dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80e1 	beq.w	8005fa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	f000 8083 	beq.w	8005ef4 <HAL_RCC_GetSysClockFreq+0x204>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	f200 80a1 	bhi.w	8005f38 <HAL_RCC_GetSysClockFreq+0x248>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_RCC_GetSysClockFreq+0x114>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d056      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e02:	e099      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e04:	4b6f      	ldr	r3, [pc, #444]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02d      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e10:	4b6c      	ldr	r3, [pc, #432]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	08db      	lsrs	r3, r3, #3
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	4a6b      	ldr	r2, [pc, #428]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3a:	4b62      	ldr	r3, [pc, #392]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e6a:	e087      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b51      	ldr	r3, [pc, #324]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eae:	e065      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec2:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ef2:	e043      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f06:	4b2f      	ldr	r3, [pc, #188]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f36:	e021      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	4b1e      	ldr	r3, [pc, #120]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	0a5b      	lsrs	r3, r3, #9
 8005f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f86:	3301      	adds	r3, #1
 8005f88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa0:	ee17 3a90 	vmov	r3, s15
 8005fa4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005fa6:	e005      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61bb      	str	r3, [r7, #24]
      break;
 8005fac:	e002      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005fae:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fb0:	61bb      	str	r3, [r7, #24]
      break;
 8005fb2:	bf00      	nop
  }

  return sysclockfreq;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	03d09000 	.word	0x03d09000
 8005fcc:	003d0900 	.word	0x003d0900
 8005fd0:	017d7840 	.word	0x017d7840
 8005fd4:	46000000 	.word	0x46000000
 8005fd8:	4c742400 	.word	0x4c742400
 8005fdc:	4a742400 	.word	0x4a742400
 8005fe0:	4bbebc20 	.word	0x4bbebc20

08005fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fea:	f7ff fe81 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	4b10      	ldr	r3, [pc, #64]	; (8006034 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	0a1b      	lsrs	r3, r3, #8
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	490f      	ldr	r1, [pc, #60]	; (8006038 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ffc:	5ccb      	ldrb	r3, [r1, r3]
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	fa22 f303 	lsr.w	r3, r2, r3
 8006006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <HAL_RCC_GetHCLKFreq+0x50>)
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	4a09      	ldr	r2, [pc, #36]	; (8006038 <HAL_RCC_GetHCLKFreq+0x54>)
 8006012:	5cd3      	ldrb	r3, [r2, r3]
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <HAL_RCC_GetHCLKFreq+0x58>)
 8006020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006022:	4a07      	ldr	r2, [pc, #28]	; (8006040 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006028:	4b04      	ldr	r3, [pc, #16]	; (800603c <HAL_RCC_GetHCLKFreq+0x58>)
 800602a:	681b      	ldr	r3, [r3, #0]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	58024400 	.word	0x58024400
 8006038:	08009cf4 	.word	0x08009cf4
 800603c:	24000004 	.word	0x24000004
 8006040:	24000000 	.word	0x24000000

08006044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006048:	f7ff ffcc 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	091b      	lsrs	r3, r3, #4
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4904      	ldr	r1, [pc, #16]	; (800606c <HAL_RCC_GetPCLK1Freq+0x28>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd80      	pop	{r7, pc}
 8006068:	58024400 	.word	0x58024400
 800606c:	08009cf4 	.word	0x08009cf4

08006070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006074:	f7ff ffb6 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8006078:	4602      	mov	r2, r0
 800607a:	4b06      	ldr	r3, [pc, #24]	; (8006094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	0a1b      	lsrs	r3, r3, #8
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	4904      	ldr	r1, [pc, #16]	; (8006098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006086:	5ccb      	ldrb	r3, [r1, r3]
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006090:	4618      	mov	r0, r3
 8006092:	bd80      	pop	{r7, pc}
 8006094:	58024400 	.word	0x58024400
 8006098:	08009cf4 	.word	0x08009cf4

0800609c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800609c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a0:	b0c6      	sub	sp, #280	; 0x118
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80060c0:	2500      	movs	r5, #0
 80060c2:	ea54 0305 	orrs.w	r3, r4, r5
 80060c6:	d049      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060d2:	d02f      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060d8:	d828      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060de:	d01a      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060e4:	d822      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ee:	d007      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060f0:	e01c      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f2:	4bab      	ldr	r3, [pc, #684]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	4aaa      	ldr	r2, [pc, #680]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060fe:	e01a      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006104:	3308      	adds	r3, #8
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f002 fa49 	bl	80085a0 <RCCEx_PLL2_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006114:	e00f      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611a:	3328      	adds	r3, #40	; 0x28
 800611c:	2102      	movs	r1, #2
 800611e:	4618      	mov	r0, r3
 8006120:	f002 faf0 	bl	8008704 <RCCEx_PLL3_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800613e:	4b98      	ldr	r3, [pc, #608]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006142:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800614c:	4a94      	ldr	r2, [pc, #592]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800614e:	430b      	orrs	r3, r1
 8006150:	6513      	str	r3, [r2, #80]	; 0x50
 8006152:	e003      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006158:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006168:	f04f 0900 	mov.w	r9, #0
 800616c:	ea58 0309 	orrs.w	r3, r8, r9
 8006170:	d047      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	2b04      	cmp	r3, #4
 800617a:	d82a      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	08006199 	.word	0x08006199
 8006188:	080061a7 	.word	0x080061a7
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061db 	.word	0x080061db
 8006194:	080061db 	.word	0x080061db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4b81      	ldr	r3, [pc, #516]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	4a80      	ldr	r2, [pc, #512]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061a4:	e01a      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	3308      	adds	r3, #8
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f002 f9f6 	bl	80085a0 <RCCEx_PLL2_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061ba:	e00f      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c0:	3328      	adds	r3, #40	; 0x28
 80061c2:	2100      	movs	r1, #0
 80061c4:	4618      	mov	r0, r3
 80061c6:	f002 fa9d 	bl	8008704 <RCCEx_PLL3_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061d0:	e004      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061d8:	e000      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061e4:	4b6e      	ldr	r3, [pc, #440]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e8:	f023 0107 	bic.w	r1, r3, #7
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f2:	4a6b      	ldr	r2, [pc, #428]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6513      	str	r3, [r2, #80]	; 0x50
 80061f8:	e003      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800620e:	f04f 0b00 	mov.w	fp, #0
 8006212:	ea5a 030b 	orrs.w	r3, sl, fp
 8006216:	d05b      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006220:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006224:	d03b      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006226:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800622a:	d834      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800622c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006230:	d037      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006232:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006236:	d82e      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006238:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800623c:	d033      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800623e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006242:	d828      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006248:	d01a      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800624a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800624e:	d822      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006258:	d007      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800625a:	e01c      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625c:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4a4f      	ldr	r2, [pc, #316]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006268:	e01e      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626e:	3308      	adds	r3, #8
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f002 f994 	bl	80085a0 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800627e:	e013      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	3328      	adds	r3, #40	; 0x28
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f002 fa3b 	bl	8008704 <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006294:	e008      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800629c:	e004      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80062a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10b      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062b0:	4b3b      	ldr	r3, [pc, #236]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c0:	4a37      	ldr	r2, [pc, #220]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062c2:	430b      	orrs	r3, r1
 80062c4:	6593      	str	r3, [r2, #88]	; 0x58
 80062c6:	e003      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80062dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062e0:	2300      	movs	r3, #0
 80062e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80062ea:	460b      	mov	r3, r1
 80062ec:	4313      	orrs	r3, r2
 80062ee:	d05d      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062f8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80062fc:	d03b      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80062fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006302:	d834      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006308:	d037      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800630a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800630e:	d82e      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006310:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006314:	d033      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006316:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800631a:	d828      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800631c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006320:	d01a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006326:	d822      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800632c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006330:	d007      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006332:	e01c      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006334:	4b1a      	ldr	r3, [pc, #104]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	4a19      	ldr	r2, [pc, #100]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800633a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006340:	e01e      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006346:	3308      	adds	r3, #8
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f002 f928 	bl	80085a0 <RCCEx_PLL2_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006356:	e013      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635c:	3328      	adds	r3, #40	; 0x28
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f002 f9cf 	bl	8008704 <RCCEx_PLL3_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800636c:	e008      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006374:	e004      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006376:	bf00      	nop
 8006378:	e002      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800637a:	bf00      	nop
 800637c:	e000      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800637e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006380:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10d      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006394:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006398:	4a01      	ldr	r2, [pc, #4]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800639a:	430b      	orrs	r3, r1
 800639c:	6593      	str	r3, [r2, #88]	; 0x58
 800639e:	e005      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80063a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80063b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80063bc:	2300      	movs	r3, #0
 80063be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4313      	orrs	r3, r2
 80063ca:	d03a      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	2b30      	cmp	r3, #48	; 0x30
 80063d4:	d01f      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80063d6:	2b30      	cmp	r3, #48	; 0x30
 80063d8:	d819      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d00c      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d815      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d019      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80063e6:	2b10      	cmp	r3, #16
 80063e8:	d111      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ea:	4baa      	ldr	r3, [pc, #680]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4aa9      	ldr	r2, [pc, #676]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80063f6:	e011      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fc:	3308      	adds	r3, #8
 80063fe:	2102      	movs	r1, #2
 8006400:	4618      	mov	r0, r3
 8006402:	f002 f8cd 	bl	80085a0 <RCCEx_PLL2_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800640c:	e006      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006414:	e002      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800641a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006424:	4b9b      	ldr	r3, [pc, #620]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006428:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006432:	4a98      	ldr	r2, [pc, #608]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006434:	430b      	orrs	r3, r1
 8006436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006438:	e003      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800643e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800644e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006452:	2300      	movs	r3, #0
 8006454:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006458:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800645c:	460b      	mov	r3, r1
 800645e:	4313      	orrs	r3, r2
 8006460:	d051      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800646c:	d035      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800646e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006472:	d82e      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006474:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006478:	d031      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800647a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800647e:	d828      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006484:	d01a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648a:	d822      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006494:	d007      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006496:	e01c      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b7e      	ldr	r3, [pc, #504]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	4a7d      	ldr	r2, [pc, #500]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064a4:	e01c      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064aa:	3308      	adds	r3, #8
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f002 f876 	bl	80085a0 <RCCEx_PLL2_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064ba:	e011      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	3328      	adds	r3, #40	; 0x28
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f002 f91d 	bl	8008704 <RCCEx_PLL3_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064d0:	e006      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064d8:	e002      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80064de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064e8:	4b6a      	ldr	r3, [pc, #424]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f6:	4a67      	ldr	r2, [pc, #412]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6513      	str	r3, [r2, #80]	; 0x50
 80064fc:	e003      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006502:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006512:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006516:	2300      	movs	r3, #0
 8006518:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800651c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006520:	460b      	mov	r3, r1
 8006522:	4313      	orrs	r3, r2
 8006524:	d053      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006530:	d033      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006536:	d82c      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800653c:	d02f      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800653e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006542:	d826      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006544:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006548:	d02b      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800654a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800654e:	d820      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006554:	d012      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800655a:	d81a      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d022      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006564:	d115      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656a:	3308      	adds	r3, #8
 800656c:	2101      	movs	r1, #1
 800656e:	4618      	mov	r0, r3
 8006570:	f002 f816 	bl	80085a0 <RCCEx_PLL2_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800657a:	e015      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006580:	3328      	adds	r3, #40	; 0x28
 8006582:	2101      	movs	r1, #1
 8006584:	4618      	mov	r0, r3
 8006586:	f002 f8bd 	bl	8008704 <RCCEx_PLL3_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006590:	e00a      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006598:	e006      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800659a:	bf00      	nop
 800659c:	e004      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800659e:	bf00      	nop
 80065a0:	e002      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80065a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065b0:	4b38      	ldr	r3, [pc, #224]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065be:	4a35      	ldr	r2, [pc, #212]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6513      	str	r3, [r2, #80]	; 0x50
 80065c4:	e003      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80065da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065de:	2300      	movs	r3, #0
 80065e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065e8:	460b      	mov	r3, r1
 80065ea:	4313      	orrs	r3, r2
 80065ec:	d058      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065fa:	d033      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80065fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006600:	d82c      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006606:	d02f      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d826      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800660e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006612:	d02b      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006618:	d820      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800661a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800661e:	d012      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006624:	d81a      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d022      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800662a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800662e:	d115      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006634:	3308      	adds	r3, #8
 8006636:	2101      	movs	r1, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f001 ffb1 	bl	80085a0 <RCCEx_PLL2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006644:	e015      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664a:	3328      	adds	r3, #40	; 0x28
 800664c:	2101      	movs	r1, #1
 800664e:	4618      	mov	r0, r3
 8006650:	f002 f858 	bl	8008704 <RCCEx_PLL3_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800665a:	e00a      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006662:	e006      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006664:	bf00      	nop
 8006666:	e004      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006668:	bf00      	nop
 800666a:	e002      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800666c:	bf00      	nop
 800666e:	e000      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006672:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10e      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800667c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006686:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800668a:	4a02      	ldr	r2, [pc, #8]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800668c:	430b      	orrs	r3, r1
 800668e:	6593      	str	r3, [r2, #88]	; 0x58
 8006690:	e006      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800669c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80066ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066b0:	2300      	movs	r3, #0
 80066b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4313      	orrs	r3, r2
 80066be:	d037      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ca:	d00e      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80066cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d0:	d816      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d018      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80066d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066da:	d111      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066dc:	4bc4      	ldr	r3, [pc, #784]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	4ac3      	ldr	r2, [pc, #780]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066e8:	e00f      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ee:	3308      	adds	r3, #8
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 ff54 	bl	80085a0 <RCCEx_PLL2_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066fe:	e004      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006706:	e000      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006712:	4bb7      	ldr	r3, [pc, #732]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006716:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006720:	4ab3      	ldr	r2, [pc, #716]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006722:	430b      	orrs	r3, r1
 8006724:	6513      	str	r3, [r2, #80]	; 0x50
 8006726:	e003      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006728:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800672c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800673c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006746:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d039      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006756:	2b03      	cmp	r3, #3
 8006758:	d81c      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	0800679d 	.word	0x0800679d
 8006764:	08006771 	.word	0x08006771
 8006768:	0800677f 	.word	0x0800677f
 800676c:	0800679d 	.word	0x0800679d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006770:	4b9f      	ldr	r3, [pc, #636]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	4a9e      	ldr	r2, [pc, #632]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800677a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800677c:	e00f      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006782:	3308      	adds	r3, #8
 8006784:	2102      	movs	r1, #2
 8006786:	4618      	mov	r0, r3
 8006788:	f001 ff0a 	bl	80085a0 <RCCEx_PLL2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006792:	e004      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800679a:	e000      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800679c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800679e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10a      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067a6:	4b92      	ldr	r3, [pc, #584]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067aa:	f023 0103 	bic.w	r1, r3, #3
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b4:	4a8e      	ldr	r2, [pc, #568]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067b6:	430b      	orrs	r3, r1
 80067b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067ba:	e003      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80067d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067d4:	2300      	movs	r3, #0
 80067d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067de:	460b      	mov	r3, r1
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f000 8099 	beq.w	8006918 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067e6:	4b83      	ldr	r3, [pc, #524]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a82      	ldr	r2, [pc, #520]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067f2:	f7fa fe3b 	bl	800146c <HAL_GetTick>
 80067f6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067fa:	e00b      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067fc:	f7fa fe36 	bl	800146c <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b64      	cmp	r3, #100	; 0x64
 800680a:	d903      	bls.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006812:	e005      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006814:	4b77      	ldr	r3, [pc, #476]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0ed      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006824:	2b00      	cmp	r3, #0
 8006826:	d173      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006828:	4b71      	ldr	r3, [pc, #452]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800682a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006834:	4053      	eors	r3, r2
 8006836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683a:	2b00      	cmp	r3, #0
 800683c:	d015      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800683e:	4b6c      	ldr	r3, [pc, #432]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006846:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800684a:	4b69      	ldr	r3, [pc, #420]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	4a68      	ldr	r2, [pc, #416]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006854:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006856:	4b66      	ldr	r3, [pc, #408]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685a:	4a65      	ldr	r2, [pc, #404]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800685c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006860:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006862:	4a63      	ldr	r2, [pc, #396]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006876:	d118      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fa fdf8 	bl	800146c <HAL_GetTick>
 800687c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006880:	e00d      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006882:	f7fa fdf3 	bl	800146c <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800688c:	1ad2      	subs	r2, r2, r3
 800688e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006892:	429a      	cmp	r2, r3
 8006894:	d903      	bls.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800689c:	e005      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800689e:	4b54      	ldr	r3, [pc, #336]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0eb      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80068aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d129      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c2:	d10e      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80068c4:	4b4a      	ldr	r3, [pc, #296]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068d4:	091a      	lsrs	r2, r3, #4
 80068d6:	4b48      	ldr	r3, [pc, #288]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068d8:	4013      	ands	r3, r2
 80068da:	4a45      	ldr	r2, [pc, #276]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6113      	str	r3, [r2, #16]
 80068e0:	e005      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 80068e2:	4b43      	ldr	r3, [pc, #268]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	4a42      	ldr	r2, [pc, #264]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068ec:	6113      	str	r3, [r2, #16]
 80068ee:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068fe:	4a3c      	ldr	r2, [pc, #240]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006900:	430b      	orrs	r3, r1
 8006902:	6713      	str	r3, [r2, #112]	; 0x70
 8006904:	e008      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006906:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800690a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800690e:	e003      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006914:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f002 0301 	and.w	r3, r2, #1
 8006924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800692e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006932:	460b      	mov	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	f000 808f 	beq.w	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006940:	2b28      	cmp	r3, #40	; 0x28
 8006942:	d871      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006a31 	.word	0x08006a31
 8006950:	08006a29 	.word	0x08006a29
 8006954:	08006a29 	.word	0x08006a29
 8006958:	08006a29 	.word	0x08006a29
 800695c:	08006a29 	.word	0x08006a29
 8006960:	08006a29 	.word	0x08006a29
 8006964:	08006a29 	.word	0x08006a29
 8006968:	08006a29 	.word	0x08006a29
 800696c:	080069fd 	.word	0x080069fd
 8006970:	08006a29 	.word	0x08006a29
 8006974:	08006a29 	.word	0x08006a29
 8006978:	08006a29 	.word	0x08006a29
 800697c:	08006a29 	.word	0x08006a29
 8006980:	08006a29 	.word	0x08006a29
 8006984:	08006a29 	.word	0x08006a29
 8006988:	08006a29 	.word	0x08006a29
 800698c:	08006a13 	.word	0x08006a13
 8006990:	08006a29 	.word	0x08006a29
 8006994:	08006a29 	.word	0x08006a29
 8006998:	08006a29 	.word	0x08006a29
 800699c:	08006a29 	.word	0x08006a29
 80069a0:	08006a29 	.word	0x08006a29
 80069a4:	08006a29 	.word	0x08006a29
 80069a8:	08006a29 	.word	0x08006a29
 80069ac:	08006a31 	.word	0x08006a31
 80069b0:	08006a29 	.word	0x08006a29
 80069b4:	08006a29 	.word	0x08006a29
 80069b8:	08006a29 	.word	0x08006a29
 80069bc:	08006a29 	.word	0x08006a29
 80069c0:	08006a29 	.word	0x08006a29
 80069c4:	08006a29 	.word	0x08006a29
 80069c8:	08006a29 	.word	0x08006a29
 80069cc:	08006a31 	.word	0x08006a31
 80069d0:	08006a29 	.word	0x08006a29
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	08006a29 	.word	0x08006a29
 80069dc:	08006a29 	.word	0x08006a29
 80069e0:	08006a29 	.word	0x08006a29
 80069e4:	08006a29 	.word	0x08006a29
 80069e8:	08006a29 	.word	0x08006a29
 80069ec:	08006a31 	.word	0x08006a31
 80069f0:	58024400 	.word	0x58024400
 80069f4:	58024800 	.word	0x58024800
 80069f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a00:	3308      	adds	r3, #8
 8006a02:	2101      	movs	r1, #1
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 fdcb 	bl	80085a0 <RCCEx_PLL2_Config>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a10:	e00f      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a16:	3328      	adds	r3, #40	; 0x28
 8006a18:	2101      	movs	r1, #1
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 fe72 	bl	8008704 <RCCEx_PLL3_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a26:	e004      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a2e:	e000      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a3a:	4bbf      	ldr	r3, [pc, #764]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a48:	4abb      	ldr	r2, [pc, #748]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	6553      	str	r3, [r2, #84]	; 0x54
 8006a4e:	e003      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f002 0302 	and.w	r3, r2, #2
 8006a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4313      	orrs	r3, r2
 8006a76:	d041      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d824      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006ad5 	.word	0x08006ad5
 8006a8c:	08006aa1 	.word	0x08006aa1
 8006a90:	08006ab7 	.word	0x08006ab7
 8006a94:	08006ad5 	.word	0x08006ad5
 8006a98:	08006ad5 	.word	0x08006ad5
 8006a9c:	08006ad5 	.word	0x08006ad5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 fd79 	bl	80085a0 <RCCEx_PLL2_Config>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ab4:	e00f      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aba:	3328      	adds	r3, #40	; 0x28
 8006abc:	2101      	movs	r1, #1
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f001 fe20 	bl	8008704 <RCCEx_PLL3_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006aca:	e004      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ade:	4b96      	ldr	r3, [pc, #600]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	f023 0107 	bic.w	r1, r3, #7
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aec:	4a92      	ldr	r2, [pc, #584]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006aee:	430b      	orrs	r3, r1
 8006af0:	6553      	str	r3, [r2, #84]	; 0x54
 8006af2:	e003      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006af8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f002 0304 	and.w	r3, r2, #4
 8006b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b12:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b16:	460b      	mov	r3, r1
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	d044      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b24:	2b05      	cmp	r3, #5
 8006b26:	d825      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006b28:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b7d 	.word	0x08006b7d
 8006b34:	08006b49 	.word	0x08006b49
 8006b38:	08006b5f 	.word	0x08006b5f
 8006b3c:	08006b7d 	.word	0x08006b7d
 8006b40:	08006b7d 	.word	0x08006b7d
 8006b44:	08006b7d 	.word	0x08006b7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	2101      	movs	r1, #1
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 fd25 	bl	80085a0 <RCCEx_PLL2_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b5c:	e00f      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	3328      	adds	r3, #40	; 0x28
 8006b64:	2101      	movs	r1, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 fdcc 	bl	8008704 <RCCEx_PLL3_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b72:	e004      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b7a:	e000      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10b      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b86:	4b6c      	ldr	r3, [pc, #432]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	f023 0107 	bic.w	r1, r3, #7
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	4a68      	ldr	r2, [pc, #416]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b9c:	e003      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ba2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f002 0320 	and.w	r3, r2, #32
 8006bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006bbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	d055      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bd2:	d033      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bd8:	d82c      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bde:	d02f      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be4:	d826      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006be6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bea:	d02b      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bf0:	d820      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf6:	d012      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfc:	d81a      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d022      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c06:	d115      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 fcc5 	bl	80085a0 <RCCEx_PLL2_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c1c:	e015      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c22:	3328      	adds	r3, #40	; 0x28
 8006c24:	2102      	movs	r1, #2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f001 fd6c 	bl	8008704 <RCCEx_PLL3_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c32:	e00a      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c3a:	e006      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c3c:	bf00      	nop
 8006c3e:	e004      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c40:	bf00      	nop
 8006c42:	e002      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c44:	bf00      	nop
 8006c46:	e000      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c52:	4b39      	ldr	r3, [pc, #228]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c62:	4a35      	ldr	r2, [pc, #212]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6553      	str	r3, [r2, #84]	; 0x54
 8006c68:	e003      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006c7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c82:	2300      	movs	r3, #0
 8006c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c88:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d058      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c9e:	d033      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006ca0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ca4:	d82c      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006caa:	d02f      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb0:	d826      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cb6:	d02b      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cbc:	d820      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc2:	d012      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc8:	d81a      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d022      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd2:	d115      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd8:	3308      	adds	r3, #8
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 fc5f 	bl	80085a0 <RCCEx_PLL2_Config>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ce8:	e015      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cee:	3328      	adds	r3, #40	; 0x28
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 fd06 	bl	8008704 <RCCEx_PLL3_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e00a      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d06:	e006      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d08:	bf00      	nop
 8006d0a:	e004      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d0c:	bf00      	nop
 8006d0e:	e002      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d10:	bf00      	nop
 8006d12:	e000      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10e      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d1e:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d2e:	4a02      	ldr	r2, [pc, #8]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d30:	430b      	orrs	r3, r1
 8006d32:	6593      	str	r3, [r2, #88]	; 0x58
 8006d34:	e006      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006d36:	bf00      	nop
 8006d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006d50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d54:	2300      	movs	r3, #0
 8006d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d055      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d70:	d033      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006d72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d76:	d82c      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7c:	d02f      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d82:	d826      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d88:	d02b      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006d8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d8e:	d820      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d94:	d012      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d9a:	d81a      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d022      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da4:	d115      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006daa:	3308      	adds	r3, #8
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 fbf6 	bl	80085a0 <RCCEx_PLL2_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006dba:	e015      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc0:	3328      	adds	r3, #40	; 0x28
 8006dc2:	2102      	movs	r1, #2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fc9d 	bl	8008704 <RCCEx_PLL3_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006dd0:	e00a      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006dd8:	e006      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006dda:	bf00      	nop
 8006ddc:	e004      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006dde:	bf00      	nop
 8006de0:	e002      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10b      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006df0:	4ba0      	ldr	r3, [pc, #640]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e00:	4a9c      	ldr	r2, [pc, #624]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e02:	430b      	orrs	r3, r1
 8006e04:	6593      	str	r3, [r2, #88]	; 0x58
 8006e06:	e003      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f002 0308 	and.w	r3, r2, #8
 8006e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e20:	2300      	movs	r3, #0
 8006e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e26:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	d01e      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3c:	d10c      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e42:	3328      	adds	r3, #40	; 0x28
 8006e44:	2102      	movs	r1, #2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 fc5c 	bl	8008704 <RCCEx_PLL3_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006e58:	4b86      	ldr	r3, [pc, #536]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e68:	4a82      	ldr	r2, [pc, #520]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e6a:	430b      	orrs	r3, r1
 8006e6c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f002 0310 	and.w	r3, r2, #16
 8006e7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	d01e      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9a:	d10c      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	3328      	adds	r3, #40	; 0x28
 8006ea2:	2102      	movs	r1, #2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fc2d 	bl	8008704 <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eb6:	4b6f      	ldr	r3, [pc, #444]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec6:	4a6b      	ldr	r2, [pc, #428]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eda:	2300      	movs	r3, #0
 8006edc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ede:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	d03e      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef4:	d022      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006efa:	d81b      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f04:	d00b      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006f06:	e015      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 fb45 	bl	80085a0 <RCCEx_PLL2_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f1c:	e00f      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f22:	3328      	adds	r3, #40	; 0x28
 8006f24:	2102      	movs	r1, #2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 fbec 	bl	8008704 <RCCEx_PLL3_Config>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f32:	e004      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f3a:	e000      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f46:	4b4b      	ldr	r3, [pc, #300]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f56:	4a47      	ldr	r2, [pc, #284]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006f72:	673b      	str	r3, [r7, #112]	; 0x70
 8006f74:	2300      	movs	r3, #0
 8006f76:	677b      	str	r3, [r7, #116]	; 0x74
 8006f78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	d03b      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f8e:	d01f      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f94:	d818      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f9a:	d003      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fa0:	d007      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006fa2:	e011      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa4:	4b33      	ldr	r3, [pc, #204]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	4a32      	ldr	r2, [pc, #200]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fb0:	e00f      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb6:	3328      	adds	r3, #40	; 0x28
 8006fb8:	2101      	movs	r1, #1
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fba2 	bl	8008704 <RCCEx_PLL3_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fc6:	e004      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10b      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fda:	4b26      	ldr	r3, [pc, #152]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fea:	4a22      	ldr	r2, [pc, #136]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6553      	str	r3, [r2, #84]	; 0x54
 8006ff0:	e003      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ff6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007006:	66bb      	str	r3, [r7, #104]	; 0x68
 8007008:	2300      	movs	r3, #0
 800700a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800700c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007010:	460b      	mov	r3, r1
 8007012:	4313      	orrs	r3, r2
 8007014:	d034      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007024:	d007      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007026:	e011      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007028:	4b12      	ldr	r3, [pc, #72]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4a11      	ldr	r2, [pc, #68]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800702e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007034:	e00e      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703a:	3308      	adds	r3, #8
 800703c:	2102      	movs	r1, #2
 800703e:	4618      	mov	r0, r3
 8007040:	f001 faae 	bl	80085a0 <RCCEx_PLL2_Config>
 8007044:	4603      	mov	r3, r0
 8007046:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800704a:	e003      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10d      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800705e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706a:	4a02      	ldr	r2, [pc, #8]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800706c:	430b      	orrs	r3, r1
 800706e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800707c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800708c:	663b      	str	r3, [r7, #96]	; 0x60
 800708e:	2300      	movs	r3, #0
 8007090:	667b      	str	r3, [r7, #100]	; 0x64
 8007092:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007096:	460b      	mov	r3, r1
 8007098:	4313      	orrs	r3, r2
 800709a:	d00c      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a0:	3328      	adds	r3, #40	; 0x28
 80070a2:	2102      	movs	r1, #2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 fb2d 	bl	8008704 <RCCEx_PLL3_Config>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80070c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80070c4:	2300      	movs	r3, #0
 80070c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80070cc:	460b      	mov	r3, r1
 80070ce:	4313      	orrs	r3, r2
 80070d0:	d036      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070dc:	d018      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80070de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070e2:	d811      	bhi.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80070e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e8:	d014      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80070ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ee:	d80b      	bhi.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d011      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80070f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f8:	d106      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fa:	4bb7      	ldr	r3, [pc, #732]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	4ab6      	ldr	r2, [pc, #728]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007106:	e008      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800710e:	e004      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007110:	bf00      	nop
 8007112:	e002      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007114:	bf00      	nop
 8007116:	e000      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007122:	4bad      	ldr	r3, [pc, #692]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007130:	4aa9      	ldr	r2, [pc, #676]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007132:	430b      	orrs	r3, r1
 8007134:	6553      	str	r3, [r2, #84]	; 0x54
 8007136:	e003      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800713c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800714c:	653b      	str	r3, [r7, #80]	; 0x50
 800714e:	2300      	movs	r3, #0
 8007150:	657b      	str	r3, [r7, #84]	; 0x54
 8007152:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007156:	460b      	mov	r3, r1
 8007158:	4313      	orrs	r3, r2
 800715a:	d009      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800715c:	4b9e      	ldr	r3, [pc, #632]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800715e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007160:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	4a9b      	ldr	r2, [pc, #620]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800716c:	430b      	orrs	r3, r1
 800716e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800717c:	64bb      	str	r3, [r7, #72]	; 0x48
 800717e:	2300      	movs	r3, #0
 8007180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007182:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007186:	460b      	mov	r3, r1
 8007188:	4313      	orrs	r3, r2
 800718a:	d009      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800718c:	4b92      	ldr	r3, [pc, #584]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800718e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007190:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800719a:	4a8f      	ldr	r2, [pc, #572]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800719c:	430b      	orrs	r3, r1
 800719e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80071ac:	643b      	str	r3, [r7, #64]	; 0x40
 80071ae:	2300      	movs	r3, #0
 80071b0:	647b      	str	r3, [r7, #68]	; 0x44
 80071b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80071b6:	460b      	mov	r3, r1
 80071b8:	4313      	orrs	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071bc:	4b86      	ldr	r3, [pc, #536]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	4a85      	ldr	r2, [pc, #532]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071c6:	6113      	str	r3, [r2, #16]
 80071c8:	4b83      	ldr	r3, [pc, #524]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071ca:	6919      	ldr	r1, [r3, #16]
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071d4:	4a80      	ldr	r2, [pc, #512]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071d6:	430b      	orrs	r3, r1
 80071d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80071e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80071e8:	2300      	movs	r3, #0
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80071f0:	460b      	mov	r3, r1
 80071f2:	4313      	orrs	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071f6:	4b78      	ldr	r3, [pc, #480]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007204:	4a74      	ldr	r2, [pc, #464]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007206:	430b      	orrs	r3, r1
 8007208:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007216:	633b      	str	r3, [r7, #48]	; 0x30
 8007218:	2300      	movs	r3, #0
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
 800721c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007220:	460b      	mov	r3, r1
 8007222:	4313      	orrs	r3, r2
 8007224:	d00a      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007226:	4b6c      	ldr	r3, [pc, #432]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007236:	4a68      	ldr	r2, [pc, #416]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007238:	430b      	orrs	r3, r1
 800723a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	2100      	movs	r1, #0
 8007246:	62b9      	str	r1, [r7, #40]	; 0x28
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007252:	460b      	mov	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	d011      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725c:	3308      	adds	r3, #8
 800725e:	2100      	movs	r1, #0
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f99d 	bl	80085a0 <RCCEx_PLL2_Config>
 8007266:	4603      	mov	r3, r0
 8007268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800726c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007278:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	2100      	movs	r1, #0
 8007286:	6239      	str	r1, [r7, #32]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
 800728e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007292:	460b      	mov	r3, r1
 8007294:	4313      	orrs	r3, r2
 8007296:	d011      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729c:	3308      	adds	r3, #8
 800729e:	2101      	movs	r1, #1
 80072a0:	4618      	mov	r0, r3
 80072a2:	f001 f97d 	bl	80085a0 <RCCEx_PLL2_Config>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80072ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	2100      	movs	r1, #0
 80072c6:	61b9      	str	r1, [r7, #24]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072d2:	460b      	mov	r3, r1
 80072d4:	4313      	orrs	r3, r2
 80072d6:	d011      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072dc:	3308      	adds	r3, #8
 80072de:	2102      	movs	r1, #2
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 f95d 	bl	80085a0 <RCCEx_PLL2_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80072ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	2100      	movs	r1, #0
 8007306:	6139      	str	r1, [r7, #16]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007312:	460b      	mov	r3, r1
 8007314:	4313      	orrs	r3, r2
 8007316:	d011      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731c:	3328      	adds	r3, #40	; 0x28
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f001 f9ef 	bl	8008704 <RCCEx_PLL3_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800732c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007338:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	2100      	movs	r1, #0
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007352:	460b      	mov	r3, r1
 8007354:	4313      	orrs	r3, r2
 8007356:	d011      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735c:	3328      	adds	r3, #40	; 0x28
 800735e:	2101      	movs	r1, #1
 8007360:	4618      	mov	r0, r3
 8007362:	f001 f9cf 	bl	8008704 <RCCEx_PLL3_Config>
 8007366:	4603      	mov	r3, r0
 8007368:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800736c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007374:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007378:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800737c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	2100      	movs	r1, #0
 8007386:	6039      	str	r1, [r7, #0]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007392:	460b      	mov	r3, r1
 8007394:	4313      	orrs	r3, r2
 8007396:	d011      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739c:	3328      	adds	r3, #40	; 0x28
 800739e:	2102      	movs	r1, #2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f9af 	bl	8008704 <RCCEx_PLL3_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80073ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80073bc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	e000      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80073d0:	46bd      	mov	sp, r7
 80073d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073d6:	bf00      	nop
 80073d8:	58024400 	.word	0x58024400

080073dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b090      	sub	sp, #64	; 0x40
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ea:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80073ee:	430b      	orrs	r3, r1
 80073f0:	f040 8094 	bne.w	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80073f4:	4b9b      	ldr	r3, [pc, #620]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	2b04      	cmp	r3, #4
 8007402:	f200 8087 	bhi.w	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007421 	.word	0x08007421
 8007410:	08007449 	.word	0x08007449
 8007414:	08007471 	.word	0x08007471
 8007418:	0800750d 	.word	0x0800750d
 800741c:	08007499 	.word	0x08007499
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007420:	4b90      	ldr	r3, [pc, #576]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800742c:	d108      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800742e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007432:	4618      	mov	r0, r3
 8007434:	f000 ff62 	bl	80082fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800743c:	f000 bc93 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007444:	f000 bc8f 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007448:	4b86      	ldr	r3, [pc, #536]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007454:	d108      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007456:	f107 0318 	add.w	r3, r7, #24
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fca6 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007464:	f000 bc7f 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800746c:	f000 bc7b 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007470:	4b7c      	ldr	r3, [pc, #496]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747c:	d108      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800747e:	f107 030c 	add.w	r3, r7, #12
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fde6 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800748c:	f000 bc6b 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007494:	f000 bc67 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007498:	4b72      	ldr	r3, [pc, #456]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800749a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074a2:	4b70      	ldr	r3, [pc, #448]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d10c      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074b4:	4b6b      	ldr	r3, [pc, #428]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	08db      	lsrs	r3, r3, #3
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	4a6a      	ldr	r2, [pc, #424]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80074c0:	fa22 f303 	lsr.w	r3, r2, r3
 80074c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074c6:	e01f      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074c8:	4b66      	ldr	r3, [pc, #408]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d4:	d106      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074dc:	d102      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074de:	4b63      	ldr	r3, [pc, #396]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e2:	e011      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074e4:	4b5f      	ldr	r3, [pc, #380]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f0:	d106      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80074f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f8:	d102      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074fa:	4b5d      	ldr	r3, [pc, #372]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fe:	e003      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007504:	f000 bc2f 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007508:	f000 bc2d 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800750c:	4b59      	ldr	r3, [pc, #356]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007510:	f000 bc29 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007518:	f000 bc25 	b.w	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800751c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007520:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007524:	430b      	orrs	r3, r1
 8007526:	f040 80a7 	bne.w	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800752a:	4b4e      	ldr	r3, [pc, #312]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800752c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007532:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800753a:	d054      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007542:	f200 808b 	bhi.w	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800754c:	f000 8083 	beq.w	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007556:	f200 8081 	bhi.w	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007560:	d02f      	beq.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007568:	d878      	bhi.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007576:	d012      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007578:	e070      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800757a:	4b3a      	ldr	r3, [pc, #232]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007586:	d107      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800758c:	4618      	mov	r0, r3
 800758e:	f000 feb5 	bl	80082fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007596:	e3e6      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800759c:	e3e3      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800759e:	4b31      	ldr	r3, [pc, #196]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075aa:	d107      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ac:	f107 0318 	add.w	r3, r7, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fbfb 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ba:	e3d4      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075c0:	e3d1      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075c2:	4b28      	ldr	r3, [pc, #160]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ce:	d107      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075d0:	f107 030c 	add.w	r3, r7, #12
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fd3d 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075de:	e3c2      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e4:	e3bf      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075e6:	4b1f      	ldr	r3, [pc, #124]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80075e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075f0:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d10c      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007602:	4b18      	ldr	r3, [pc, #96]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	08db      	lsrs	r3, r3, #3
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	4a16      	ldr	r2, [pc, #88]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800760e:	fa22 f303 	lsr.w	r3, r2, r3
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007614:	e01e      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007616:	4b13      	ldr	r3, [pc, #76]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007622:	d106      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800762a:	d102      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800762c:	4b0f      	ldr	r3, [pc, #60]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007630:	e010      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007632:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800763e:	d106      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007646:	d102      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007648:	4b09      	ldr	r3, [pc, #36]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800764c:	e002      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007652:	e388      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007654:	e387      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007656:	4b07      	ldr	r3, [pc, #28]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765a:	e384      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007660:	e381      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
 8007668:	03d09000 	.word	0x03d09000
 800766c:	003d0900 	.word	0x003d0900
 8007670:	017d7840 	.word	0x017d7840
 8007674:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800767c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007680:	430b      	orrs	r3, r1
 8007682:	f040 809c 	bne.w	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007686:	4b9e      	ldr	r3, [pc, #632]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800768e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007696:	d054      	beq.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800769e:	f200 808b 	bhi.w	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076a8:	f000 8083 	beq.w	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076b2:	f200 8081 	bhi.w	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076bc:	d02f      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076c4:	d878      	bhi.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076d2:	d012      	beq.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80076d4:	e070      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076d6:	4b8a      	ldr	r3, [pc, #552]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e2:	d107      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fe07 	bl	80082fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f2:	e338      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076f8:	e335      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076fa:	4b81      	ldr	r3, [pc, #516]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007706:	d107      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007708:	f107 0318 	add.w	r3, r7, #24
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fb4d 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007716:	e326      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800771c:	e323      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800771e:	4b78      	ldr	r3, [pc, #480]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772a:	d107      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800772c:	f107 030c 	add.w	r3, r7, #12
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fc8f 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800773a:	e314      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007740:	e311      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007742:	4b6f      	ldr	r3, [pc, #444]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800774a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800774c:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b04      	cmp	r3, #4
 8007756:	d10c      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	2b00      	cmp	r3, #0
 800775c:	d109      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800775e:	4b68      	ldr	r3, [pc, #416]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	08db      	lsrs	r3, r3, #3
 8007764:	f003 0303 	and.w	r3, r3, #3
 8007768:	4a66      	ldr	r2, [pc, #408]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800776a:	fa22 f303 	lsr.w	r3, r2, r3
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007770:	e01e      	b.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007772:	4b63      	ldr	r3, [pc, #396]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800777e:	d106      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007786:	d102      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007788:	4b5f      	ldr	r3, [pc, #380]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800778c:	e010      	b.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800778e:	4b5c      	ldr	r3, [pc, #368]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800779a:	d106      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077a2:	d102      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077a4:	4b59      	ldr	r3, [pc, #356]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077a8:	e002      	b.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80077ae:	e2da      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80077b0:	e2d9      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077b2:	4b57      	ldr	r3, [pc, #348]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b6:	e2d6      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077bc:	e2d3      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80077be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80077c6:	430b      	orrs	r3, r1
 80077c8:	f040 80a7 	bne.w	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80077cc:	4b4c      	ldr	r3, [pc, #304]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80077ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80077d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077dc:	d055      	beq.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e4:	f200 8096 	bhi.w	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077ee:	f000 8084 	beq.w	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077f8:	f200 808c 	bhi.w	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007802:	d030      	beq.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780a:	f200 8083 	bhi.w	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781a:	d012      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800781c:	e07a      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800781e:	4b38      	ldr	r3, [pc, #224]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800782a:	d107      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800782c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fd63 	bl	80082fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800783a:	e294      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007840:	e291      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007842:	4b2f      	ldr	r3, [pc, #188]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800784a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800784e:	d107      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007850:	f107 0318 	add.w	r3, r7, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f000 faa9 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800785e:	e282      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007864:	e27f      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007872:	d107      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	4618      	mov	r0, r3
 800787a:	f000 fbeb 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007882:	e270      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007888:	e26d      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800788a:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800788c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007892:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b04      	cmp	r3, #4
 800789e:	d10c      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80078a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078a6:	4b16      	ldr	r3, [pc, #88]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	08db      	lsrs	r3, r3, #3
 80078ac:	f003 0303 	and.w	r3, r3, #3
 80078b0:	4a14      	ldr	r2, [pc, #80]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80078b2:	fa22 f303 	lsr.w	r3, r2, r3
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b8:	e01e      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ba:	4b11      	ldr	r3, [pc, #68]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c6:	d106      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80078c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ce:	d102      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078d0:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d4:	e010      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078d6:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e2:	d106      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80078e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ea:	d102      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078ec:	4b07      	ldr	r3, [pc, #28]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f0:	e002      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80078f6:	e236      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80078f8:	e235      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078fe:	e232      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007900:	58024400 	.word	0x58024400
 8007904:	03d09000 	.word	0x03d09000
 8007908:	003d0900 	.word	0x003d0900
 800790c:	017d7840 	.word	0x017d7840
 8007910:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007918:	e225      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800791a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800791e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007922:	430b      	orrs	r3, r1
 8007924:	f040 8085 	bne.w	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007928:	4b9c      	ldr	r3, [pc, #624]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800792a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007930:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007938:	d06b      	beq.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007940:	d874      	bhi.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007948:	d056      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007950:	d86c      	bhi.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007958:	d03b      	beq.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007960:	d864      	bhi.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007968:	d021      	beq.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007970:	d85c      	bhi.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797e:	d004      	beq.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007980:	e054      	b.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007982:	f7fe fb5f 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 8007986:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007988:	e1ed      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800798a:	4b84      	ldr	r3, [pc, #528]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007996:	d107      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007998:	f107 0318 	add.w	r3, r7, #24
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fa05 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a6:	e1de      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ac:	e1db      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079ae:	4b7b      	ldr	r3, [pc, #492]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ba:	d107      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079bc:	f107 030c 	add.w	r3, r7, #12
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fb47 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ca:	e1cc      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079d0:	e1c9      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079d2:	4b72      	ldr	r3, [pc, #456]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d109      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079de:	4b6f      	ldr	r3, [pc, #444]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	4a6d      	ldr	r2, [pc, #436]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079f0:	e1b9      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f6:	e1b6      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80079f8:	4b68      	ldr	r3, [pc, #416]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a04:	d102      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007a06:	4b67      	ldr	r3, [pc, #412]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a0a:	e1ac      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a10:	e1a9      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a12:	4b62      	ldr	r3, [pc, #392]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a1e:	d102      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007a20:	4b61      	ldr	r3, [pc, #388]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a24:	e19f      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a2a:	e19c      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a30:	e199      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a36:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	d173      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007a3e:	4b57      	ldr	r3, [pc, #348]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a46:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a4e:	d02f      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a56:	d863      	bhi.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a64:	d012      	beq.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007a66:	e05b      	b.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a68:	4b4c      	ldr	r3, [pc, #304]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a74:	d107      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a76:	f107 0318 	add.w	r3, r7, #24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f996 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a84:	e16f      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a8a:	e16c      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a8c:	4b43      	ldr	r3, [pc, #268]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a98:	d107      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a9a:	f107 030c 	add.w	r3, r7, #12
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fad8 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aa8:	e15d      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aae:	e15a      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ab0:	4b3a      	ldr	r3, [pc, #232]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007aba:	4b38      	ldr	r3, [pc, #224]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d10c      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d109      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007acc:	4b33      	ldr	r3, [pc, #204]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	08db      	lsrs	r3, r3, #3
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	4a32      	ldr	r2, [pc, #200]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ade:	e01e      	b.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ae0:	4b2e      	ldr	r3, [pc, #184]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aec:	d106      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007af4:	d102      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007af6:	4b2b      	ldr	r3, [pc, #172]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007afa:	e010      	b.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007afc:	4b27      	ldr	r3, [pc, #156]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b08:	d106      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b10:	d102      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b12:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b16:	e002      	b.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b1c:	e123      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b1e:	e122      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b24:	e11f      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	d13c      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007b32:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b3a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b48:	d012      	beq.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007b4a:	e023      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b4c:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b58:	d107      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fbcc 	bl	80082fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b68:	e0fd      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b6e:	e0fa      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b70:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b7c:	d107      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b7e:	f107 0318 	add.w	r3, r7, #24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f912 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b8c:	e0eb      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b92:	e0e8      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b98:	e0e5      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b9a:	bf00      	nop
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	03d09000 	.word	0x03d09000
 8007ba4:	003d0900 	.word	0x003d0900
 8007ba8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	f040 8085 	bne.w	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007bba:	4b6d      	ldr	r3, [pc, #436]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007bc2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bca:	d06b      	beq.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bd2:	d874      	bhi.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bda:	d056      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be2:	d86c      	bhi.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bea:	d03b      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bf2:	d864      	bhi.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bfa:	d021      	beq.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c02:	d85c      	bhi.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c10:	d004      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007c12:	e054      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007c14:	f000 f8b4 	bl	8007d80 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c18:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c1a:	e0a4      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c1c:	4b54      	ldr	r3, [pc, #336]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c28:	d107      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c2a:	f107 0318 	add.w	r3, r7, #24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 f8bc 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c38:	e095      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c3e:	e092      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c40:	4b4b      	ldr	r3, [pc, #300]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c4c:	d107      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 f9fe 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c5c:	e083      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c62:	e080      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c64:	4b42      	ldr	r3, [pc, #264]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d109      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c70:	4b3f      	ldr	r3, [pc, #252]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	08db      	lsrs	r3, r3, #3
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	4a3e      	ldr	r2, [pc, #248]	; (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c82:	e070      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c88:	e06d      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c8a:	4b39      	ldr	r3, [pc, #228]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007c98:	4b37      	ldr	r3, [pc, #220]	; (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c9c:	e063      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca2:	e060      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ca4:	4b32      	ldr	r3, [pc, #200]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cb0:	d102      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8007cb2:	4b32      	ldr	r3, [pc, #200]	; (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cb6:	e056      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cbc:	e053      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc2:	e050      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	d148      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007cd0:	4b27      	ldr	r3, [pc, #156]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cd8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ce0:	d02a      	beq.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ce8:	d838      	bhi.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cf6:	d00d      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007cf8:	e030      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cfa:	4b1d      	ldr	r3, [pc, #116]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d06:	d102      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8007d08:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d0c:	e02b      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d12:	e028      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d14:	4b16      	ldr	r3, [pc, #88]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d20:	d107      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fae8 	bl	80082fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d30:	e019      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d36:	e016      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d38:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d44:	d107      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d46:	f107 0318 	add.w	r3, r7, #24
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f82e 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d54:	e007      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d5a:	e004      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d60:	e001      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3740      	adds	r7, #64	; 0x40
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	58024400 	.word	0x58024400
 8007d74:	03d09000 	.word	0x03d09000
 8007d78:	003d0900 	.word	0x003d0900
 8007d7c:	017d7840 	.word	0x017d7840

08007d80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d84:	f7fe f92e 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	091b      	lsrs	r3, r3, #4
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	4904      	ldr	r1, [pc, #16]	; (8007da8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d96:	5ccb      	ldrb	r3, [r1, r3]
 8007d98:	f003 031f 	and.w	r3, r3, #31
 8007d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	58024400 	.word	0x58024400
 8007da8:	08009cf4 	.word	0x08009cf4

08007dac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b089      	sub	sp, #36	; 0x24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007db4:	4ba1      	ldr	r3, [pc, #644]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007dbe:	4b9f      	ldr	r3, [pc, #636]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	0b1b      	lsrs	r3, r3, #12
 8007dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007dca:	4b9c      	ldr	r3, [pc, #624]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	091b      	lsrs	r3, r3, #4
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007dd6:	4b99      	ldr	r3, [pc, #612]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dda:	08db      	lsrs	r3, r3, #3
 8007ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	fb02 f303 	mul.w	r3, r2, r3
 8007de6:	ee07 3a90 	vmov	s15, r3
 8007dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8111 	beq.w	800801c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	f000 8083 	beq.w	8007f08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	f200 80a1 	bhi.w	8007f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d056      	beq.n	8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e16:	e099      	b.n	8007f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e18:	4b88      	ldr	r3, [pc, #544]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d02d      	beq.n	8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e24:	4b85      	ldr	r3, [pc, #532]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	08db      	lsrs	r3, r3, #3
 8007e2a:	f003 0303 	and.w	r3, r3, #3
 8007e2e:	4a84      	ldr	r2, [pc, #528]	; (8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e30:	fa22 f303 	lsr.w	r3, r2, r3
 8007e34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e4e:	4b7b      	ldr	r3, [pc, #492]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e7e:	e087      	b.n	8007f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e92:	4b6a      	ldr	r3, [pc, #424]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ec2:	e065      	b.n	8007f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ece:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800804c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed6:	4b59      	ldr	r3, [pc, #356]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f06:	e043      	b.n	8007f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f1a:	4b48      	ldr	r3, [pc, #288]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f4a:	e021      	b.n	8007f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	ee07 3a90 	vmov	s15, r3
 8007f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800804c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5e:	4b37      	ldr	r3, [pc, #220]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007f90:	4b2a      	ldr	r3, [pc, #168]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	0a5b      	lsrs	r3, r3, #9
 8007f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fb6:	ee17 2a90 	vmov	r2, s15
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007fbe:	4b1f      	ldr	r3, [pc, #124]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc8:	ee07 3a90 	vmov	s15, r3
 8007fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fe4:	ee17 2a90 	vmov	r2, s15
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007fec:	4b13      	ldr	r3, [pc, #76]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	0e1b      	lsrs	r3, r3, #24
 8007ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008006:	edd7 6a07 	vldr	s13, [r7, #28]
 800800a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800800e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008012:	ee17 2a90 	vmov	r2, s15
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800801a:	e008      	b.n	800802e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	609a      	str	r2, [r3, #8]
}
 800802e:	bf00      	nop
 8008030:	3724      	adds	r7, #36	; 0x24
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	58024400 	.word	0x58024400
 8008040:	03d09000 	.word	0x03d09000
 8008044:	46000000 	.word	0x46000000
 8008048:	4c742400 	.word	0x4c742400
 800804c:	4a742400 	.word	0x4a742400
 8008050:	4bbebc20 	.word	0x4bbebc20

08008054 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008054:	b480      	push	{r7}
 8008056:	b089      	sub	sp, #36	; 0x24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800805c:	4ba1      	ldr	r3, [pc, #644]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	f003 0303 	and.w	r3, r3, #3
 8008064:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008066:	4b9f      	ldr	r3, [pc, #636]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	0d1b      	lsrs	r3, r3, #20
 800806c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008070:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008072:	4b9c      	ldr	r3, [pc, #624]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008076:	0a1b      	lsrs	r3, r3, #8
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800807e:	4b99      	ldr	r3, [pc, #612]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008082:	08db      	lsrs	r3, r3, #3
 8008084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	fb02 f303 	mul.w	r3, r2, r3
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8111 	beq.w	80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	f000 8083 	beq.w	80081b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	f200 80a1 	bhi.w	80081f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d056      	beq.n	800816c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80080be:	e099      	b.n	80081f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080c0:	4b88      	ldr	r3, [pc, #544]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d02d      	beq.n	8008128 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080cc:	4b85      	ldr	r3, [pc, #532]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	08db      	lsrs	r3, r3, #3
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	4a84      	ldr	r2, [pc, #528]	; (80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
 80080dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	ee07 3a90 	vmov	s15, r3
 80080e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080f6:	4b7b      	ldr	r3, [pc, #492]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008106:	ed97 6a03 	vldr	s12, [r7, #12]
 800810a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800810e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800811a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800811e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008126:	e087      	b.n	8008238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008132:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813a:	4b6a      	ldr	r3, [pc, #424]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800814a:	ed97 6a03 	vldr	s12, [r7, #12]
 800814e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800815a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800815e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800816a:	e065      	b.n	8008238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008176:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800817a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800817e:	4b59      	ldr	r3, [pc, #356]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008192:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800819a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ae:	e043      	b.n	8008238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80081be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c2:	4b48      	ldr	r3, [pc, #288]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081f2:	e021      	b.n	8008238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008206:	4b37      	ldr	r3, [pc, #220]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008216:	ed97 6a03 	vldr	s12, [r7, #12]
 800821a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800821e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800822a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800822e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008236:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008238:	4b2a      	ldr	r3, [pc, #168]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823c:	0a5b      	lsrs	r3, r3, #9
 800823e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800824e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008252:	edd7 6a07 	vldr	s13, [r7, #28]
 8008256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800825a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825e:	ee17 2a90 	vmov	r2, s15
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008266:	4b1f      	ldr	r3, [pc, #124]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	0c1b      	lsrs	r3, r3, #16
 800826c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800827c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008280:	edd7 6a07 	vldr	s13, [r7, #28]
 8008284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800828c:	ee17 2a90 	vmov	r2, s15
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008294:	4b13      	ldr	r3, [pc, #76]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008298:	0e1b      	lsrs	r3, r3, #24
 800829a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ba:	ee17 2a90 	vmov	r2, s15
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082c2:	e008      	b.n	80082d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	609a      	str	r2, [r3, #8]
}
 80082d6:	bf00      	nop
 80082d8:	3724      	adds	r7, #36	; 0x24
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	58024400 	.word	0x58024400
 80082e8:	03d09000 	.word	0x03d09000
 80082ec:	46000000 	.word	0x46000000
 80082f0:	4c742400 	.word	0x4c742400
 80082f4:	4a742400 	.word	0x4a742400
 80082f8:	4bbebc20 	.word	0x4bbebc20

080082fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	; 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008304:	4ba0      	ldr	r3, [pc, #640]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800830e:	4b9e      	ldr	r3, [pc, #632]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	091b      	lsrs	r3, r3, #4
 8008314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008318:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800831a:	4b9b      	ldr	r3, [pc, #620]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008324:	4b98      	ldr	r3, [pc, #608]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008328:	08db      	lsrs	r3, r3, #3
 800832a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	fb02 f303 	mul.w	r3, r2, r3
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 8111 	beq.w	800856a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b02      	cmp	r3, #2
 800834c:	f000 8083 	beq.w	8008456 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b02      	cmp	r3, #2
 8008354:	f200 80a1 	bhi.w	800849a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d056      	beq.n	8008412 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008364:	e099      	b.n	800849a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008366:	4b88      	ldr	r3, [pc, #544]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d02d      	beq.n	80083ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008372:	4b85      	ldr	r3, [pc, #532]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	08db      	lsrs	r3, r3, #3
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	4a83      	ldr	r2, [pc, #524]	; (800858c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800837e:	fa22 f303 	lsr.w	r3, r2, r3
 8008382:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	ee07 3a90 	vmov	s15, r3
 8008394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839c:	4b7a      	ldr	r3, [pc, #488]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a4:	ee07 3a90 	vmov	s15, r3
 80083a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80083b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083cc:	e087      	b.n	80084de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008594 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80083dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e0:	4b69      	ldr	r3, [pc, #420]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e8:	ee07 3a90 	vmov	s15, r3
 80083ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008410:	e065      	b.n	80084de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	ee07 3a90 	vmov	s15, r3
 8008418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008598 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008424:	4b58      	ldr	r3, [pc, #352]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800842c:	ee07 3a90 	vmov	s15, r3
 8008430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008434:	ed97 6a03 	vldr	s12, [r7, #12]
 8008438:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800843c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800844c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008450:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008454:	e043      	b.n	80084de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800859c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008468:	4b47      	ldr	r3, [pc, #284]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008470:	ee07 3a90 	vmov	s15, r3
 8008474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008478:	ed97 6a03 	vldr	s12, [r7, #12]
 800847c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800848c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008494:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008498:	e021      	b.n	80084de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008594 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80084a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ac:	4b36      	ldr	r3, [pc, #216]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80084de:	4b2a      	ldr	r3, [pc, #168]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e2:	0a5b      	lsrs	r3, r3, #9
 80084e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008504:	ee17 2a90 	vmov	r2, s15
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800850c:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008510:	0c1b      	lsrs	r3, r3, #16
 8008512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008526:	edd7 6a07 	vldr	s13, [r7, #28]
 800852a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800852e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008532:	ee17 2a90 	vmov	r2, s15
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800853a:	4b13      	ldr	r3, [pc, #76]	; (8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	0e1b      	lsrs	r3, r3, #24
 8008540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008544:	ee07 3a90 	vmov	s15, r3
 8008548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008554:	edd7 6a07 	vldr	s13, [r7, #28]
 8008558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800855c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008560:	ee17 2a90 	vmov	r2, s15
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008568:	e008      	b.n	800857c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	609a      	str	r2, [r3, #8]
}
 800857c:	bf00      	nop
 800857e:	3724      	adds	r7, #36	; 0x24
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	58024400 	.word	0x58024400
 800858c:	03d09000 	.word	0x03d09000
 8008590:	46000000 	.word	0x46000000
 8008594:	4c742400 	.word	0x4c742400
 8008598:	4a742400 	.word	0x4a742400
 800859c:	4bbebc20 	.word	0x4bbebc20

080085a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085ae:	4b53      	ldr	r3, [pc, #332]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80085b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d101      	bne.n	80085be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e099      	b.n	80086f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085be:	4b4f      	ldr	r3, [pc, #316]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a4e      	ldr	r2, [pc, #312]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80085c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ca:	f7f8 ff4f 	bl	800146c <HAL_GetTick>
 80085ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085d0:	e008      	b.n	80085e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80085d2:	f7f8 ff4b 	bl	800146c <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d901      	bls.n	80085e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e086      	b.n	80086f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085e4:	4b45      	ldr	r3, [pc, #276]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1f0      	bne.n	80085d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80085f0:	4b42      	ldr	r3, [pc, #264]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	031b      	lsls	r3, r3, #12
 80085fe:	493f      	ldr	r1, [pc, #252]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008600:	4313      	orrs	r3, r2
 8008602:	628b      	str	r3, [r1, #40]	; 0x28
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	3b01      	subs	r3, #1
 800860a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	3b01      	subs	r3, #1
 8008614:	025b      	lsls	r3, r3, #9
 8008616:	b29b      	uxth	r3, r3
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	3b01      	subs	r3, #1
 8008620:	041b      	lsls	r3, r3, #16
 8008622:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	3b01      	subs	r3, #1
 800862e:	061b      	lsls	r3, r3, #24
 8008630:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008634:	4931      	ldr	r1, [pc, #196]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008636:	4313      	orrs	r3, r2
 8008638:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800863a:	4b30      	ldr	r3, [pc, #192]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	492d      	ldr	r1, [pc, #180]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008648:	4313      	orrs	r3, r2
 800864a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800864c:	4b2b      	ldr	r3, [pc, #172]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	f023 0220 	bic.w	r2, r3, #32
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	4928      	ldr	r1, [pc, #160]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 800865a:	4313      	orrs	r3, r2
 800865c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800865e:	4b27      	ldr	r3, [pc, #156]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	4a26      	ldr	r2, [pc, #152]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008664:	f023 0310 	bic.w	r3, r3, #16
 8008668:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800866a:	4b24      	ldr	r3, [pc, #144]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 800866c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <RCCEx_PLL2_Config+0x160>)
 8008670:	4013      	ands	r3, r2
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	69d2      	ldr	r2, [r2, #28]
 8008676:	00d2      	lsls	r2, r2, #3
 8008678:	4920      	ldr	r1, [pc, #128]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 800867a:	4313      	orrs	r3, r2
 800867c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800867e:	4b1f      	ldr	r3, [pc, #124]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	4a1e      	ldr	r2, [pc, #120]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008684:	f043 0310 	orr.w	r3, r3, #16
 8008688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008690:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008694:	4a19      	ldr	r2, [pc, #100]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 8008696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800869a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800869c:	e00f      	b.n	80086be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d106      	bne.n	80086b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086a4:	4b15      	ldr	r3, [pc, #84]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	4a14      	ldr	r2, [pc, #80]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80086aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086b0:	e005      	b.n	80086be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	4a11      	ldr	r2, [pc, #68]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80086b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a0e      	ldr	r2, [pc, #56]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80086c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ca:	f7f8 fecf 	bl	800146c <HAL_GetTick>
 80086ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086d0:	e008      	b.n	80086e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086d2:	f7f8 fecb 	bl	800146c <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d901      	bls.n	80086e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e006      	b.n	80086f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086e4:	4b05      	ldr	r3, [pc, #20]	; (80086fc <RCCEx_PLL2_Config+0x15c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
 8008700:	ffff0007 	.word	0xffff0007

08008704 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008712:	4b53      	ldr	r3, [pc, #332]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b03      	cmp	r3, #3
 800871c:	d101      	bne.n	8008722 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e099      	b.n	8008856 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008722:	4b4f      	ldr	r3, [pc, #316]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a4e      	ldr	r2, [pc, #312]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 8008728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800872c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800872e:	f7f8 fe9d 	bl	800146c <HAL_GetTick>
 8008732:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008734:	e008      	b.n	8008748 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008736:	f7f8 fe99 	bl	800146c <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	2b02      	cmp	r3, #2
 8008742:	d901      	bls.n	8008748 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e086      	b.n	8008856 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008748:	4b45      	ldr	r3, [pc, #276]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1f0      	bne.n	8008736 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008754:	4b42      	ldr	r3, [pc, #264]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	051b      	lsls	r3, r3, #20
 8008762:	493f      	ldr	r1, [pc, #252]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 8008764:	4313      	orrs	r3, r2
 8008766:	628b      	str	r3, [r1, #40]	; 0x28
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	3b01      	subs	r3, #1
 800876e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	3b01      	subs	r3, #1
 8008778:	025b      	lsls	r3, r3, #9
 800877a:	b29b      	uxth	r3, r3
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	3b01      	subs	r3, #1
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	3b01      	subs	r3, #1
 8008792:	061b      	lsls	r3, r3, #24
 8008794:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008798:	4931      	ldr	r1, [pc, #196]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 800879a:	4313      	orrs	r3, r2
 800879c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800879e:	4b30      	ldr	r3, [pc, #192]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	492d      	ldr	r1, [pc, #180]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087b0:	4b2b      	ldr	r3, [pc, #172]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	4928      	ldr	r1, [pc, #160]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80087c2:	4b27      	ldr	r3, [pc, #156]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	4a26      	ldr	r2, [pc, #152]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087d2:	4b24      	ldr	r3, [pc, #144]	; (8008864 <RCCEx_PLL3_Config+0x160>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	69d2      	ldr	r2, [r2, #28]
 80087da:	00d2      	lsls	r2, r2, #3
 80087dc:	4920      	ldr	r1, [pc, #128]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087e2:	4b1f      	ldr	r3, [pc, #124]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	4a1e      	ldr	r2, [pc, #120]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087f4:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f8:	4a19      	ldr	r2, [pc, #100]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 80087fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008800:	e00f      	b.n	8008822 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d106      	bne.n	8008816 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008808:	4b15      	ldr	r3, [pc, #84]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	4a14      	ldr	r2, [pc, #80]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 800880e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008814:	e005      	b.n	8008822 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008816:	4b12      	ldr	r3, [pc, #72]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 8008818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881a:	4a11      	ldr	r2, [pc, #68]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 800881c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008820:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a0e      	ldr	r2, [pc, #56]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 8008828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800882c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882e:	f7f8 fe1d 	bl	800146c <HAL_GetTick>
 8008832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008834:	e008      	b.n	8008848 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008836:	f7f8 fe19 	bl	800146c <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	d901      	bls.n	8008848 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e006      	b.n	8008856 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <RCCEx_PLL3_Config+0x15c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0f0      	beq.n	8008836 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
 8008864:	ffff0007 	.word	0xffff0007

08008868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e042      	b.n	8008900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f8 fc27 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2224      	movs	r2, #36	; 0x24
 8008896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0201 	bic.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f82c 	bl	8008908 <UART_SetConfig>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d101      	bne.n	80088ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e022      	b.n	8008900 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fe8c 	bl	80095e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 ff13 	bl	8009724 <UART_CheckIdleState>
 80088fe:	4603      	mov	r3, r0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800890c:	b092      	sub	sp, #72	; 0x48
 800890e:	af00      	add	r7, sp, #0
 8008910:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	431a      	orrs	r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	431a      	orrs	r2, r3
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	4313      	orrs	r3, r2
 800892e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4bbe      	ldr	r3, [pc, #760]	; (8008c30 <UART_SetConfig+0x328>)
 8008938:	4013      	ands	r3, r2
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008940:	430b      	orrs	r3, r1
 8008942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4ab3      	ldr	r2, [pc, #716]	; (8008c34 <UART_SetConfig+0x32c>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d004      	beq.n	8008974 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008970:	4313      	orrs	r3, r2
 8008972:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	4baf      	ldr	r3, [pc, #700]	; (8008c38 <UART_SetConfig+0x330>)
 800897c:	4013      	ands	r3, r2
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008984:	430b      	orrs	r3, r1
 8008986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	f023 010f 	bic.w	r1, r3, #15
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4aa6      	ldr	r2, [pc, #664]	; (8008c3c <UART_SetConfig+0x334>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d177      	bne.n	8008a98 <UART_SetConfig+0x190>
 80089a8:	4ba5      	ldr	r3, [pc, #660]	; (8008c40 <UART_SetConfig+0x338>)
 80089aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089b0:	2b28      	cmp	r3, #40	; 0x28
 80089b2:	d86d      	bhi.n	8008a90 <UART_SetConfig+0x188>
 80089b4:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <UART_SetConfig+0xb4>)
 80089b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ba:	bf00      	nop
 80089bc:	08008a61 	.word	0x08008a61
 80089c0:	08008a91 	.word	0x08008a91
 80089c4:	08008a91 	.word	0x08008a91
 80089c8:	08008a91 	.word	0x08008a91
 80089cc:	08008a91 	.word	0x08008a91
 80089d0:	08008a91 	.word	0x08008a91
 80089d4:	08008a91 	.word	0x08008a91
 80089d8:	08008a91 	.word	0x08008a91
 80089dc:	08008a69 	.word	0x08008a69
 80089e0:	08008a91 	.word	0x08008a91
 80089e4:	08008a91 	.word	0x08008a91
 80089e8:	08008a91 	.word	0x08008a91
 80089ec:	08008a91 	.word	0x08008a91
 80089f0:	08008a91 	.word	0x08008a91
 80089f4:	08008a91 	.word	0x08008a91
 80089f8:	08008a91 	.word	0x08008a91
 80089fc:	08008a71 	.word	0x08008a71
 8008a00:	08008a91 	.word	0x08008a91
 8008a04:	08008a91 	.word	0x08008a91
 8008a08:	08008a91 	.word	0x08008a91
 8008a0c:	08008a91 	.word	0x08008a91
 8008a10:	08008a91 	.word	0x08008a91
 8008a14:	08008a91 	.word	0x08008a91
 8008a18:	08008a91 	.word	0x08008a91
 8008a1c:	08008a79 	.word	0x08008a79
 8008a20:	08008a91 	.word	0x08008a91
 8008a24:	08008a91 	.word	0x08008a91
 8008a28:	08008a91 	.word	0x08008a91
 8008a2c:	08008a91 	.word	0x08008a91
 8008a30:	08008a91 	.word	0x08008a91
 8008a34:	08008a91 	.word	0x08008a91
 8008a38:	08008a91 	.word	0x08008a91
 8008a3c:	08008a81 	.word	0x08008a81
 8008a40:	08008a91 	.word	0x08008a91
 8008a44:	08008a91 	.word	0x08008a91
 8008a48:	08008a91 	.word	0x08008a91
 8008a4c:	08008a91 	.word	0x08008a91
 8008a50:	08008a91 	.word	0x08008a91
 8008a54:	08008a91 	.word	0x08008a91
 8008a58:	08008a91 	.word	0x08008a91
 8008a5c:	08008a89 	.word	0x08008a89
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e326      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6e:	e322      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008a70:	2308      	movs	r3, #8
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a76:	e31e      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008a78:	2310      	movs	r3, #16
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7e:	e31a      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008a80:	2320      	movs	r3, #32
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a86:	e316      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008a88:	2340      	movs	r3, #64	; 0x40
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8e:	e312      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008a90:	2380      	movs	r3, #128	; 0x80
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e30e      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a69      	ldr	r2, [pc, #420]	; (8008c44 <UART_SetConfig+0x33c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d130      	bne.n	8008b04 <UART_SetConfig+0x1fc>
 8008aa2:	4b67      	ldr	r3, [pc, #412]	; (8008c40 <UART_SetConfig+0x338>)
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	d826      	bhi.n	8008afc <UART_SetConfig+0x1f4>
 8008aae:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <UART_SetConfig+0x1ac>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008acd 	.word	0x08008acd
 8008ab8:	08008ad5 	.word	0x08008ad5
 8008abc:	08008add 	.word	0x08008add
 8008ac0:	08008ae5 	.word	0x08008ae5
 8008ac4:	08008aed 	.word	0x08008aed
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	2300      	movs	r3, #0
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad2:	e2f0      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ada:	e2ec      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008adc:	2308      	movs	r3, #8
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e2e8      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e2e4      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008aec:	2320      	movs	r3, #32
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e2e0      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008af4:	2340      	movs	r3, #64	; 0x40
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e2dc      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008afc:	2380      	movs	r3, #128	; 0x80
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e2d8      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a4f      	ldr	r2, [pc, #316]	; (8008c48 <UART_SetConfig+0x340>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d130      	bne.n	8008b70 <UART_SetConfig+0x268>
 8008b0e:	4b4c      	ldr	r3, [pc, #304]	; (8008c40 <UART_SetConfig+0x338>)
 8008b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	d826      	bhi.n	8008b68 <UART_SetConfig+0x260>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <UART_SetConfig+0x218>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b39 	.word	0x08008b39
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b49 	.word	0x08008b49
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b59 	.word	0x08008b59
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3e:	e2ba      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b46:	e2b6      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4e:	e2b2      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e2ae      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008b58:	2320      	movs	r3, #32
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5e:	e2aa      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008b60:	2340      	movs	r3, #64	; 0x40
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b66:	e2a6      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008b68:	2380      	movs	r3, #128	; 0x80
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e2a2      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a35      	ldr	r2, [pc, #212]	; (8008c4c <UART_SetConfig+0x344>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d130      	bne.n	8008bdc <UART_SetConfig+0x2d4>
 8008b7a:	4b31      	ldr	r3, [pc, #196]	; (8008c40 <UART_SetConfig+0x338>)
 8008b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	2b05      	cmp	r3, #5
 8008b84:	d826      	bhi.n	8008bd4 <UART_SetConfig+0x2cc>
 8008b86:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <UART_SetConfig+0x284>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008ba5 	.word	0x08008ba5
 8008b90:	08008bad 	.word	0x08008bad
 8008b94:	08008bb5 	.word	0x08008bb5
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008bc5 	.word	0x08008bc5
 8008ba0:	08008bcd 	.word	0x08008bcd
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008baa:	e284      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb2:	e280      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e27c      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e278      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e274      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008bcc:	2340      	movs	r3, #64	; 0x40
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e270      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008bd4:	2380      	movs	r3, #128	; 0x80
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e26c      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1b      	ldr	r2, [pc, #108]	; (8008c50 <UART_SetConfig+0x348>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d142      	bne.n	8008c6c <UART_SetConfig+0x364>
 8008be6:	4b16      	ldr	r3, [pc, #88]	; (8008c40 <UART_SetConfig+0x338>)
 8008be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	d838      	bhi.n	8008c64 <UART_SetConfig+0x35c>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <UART_SetConfig+0x2f0>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c11 	.word	0x08008c11
 8008bfc:	08008c19 	.word	0x08008c19
 8008c00:	08008c21 	.word	0x08008c21
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c55 	.word	0x08008c55
 8008c0c:	08008c5d 	.word	0x08008c5d
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c16:	e24e      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1e:	e24a      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008c20:	2308      	movs	r3, #8
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e246      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e242      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008c30:	cfff69f3 	.word	0xcfff69f3
 8008c34:	58000c00 	.word	0x58000c00
 8008c38:	11fff4ff 	.word	0x11fff4ff
 8008c3c:	40011000 	.word	0x40011000
 8008c40:	58024400 	.word	0x58024400
 8008c44:	40004400 	.word	0x40004400
 8008c48:	40004800 	.word	0x40004800
 8008c4c:	40004c00 	.word	0x40004c00
 8008c50:	40005000 	.word	0x40005000
 8008c54:	2320      	movs	r3, #32
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5a:	e22c      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008c5c:	2340      	movs	r3, #64	; 0x40
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c62:	e228      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008c64:	2380      	movs	r3, #128	; 0x80
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6a:	e224      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4ab1      	ldr	r2, [pc, #708]	; (8008f38 <UART_SetConfig+0x630>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d176      	bne.n	8008d64 <UART_SetConfig+0x45c>
 8008c76:	4bb1      	ldr	r3, [pc, #708]	; (8008f3c <UART_SetConfig+0x634>)
 8008c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c7e:	2b28      	cmp	r3, #40	; 0x28
 8008c80:	d86c      	bhi.n	8008d5c <UART_SetConfig+0x454>
 8008c82:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <UART_SetConfig+0x380>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008d2d 	.word	0x08008d2d
 8008c8c:	08008d5d 	.word	0x08008d5d
 8008c90:	08008d5d 	.word	0x08008d5d
 8008c94:	08008d5d 	.word	0x08008d5d
 8008c98:	08008d5d 	.word	0x08008d5d
 8008c9c:	08008d5d 	.word	0x08008d5d
 8008ca0:	08008d5d 	.word	0x08008d5d
 8008ca4:	08008d5d 	.word	0x08008d5d
 8008ca8:	08008d35 	.word	0x08008d35
 8008cac:	08008d5d 	.word	0x08008d5d
 8008cb0:	08008d5d 	.word	0x08008d5d
 8008cb4:	08008d5d 	.word	0x08008d5d
 8008cb8:	08008d5d 	.word	0x08008d5d
 8008cbc:	08008d5d 	.word	0x08008d5d
 8008cc0:	08008d5d 	.word	0x08008d5d
 8008cc4:	08008d5d 	.word	0x08008d5d
 8008cc8:	08008d3d 	.word	0x08008d3d
 8008ccc:	08008d5d 	.word	0x08008d5d
 8008cd0:	08008d5d 	.word	0x08008d5d
 8008cd4:	08008d5d 	.word	0x08008d5d
 8008cd8:	08008d5d 	.word	0x08008d5d
 8008cdc:	08008d5d 	.word	0x08008d5d
 8008ce0:	08008d5d 	.word	0x08008d5d
 8008ce4:	08008d5d 	.word	0x08008d5d
 8008ce8:	08008d45 	.word	0x08008d45
 8008cec:	08008d5d 	.word	0x08008d5d
 8008cf0:	08008d5d 	.word	0x08008d5d
 8008cf4:	08008d5d 	.word	0x08008d5d
 8008cf8:	08008d5d 	.word	0x08008d5d
 8008cfc:	08008d5d 	.word	0x08008d5d
 8008d00:	08008d5d 	.word	0x08008d5d
 8008d04:	08008d5d 	.word	0x08008d5d
 8008d08:	08008d4d 	.word	0x08008d4d
 8008d0c:	08008d5d 	.word	0x08008d5d
 8008d10:	08008d5d 	.word	0x08008d5d
 8008d14:	08008d5d 	.word	0x08008d5d
 8008d18:	08008d5d 	.word	0x08008d5d
 8008d1c:	08008d5d 	.word	0x08008d5d
 8008d20:	08008d5d 	.word	0x08008d5d
 8008d24:	08008d5d 	.word	0x08008d5d
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d32:	e1c0      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008d34:	2304      	movs	r3, #4
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3a:	e1bc      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d42:	e1b8      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4a:	e1b4      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e1b0      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008d54:	2340      	movs	r3, #64	; 0x40
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5a:	e1ac      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008d5c:	2380      	movs	r3, #128	; 0x80
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d62:	e1a8      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a75      	ldr	r2, [pc, #468]	; (8008f40 <UART_SetConfig+0x638>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d130      	bne.n	8008dd0 <UART_SetConfig+0x4c8>
 8008d6e:	4b73      	ldr	r3, [pc, #460]	; (8008f3c <UART_SetConfig+0x634>)
 8008d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d826      	bhi.n	8008dc8 <UART_SetConfig+0x4c0>
 8008d7a:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <UART_SetConfig+0x478>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9e:	e18a      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008da0:	2304      	movs	r3, #4
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da6:	e186      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e182      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008db0:	2310      	movs	r3, #16
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e17e      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008db8:	2320      	movs	r3, #32
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dbe:	e17a      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc6:	e176      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008dc8:	2380      	movs	r3, #128	; 0x80
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dce:	e172      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a5b      	ldr	r2, [pc, #364]	; (8008f44 <UART_SetConfig+0x63c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d130      	bne.n	8008e3c <UART_SetConfig+0x534>
 8008dda:	4b58      	ldr	r3, [pc, #352]	; (8008f3c <UART_SetConfig+0x634>)
 8008ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d826      	bhi.n	8008e34 <UART_SetConfig+0x52c>
 8008de6:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <UART_SetConfig+0x4e4>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e05 	.word	0x08008e05
 8008df0:	08008e0d 	.word	0x08008e0d
 8008df4:	08008e15 	.word	0x08008e15
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008e25 	.word	0x08008e25
 8008e00:	08008e2d 	.word	0x08008e2d
 8008e04:	2300      	movs	r3, #0
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0a:	e154      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e12:	e150      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1a:	e14c      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e22:	e148      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008e24:	2320      	movs	r3, #32
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2a:	e144      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008e2c:	2340      	movs	r3, #64	; 0x40
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e32:	e140      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008e34:	2380      	movs	r3, #128	; 0x80
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3a:	e13c      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a41      	ldr	r2, [pc, #260]	; (8008f48 <UART_SetConfig+0x640>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	f040 8082 	bne.w	8008f4c <UART_SetConfig+0x644>
 8008e48:	4b3c      	ldr	r3, [pc, #240]	; (8008f3c <UART_SetConfig+0x634>)
 8008e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e50:	2b28      	cmp	r3, #40	; 0x28
 8008e52:	d86d      	bhi.n	8008f30 <UART_SetConfig+0x628>
 8008e54:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <UART_SetConfig+0x554>)
 8008e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5a:	bf00      	nop
 8008e5c:	08008f01 	.word	0x08008f01
 8008e60:	08008f31 	.word	0x08008f31
 8008e64:	08008f31 	.word	0x08008f31
 8008e68:	08008f31 	.word	0x08008f31
 8008e6c:	08008f31 	.word	0x08008f31
 8008e70:	08008f31 	.word	0x08008f31
 8008e74:	08008f31 	.word	0x08008f31
 8008e78:	08008f31 	.word	0x08008f31
 8008e7c:	08008f09 	.word	0x08008f09
 8008e80:	08008f31 	.word	0x08008f31
 8008e84:	08008f31 	.word	0x08008f31
 8008e88:	08008f31 	.word	0x08008f31
 8008e8c:	08008f31 	.word	0x08008f31
 8008e90:	08008f31 	.word	0x08008f31
 8008e94:	08008f31 	.word	0x08008f31
 8008e98:	08008f31 	.word	0x08008f31
 8008e9c:	08008f11 	.word	0x08008f11
 8008ea0:	08008f31 	.word	0x08008f31
 8008ea4:	08008f31 	.word	0x08008f31
 8008ea8:	08008f31 	.word	0x08008f31
 8008eac:	08008f31 	.word	0x08008f31
 8008eb0:	08008f31 	.word	0x08008f31
 8008eb4:	08008f31 	.word	0x08008f31
 8008eb8:	08008f31 	.word	0x08008f31
 8008ebc:	08008f19 	.word	0x08008f19
 8008ec0:	08008f31 	.word	0x08008f31
 8008ec4:	08008f31 	.word	0x08008f31
 8008ec8:	08008f31 	.word	0x08008f31
 8008ecc:	08008f31 	.word	0x08008f31
 8008ed0:	08008f31 	.word	0x08008f31
 8008ed4:	08008f31 	.word	0x08008f31
 8008ed8:	08008f31 	.word	0x08008f31
 8008edc:	08008f21 	.word	0x08008f21
 8008ee0:	08008f31 	.word	0x08008f31
 8008ee4:	08008f31 	.word	0x08008f31
 8008ee8:	08008f31 	.word	0x08008f31
 8008eec:	08008f31 	.word	0x08008f31
 8008ef0:	08008f31 	.word	0x08008f31
 8008ef4:	08008f31 	.word	0x08008f31
 8008ef8:	08008f31 	.word	0x08008f31
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	2301      	movs	r3, #1
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f06:	e0d6      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0e:	e0d2      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008f10:	2308      	movs	r3, #8
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e0ce      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008f18:	2310      	movs	r3, #16
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1e:	e0ca      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008f20:	2320      	movs	r3, #32
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f26:	e0c6      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2e:	e0c2      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e0be      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8008f38:	40011400 	.word	0x40011400
 8008f3c:	58024400 	.word	0x58024400
 8008f40:	40007800 	.word	0x40007800
 8008f44:	40007c00 	.word	0x40007c00
 8008f48:	40011800 	.word	0x40011800
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4aad      	ldr	r2, [pc, #692]	; (8009208 <UART_SetConfig+0x900>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d176      	bne.n	8009044 <UART_SetConfig+0x73c>
 8008f56:	4bad      	ldr	r3, [pc, #692]	; (800920c <UART_SetConfig+0x904>)
 8008f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f5e:	2b28      	cmp	r3, #40	; 0x28
 8008f60:	d86c      	bhi.n	800903c <UART_SetConfig+0x734>
 8008f62:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <UART_SetConfig+0x660>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	0800900d 	.word	0x0800900d
 8008f6c:	0800903d 	.word	0x0800903d
 8008f70:	0800903d 	.word	0x0800903d
 8008f74:	0800903d 	.word	0x0800903d
 8008f78:	0800903d 	.word	0x0800903d
 8008f7c:	0800903d 	.word	0x0800903d
 8008f80:	0800903d 	.word	0x0800903d
 8008f84:	0800903d 	.word	0x0800903d
 8008f88:	08009015 	.word	0x08009015
 8008f8c:	0800903d 	.word	0x0800903d
 8008f90:	0800903d 	.word	0x0800903d
 8008f94:	0800903d 	.word	0x0800903d
 8008f98:	0800903d 	.word	0x0800903d
 8008f9c:	0800903d 	.word	0x0800903d
 8008fa0:	0800903d 	.word	0x0800903d
 8008fa4:	0800903d 	.word	0x0800903d
 8008fa8:	0800901d 	.word	0x0800901d
 8008fac:	0800903d 	.word	0x0800903d
 8008fb0:	0800903d 	.word	0x0800903d
 8008fb4:	0800903d 	.word	0x0800903d
 8008fb8:	0800903d 	.word	0x0800903d
 8008fbc:	0800903d 	.word	0x0800903d
 8008fc0:	0800903d 	.word	0x0800903d
 8008fc4:	0800903d 	.word	0x0800903d
 8008fc8:	08009025 	.word	0x08009025
 8008fcc:	0800903d 	.word	0x0800903d
 8008fd0:	0800903d 	.word	0x0800903d
 8008fd4:	0800903d 	.word	0x0800903d
 8008fd8:	0800903d 	.word	0x0800903d
 8008fdc:	0800903d 	.word	0x0800903d
 8008fe0:	0800903d 	.word	0x0800903d
 8008fe4:	0800903d 	.word	0x0800903d
 8008fe8:	0800902d 	.word	0x0800902d
 8008fec:	0800903d 	.word	0x0800903d
 8008ff0:	0800903d 	.word	0x0800903d
 8008ff4:	0800903d 	.word	0x0800903d
 8008ff8:	0800903d 	.word	0x0800903d
 8008ffc:	0800903d 	.word	0x0800903d
 8009000:	0800903d 	.word	0x0800903d
 8009004:	0800903d 	.word	0x0800903d
 8009008:	08009035 	.word	0x08009035
 800900c:	2301      	movs	r3, #1
 800900e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009012:	e050      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8009014:	2304      	movs	r3, #4
 8009016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901a:	e04c      	b.n	80090b6 <UART_SetConfig+0x7ae>
 800901c:	2308      	movs	r3, #8
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009022:	e048      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8009024:	2310      	movs	r3, #16
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902a:	e044      	b.n	80090b6 <UART_SetConfig+0x7ae>
 800902c:	2320      	movs	r3, #32
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009032:	e040      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8009034:	2340      	movs	r3, #64	; 0x40
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903a:	e03c      	b.n	80090b6 <UART_SetConfig+0x7ae>
 800903c:	2380      	movs	r3, #128	; 0x80
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009042:	e038      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a71      	ldr	r2, [pc, #452]	; (8009210 <UART_SetConfig+0x908>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d130      	bne.n	80090b0 <UART_SetConfig+0x7a8>
 800904e:	4b6f      	ldr	r3, [pc, #444]	; (800920c <UART_SetConfig+0x904>)
 8009050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b05      	cmp	r3, #5
 8009058:	d826      	bhi.n	80090a8 <UART_SetConfig+0x7a0>
 800905a:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <UART_SetConfig+0x758>)
 800905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009060:	08009079 	.word	0x08009079
 8009064:	08009081 	.word	0x08009081
 8009068:	08009089 	.word	0x08009089
 800906c:	08009091 	.word	0x08009091
 8009070:	08009099 	.word	0x08009099
 8009074:	080090a1 	.word	0x080090a1
 8009078:	2302      	movs	r3, #2
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907e:	e01a      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8009080:	2304      	movs	r3, #4
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009086:	e016      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8009088:	2308      	movs	r3, #8
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908e:	e012      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8009090:	2310      	movs	r3, #16
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009096:	e00e      	b.n	80090b6 <UART_SetConfig+0x7ae>
 8009098:	2320      	movs	r3, #32
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909e:	e00a      	b.n	80090b6 <UART_SetConfig+0x7ae>
 80090a0:	2340      	movs	r3, #64	; 0x40
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a6:	e006      	b.n	80090b6 <UART_SetConfig+0x7ae>
 80090a8:	2380      	movs	r3, #128	; 0x80
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ae:	e002      	b.n	80090b6 <UART_SetConfig+0x7ae>
 80090b0:	2380      	movs	r3, #128	; 0x80
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a55      	ldr	r2, [pc, #340]	; (8009210 <UART_SetConfig+0x908>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	f040 80f8 	bne.w	80092b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	dc46      	bgt.n	8009158 <UART_SetConfig+0x850>
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	db75      	blt.n	80091ba <UART_SetConfig+0x8b2>
 80090ce:	3b02      	subs	r3, #2
 80090d0:	2b1e      	cmp	r3, #30
 80090d2:	d872      	bhi.n	80091ba <UART_SetConfig+0x8b2>
 80090d4:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <UART_SetConfig+0x7d4>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	0800915f 	.word	0x0800915f
 80090e0:	080091bb 	.word	0x080091bb
 80090e4:	08009167 	.word	0x08009167
 80090e8:	080091bb 	.word	0x080091bb
 80090ec:	080091bb 	.word	0x080091bb
 80090f0:	080091bb 	.word	0x080091bb
 80090f4:	08009177 	.word	0x08009177
 80090f8:	080091bb 	.word	0x080091bb
 80090fc:	080091bb 	.word	0x080091bb
 8009100:	080091bb 	.word	0x080091bb
 8009104:	080091bb 	.word	0x080091bb
 8009108:	080091bb 	.word	0x080091bb
 800910c:	080091bb 	.word	0x080091bb
 8009110:	080091bb 	.word	0x080091bb
 8009114:	08009187 	.word	0x08009187
 8009118:	080091bb 	.word	0x080091bb
 800911c:	080091bb 	.word	0x080091bb
 8009120:	080091bb 	.word	0x080091bb
 8009124:	080091bb 	.word	0x080091bb
 8009128:	080091bb 	.word	0x080091bb
 800912c:	080091bb 	.word	0x080091bb
 8009130:	080091bb 	.word	0x080091bb
 8009134:	080091bb 	.word	0x080091bb
 8009138:	080091bb 	.word	0x080091bb
 800913c:	080091bb 	.word	0x080091bb
 8009140:	080091bb 	.word	0x080091bb
 8009144:	080091bb 	.word	0x080091bb
 8009148:	080091bb 	.word	0x080091bb
 800914c:	080091bb 	.word	0x080091bb
 8009150:	080091bb 	.word	0x080091bb
 8009154:	080091ad 	.word	0x080091ad
 8009158:	2b40      	cmp	r3, #64	; 0x40
 800915a:	d02a      	beq.n	80091b2 <UART_SetConfig+0x8aa>
 800915c:	e02d      	b.n	80091ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800915e:	f7fe fe0f 	bl	8007d80 <HAL_RCCEx_GetD3PCLK1Freq>
 8009162:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009164:	e02f      	b.n	80091c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fe1e 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009174:	e027      	b.n	80091c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009176:	f107 0318 	add.w	r3, r7, #24
 800917a:	4618      	mov	r0, r3
 800917c:	f7fe ff6a 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009184:	e01f      	b.n	80091c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009186:	4b21      	ldr	r3, [pc, #132]	; (800920c <UART_SetConfig+0x904>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b00      	cmp	r3, #0
 8009190:	d009      	beq.n	80091a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009192:	4b1e      	ldr	r3, [pc, #120]	; (800920c <UART_SetConfig+0x904>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	08db      	lsrs	r3, r3, #3
 8009198:	f003 0303 	and.w	r3, r3, #3
 800919c:	4a1d      	ldr	r2, [pc, #116]	; (8009214 <UART_SetConfig+0x90c>)
 800919e:	fa22 f303 	lsr.w	r3, r2, r3
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091a4:	e00f      	b.n	80091c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80091a6:	4b1b      	ldr	r3, [pc, #108]	; (8009214 <UART_SetConfig+0x90c>)
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091aa:	e00c      	b.n	80091c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091ac:	4b1a      	ldr	r3, [pc, #104]	; (8009218 <UART_SetConfig+0x910>)
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b0:	e009      	b.n	80091c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b8:	e005      	b.n	80091c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80091c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 81ee 	beq.w	80095aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	4a12      	ldr	r2, [pc, #72]	; (800921c <UART_SetConfig+0x914>)
 80091d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d8:	461a      	mov	r2, r3
 80091da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80091e0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	4613      	mov	r3, r2
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4413      	add	r3, r2
 80091ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d305      	bcc.n	80091fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d910      	bls.n	8009220 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009204:	e1d1      	b.n	80095aa <UART_SetConfig+0xca2>
 8009206:	bf00      	nop
 8009208:	40011c00 	.word	0x40011c00
 800920c:	58024400 	.word	0x58024400
 8009210:	58000c00 	.word	0x58000c00
 8009214:	03d09000 	.word	0x03d09000
 8009218:	003d0900 	.word	0x003d0900
 800921c:	08009d0c 	.word	0x08009d0c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	2200      	movs	r2, #0
 8009224:	60bb      	str	r3, [r7, #8]
 8009226:	60fa      	str	r2, [r7, #12]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	4ac0      	ldr	r2, [pc, #768]	; (8009530 <UART_SetConfig+0xc28>)
 800922e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009232:	b29b      	uxth	r3, r3
 8009234:	2200      	movs	r2, #0
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	607a      	str	r2, [r7, #4]
 800923a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009242:	f7f7 f863 	bl	800030c <__aeabi_uldivmod>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4610      	mov	r0, r2
 800924c:	4619      	mov	r1, r3
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	f04f 0300 	mov.w	r3, #0
 8009256:	020b      	lsls	r3, r1, #8
 8009258:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800925c:	0202      	lsls	r2, r0, #8
 800925e:	6979      	ldr	r1, [r7, #20]
 8009260:	6849      	ldr	r1, [r1, #4]
 8009262:	0849      	lsrs	r1, r1, #1
 8009264:	2000      	movs	r0, #0
 8009266:	460c      	mov	r4, r1
 8009268:	4605      	mov	r5, r0
 800926a:	eb12 0804 	adds.w	r8, r2, r4
 800926e:	eb43 0905 	adc.w	r9, r3, r5
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	469a      	mov	sl, r3
 800927a:	4693      	mov	fp, r2
 800927c:	4652      	mov	r2, sl
 800927e:	465b      	mov	r3, fp
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f7 f842 	bl	800030c <__aeabi_uldivmod>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4613      	mov	r3, r2
 800928e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009296:	d308      	bcc.n	80092aa <UART_SetConfig+0x9a2>
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929e:	d204      	bcs.n	80092aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a6:	60da      	str	r2, [r3, #12]
 80092a8:	e17f      	b.n	80095aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092b0:	e17b      	b.n	80095aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ba:	f040 80bd 	bne.w	8009438 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80092be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	dc48      	bgt.n	8009358 <UART_SetConfig+0xa50>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	db7b      	blt.n	80093c2 <UART_SetConfig+0xaba>
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d879      	bhi.n	80093c2 <UART_SetConfig+0xaba>
 80092ce:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <UART_SetConfig+0x9cc>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	0800935f 	.word	0x0800935f
 80092d8:	08009367 	.word	0x08009367
 80092dc:	080093c3 	.word	0x080093c3
 80092e0:	080093c3 	.word	0x080093c3
 80092e4:	0800936f 	.word	0x0800936f
 80092e8:	080093c3 	.word	0x080093c3
 80092ec:	080093c3 	.word	0x080093c3
 80092f0:	080093c3 	.word	0x080093c3
 80092f4:	0800937f 	.word	0x0800937f
 80092f8:	080093c3 	.word	0x080093c3
 80092fc:	080093c3 	.word	0x080093c3
 8009300:	080093c3 	.word	0x080093c3
 8009304:	080093c3 	.word	0x080093c3
 8009308:	080093c3 	.word	0x080093c3
 800930c:	080093c3 	.word	0x080093c3
 8009310:	080093c3 	.word	0x080093c3
 8009314:	0800938f 	.word	0x0800938f
 8009318:	080093c3 	.word	0x080093c3
 800931c:	080093c3 	.word	0x080093c3
 8009320:	080093c3 	.word	0x080093c3
 8009324:	080093c3 	.word	0x080093c3
 8009328:	080093c3 	.word	0x080093c3
 800932c:	080093c3 	.word	0x080093c3
 8009330:	080093c3 	.word	0x080093c3
 8009334:	080093c3 	.word	0x080093c3
 8009338:	080093c3 	.word	0x080093c3
 800933c:	080093c3 	.word	0x080093c3
 8009340:	080093c3 	.word	0x080093c3
 8009344:	080093c3 	.word	0x080093c3
 8009348:	080093c3 	.word	0x080093c3
 800934c:	080093c3 	.word	0x080093c3
 8009350:	080093c3 	.word	0x080093c3
 8009354:	080093b5 	.word	0x080093b5
 8009358:	2b40      	cmp	r3, #64	; 0x40
 800935a:	d02e      	beq.n	80093ba <UART_SetConfig+0xab2>
 800935c:	e031      	b.n	80093c2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800935e:	f7fc fe71 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 8009362:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009364:	e033      	b.n	80093ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009366:	f7fc fe83 	bl	8006070 <HAL_RCC_GetPCLK2Freq>
 800936a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800936c:	e02f      	b.n	80093ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800936e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fd1a 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800937c:	e027      	b.n	80093ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800937e:	f107 0318 	add.w	r3, r7, #24
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fe66 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800938c:	e01f      	b.n	80093ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800938e:	4b69      	ldr	r3, [pc, #420]	; (8009534 <UART_SetConfig+0xc2c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b00      	cmp	r3, #0
 8009398:	d009      	beq.n	80093ae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800939a:	4b66      	ldr	r3, [pc, #408]	; (8009534 <UART_SetConfig+0xc2c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	08db      	lsrs	r3, r3, #3
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	4a64      	ldr	r2, [pc, #400]	; (8009538 <UART_SetConfig+0xc30>)
 80093a6:	fa22 f303 	lsr.w	r3, r2, r3
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093ac:	e00f      	b.n	80093ce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80093ae:	4b62      	ldr	r3, [pc, #392]	; (8009538 <UART_SetConfig+0xc30>)
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b2:	e00c      	b.n	80093ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093b4:	4b61      	ldr	r3, [pc, #388]	; (800953c <UART_SetConfig+0xc34>)
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b8:	e009      	b.n	80093ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093c0:	e005      	b.n	80093ce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80093cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80ea 	beq.w	80095aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	4a55      	ldr	r2, [pc, #340]	; (8009530 <UART_SetConfig+0xc28>)
 80093dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e0:	461a      	mov	r2, r3
 80093e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093e8:	005a      	lsls	r2, r3, #1
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	085b      	lsrs	r3, r3, #1
 80093f0:	441a      	add	r2, r3
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	2b0f      	cmp	r3, #15
 8009400:	d916      	bls.n	8009430 <UART_SetConfig+0xb28>
 8009402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009408:	d212      	bcs.n	8009430 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	b29b      	uxth	r3, r3
 800940e:	f023 030f 	bic.w	r3, r3, #15
 8009412:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	b29b      	uxth	r3, r3
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	b29a      	uxth	r2, r3
 8009420:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009422:	4313      	orrs	r3, r2
 8009424:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800942c:	60da      	str	r2, [r3, #12]
 800942e:	e0bc      	b.n	80095aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009436:	e0b8      	b.n	80095aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009438:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800943c:	2b20      	cmp	r3, #32
 800943e:	dc4b      	bgt.n	80094d8 <UART_SetConfig+0xbd0>
 8009440:	2b00      	cmp	r3, #0
 8009442:	f2c0 8087 	blt.w	8009554 <UART_SetConfig+0xc4c>
 8009446:	2b20      	cmp	r3, #32
 8009448:	f200 8084 	bhi.w	8009554 <UART_SetConfig+0xc4c>
 800944c:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <UART_SetConfig+0xb4c>)
 800944e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009452:	bf00      	nop
 8009454:	080094df 	.word	0x080094df
 8009458:	080094e7 	.word	0x080094e7
 800945c:	08009555 	.word	0x08009555
 8009460:	08009555 	.word	0x08009555
 8009464:	080094ef 	.word	0x080094ef
 8009468:	08009555 	.word	0x08009555
 800946c:	08009555 	.word	0x08009555
 8009470:	08009555 	.word	0x08009555
 8009474:	080094ff 	.word	0x080094ff
 8009478:	08009555 	.word	0x08009555
 800947c:	08009555 	.word	0x08009555
 8009480:	08009555 	.word	0x08009555
 8009484:	08009555 	.word	0x08009555
 8009488:	08009555 	.word	0x08009555
 800948c:	08009555 	.word	0x08009555
 8009490:	08009555 	.word	0x08009555
 8009494:	0800950f 	.word	0x0800950f
 8009498:	08009555 	.word	0x08009555
 800949c:	08009555 	.word	0x08009555
 80094a0:	08009555 	.word	0x08009555
 80094a4:	08009555 	.word	0x08009555
 80094a8:	08009555 	.word	0x08009555
 80094ac:	08009555 	.word	0x08009555
 80094b0:	08009555 	.word	0x08009555
 80094b4:	08009555 	.word	0x08009555
 80094b8:	08009555 	.word	0x08009555
 80094bc:	08009555 	.word	0x08009555
 80094c0:	08009555 	.word	0x08009555
 80094c4:	08009555 	.word	0x08009555
 80094c8:	08009555 	.word	0x08009555
 80094cc:	08009555 	.word	0x08009555
 80094d0:	08009555 	.word	0x08009555
 80094d4:	08009547 	.word	0x08009547
 80094d8:	2b40      	cmp	r3, #64	; 0x40
 80094da:	d037      	beq.n	800954c <UART_SetConfig+0xc44>
 80094dc:	e03a      	b.n	8009554 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094de:	f7fc fdb1 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 80094e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094e4:	e03c      	b.n	8009560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094e6:	f7fc fdc3 	bl	8006070 <HAL_RCC_GetPCLK2Freq>
 80094ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094ec:	e038      	b.n	8009560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fc5a 	bl	8007dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094fc:	e030      	b.n	8009560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094fe:	f107 0318 	add.w	r3, r7, #24
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fda6 	bl	8008054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800950c:	e028      	b.n	8009560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800950e:	4b09      	ldr	r3, [pc, #36]	; (8009534 <UART_SetConfig+0xc2c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d012      	beq.n	8009540 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800951a:	4b06      	ldr	r3, [pc, #24]	; (8009534 <UART_SetConfig+0xc2c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	08db      	lsrs	r3, r3, #3
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	4a04      	ldr	r2, [pc, #16]	; (8009538 <UART_SetConfig+0xc30>)
 8009526:	fa22 f303 	lsr.w	r3, r2, r3
 800952a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800952c:	e018      	b.n	8009560 <UART_SetConfig+0xc58>
 800952e:	bf00      	nop
 8009530:	08009d0c 	.word	0x08009d0c
 8009534:	58024400 	.word	0x58024400
 8009538:	03d09000 	.word	0x03d09000
 800953c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009540:	4b24      	ldr	r3, [pc, #144]	; (80095d4 <UART_SetConfig+0xccc>)
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009544:	e00c      	b.n	8009560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009546:	4b24      	ldr	r3, [pc, #144]	; (80095d8 <UART_SetConfig+0xcd0>)
 8009548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800954a:	e009      	b.n	8009560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800954c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009552:	e005      	b.n	8009560 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800955e:	bf00      	nop
    }

    if (pclk != 0U)
 8009560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d021      	beq.n	80095aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	4a1c      	ldr	r2, [pc, #112]	; (80095dc <UART_SetConfig+0xcd4>)
 800956c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009570:	461a      	mov	r2, r3
 8009572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009574:	fbb3 f2f2 	udiv	r2, r3, r2
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	085b      	lsrs	r3, r3, #1
 800957e:	441a      	add	r2, r3
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	fbb2 f3f3 	udiv	r3, r2, r3
 8009588:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958c:	2b0f      	cmp	r3, #15
 800958e:	d909      	bls.n	80095a4 <UART_SetConfig+0xc9c>
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009596:	d205      	bcs.n	80095a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	b29a      	uxth	r2, r3
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60da      	str	r2, [r3, #12]
 80095a2:	e002      	b.n	80095aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2200      	movs	r2, #0
 80095be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2200      	movs	r2, #0
 80095c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80095c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3748      	adds	r7, #72	; 0x48
 80095ce:	46bd      	mov	sp, r7
 80095d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095d4:	03d09000 	.word	0x03d09000
 80095d8:	003d0900 	.word	0x003d0900
 80095dc:	08009d0c 	.word	0x08009d0c

080095e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00a      	beq.n	800960a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00a      	beq.n	800964e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009652:	f003 0308 	and.w	r3, r3, #8
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00a      	beq.n	8009692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01a      	beq.n	80096f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096de:	d10a      	bne.n	80096f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	605a      	str	r2, [r3, #4]
  }
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b098      	sub	sp, #96	; 0x60
 8009728:	af02      	add	r7, sp, #8
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009734:	f7f7 fe9a 	bl	800146c <HAL_GetTick>
 8009738:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0308 	and.w	r3, r3, #8
 8009744:	2b08      	cmp	r3, #8
 8009746:	d12f      	bne.n	80097a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009750:	2200      	movs	r2, #0
 8009752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f88e 	bl	8009878 <UART_WaitOnFlagUntilTimeout>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d022      	beq.n	80097a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009776:	653b      	str	r3, [r7, #80]	; 0x50
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009780:	647b      	str	r3, [r7, #68]	; 0x44
 8009782:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800978e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e6      	bne.n	8009762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2220      	movs	r2, #32
 8009798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e063      	b.n	8009870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0304 	and.w	r3, r3, #4
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d149      	bne.n	800984a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097be:	2200      	movs	r2, #0
 80097c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f857 	bl	8009878 <UART_WaitOnFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d03c      	beq.n	800984a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	623b      	str	r3, [r7, #32]
   return(result);
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ee:	633b      	str	r3, [r7, #48]	; 0x30
 80097f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e6      	bne.n	80097d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3308      	adds	r3, #8
 8009808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	60fb      	str	r3, [r7, #12]
   return(result);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f023 0301 	bic.w	r3, r3, #1
 8009818:	64bb      	str	r3, [r7, #72]	; 0x48
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3308      	adds	r3, #8
 8009820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009822:	61fa      	str	r2, [r7, #28]
 8009824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	617b      	str	r3, [r7, #20]
   return(result);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e5      	bne.n	8009802 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2220      	movs	r2, #32
 800983a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e012      	b.n	8009870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3758      	adds	r7, #88	; 0x58
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	4613      	mov	r3, r2
 8009886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009888:	e049      	b.n	800991e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d045      	beq.n	800991e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009892:	f7f7 fdeb 	bl	800146c <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d302      	bcc.n	80098a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e048      	b.n	800993e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d031      	beq.n	800991e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	f003 0308 	and.w	r3, r3, #8
 80098c4:	2b08      	cmp	r3, #8
 80098c6:	d110      	bne.n	80098ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2208      	movs	r2, #8
 80098ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 f839 	bl	8009948 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2208      	movs	r2, #8
 80098da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e029      	b.n	800993e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f8:	d111      	bne.n	800991e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f81f 	bl	8009948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2220      	movs	r2, #32
 800990e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e00f      	b.n	800993e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4013      	ands	r3, r2
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	429a      	cmp	r2, r3
 800992c:	bf0c      	ite	eq
 800992e:	2301      	moveq	r3, #1
 8009930:	2300      	movne	r3, #0
 8009932:	b2db      	uxtb	r3, r3
 8009934:	461a      	mov	r2, r3
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	429a      	cmp	r2, r3
 800993a:	d0a6      	beq.n	800988a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b095      	sub	sp, #84	; 0x54
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800996e:	643b      	str	r3, [r7, #64]	; 0x40
 8009970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e6      	bne.n	8009950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3308      	adds	r3, #8
 8009988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	61fb      	str	r3, [r7, #28]
   return(result);
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	4b1e      	ldr	r3, [pc, #120]	; (8009a10 <UART_EndRxTransfer+0xc8>)
 8009996:	4013      	ands	r3, r2
 8009998:	64bb      	str	r3, [r7, #72]	; 0x48
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3308      	adds	r3, #8
 80099a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e5      	bne.n	8009982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d118      	bne.n	80099f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	e853 3f00 	ldrex	r3, [r3]
 80099ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f023 0310 	bic.w	r3, r3, #16
 80099d2:	647b      	str	r3, [r7, #68]	; 0x44
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	461a      	mov	r2, r3
 80099da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099dc:	61bb      	str	r3, [r7, #24]
 80099de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e0:	6979      	ldr	r1, [r7, #20]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	e841 2300 	strex	r3, r2, [r1]
 80099e8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1e6      	bne.n	80099be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2220      	movs	r2, #32
 80099f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009a04:	bf00      	nop
 8009a06:	3754      	adds	r7, #84	; 0x54
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	effffffe 	.word	0xeffffffe

08009a14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d101      	bne.n	8009a2a <HAL_UARTEx_DisableFifoMode+0x16>
 8009a26:	2302      	movs	r3, #2
 8009a28:	e027      	b.n	8009a7a <HAL_UARTEx_DisableFifoMode+0x66>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2224      	movs	r2, #36	; 0x24
 8009a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0201 	bic.w	r2, r2, #1
 8009a50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d101      	bne.n	8009a9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	e02d      	b.n	8009afa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2224      	movs	r2, #36	; 0x24
 8009aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f022 0201 	bic.w	r2, r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f850 	bl	8009b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d101      	bne.n	8009b1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b16:	2302      	movs	r3, #2
 8009b18:	e02d      	b.n	8009b76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2224      	movs	r2, #36	; 0x24
 8009b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f022 0201 	bic.w	r2, r2, #1
 8009b40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f812 	bl	8009b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2220      	movs	r2, #32
 8009b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d108      	bne.n	8009ba2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ba0:	e031      	b.n	8009c06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ba2:	2310      	movs	r3, #16
 8009ba4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ba6:	2310      	movs	r3, #16
 8009ba8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	0e5b      	lsrs	r3, r3, #25
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	0f5b      	lsrs	r3, r3, #29
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 0307 	and.w	r3, r3, #7
 8009bc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	7b3a      	ldrb	r2, [r7, #12]
 8009bce:	4911      	ldr	r1, [pc, #68]	; (8009c14 <UARTEx_SetNbDataToProcess+0x94>)
 8009bd0:	5c8a      	ldrb	r2, [r1, r2]
 8009bd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bd6:	7b3a      	ldrb	r2, [r7, #12]
 8009bd8:	490f      	ldr	r1, [pc, #60]	; (8009c18 <UARTEx_SetNbDataToProcess+0x98>)
 8009bda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	7b7a      	ldrb	r2, [r7, #13]
 8009bec:	4909      	ldr	r1, [pc, #36]	; (8009c14 <UARTEx_SetNbDataToProcess+0x94>)
 8009bee:	5c8a      	ldrb	r2, [r1, r2]
 8009bf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bf4:	7b7a      	ldrb	r2, [r7, #13]
 8009bf6:	4908      	ldr	r1, [pc, #32]	; (8009c18 <UARTEx_SetNbDataToProcess+0x98>)
 8009bf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c06:	bf00      	nop
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	08009d24 	.word	0x08009d24
 8009c18:	08009d2c 	.word	0x08009d2c

08009c1c <__libc_init_array>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4d0d      	ldr	r5, [pc, #52]	; (8009c54 <__libc_init_array+0x38>)
 8009c20:	4c0d      	ldr	r4, [pc, #52]	; (8009c58 <__libc_init_array+0x3c>)
 8009c22:	1b64      	subs	r4, r4, r5
 8009c24:	10a4      	asrs	r4, r4, #2
 8009c26:	2600      	movs	r6, #0
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	d109      	bne.n	8009c40 <__libc_init_array+0x24>
 8009c2c:	4d0b      	ldr	r5, [pc, #44]	; (8009c5c <__libc_init_array+0x40>)
 8009c2e:	4c0c      	ldr	r4, [pc, #48]	; (8009c60 <__libc_init_array+0x44>)
 8009c30:	f000 f82e 	bl	8009c90 <_init>
 8009c34:	1b64      	subs	r4, r4, r5
 8009c36:	10a4      	asrs	r4, r4, #2
 8009c38:	2600      	movs	r6, #0
 8009c3a:	42a6      	cmp	r6, r4
 8009c3c:	d105      	bne.n	8009c4a <__libc_init_array+0x2e>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c44:	4798      	blx	r3
 8009c46:	3601      	adds	r6, #1
 8009c48:	e7ee      	b.n	8009c28 <__libc_init_array+0xc>
 8009c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c4e:	4798      	blx	r3
 8009c50:	3601      	adds	r6, #1
 8009c52:	e7f2      	b.n	8009c3a <__libc_init_array+0x1e>
 8009c54:	08009d3c 	.word	0x08009d3c
 8009c58:	08009d3c 	.word	0x08009d3c
 8009c5c:	08009d3c 	.word	0x08009d3c
 8009c60:	08009d40 	.word	0x08009d40

08009c64 <memcpy>:
 8009c64:	440a      	add	r2, r1
 8009c66:	4291      	cmp	r1, r2
 8009c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c6c:	d100      	bne.n	8009c70 <memcpy+0xc>
 8009c6e:	4770      	bx	lr
 8009c70:	b510      	push	{r4, lr}
 8009c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c7a:	4291      	cmp	r1, r2
 8009c7c:	d1f9      	bne.n	8009c72 <memcpy+0xe>
 8009c7e:	bd10      	pop	{r4, pc}

08009c80 <memset>:
 8009c80:	4402      	add	r2, r0
 8009c82:	4603      	mov	r3, r0
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d100      	bne.n	8009c8a <memset+0xa>
 8009c88:	4770      	bx	lr
 8009c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c8e:	e7f9      	b.n	8009c84 <memset+0x4>

08009c90 <_init>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	bf00      	nop
 8009c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c96:	bc08      	pop	{r3}
 8009c98:	469e      	mov	lr, r3
 8009c9a:	4770      	bx	lr

08009c9c <_fini>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	bf00      	nop
 8009ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca2:	bc08      	pop	{r3}
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	4770      	bx	lr
