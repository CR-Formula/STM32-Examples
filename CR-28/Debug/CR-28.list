
CR-28.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d910  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800dbe0  0800dbe0  0001dbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dcb8  0800dcb8  0001dcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dcc0  0800dcc0  0001dcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dcc4  0800dcc4  0001dcc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800dcc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000944  24000064  0800dd2c  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009a8  0800dd2c  000209a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001eda3  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000030cd  00000000  00000000  0003ee78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017a0  00000000  00000000  00041f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001276  00000000  00000000  000436e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035f8f  00000000  00000000  0004495e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f6a3  00000000  00000000  0007a8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00165a8d  00000000  00000000  00099f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006d04  00000000  00000000  001ffa20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00206724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dbc8 	.word	0x0800dbc8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800dbc8 	.word	0x0800dbc8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f001 fc8c 	bl	8001fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f896 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 fd82 	bl	80011c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006bc:	f000 fd60 	bl	8001180 <MX_DMA_Init>
  MX_ADC1_Init();
 80006c0:	f000 f900 	bl	80008c4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80006c4:	f000 fc78 	bl	8000fb8 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 80006c8:	f000 fa6c 	bl	8000ba4 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 80006cc:	f000 face 	bl	8000c6c <MX_FDCAN3_Init>
  MX_I2C1_Init();
 80006d0:	f000 fb30 	bl	8000d34 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006d4:	f000 fb6e 	bl	8000db4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 fcba 	bl	8001050 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006dc:	f000 fd04 	bl	80010e8 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 80006e0:	f000 fbbe 	bl	8000e60 <MX_SPI3_Init>
  MX_SPI4_Init();
 80006e4:	f000 fc12 	bl	8000f0c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  /* Start ADC 1 with DMA Transfers while checking for errors */
  if (HAL_ADC_Start_DMA(&hadc1, (uint16_t)adcBuffer, ADC_BUFFER_SIZE) != HAL_OK) {
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <main+0x110>)
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	4619      	mov	r1, r3
 80006f0:	4833      	ldr	r0, [pc, #204]	; (80007c0 <main+0x114>)
 80006f2:	f002 f9d1 	bl	8002a98 <HAL_ADC_Start_DMA>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <main+0x54>
	  Error_Handler();
 80006fc:	f000 fe60 	bl	80013c0 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // TODO: Add CAN data read in

	  if (adcConvFlag == 1) {
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <main+0x118>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d146      	bne.n	8000796 <main+0xea>
		  // Update Variables
		  telemetry.FRPot = adcBuffer[0];
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <main+0x110>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	ee07 3a90 	vmov	s15, r3
 8000710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000714:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <main+0x11c>)
 8000716:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		  telemetry.FLPot = adcBuffer[1];
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <main+0x110>)
 800071c:	885b      	ldrh	r3, [r3, #2]
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000726:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <main+0x11c>)
 8000728:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		  telemetry.RRPot = adcBuffer[2];
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <main+0x110>)
 800072e:	889b      	ldrh	r3, [r3, #4]
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <main+0x11c>)
 800073a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		  telemetry.RLPot = adcBuffer[3];
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <main+0x110>)
 8000740:	88db      	ldrh	r3, [r3, #6]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <main+0x11c>)
 800074c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		  // TODO: Convert ADC values to sensor values
		  // Need sensor range

		  telemetry.BrakeFront = adcBuffer[4];
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <main+0x110>)
 8000752:	891b      	ldrh	r3, [r3, #8]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <main+0x11c>)
 800075e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		  telemetry.BrakeRear = adcBuffer[5];
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <main+0x110>)
 8000764:	895b      	ldrh	r3, [r3, #10]
 8000766:	ee07 3a90 	vmov	s15, r3
 800076a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <main+0x11c>)
 8000770:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

		  // TODO: Convert ADC values to sensor values
		  // Need sensor range

		  sprintf(debug, "%d - %d", adcBuffer[4], adcBuffer[5]);
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <main+0x110>)
 8000776:	891b      	ldrh	r3, [r3, #8]
 8000778:	461a      	mov	r2, r3
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <main+0x110>)
 800077c:	895b      	ldrh	r3, [r3, #10]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <main+0x120>)
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <main+0x124>)
 8000782:	f00c fd7d 	bl	800d280 <siprintf>
		  HAL_UART_Transmit_IT(&huart3, debug, sizeof(debug));
 8000786:	2240      	movs	r2, #64	; 0x40
 8000788:	4911      	ldr	r1, [pc, #68]	; (80007d0 <main+0x124>)
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <main+0x128>)
 800078c:	f00a fd80 	bl	800b290 <HAL_UART_Transmit_IT>

		  adcConvFlag = 0;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <main+0x118>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
	  }

	  sprintf(message, "rpm.txt=\"%d\"", telemetry.RPM);
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <main+0x11c>)
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a0:	ec53 2b17 	vmov	r2, r3, d7
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <main+0x12c>)
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <main+0x130>)
 80007a8:	f00c fd6a 	bl	800d280 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, message, sizeof(message));
 80007ac:	2240      	movs	r2, #64	; 0x40
 80007ae:	490b      	ldr	r1, [pc, #44]	; (80007dc <main+0x130>)
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <main+0x134>)
 80007b2:	f00a fd6d 	bl	800b290 <HAL_UART_Transmit_IT>
	  HMICMD();
 80007b6:	f000 fde9 	bl	800138c <HMICMD>
  {
 80007ba:	e7a1      	b.n	8000700 <main+0x54>
 80007bc:	24000650 	.word	0x24000650
 80007c0:	24000080 	.word	0x24000080
 80007c4:	24000750 	.word	0x24000750
 80007c8:	240007d4 	.word	0x240007d4
 80007cc:	0800dbe0 	.word	0x0800dbe0
 80007d0:	24000754 	.word	0x24000754
 80007d4:	240005bc 	.word	0x240005bc
 80007d8:	0800dbe8 	.word	0x0800dbe8
 80007dc:	24000794 	.word	0x24000794
 80007e0:	24000494 	.word	0x24000494

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	224c      	movs	r2, #76	; 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00c fd64 	bl	800d2c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00c fd5e 	bl	800d2c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000804:	2004      	movs	r0, #4
 8000806:	f007 f80d 	bl	8007824 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <SystemClock_Config+0xdc>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000816:	4a2a      	ldr	r2, [pc, #168]	; (80008c0 <SystemClock_Config+0xdc>)
 8000818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <SystemClock_Config+0xdc>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800082a:	bf00      	nop
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <SystemClock_Config+0xdc>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000838:	d1f8      	bne.n	800082c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083a:	2302      	movs	r3, #2
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083e:	2301      	movs	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084a:	2300      	movs	r3, #0
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084e:	2304      	movs	r3, #4
 8000850:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000852:	230c      	movs	r3, #12
 8000854:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800085a:	2303      	movs	r3, #3
 800085c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000862:	230c      	movs	r3, #12
 8000864:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000866:	2300      	movs	r3, #0
 8000868:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4618      	mov	r0, r3
 8000874:	f007 f830 	bl	80078d8 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087e:	f000 fd9f 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	233f      	movs	r3, #63	; 0x3f
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2303      	movs	r3, #3
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800088e:	2308      	movs	r3, #8
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f007 fbef 	bl	800808c <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008b4:	f000 fd84 	bl	80013c0 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	3770      	adds	r7, #112	; 0x70
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	58024800 	.word	0x58024800

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2224      	movs	r2, #36	; 0x24
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f00c fcef 	bl	800d2c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008e2:	4b9f      	ldr	r3, [pc, #636]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008e4:	4a9f      	ldr	r2, [pc, #636]	; (8000b64 <MX_ADC1_Init+0x2a0>)
 80008e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008e8:	4b9d      	ldr	r3, [pc, #628]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008ee:	4b9c      	ldr	r3, [pc, #624]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008f4:	4b9a      	ldr	r3, [pc, #616]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fa:	4b99      	ldr	r3, [pc, #612]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008fc:	2204      	movs	r2, #4
 80008fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000900:	4b97      	ldr	r3, [pc, #604]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000902:	2200      	movs	r2, #0
 8000904:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000906:	4b96      	ldr	r3, [pc, #600]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000908:	2201      	movs	r2, #1
 800090a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 16;
 800090c:	4b94      	ldr	r3, [pc, #592]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800090e:	2210      	movs	r2, #16
 8000910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000912:	4b93      	ldr	r3, [pc, #588]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091a:	4b91      	ldr	r3, [pc, #580]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000920:	4b8f      	ldr	r3, [pc, #572]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000922:	2200      	movs	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000926:	4b8e      	ldr	r3, [pc, #568]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000928:	2203      	movs	r2, #3
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092c:	4b8c      	ldr	r3, [pc, #560]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800092e:	2200      	movs	r2, #0
 8000930:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000932:	4b8b      	ldr	r3, [pc, #556]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000934:	2200      	movs	r2, #0
 8000936:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000938:	4b89      	ldr	r3, [pc, #548]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000940:	4887      	ldr	r0, [pc, #540]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000942:	f001 fea1 	bl	8002688 <HAL_ADC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800094c:	f000 fd38 	bl	80013c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4881      	ldr	r0, [pc, #516]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800095c:	f003 f8ea 	bl	8003b34 <HAL_ADCEx_MultiModeConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000966:	f000 fd2b 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800096a:	4b7f      	ldr	r3, [pc, #508]	; (8000b68 <MX_ADC1_Init+0x2a4>)
 800096c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800096e:	2306      	movs	r3, #6
 8000970:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000976:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800097a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800097c:	2304      	movs	r3, #4
 800097e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4874      	ldr	r0, [pc, #464]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000990:	f002 f972 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800099a:	f000 fd11 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800099e:	4b73      	ldr	r3, [pc, #460]	; (8000b6c <MX_ADC1_Init+0x2a8>)
 80009a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009a2:	230c      	movs	r3, #12
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	486d      	ldr	r0, [pc, #436]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80009ac:	f002 f964 	bl	8002c78 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80009b6:	f000 fd03 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ba:	4b6d      	ldr	r3, [pc, #436]	; (8000b70 <MX_ADC1_Init+0x2ac>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009be:	2312      	movs	r3, #18
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4866      	ldr	r0, [pc, #408]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80009c8:	f002 f956 	bl	8002c78 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80009d2:	f000 fcf5 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009d6:	4b67      	ldr	r3, [pc, #412]	; (8000b74 <MX_ADC1_Init+0x2b0>)
 80009d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009da:	2318      	movs	r3, #24
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	485f      	ldr	r0, [pc, #380]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80009e4:	f002 f948 	bl	8002c78 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 80009ee:	f000 fce7 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009f2:	4b61      	ldr	r3, [pc, #388]	; (8000b78 <MX_ADC1_Init+0x2b4>)
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4857      	ldr	r0, [pc, #348]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a02:	f002 f939 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8000a0c:	f000 fcd8 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a10:	4b5a      	ldr	r3, [pc, #360]	; (8000b7c <MX_ADC1_Init+0x2b8>)
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a14:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000a18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4850      	ldr	r0, [pc, #320]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a20:	f002 f92a 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000a2a:	f000 fcc9 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a2e:	4b54      	ldr	r3, [pc, #336]	; (8000b80 <MX_ADC1_Init+0x2bc>)
 8000a30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a32:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4848      	ldr	r0, [pc, #288]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a3e:	f002 f91b 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 8000a48:	f000 fcba 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a4c:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <MX_ADC1_Init+0x2c0>)
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a50:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000a54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4841      	ldr	r0, [pc, #260]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a5c:	f002 f90c 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 8000a66:	f000 fcab 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <MX_ADC1_Init+0x2c4>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a6e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4839      	ldr	r0, [pc, #228]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a7a:	f002 f8fd 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8000a84:	f000 fc9c 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000a88:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <MX_ADC1_Init+0x2c8>)
 8000a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4832      	ldr	r0, [pc, #200]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a98:	f002 f8ee 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8000aa2:	f000 fc8d 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aa6:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <MX_ADC1_Init+0x2cc>)
 8000aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000aaa:	f240 2306 	movw	r3, #518	; 0x206
 8000aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482a      	ldr	r0, [pc, #168]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000ab6:	f002 f8df 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x200>
  {
    Error_Handler();
 8000ac0:	f000 fc7e 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000ac4:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <MX_ADC1_Init+0x2d0>)
 8000ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000ac8:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000acc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4823      	ldr	r0, [pc, #140]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000ad4:	f002 f8d0 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0x21e>
  {
    Error_Handler();
 8000ade:	f000 fc6f 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_ADC1_Init+0x2d4>)
 8000ae4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000ae6:	f240 2312 	movw	r3, #530	; 0x212
 8000aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	481b      	ldr	r0, [pc, #108]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000af2:	f002 f8c1 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0x23c>
  {
    Error_Handler();
 8000afc:	f000 fc60 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_ADC1_Init+0x2d8>)
 8000b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000b04:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000b08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000b10:	f002 f8b2 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x25a>
  {
    Error_Handler();
 8000b1a:	f000 fc51 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_ADC1_Init+0x2dc>)
 8000b20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000b2e:	f002 f8a3 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0x278>
  {
    Error_Handler();
 8000b38:	f000 fc42 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000b3c:	f240 3306 	movw	r3, #774	; 0x306
 8000b40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000b48:	f002 f896 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0x292>
  {
    Error_Handler();
 8000b52:	f000 fc35 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	24000080 	.word	0x24000080
 8000b64:	40022000 	.word	0x40022000
 8000b68:	08600004 	.word	0x08600004
 8000b6c:	0c900008 	.word	0x0c900008
 8000b70:	10c00010 	.word	0x10c00010
 8000b74:	14f00020 	.word	0x14f00020
 8000b78:	1d500080 	.word	0x1d500080
 8000b7c:	21800100 	.word	0x21800100
 8000b80:	25b00200 	.word	0x25b00200
 8000b84:	2a000400 	.word	0x2a000400
 8000b88:	2e300800 	.word	0x2e300800
 8000b8c:	3ac04000 	.word	0x3ac04000
 8000b90:	3ef08000 	.word	0x3ef08000
 8000b94:	43210000 	.word	0x43210000
 8000b98:	47520000 	.word	0x47520000
 8000b9c:	4b840000 	.word	0x4b840000
 8000ba0:	4fb80000 	.word	0x4fb80000

08000ba4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <MX_FDCAN2_Init+0xc4>)
 8000bac:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bce:	2210      	movs	r2, #16
 8000bd0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c52:	f005 ff99 	bl	8006b88 <HAL_FDCAN_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c5c:	f000 fbb0 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24000168 	.word	0x24000168
 8000c68:	4000a400 	.word	0x4000a400

08000c6c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c72:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <MX_FDCAN3_Init+0xc4>)
 8000c74:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c96:	2210      	movs	r2, #16
 8000c98:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d14:	2204      	movs	r2, #4
 8000d16:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d1a:	f005 ff35 	bl	8006b88 <HAL_FDCAN_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000d24:	f000 fb4c 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000208 	.word	0x24000208
 8000d30:	4000d400 	.word	0x4000d400

08000d34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <MX_I2C1_Init+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <MX_I2C1_Init+0x7c>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d70:	f006 fc30 	bl	80075d4 <HAL_I2C_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d7a:	f000 fb21 	bl	80013c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d82:	f006 fcb7 	bl	80076f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d8c:	f000 fb18 	bl	80013c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d94:	f006 fcf9 	bl	800778a <HAL_I2CEx_ConfigDigitalFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 fb0f 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	240002a8 	.word	0x240002a8
 8000dac:	40005400 	.word	0x40005400
 8000db0:	20303e5d 	.word	0x20303e5d

08000db4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dba:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <MX_SPI1_Init+0xa8>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000de0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000de4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e44:	f00a f894 	bl	800af70 <HAL_SPI_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e4e:	f000 fab7 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	240002fc 	.word	0x240002fc
 8000e5c:	40013000 	.word	0x40013000

08000e60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e66:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <MX_SPI3_Init+0xa8>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ef0:	f00a f83e 	bl	800af70 <HAL_SPI_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000efa:	f000 fa61 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24000384 	.word	0x24000384
 8000f08:	40003c00 	.word	0x40003c00

08000f0c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f12:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <MX_SPI4_Init+0xa8>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f3c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f9c:	f009 ffe8 	bl	800af70 <HAL_SPI_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000fa6:	f000 fa0b 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2400040c 	.word	0x2400040c
 8000fb4:	40013400 	.word	0x40013400

08000fb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <MX_USART1_UART_Init+0x94>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001000:	4811      	ldr	r0, [pc, #68]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8001002:	f00a f8f4 	bl	800b1ee <HAL_UART_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800100c:	f000 f9d8 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8001014:	f00c f86a 	bl	800d0ec <HAL_UARTEx_SetTxFifoThreshold>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800101e:	f000 f9cf 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8001026:	f00c f89f 	bl	800d168 <HAL_UARTEx_SetRxFifoThreshold>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001030:	f000 f9c6 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8001036:	f00c f820 	bl	800d07a <HAL_UARTEx_DisableFifoMode>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001040:	f000 f9be 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24000494 	.word	0x24000494
 800104c:	40011000 	.word	0x40011000

08001050 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <MX_USART2_UART_Init+0x94>)
 8001058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800109a:	f00a f8a8 	bl	800b1ee <HAL_UART_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010a4:	f000 f98c 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 80010ac:	f00c f81e 	bl	800d0ec <HAL_UARTEx_SetTxFifoThreshold>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010b6:	f000 f983 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 80010be:	f00c f853 	bl	800d168 <HAL_UARTEx_SetRxFifoThreshold>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010c8:	f000 f97a 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 80010ce:	f00b ffd4 	bl	800d07a <HAL_UARTEx_DisableFifoMode>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010d8:	f000 f972 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24000528 	.word	0x24000528
 80010e4:	40004400 	.word	0x40004400

080010e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <MX_USART3_UART_Init+0x94>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001132:	f00a f85c 	bl	800b1ee <HAL_UART_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800113c:	f000 f940 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001140:	2100      	movs	r1, #0
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001144:	f00b ffd2 	bl	800d0ec <HAL_UARTEx_SetTxFifoThreshold>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800114e:	f000 f937 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001156:	f00c f807 	bl	800d168 <HAL_UARTEx_SetRxFifoThreshold>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001160:	f000 f92e 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001166:	f00b ff88 	bl	800d07a <HAL_UARTEx_DisableFifoMode>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001170:	f000 f926 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	240005bc 	.word	0x240005bc
 800117c:	40004800 	.word	0x40004800

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MX_DMA_Init+0x3c>)
 8001188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <MX_DMA_Init+0x3c>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_DMA_Init+0x3c>)
 8001198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	200b      	movs	r0, #11
 80011aa:	f002 fe80 	bl	8003eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011ae:	200b      	movs	r0, #11
 80011b0:	f002 fe97 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	58024400 	.word	0x58024400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d6:	4b60      	ldr	r3, [pc, #384]	; (8001358 <MX_GPIO_Init+0x198>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	4a5e      	ldr	r2, [pc, #376]	; (8001358 <MX_GPIO_Init+0x198>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e6:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <MX_GPIO_Init+0x198>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	623b      	str	r3, [r7, #32]
 80011f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f4:	4b58      	ldr	r3, [pc, #352]	; (8001358 <MX_GPIO_Init+0x198>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	4a57      	ldr	r2, [pc, #348]	; (8001358 <MX_GPIO_Init+0x198>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001204:	4b54      	ldr	r3, [pc, #336]	; (8001358 <MX_GPIO_Init+0x198>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001212:	4b51      	ldr	r3, [pc, #324]	; (8001358 <MX_GPIO_Init+0x198>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <MX_GPIO_Init+0x198>)
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <MX_GPIO_Init+0x198>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001230:	4b49      	ldr	r3, [pc, #292]	; (8001358 <MX_GPIO_Init+0x198>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a48      	ldr	r2, [pc, #288]	; (8001358 <MX_GPIO_Init+0x198>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b45      	ldr	r3, [pc, #276]	; (8001358 <MX_GPIO_Init+0x198>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b42      	ldr	r3, [pc, #264]	; (8001358 <MX_GPIO_Init+0x198>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	4a40      	ldr	r2, [pc, #256]	; (8001358 <MX_GPIO_Init+0x198>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <MX_GPIO_Init+0x198>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <MX_GPIO_Init+0x198>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a39      	ldr	r2, [pc, #228]	; (8001358 <MX_GPIO_Init+0x198>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b36      	ldr	r3, [pc, #216]	; (8001358 <MX_GPIO_Init+0x198>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <MX_GPIO_Init+0x198>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	4a31      	ldr	r2, [pc, #196]	; (8001358 <MX_GPIO_Init+0x198>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129a:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <MX_GPIO_Init+0x198>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <MX_GPIO_Init+0x198>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	4a2a      	ldr	r2, [pc, #168]	; (8001358 <MX_GPIO_Init+0x198>)
 80012b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <MX_GPIO_Init+0x198>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRESET_LoRa_GPIO_Port, NRESET_LoRa_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012cc:	4823      	ldr	r0, [pc, #140]	; (800135c <MX_GPIO_Init+0x19c>)
 80012ce:	f006 f967 	bl	80075a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d8:	4821      	ldr	r0, [pc, #132]	; (8001360 <MX_GPIO_Init+0x1a0>)
 80012da:	f006 f961 	bl	80075a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_PE10_Pin GPIO_PE11_Pin GPIO_PE12_Pin GPIO_PE13_Pin
                           GPIO_PE14_Pin */
  GPIO_InitStruct.Pin = GPIO_PE10_Pin|GPIO_PE11_Pin|GPIO_PE12_Pin|GPIO_PE13_Pin
 80012de:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PE14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	481c      	ldr	r0, [pc, #112]	; (8001364 <MX_GPIO_Init+0x1a4>)
 80012f4:	f005 ffac 	bl	8007250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA_11_Pin PA_12_Pin */
  GPIO_InitStruct.Pin = PA_11_Pin|PA_12_Pin;
 80012f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4816      	ldr	r0, [pc, #88]	; (8001368 <MX_GPIO_Init+0x1a8>)
 800130e:	f005 ff9f 	bl	8007250 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRESET_LoRa_Pin */
  GPIO_InitStruct.Pin = NRESET_LoRa_Pin;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRESET_LoRa_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_GPIO_Init+0x19c>)
 800132c:	f005 ff90 	bl	8007250 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_GPIO_Init+0x1a0>)
 800134a:	f005 ff81 	bl	8007250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	58024400 	.word	0x58024400
 800135c:	58020800 	.word	0x58020800
 8001360:	58021800 	.word	0x58021800
 8001364:	58021000 	.word	0x58021000
 8001368:	58020000 	.word	0x58020000

0800136c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
// Set flag for ADC DMA Complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	adcConvFlag = 1;
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	24000750 	.word	0x24000750

0800138c <HMICMD>:

// Send the end command for the Nextion HMI
void HMICMD() {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e007      	b.n	80013a8 <HMICMD+0x1c>
		HAL_UART_Transmit_IT(&huart1, HMIEnd, sizeof(HMIEnd));
 8001398:	2204      	movs	r2, #4
 800139a:	4907      	ldr	r1, [pc, #28]	; (80013b8 <HMICMD+0x2c>)
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <HMICMD+0x30>)
 800139e:	f009 ff77 	bl	800b290 <HAL_UART_Transmit_IT>
	for (int i = 0; i < 3; i++) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3301      	adds	r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	ddf4      	ble.n	8001398 <HMICMD+0xc>
	}
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	24000000 	.word	0x24000000
 80013bc:	24000494 	.word	0x24000494

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_MspInit+0x30>)
 80013d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x30>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x30>)
 80013e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	58024400 	.word	0x58024400

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0bc      	sub	sp, #240	; 0xf0
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001418:	f107 0320 	add.w	r3, r7, #32
 800141c:	22b8      	movs	r2, #184	; 0xb8
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f00b ff4d 	bl	800d2c0 <memset>
  if(hadc->Instance==ADC1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a71      	ldr	r2, [pc, #452]	; (80015f0 <HAL_ADC_MspInit+0x1f0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	f040 80db 	bne.w	80015e8 <HAL_ADC_MspInit+0x1e8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001432:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800143e:	2304      	movs	r3, #4
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001442:	230c      	movs	r3, #12
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001446:	2304      	movs	r3, #4
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001452:	23c0      	movs	r3, #192	; 0xc0
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001456:	2300      	movs	r3, #0
 8001458:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	4618      	mov	r0, r3
 800146a:	f007 f99b 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001474:	f7ff ffa4 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001478:	4b5e      	ldr	r3, [pc, #376]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 800147a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800147e:	4a5d      	ldr	r2, [pc, #372]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001488:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 800148a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a6:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	4a3f      	ldr	r2, [pc, #252]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001500:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <HAL_ADC_MspInit+0x1f4>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = ADC_10B_Pin|ADC_11B_Pin|ADC_4B_Pin|ADC_8B_Pin;
 800150e:	2333      	movs	r3, #51	; 0x33
 8001510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001520:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001524:	4619      	mov	r1, r3
 8001526:	4834      	ldr	r0, [pc, #208]	; (80015f8 <HAL_ADC_MspInit+0x1f8>)
 8001528:	f005 fe92 	bl	8007250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16B_Pin|ADC_17B_Pin|ADC_14B_Pin|ADC_15B_Pin
 800152c:	23ff      	movs	r3, #255	; 0xff
 800152e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |ADC_18B_Pin|ADC_19B_Pin|ADC_3B_Pin|ADC_7B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001542:	4619      	mov	r1, r3
 8001544:	482d      	ldr	r0, [pc, #180]	; (80015fc <HAL_ADC_MspInit+0x1fc>)
 8001546:	f005 fe83 	bl	8007250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_9B_Pin|ADC_5B_Pin;
 800154a:	2303      	movs	r3, #3
 800154c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001560:	4619      	mov	r1, r3
 8001562:	4827      	ldr	r0, [pc, #156]	; (8001600 <HAL_ADC_MspInit+0x200>)
 8001564:	f005 fe74 	bl	8007250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_2B_Pin;
 8001568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800156c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001570:	2303      	movs	r3, #3
 8001572:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(ADC_2B_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001580:	4619      	mov	r1, r3
 8001582:	4820      	ldr	r0, [pc, #128]	; (8001604 <HAL_ADC_MspInit+0x204>)
 8001584:	f005 fe64 	bl	8007250 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_ADC_MspInit+0x208>)
 800158a:	4a20      	ldr	r2, [pc, #128]	; (800160c <HAL_ADC_MspInit+0x20c>)
 800158c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <HAL_ADC_MspInit+0x208>)
 8001590:	2209      	movs	r2, #9
 8001592:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_ADC_MspInit+0x208>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_ADC_MspInit+0x208>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015cc:	480e      	ldr	r0, [pc, #56]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015ce:	f002 fca3 	bl	8003f18 <HAL_DMA_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_ADC_MspInit+0x1dc>
    {
      Error_Handler();
 80015d8:	f7ff fef2 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015e0:	659a      	str	r2, [r3, #88]	; 0x58
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <HAL_ADC_MspInit+0x208>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	37f0      	adds	r7, #240	; 0xf0
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40022000 	.word	0x40022000
 80015f4:	58024400 	.word	0x58024400
 80015f8:	58020800 	.word	0x58020800
 80015fc:	58020000 	.word	0x58020000
 8001600:	58020400 	.word	0x58020400
 8001604:	58021400 	.word	0x58021400
 8001608:	240000f0 	.word	0x240000f0
 800160c:	40020010 	.word	0x40020010

08001610 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0ba      	sub	sp, #232	; 0xe8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	22b8      	movs	r2, #184	; 0xb8
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f00b fe45 	bl	800d2c0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a57      	ldr	r2, [pc, #348]	; (8001798 <HAL_FDCAN_MspInit+0x188>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d151      	bne.n	80016e4 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001640:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800164c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4618      	mov	r0, r3
 800165a:	f007 f8a3 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001664:	f7ff feac 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_FDCAN_MspInit+0x18c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a4b      	ldr	r2, [pc, #300]	; (800179c <HAL_FDCAN_MspInit+0x18c>)
 8001670:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_FDCAN_MspInit+0x18c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d10e      	bne.n	8001698 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 800167c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001680:	4a47      	ldr	r2, [pc, #284]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 800168c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	4a40      	ldr	r2, [pc, #256]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 80016b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80016d0:	2309      	movs	r3, #9
 80016d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016da:	4619      	mov	r1, r3
 80016dc:	4831      	ldr	r0, [pc, #196]	; (80017a4 <HAL_FDCAN_MspInit+0x194>)
 80016de:	f005 fdb7 	bl	8007250 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80016e2:	e054      	b.n	800178e <HAL_FDCAN_MspInit+0x17e>
  else if(hfdcan->Instance==FDCAN3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2f      	ldr	r2, [pc, #188]	; (80017a8 <HAL_FDCAN_MspInit+0x198>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d14f      	bne.n	800178e <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	4618      	mov	r0, r3
 8001708:	f007 f84c 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001712:	f7ff fe55 	bl	80013c0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_FDCAN_MspInit+0x18c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_FDCAN_MspInit+0x18c>)
 800171e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_FDCAN_MspInit+0x18c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d10e      	bne.n	8001746 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 800172a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 800173a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 800174e:	f043 0320 	orr.w	r3, r3, #32
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_FDCAN_MspInit+0x190>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 8001764:	23c0      	movs	r3, #192	; 0xc0
 8001766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001782:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001786:	4619      	mov	r1, r3
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <HAL_FDCAN_MspInit+0x19c>)
 800178a:	f005 fd61 	bl	8007250 <HAL_GPIO_Init>
}
 800178e:	bf00      	nop
 8001790:	37e8      	adds	r7, #232	; 0xe8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	4000a400 	.word	0x4000a400
 800179c:	24000854 	.word	0x24000854
 80017a0:	58024400 	.word	0x58024400
 80017a4:	58020400 	.word	0x58020400
 80017a8:	4000d400 	.word	0x4000d400
 80017ac:	58021400 	.word	0x58021400

080017b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b0b8      	sub	sp, #224	; 0xe0
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	22b8      	movs	r2, #184	; 0xb8
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00b fd75 	bl	800d2c0 <memset>
  if(hi2c->Instance==I2C1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a26      	ldr	r2, [pc, #152]	; (8001874 <HAL_I2C_MspInit+0xc4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d145      	bne.n	800186c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017e0:	f04f 0208 	mov.w	r2, #8
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 ffd4 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001802:	f7ff fddd 	bl	80013c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_I2C_MspInit+0xc8>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_I2C_MspInit+0xc8>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_I2C_MspInit+0xc8>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001824:	23c0      	movs	r3, #192	; 0xc0
 8001826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182a:	2312      	movs	r3, #18
 800182c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800183c:	2304      	movs	r3, #4
 800183e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001846:	4619      	mov	r1, r3
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <HAL_I2C_MspInit+0xcc>)
 800184a:	f005 fd01 	bl	8007250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_I2C_MspInit+0xc8>)
 8001850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001854:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_I2C_MspInit+0xc8>)
 8001856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_I2C_MspInit+0xc8>)
 8001860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	37e0      	adds	r7, #224	; 0xe0
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40005400 	.word	0x40005400
 8001878:	58024400 	.word	0x58024400
 800187c:	58020400 	.word	0x58020400

08001880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0c0      	sub	sp, #256	; 0x100
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189c:	22b8      	movs	r2, #184	; 0xb8
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00b fd0d 	bl	800d2c0 <memset>
  if(hspi->Instance==SPI1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4aab      	ldr	r2, [pc, #684]	; (8001b58 <HAL_SPI_MspInit+0x2d8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d16b      	bne.n	8001988 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c6:	4618      	mov	r0, r3
 80018c8:	f006 ff6c 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80018d2:	f7ff fd75 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018d6:	4ba1      	ldr	r3, [pc, #644]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80018d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018dc:	4a9f      	ldr	r2, [pc, #636]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80018de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018e6:	4b9d      	ldr	r3, [pc, #628]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80018e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f4:	4b99      	ldr	r3, [pc, #612]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fa:	4a98      	ldr	r2, [pc, #608]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001904:	4b95      	ldr	r3, [pc, #596]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001910:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001912:	4b92      	ldr	r3, [pc, #584]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	4a90      	ldr	r2, [pc, #576]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 800191a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001922:	4b8e      	ldr	r3, [pc, #568]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001948:	2305      	movs	r3, #5
 800194a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001952:	4619      	mov	r1, r3
 8001954:	4882      	ldr	r0, [pc, #520]	; (8001b60 <HAL_SPI_MspInit+0x2e0>)
 8001956:	f005 fc7b 	bl	8007250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800195a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800195e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001974:	2305      	movs	r3, #5
 8001976:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800197a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800197e:	4619      	mov	r1, r3
 8001980:	4878      	ldr	r0, [pc, #480]	; (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001982:	f005 fc65 	bl	8007250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001986:	e0e1      	b.n	8001b4c <HAL_SPI_MspInit+0x2cc>
  else if(hspi->Instance==SPI3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a76      	ldr	r2, [pc, #472]	; (8001b68 <HAL_SPI_MspInit+0x2e8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	f040 8091 	bne.w	8001ab6 <HAL_SPI_MspInit+0x236>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 fefa 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 80019b6:	f7ff fd03 	bl	80013c0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019ba:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80019bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c0:	4a66      	ldr	r2, [pc, #408]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019ca:	4b64      	ldr	r3, [pc, #400]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80019cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d4:	623b      	str	r3, [r7, #32]
 80019d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	4a5f      	ldr	r2, [pc, #380]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e8:	4b5c      	ldr	r3, [pc, #368]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	4a57      	ldr	r2, [pc, #348]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a06:	4b55      	ldr	r3, [pc, #340]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	4a50      	ldr	r2, [pc, #320]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a32:	2304      	movs	r3, #4
 8001a34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a54:	4619      	mov	r1, r3
 8001a56:	4845      	ldr	r0, [pc, #276]	; (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001a58:	f005 fbfa 	bl	8007250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a76:	2306      	movs	r3, #6
 8001a78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a80:	4619      	mov	r1, r3
 8001a82:	483b      	ldr	r0, [pc, #236]	; (8001b70 <HAL_SPI_MspInit+0x2f0>)
 8001a84:	f005 fbe4 	bl	8007250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001aac:	4619      	mov	r1, r3
 8001aae:	4831      	ldr	r0, [pc, #196]	; (8001b74 <HAL_SPI_MspInit+0x2f4>)
 8001ab0:	f005 fbce 	bl	8007250 <HAL_GPIO_Init>
}
 8001ab4:	e04a      	b.n	8001b4c <HAL_SPI_MspInit+0x2cc>
  else if(hspi->Instance==SPI4)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <HAL_SPI_MspInit+0x2f8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d145      	bne.n	8001b4c <HAL_SPI_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001ac0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f006 fe64 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_SPI_MspInit+0x266>
      Error_Handler();
 8001ae2:	f7ff fc6d 	bl	80013c0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001aee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b22:	2374      	movs	r3, #116	; 0x74
 8001b24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b44:	4619      	mov	r1, r3
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <HAL_SPI_MspInit+0x2fc>)
 8001b48:	f005 fb82 	bl	8007250 <HAL_GPIO_Init>
}
 8001b4c:	bf00      	nop
 8001b4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40013000 	.word	0x40013000
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	58020c00 	.word	0x58020c00
 8001b64:	58021800 	.word	0x58021800
 8001b68:	40003c00 	.word	0x40003c00
 8001b6c:	58020400 	.word	0x58020400
 8001b70:	58020000 	.word	0x58020000
 8001b74:	58020800 	.word	0x58020800
 8001b78:	40013400 	.word	0x40013400
 8001b7c:	58021000 	.word	0x58021000

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0bc      	sub	sp, #240	; 0xf0
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b98:	f107 0320 	add.w	r3, r7, #32
 8001b9c:	22b8      	movs	r2, #184	; 0xb8
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00b fb8d 	bl	800d2c0 <memset>
  if(huart->Instance==USART1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a77      	ldr	r2, [pc, #476]	; (8001d88 <HAL_UART_MspInit+0x208>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d14f      	bne.n	8001c50 <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bb0:	f04f 0201 	mov.w	r2, #1
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc2:	f107 0320 	add.w	r3, r7, #32
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f006 fdec 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bd2:	f7ff fbf5 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bdc:	4a6b      	ldr	r2, [pc, #428]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001be6:	4b69      	ldr	r3, [pc, #420]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf4:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfa:	4a64      	ldr	r2, [pc, #400]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c04:	4b61      	ldr	r3, [pc, #388]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c36:	4619      	mov	r1, r3
 8001c38:	4855      	ldr	r0, [pc, #340]	; (8001d90 <HAL_UART_MspInit+0x210>)
 8001c3a:	f005 fb09 	bl	8007250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2025      	movs	r0, #37	; 0x25
 8001c44:	f002 f933 	bl	8003eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c48:	2025      	movs	r0, #37	; 0x25
 8001c4a:	f002 f94a 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c4e:	e097      	b.n	8001d80 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a4f      	ldr	r2, [pc, #316]	; (8001d94 <HAL_UART_MspInit+0x214>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d146      	bne.n	8001ce8 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c5a:	f04f 0202 	mov.w	r2, #2
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4618      	mov	r0, r3
 8001c72:	f006 fd97 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001c7c:	f7ff fba0 	bl	80013c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c80:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c86:	4a41      	ldr	r2, [pc, #260]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c90:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001c92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cbc:	2360      	movs	r3, #96	; 0x60
 8001cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cda:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cde:	4619      	mov	r1, r3
 8001ce0:	482d      	ldr	r0, [pc, #180]	; (8001d98 <HAL_UART_MspInit+0x218>)
 8001ce2:	f005 fab5 	bl	8007250 <HAL_GPIO_Init>
}
 8001ce6:	e04b      	b.n	8001d80 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART3)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <HAL_UART_MspInit+0x21c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d146      	bne.n	8001d80 <HAL_UART_MspInit+0x200>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cf2:	f04f 0202 	mov.w	r2, #2
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f006 fd4b 	bl	80087a4 <HAL_RCCEx_PeriphCLKConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8001d14:	f7ff fb54 	bl	80013c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3c:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_UART_MspInit+0x20c>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <HAL_UART_MspInit+0x210>)
 8001d7c:	f005 fa68 	bl	8007250 <HAL_GPIO_Init>
}
 8001d80:	bf00      	nop
 8001d82:	37f0      	adds	r7, #240	; 0xf0
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	58020400 	.word	0x58020400
 8001d94:	40004400 	.word	0x40004400
 8001d98:	58020c00 	.word	0x58020c00
 8001d9c:	40004800 	.word	0x40004800

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 f960 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <DMA1_Stream0_IRQHandler+0x10>)
 8001dfa:	f003 fbb3 	bl	8005564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	240000f0 	.word	0x240000f0

08001e08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART1_IRQHandler+0x10>)
 8001e0e:	f009 fad3 	bl	800b3b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	24000494 	.word	0x24000494

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f00b fa40 	bl	800d2d0 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	24050000 	.word	0x24050000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	24000858 	.word	0x24000858
 8001e84:	240009a8 	.word	0x240009a8

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <SystemInit+0xd0>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <SystemInit+0xd0>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <SystemInit+0xd4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d807      	bhi.n	8001eb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <SystemInit+0xd4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 030f 	bic.w	r3, r3, #15
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <SystemInit+0xd4>)
 8001eb2:	f043 0307 	orr.w	r3, r3, #7
 8001eb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <SystemInit+0xd8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <SystemInit+0xd8>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <SystemInit+0xd8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <SystemInit+0xd8>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4924      	ldr	r1, [pc, #144]	; (8001f60 <SystemInit+0xd8>)
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <SystemInit+0xdc>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <SystemInit+0xd4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <SystemInit+0xd4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 030f 	bic.w	r3, r3, #15
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <SystemInit+0xd4>)
 8001eec:	f043 0307 	orr.w	r3, r3, #7
 8001ef0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <SystemInit+0xd8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <SystemInit+0xd8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <SystemInit+0xd8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <SystemInit+0xd8>)
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <SystemInit+0xe0>)
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <SystemInit+0xd8>)
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <SystemInit+0xe4>)
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <SystemInit+0xd8>)
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <SystemInit+0xe8>)
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <SystemInit+0xd8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <SystemInit+0xd8>)
 8001f1e:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <SystemInit+0xe8>)
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <SystemInit+0xd8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <SystemInit+0xd8>)
 8001f2a:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <SystemInit+0xe8>)
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <SystemInit+0xd8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <SystemInit+0xd8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <SystemInit+0xd8>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <SystemInit+0xd8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <SystemInit+0xec>)
 8001f48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00
 8001f5c:	52002000 	.word	0x52002000
 8001f60:	58024400 	.word	0x58024400
 8001f64:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f68:	02020200 	.word	0x02020200
 8001f6c:	01ff0000 	.word	0x01ff0000
 8001f70:	01010280 	.word	0x01010280
 8001f74:	52004000 	.word	0x52004000

08001f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f7c:	f7ff ff84 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f82:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f98:	4c0a      	ldr	r4, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f00b f999 	bl	800d2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001faa:	f7fe fb7f 	bl	80006ac <main>
  bx  lr
 8001fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001fb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fb8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001fbc:	0800dcc8 	.word	0x0800dcc8
  ldr r2, =_sbss
 8001fc0:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001fc4:	240009a8 	.word	0x240009a8

08001fc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC3_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f001 ff60 	bl	8003e98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd8:	f006 fa0e 	bl	80083f8 <HAL_RCC_GetSysClockFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_Init+0x68>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	4913      	ldr	r1, [pc, #76]	; (8002038 <HAL_Init+0x6c>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_Init+0x68>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_Init+0x6c>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_Init+0x70>)
 800200e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_Init+0x74>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002016:	200f      	movs	r0, #15
 8002018:	f000 f814 	bl	8002044 <HAL_InitTick>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e002      	b.n	800202c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002026:	f7ff f9d1 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58024400 	.word	0x58024400
 8002038:	0800dc44 	.word	0x0800dc44
 800203c:	24000008 	.word	0x24000008
 8002040:	24000004 	.word	0x24000004

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_InitTick+0x60>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e021      	b.n	800209c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_InitTick+0x64>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_InitTick+0x60>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f001 ff45 	bl	8003efe <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f001 ff0f 	bl	8003eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_InitTick+0x68>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	24000010 	.word	0x24000010
 80020a8:	24000004 	.word	0x24000004
 80020ac:	2400000c 	.word	0x2400000c

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	24000010 	.word	0x24000010
 80020d4:	2400085c 	.word	0x2400085c

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2400085c 	.word	0x2400085c

080020f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	609a      	str	r2, [r3, #8]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3360      	adds	r3, #96	; 0x60
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <LL_ADC_SetOffset+0x60>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d10b      	bne.n	8002194 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	4313      	orrs	r3, r2
 800218a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002192:	e00b      	b.n	80021ac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	58026000 	.word	0x58026000

080021bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	461a      	mov	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	431a      	orrs	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	611a      	str	r2, [r3, #16]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	601a      	str	r2, [r3, #0]
  }
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	58026000 	.word	0x58026000

08002260 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <LL_ADC_SetOffsetSaturation+0x40>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d10e      	bne.n	8002292 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3360      	adds	r3, #96	; 0x60
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	431a      	orrs	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	58026000 	.word	0x58026000

080022a4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <LL_ADC_SetOffsetSign+0x40>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10e      	bne.n	80022d6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3360      	adds	r3, #96	; 0x60
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	58026000 	.word	0x58026000

080022e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3360      	adds	r3, #96	; 0x60
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <LL_ADC_SetOffsetState+0x50>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800231a:	e007      	b.n	800232c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	431a      	orrs	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	58026000 	.word	0x58026000

0800233c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002362:	b480      	push	{r7}
 8002364:	b087      	sub	sp, #28
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3330      	adds	r3, #48	; 0x30
 8002372:	461a      	mov	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	4413      	add	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	211f      	movs	r1, #31
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	401a      	ands	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 011f 	and.w	r1, r3, #31
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f023 0203 	bic.w	r2, r3, #3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a08      	ldr	r2, [pc, #32]	; (8002430 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d107      	bne.n	8002422 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60da      	str	r2, [r3, #12]
  }
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	58026000 	.word	0x58026000

08002434 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3314      	adds	r3, #20
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	0e5b      	lsrs	r3, r3, #25
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	0d1b      	lsrs	r3, r3, #20
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2107      	movs	r1, #7
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	401a      	ands	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	0d1b      	lsrs	r3, r3, #20
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	431a      	orrs	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <LL_ADC_SetChannelSingleDiff+0x78>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d115      	bne.n	80024cc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ac:	43db      	mvns	r3, r3
 80024ae:	401a      	ands	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0318 	and.w	r3, r3, #24
 80024b6:	4914      	ldr	r1, [pc, #80]	; (8002508 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80024b8:	40d9      	lsrs	r1, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	400b      	ands	r3, r1
 80024be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c2:	431a      	orrs	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80024ca:	e014      	b.n	80024f6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d8:	43db      	mvns	r3, r3
 80024da:	401a      	ands	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0318 	and.w	r3, r3, #24
 80024e2:	4909      	ldr	r1, [pc, #36]	; (8002508 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80024e4:	40d9      	lsrs	r1, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	400b      	ands	r3, r1
 80024ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ee:	431a      	orrs	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	58026000 	.word	0x58026000
 8002508:	000fffff 	.word	0x000fffff

0800250c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 031f 	and.w	r3, r3, #31
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6093      	str	r3, [r2, #8]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	5fffffc0 	.word	0x5fffffc0

0800254c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800255c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002560:	d101      	bne.n	8002566 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <LL_ADC_EnableInternalRegulator+0x24>)
 8002582:	4013      	ands	r3, r2
 8002584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	6fffffc0 	.word	0x6fffffc0

0800259c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025b0:	d101      	bne.n	80025b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <LL_ADC_Enable+0x24>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	f043 0201 	orr.w	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	7fffffc0 	.word	0x7fffffc0

080025ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <LL_ADC_IsEnabled+0x18>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <LL_ADC_IsEnabled+0x1a>
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <LL_ADC_REG_StartConversion+0x24>)
 8002622:	4013      	ands	r3, r2
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	7fffffc0 	.word	0x7fffffc0

0800263c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b04      	cmp	r3, #4
 800264e:	d101      	bne.n	8002654 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d101      	bne.n	800267a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e1ee      	b.n	8002a80 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7fe fea5 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff3f 	bl	800254c <LL_ADC_IsDeepPowerDownEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff25 	bl	8002528 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff5a 	bl	800259c <LL_ADC_IsInternalRegulatorEnabled>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d114      	bne.n	8002718 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff3e 	bl	8002574 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026f8:	4b8e      	ldr	r3, [pc, #568]	; (8002934 <HAL_ADC_Init+0x2ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	4a8e      	ldr	r2, [pc, #568]	; (8002938 <HAL_ADC_Init+0x2b0>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	3301      	adds	r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800270a:	e002      	b.n	8002712 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3b01      	subs	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f9      	bne.n	800270c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff3d 	bl	800259c <LL_ADC_IsInternalRegulatorEnabled>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272c:	f043 0210 	orr.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff77 	bl	800263c <LL_ADC_REG_IsConversionOngoing>
 800274e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	f040 8188 	bne.w	8002a6e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 8184 	bne.w	8002a6e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff36 	bl	80025ec <LL_ADC_IsEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d136      	bne.n	80027f4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6c      	ldr	r2, [pc, #432]	; (800293c <HAL_ADC_Init+0x2b4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_ADC_Init+0x112>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_ADC_Init+0x2b8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10e      	bne.n	80027b8 <HAL_ADC_Init+0x130>
 800279a:	4868      	ldr	r0, [pc, #416]	; (800293c <HAL_ADC_Init+0x2b4>)
 800279c:	f7ff ff26 	bl	80025ec <LL_ADC_IsEnabled>
 80027a0:	4604      	mov	r4, r0
 80027a2:	4867      	ldr	r0, [pc, #412]	; (8002940 <HAL_ADC_Init+0x2b8>)
 80027a4:	f7ff ff22 	bl	80025ec <LL_ADC_IsEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4323      	orrs	r3, r4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e008      	b.n	80027ca <HAL_ADC_Init+0x142>
 80027b8:	4862      	ldr	r0, [pc, #392]	; (8002944 <HAL_ADC_Init+0x2bc>)
 80027ba:	f7ff ff17 	bl	80025ec <LL_ADC_IsEnabled>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_ADC_Init+0x2b4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_ADC_Init+0x15a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a58      	ldr	r2, [pc, #352]	; (8002940 <HAL_ADC_Init+0x2b8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Init+0x15e>
 80027e2:	4a59      	ldr	r2, [pc, #356]	; (8002948 <HAL_ADC_Init+0x2c0>)
 80027e4:	e000      	b.n	80027e8 <HAL_ADC_Init+0x160>
 80027e6:	4a59      	ldr	r2, [pc, #356]	; (800294c <HAL_ADC_Init+0x2c4>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f7ff fc7e 	bl	80020f0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_ADC_Init+0x2bc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d129      	bne.n	8002852 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	7e5b      	ldrb	r3, [r3, #25]
 8002802:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002808:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800280e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d013      	beq.n	8002840 <HAL_ADC_Init+0x1b8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b0c      	cmp	r3, #12
 800281e:	d00d      	beq.n	800283c <HAL_ADC_Init+0x1b4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b1c      	cmp	r3, #28
 8002826:	d007      	beq.n	8002838 <HAL_ADC_Init+0x1b0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b18      	cmp	r3, #24
 800282e:	d101      	bne.n	8002834 <HAL_ADC_Init+0x1ac>
 8002830:	2318      	movs	r3, #24
 8002832:	e006      	b.n	8002842 <HAL_ADC_Init+0x1ba>
 8002834:	2300      	movs	r3, #0
 8002836:	e004      	b.n	8002842 <HAL_ADC_Init+0x1ba>
 8002838:	2310      	movs	r3, #16
 800283a:	e002      	b.n	8002842 <HAL_ADC_Init+0x1ba>
 800283c:	2308      	movs	r3, #8
 800283e:	e000      	b.n	8002842 <HAL_ADC_Init+0x1ba>
 8002840:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002842:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	e00e      	b.n	8002870 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7e5b      	ldrb	r3, [r3, #25]
 8002856:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800285c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002862:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d106      	bne.n	8002888 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	3b01      	subs	r3, #1
 8002880:	045b      	lsls	r3, r3, #17
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a26      	ldr	r2, [pc, #152]	; (8002944 <HAL_ADC_Init+0x2bc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d115      	bne.n	80028da <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_ADC_Init+0x2c8>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	69b9      	ldr	r1, [r7, #24]
 80028be:	430b      	orrs	r3, r1
 80028c0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	611a      	str	r2, [r3, #16]
 80028d8:	e009      	b.n	80028ee <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <HAL_ADC_Init+0x2cc>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	430b      	orrs	r3, r1
 80028ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fea2 	bl	800263c <LL_ADC_REG_IsConversionOngoing>
 80028f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff feaf 	bl	8002662 <LL_ADC_INJ_IsConversionOngoing>
 8002904:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 808e 	bne.w	8002a2a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 808a 	bne.w	8002a2a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_ADC_Init+0x2bc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d11b      	bne.n	8002958 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7e1b      	ldrb	r3, [r3, #24]
 8002924:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800292c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	e018      	b.n	8002966 <HAL_ADC_Init+0x2de>
 8002934:	24000004 	.word	0x24000004
 8002938:	053e2d63 	.word	0x053e2d63
 800293c:	40022000 	.word	0x40022000
 8002940:	40022100 	.word	0x40022100
 8002944:	58026000 	.word	0x58026000
 8002948:	40022300 	.word	0x40022300
 800294c:	58026300 	.word	0x58026300
 8002950:	fff04007 	.word	0xfff04007
 8002954:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7e1b      	ldrb	r3, [r3, #24]
 800295c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <HAL_ADC_Init+0x400>)
 800296e:	4013      	ands	r3, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	69b9      	ldr	r1, [r7, #24]
 8002976:	430b      	orrs	r3, r1
 8002978:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002980:	2b01      	cmp	r3, #1
 8002982:	d137      	bne.n	80029f4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3f      	ldr	r2, [pc, #252]	; (8002a8c <HAL_ADC_Init+0x404>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d116      	bne.n	80029c2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_ADC_Init+0x408>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029ac:	4311      	orrs	r1, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80029b2:	430a      	orrs	r2, r1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	611a      	str	r2, [r3, #16]
 80029c0:	e020      	b.n	8002a04 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_ADC_Init+0x40c>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029d0:	3a01      	subs	r2, #1
 80029d2:	0411      	lsls	r1, r2, #16
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029de:	4311      	orrs	r1, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80029e4:	430a      	orrs	r2, r1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	e007      	b.n	8002a04 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <HAL_ADC_Init+0x404>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d002      	beq.n	8002a2a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 ff71 	bl	800390c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10c      	bne.n	8002a4c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f023 010f 	bic.w	r1, r3, #15
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4a:	e007      	b.n	8002a5c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 020f 	bic.w	r2, r2, #15
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a60:	f023 0303 	bic.w	r3, r3, #3
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	661a      	str	r2, [r3, #96]	; 0x60
 8002a6c:	e007      	b.n	8002a7e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a72:	f043 0210 	orr.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3724      	adds	r7, #36	; 0x24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd90      	pop	{r4, r7, pc}
 8002a88:	ffffbffc 	.word	0xffffbffc
 8002a8c:	58026000 	.word	0x58026000
 8002a90:	fc00f81f 	.word	0xfc00f81f
 8002a94:	fc00f81e 	.word	0xfc00f81e

08002a98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a60      	ldr	r2, [pc, #384]	; (8002c2c <HAL_ADC_Start_DMA+0x194>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_ADC_Start_DMA+0x20>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5f      	ldr	r2, [pc, #380]	; (8002c30 <HAL_ADC_Start_DMA+0x198>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_Start_DMA+0x24>
 8002ab8:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <HAL_ADC_Start_DMA+0x19c>)
 8002aba:	e000      	b.n	8002abe <HAL_ADC_Start_DMA+0x26>
 8002abc:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <HAL_ADC_Start_DMA+0x1a0>)
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fd24 	bl	800250c <LL_ADC_GetMultimode>
 8002ac4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fdb6 	bl	800263c <LL_ADC_REG_IsConversionOngoing>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 80a2 	bne.w	8002c1c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Start_DMA+0x4e>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e09d      	b.n	8002c22 <HAL_ADC_Start_DMA+0x18a>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d003      	beq.n	8002b02 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	f040 8086 	bne.w	8002c0e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fde4 	bl	80036d0 <ADC_Enable>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d178      	bne.n	8002c04 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b16:	4b49      	ldr	r3, [pc, #292]	; (8002c3c <HAL_ADC_Start_DMA+0x1a4>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a42      	ldr	r2, [pc, #264]	; (8002c30 <HAL_ADC_Start_DMA+0x198>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d002      	beq.n	8002b32 <HAL_ADC_Start_DMA+0x9a>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_Start_DMA+0x9c>
 8002b32:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <HAL_ADC_Start_DMA+0x194>)
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d002      	beq.n	8002b42 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5e:	f023 0206 	bic.w	r2, r3, #6
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	665a      	str	r2, [r3, #100]	; 0x64
 8002b66:	e002      	b.n	8002b6e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	4a33      	ldr	r2, [pc, #204]	; (8002c40 <HAL_ADC_Start_DMA+0x1a8>)
 8002b74:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <HAL_ADC_Start_DMA+0x1ac>)
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <HAL_ADC_Start_DMA+0x1b0>)
 8002b84:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	221c      	movs	r2, #28
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0210 	orr.w	r2, r2, #16
 8002ba4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <HAL_ADC_Start_DMA+0x1b4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10f      	bne.n	8002bd0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f7ff fc1e 	bl	8002400 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fc09 	bl	80023e0 <LL_ADC_EnableDMAReq>
 8002bce:	e007      	b.n	8002be0 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f7ff fbed 	bl	80023ba <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3340      	adds	r3, #64	; 0x40
 8002bea:	4619      	mov	r1, r3
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f001 fcea 	bl	80045c8 <HAL_DMA_Start_IT>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fd09 	bl	8002614 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c02:	e00d      	b.n	8002c20 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8002c0c:	e008      	b.n	8002c20 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002c1a:	e001      	b.n	8002c20 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40022000 	.word	0x40022000
 8002c30:	40022100 	.word	0x40022100
 8002c34:	40022300 	.word	0x40022300
 8002c38:	58026300 	.word	0x58026300
 8002c3c:	fffff0fe 	.word	0xfffff0fe
 8002c40:	080037e5 	.word	0x080037e5
 8002c44:	080038bd 	.word	0x080038bd
 8002c48:	080038d9 	.word	0x080038d9
 8002c4c:	58026000 	.word	0x58026000

08002c50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b0b9      	sub	sp, #228	; 0xe4
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c92:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4aa9      	ldr	r2, [pc, #676]	; (8002f40 <HAL_ADC_ConfigChannel+0x2c8>)
 8002c9a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d102      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x34>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f000 bcfa 	b.w	80036a0 <HAL_ADC_ConfigChannel+0xa28>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fcbf 	bl	800263c <LL_ADC_REG_IsConversionOngoing>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 84de 	bne.w	8003682 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a9e      	ldr	r2, [pc, #632]	; (8002f44 <HAL_ADC_ConfigChannel+0x2cc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d033      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d108      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x76>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	e01d      	b.n	8002d2a <HAL_ADC_ConfigChannel+0xb2>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e004      	b.n	8002d20 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2201      	movs	r2, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	69d1      	ldr	r1, [r2, #28]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f7ff fb0c 	bl	8002362 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fc74 	bl	800263c <LL_ADC_REG_IsConversionOngoing>
 8002d54:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fc80 	bl	8002662 <LL_ADC_INJ_IsConversionOngoing>
 8002d62:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 8270 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 826b 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f7ff fb54 	bl	8002434 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6c      	ldr	r2, [pc, #432]	; (8002f44 <HAL_ADC_ConfigChannel+0x2cc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10d      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002db0:	e032      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_ADC_ConfigChannel+0x2d0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x160>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	e01d      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x19c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x186>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	e00a      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x19c>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d048      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6919      	ldr	r1, [r3, #16]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e30:	f7ff f992 	bl	8002158 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a42      	ldr	r2, [pc, #264]	; (8002f44 <HAL_ADC_ConfigChannel+0x2cc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d119      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6919      	ldr	r1, [r3, #16]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f7ff fa2a 	bl	80022a4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6919      	ldr	r1, [r3, #16]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x1f0>
 8002e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e66:	e000      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1f2>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f7ff f9f8 	bl	8002260 <LL_ADC_SetOffsetSaturation>
 8002e70:	e1ee      	b.n	8003250 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6919      	ldr	r1, [r3, #16]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x212>
 8002e84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e88:	e000      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x214>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f7ff f9c5 	bl	800221c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6919      	ldr	r1, [r3, #16]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	7e1b      	ldrb	r3, [r3, #24]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x230>
 8002ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ea6:	e000      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x232>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f7ff f99c 	bl	80021e8 <LL_ADC_SetDataRightShift>
 8002eb0:	e1ce      	b.n	8003250 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <HAL_ADC_ConfigChannel+0x2cc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	f040 8181 	bne.w	80031c0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f979 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x272>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f96e 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	e01e      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x2b0>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f963 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002f08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002f18:	2320      	movs	r3, #32
 8002f1a:	e004      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002f1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x2d4>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	e01e      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x306>
 8002f40:	47ff0000 	.word	0x47ff0000
 8002f44:	58026000 	.word	0x58026000
 8002f48:	5c001000 	.word	0x5c001000
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e004      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d106      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f9ac 	bl	80022e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f910 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x344>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff f905 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 021f 	and.w	r2, r3, #31
 8002fba:	e01e      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x382>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f8fa 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002fda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e004      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x39a>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	e018      	b.n	8003044 <HAL_ADC_ConfigChannel+0x3cc>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800302a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800302e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003036:	2320      	movs	r3, #32
 8003038:	e004      	b.n	8003044 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800303a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	429a      	cmp	r2, r3
 8003046:	d106      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f949 	bl	80022e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f8ad 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x40a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f8a2 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8003078:	4603      	mov	r3, r0
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	e01e      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x448>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2102      	movs	r1, #2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f897 	bl	80021bc <LL_ADC_GetOffsetChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80030a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80030a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80030b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x460>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	e014      	b.n	8003102 <HAL_ADC_ConfigChannel+0x48a>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80030e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80030ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80030f4:	2320      	movs	r3, #32
 80030f6:	e004      	b.n	8003102 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80030f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	429a      	cmp	r2, r3
 8003104:	d106      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	2102      	movs	r1, #2
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f8ea 	bl	80022e8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2103      	movs	r1, #3
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f84e 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x4c8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2103      	movs	r1, #3
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f843 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	f003 021f 	and.w	r2, r3, #31
 800313e:	e017      	b.n	8003170 <HAL_ADC_ConfigChannel+0x4f8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2103      	movs	r1, #3
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f838 	bl	80021bc <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800315c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003162:	2320      	movs	r3, #32
 8003164:	e003      	b.n	800316e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003178:	2b00      	cmp	r3, #0
 800317a:	d105      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x510>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	0e9b      	lsrs	r3, r3, #26
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	e011      	b.n	80031ac <HAL_ADC_ConfigChannel+0x534>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003198:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800319a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e003      	b.n	80031ac <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80031a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d14f      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2103      	movs	r1, #3
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f895 	bl	80022e8 <LL_ADC_SetOffsetState>
 80031be:	e047      	b.n	8003250 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	069b      	lsls	r3, r3, #26
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031e2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	069b      	lsls	r3, r3, #26
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d107      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003206:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	069b      	lsls	r3, r3, #26
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800322a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	429a      	cmp	r2, r3
 800323e:	d107      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800324e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff f9c9 	bl	80025ec <LL_ADC_IsEnabled>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 8219 	bne.w	8003694 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	461a      	mov	r2, r3
 8003270:	f7ff f90c 	bl	800248c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4aa1      	ldr	r2, [pc, #644]	; (8003500 <HAL_ADC_ConfigChannel+0x888>)
 800327a:	4293      	cmp	r3, r2
 800327c:	f040 812e 	bne.w	80034dc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x630>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	3301      	adds	r3, #1
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2b09      	cmp	r3, #9
 800329e:	bf94      	ite	ls
 80032a0:	2301      	movls	r3, #1
 80032a2:	2300      	movhi	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	e019      	b.n	80032dc <HAL_ADC_ConfigChannel+0x664>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80032b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80032ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80032c0:	2320      	movs	r3, #32
 80032c2:	e003      	b.n	80032cc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80032c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	bf94      	ite	ls
 80032d6:	2301      	movls	r3, #1
 80032d8:	2300      	movhi	r3, #0
 80032da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d079      	beq.n	80033d4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x684>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0e9b      	lsrs	r3, r3, #26
 80032f2:	3301      	adds	r3, #1
 80032f4:	069b      	lsls	r3, r3, #26
 80032f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032fa:	e015      	b.n	8003328 <HAL_ADC_ConfigChannel+0x6b0>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800330a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800330e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003314:	2320      	movs	r3, #32
 8003316:	e003      	b.n	8003320 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	3301      	adds	r3, #1
 8003322:	069b      	lsls	r3, r3, #26
 8003324:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x6d0>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	3301      	adds	r3, #1
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	e017      	b.n	8003378 <HAL_ADC_ConfigChannel+0x700>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800335a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e003      	b.n	800336c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3301      	adds	r3, #1
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2101      	movs	r1, #1
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	ea42 0103 	orr.w	r1, r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <HAL_ADC_ConfigChannel+0x726>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0e9b      	lsrs	r3, r3, #26
 800338e:	3301      	adds	r3, #1
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	051b      	lsls	r3, r3, #20
 800339c:	e018      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x758>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e003      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d0:	430b      	orrs	r3, r1
 80033d2:	e07e      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d107      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x778>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	3301      	adds	r3, #1
 80033e8:	069b      	lsls	r3, r3, #26
 80033ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ee:	e015      	b.n	800341c <HAL_ADC_ConfigChannel+0x7a4>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e003      	b.n	8003414 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3301      	adds	r3, #1
 8003416:	069b      	lsls	r3, r3, #26
 8003418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_ADC_ConfigChannel+0x7c4>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	3301      	adds	r3, #1
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2101      	movs	r1, #1
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	e017      	b.n	800346c <HAL_ADC_ConfigChannel+0x7f4>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	61bb      	str	r3, [r7, #24]
  return result;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e003      	b.n	8003460 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3301      	adds	r3, #1
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	ea42 0103 	orr.w	r1, r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x820>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	3301      	adds	r3, #1
 8003484:	f003 021f 	and.w	r2, r3, #31
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	3b1e      	subs	r3, #30
 8003490:	051b      	lsls	r3, r3, #20
 8003492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003496:	e01b      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x858>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	60fb      	str	r3, [r7, #12]
  return result;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f003 021f 	and.w	r2, r3, #31
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	3b1e      	subs	r3, #30
 80034ca:	051b      	lsls	r3, r3, #20
 80034cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034d0:	430b      	orrs	r3, r1
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	6892      	ldr	r2, [r2, #8]
 80034d6:	4619      	mov	r1, r3
 80034d8:	f7fe ffac 	bl	8002434 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f280 80d7 	bge.w	8003694 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a06      	ldr	r2, [pc, #24]	; (8003504 <HAL_ADC_ConfigChannel+0x88c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_ADC_ConfigChannel+0x882>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a04      	ldr	r2, [pc, #16]	; (8003508 <HAL_ADC_ConfigChannel+0x890>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10a      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x898>
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <HAL_ADC_ConfigChannel+0x894>)
 80034fc:	e009      	b.n	8003512 <HAL_ADC_ConfigChannel+0x89a>
 80034fe:	bf00      	nop
 8003500:	47ff0000 	.word	0x47ff0000
 8003504:	40022000 	.word	0x40022000
 8003508:	40022100 	.word	0x40022100
 800350c:	40022300 	.word	0x40022300
 8003510:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_ADC_ConfigChannel+0xa30>)
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fe12 	bl	800213c <LL_ADC_GetCommonPathInternalCh>
 8003518:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a62      	ldr	r2, [pc, #392]	; (80036ac <HAL_ADC_ConfigChannel+0xa34>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x8b8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a61      	ldr	r2, [pc, #388]	; (80036b0 <HAL_ADC_ConfigChannel+0xa38>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d10e      	bne.n	800354e <HAL_ADC_ConfigChannel+0x8d6>
 8003530:	485e      	ldr	r0, [pc, #376]	; (80036ac <HAL_ADC_ConfigChannel+0xa34>)
 8003532:	f7ff f85b 	bl	80025ec <LL_ADC_IsEnabled>
 8003536:	4604      	mov	r4, r0
 8003538:	485d      	ldr	r0, [pc, #372]	; (80036b0 <HAL_ADC_ConfigChannel+0xa38>)
 800353a:	f7ff f857 	bl	80025ec <LL_ADC_IsEnabled>
 800353e:	4603      	mov	r3, r0
 8003540:	4323      	orrs	r3, r4
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e008      	b.n	8003560 <HAL_ADC_ConfigChannel+0x8e8>
 800354e:	4859      	ldr	r0, [pc, #356]	; (80036b4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003550:	f7ff f84c 	bl	80025ec <LL_ADC_IsEnabled>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8084 	beq.w	800366e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a53      	ldr	r2, [pc, #332]	; (80036b8 <HAL_ADC_ConfigChannel+0xa40>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d132      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x95e>
 8003570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d12c      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	f040 8086 	bne.w	8003694 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a47      	ldr	r2, [pc, #284]	; (80036ac <HAL_ADC_ConfigChannel+0xa34>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_ADC_ConfigChannel+0x924>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a46      	ldr	r2, [pc, #280]	; (80036b0 <HAL_ADC_ConfigChannel+0xa38>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x928>
 800359c:	4a47      	ldr	r2, [pc, #284]	; (80036bc <HAL_ADC_ConfigChannel+0xa44>)
 800359e:	e000      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x92a>
 80035a0:	4a41      	ldr	r2, [pc, #260]	; (80036a8 <HAL_ADC_ConfigChannel+0xa30>)
 80035a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7fe fdb2 	bl	8002116 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_ADC_ConfigChannel+0xa48>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	4a42      	ldr	r2, [pc, #264]	; (80036c4 <HAL_ADC_ConfigChannel+0xa4c>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	3301      	adds	r3, #1
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035c6:	e002      	b.n	80035ce <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f9      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035d4:	e05e      	b.n	8003694 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <HAL_ADC_ConfigChannel+0xa50>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d120      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x9aa>
 80035e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11a      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a30      	ldr	r2, [pc, #192]	; (80036b4 <HAL_ADC_ConfigChannel+0xa3c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d14e      	bne.n	8003694 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2c      	ldr	r2, [pc, #176]	; (80036ac <HAL_ADC_ConfigChannel+0xa34>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_ADC_ConfigChannel+0x992>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <HAL_ADC_ConfigChannel+0xa38>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x996>
 800360a:	4a2c      	ldr	r2, [pc, #176]	; (80036bc <HAL_ADC_ConfigChannel+0xa44>)
 800360c:	e000      	b.n	8003610 <HAL_ADC_ConfigChannel+0x998>
 800360e:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <HAL_ADC_ConfigChannel+0xa30>)
 8003610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003614:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7fe fd7b 	bl	8002116 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003620:	e038      	b.n	8003694 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a29      	ldr	r2, [pc, #164]	; (80036cc <HAL_ADC_ConfigChannel+0xa54>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d133      	bne.n	8003694 <HAL_ADC_ConfigChannel+0xa1c>
 800362c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d12d      	bne.n	8003694 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <HAL_ADC_ConfigChannel+0xa3c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d128      	bne.n	8003694 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a19      	ldr	r2, [pc, #100]	; (80036ac <HAL_ADC_ConfigChannel+0xa34>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x9de>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <HAL_ADC_ConfigChannel+0xa38>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_ADC_ConfigChannel+0x9e2>
 8003656:	4a19      	ldr	r2, [pc, #100]	; (80036bc <HAL_ADC_ConfigChannel+0xa44>)
 8003658:	e000      	b.n	800365c <HAL_ADC_ConfigChannel+0x9e4>
 800365a:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <HAL_ADC_ConfigChannel+0xa30>)
 800365c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7fe fd55 	bl	8002116 <LL_ADC_SetCommonPathInternalCh>
 800366c:	e012      	b.n	8003694 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003680:	e008      	b.n	8003694 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800369c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	37e4      	adds	r7, #228	; 0xe4
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd90      	pop	{r4, r7, pc}
 80036a8:	58026300 	.word	0x58026300
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40022100 	.word	0x40022100
 80036b4:	58026000 	.word	0x58026000
 80036b8:	c7520000 	.word	0xc7520000
 80036bc:	40022300 	.word	0x40022300
 80036c0:	24000004 	.word	0x24000004
 80036c4:	053e2d63 	.word	0x053e2d63
 80036c8:	c3210000 	.word	0xc3210000
 80036cc:	cb840000 	.word	0xcb840000

080036d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe ff85 	bl	80025ec <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d16e      	bne.n	80037c6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <ADC_Enable+0x100>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e05a      	b.n	80037c8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe ff54 	bl	80025c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800371c:	f7fe fcdc 	bl	80020d8 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <ADC_Enable+0x104>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <ADC_Enable+0x66>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <ADC_Enable+0x108>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <ADC_Enable+0x6a>
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <ADC_Enable+0x10c>)
 8003738:	e000      	b.n	800373c <ADC_Enable+0x6c>
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <ADC_Enable+0x110>)
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fee5 	bl	800250c <LL_ADC_GetMultimode>
 8003742:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <ADC_Enable+0x108>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d002      	beq.n	8003754 <ADC_Enable+0x84>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	e000      	b.n	8003756 <ADC_Enable+0x86>
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <ADC_Enable+0x104>)
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4293      	cmp	r3, r2
 800375c:	d02c      	beq.n	80037b8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d130      	bne.n	80037c6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003764:	e028      	b.n	80037b8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe ff3e 	bl	80025ec <LL_ADC_IsEnabled>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe ff22 	bl	80025c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003780:	f7fe fcaa 	bl	80020d8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d914      	bls.n	80037b8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d00d      	beq.n	80037b8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	f043 0210 	orr.w	r2, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e007      	b.n	80037c8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d1cf      	bne.n	8003766 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	8000003f 	.word	0x8000003f
 80037d4:	40022000 	.word	0x40022000
 80037d8:	40022100 	.word	0x40022100
 80037dc:	40022300 	.word	0x40022300
 80037e0:	58026300 	.word	0x58026300

080037e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d14b      	bne.n	8003896 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d021      	beq.n	800385c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe fd8d 	bl	800233c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d032      	beq.n	800388e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12b      	bne.n	800388e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11f      	bne.n	800388e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	661a      	str	r2, [r3, #96]	; 0x60
 800385a:	e018      	b.n	800388e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d111      	bne.n	800388e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7fd fd6c 	bl	800136c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003894:	e00e      	b.n	80038b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff f9de 	bl	8002c64 <HAL_ADC_ErrorCallback>
}
 80038a8:	e004      	b.n	80038b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff f9c0 	bl	8002c50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f6:	f043 0204 	orr.w	r2, r3, #4
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff f9b0 	bl	8002c64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6c      	ldr	r2, [pc, #432]	; (8003acc <ADC_ConfigureBoostMode+0x1c0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <ADC_ConfigureBoostMode+0x1c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6b      	ldr	r2, [pc, #428]	; (8003ad0 <ADC_ConfigureBoostMode+0x1c4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d109      	bne.n	800393c <ADC_ConfigureBoostMode+0x30>
 8003928:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <ADC_ConfigureBoostMode+0x1c8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e008      	b.n	800394e <ADC_ConfigureBoostMode+0x42>
 800393c:	4b66      	ldr	r3, [pc, #408]	; (8003ad8 <ADC_ConfigureBoostMode+0x1cc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01c      	beq.n	800398c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003952:	f004 fecb 	bl	80086ec <HAL_RCC_GetHCLKFreq>
 8003956:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003960:	d010      	beq.n	8003984 <ADC_ConfigureBoostMode+0x78>
 8003962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003966:	d873      	bhi.n	8003a50 <ADC_ConfigureBoostMode+0x144>
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d002      	beq.n	8003974 <ADC_ConfigureBoostMode+0x68>
 800396e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003972:	d16d      	bne.n	8003a50 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	60fb      	str	r3, [r7, #12]
        break;
 8003982:	e068      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	60fb      	str	r3, [r7, #12]
        break;
 800398a:	e064      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800398c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	f006 f8a6 	bl	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003998:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039a2:	d051      	beq.n	8003a48 <ADC_ConfigureBoostMode+0x13c>
 80039a4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039a8:	d854      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 80039aa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039ae:	d047      	beq.n	8003a40 <ADC_ConfigureBoostMode+0x134>
 80039b0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039b4:	d84e      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 80039b6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039ba:	d03d      	beq.n	8003a38 <ADC_ConfigureBoostMode+0x12c>
 80039bc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039c0:	d848      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 80039c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c6:	d033      	beq.n	8003a30 <ADC_ConfigureBoostMode+0x124>
 80039c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039cc:	d842      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 80039ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039d2:	d029      	beq.n	8003a28 <ADC_ConfigureBoostMode+0x11c>
 80039d4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039d8:	d83c      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 80039da:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039de:	d01a      	beq.n	8003a16 <ADC_ConfigureBoostMode+0x10a>
 80039e0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039e4:	d836      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 80039e6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039ea:	d014      	beq.n	8003a16 <ADC_ConfigureBoostMode+0x10a>
 80039ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039f0:	d830      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 80039f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f6:	d00e      	beq.n	8003a16 <ADC_ConfigureBoostMode+0x10a>
 80039f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fc:	d82a      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 80039fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a02:	d008      	beq.n	8003a16 <ADC_ConfigureBoostMode+0x10a>
 8003a04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a08:	d824      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x148>
 8003a0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a0e:	d002      	beq.n	8003a16 <ADC_ConfigureBoostMode+0x10a>
 8003a10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a14:	d11e      	bne.n	8003a54 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0c9b      	lsrs	r3, r3, #18
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	60fb      	str	r3, [r7, #12]
        break;
 8003a26:	e016      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]
        break;
 8003a2e:	e012      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	60fb      	str	r3, [r7, #12]
        break;
 8003a36:	e00e      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	60fb      	str	r3, [r7, #12]
        break;
 8003a3e:	e00a      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	09db      	lsrs	r3, r3, #7
 8003a44:	60fb      	str	r3, [r7, #12]
        break;
 8003a46:	e006      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	60fb      	str	r3, [r7, #12]
        break;
 8003a4e:	e002      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a54:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <ADC_ConfigureBoostMode+0x1d0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d808      	bhi.n	8003a76 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a74:	e025      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a19      	ldr	r2, [pc, #100]	; (8003ae0 <ADC_ConfigureBoostMode+0x1d4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d80a      	bhi.n	8003a94 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a90:	609a      	str	r2, [r3, #8]
}
 8003a92:	e016      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <ADC_ConfigureBoostMode+0x1d8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d80a      	bhi.n	8003ab2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	e007      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ac0:	609a      	str	r2, [r3, #8]
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40022100 	.word	0x40022100
 8003ad4:	40022300 	.word	0x40022300
 8003ad8:	58026300 	.word	0x58026300
 8003adc:	005f5e10 	.word	0x005f5e10
 8003ae0:	00bebc20 	.word	0x00bebc20
 8003ae4:	017d7840 	.word	0x017d7840

08003ae8 <LL_ADC_IsEnabled>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <LL_ADC_IsEnabled+0x18>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <LL_ADC_IsEnabled+0x1a>
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_ADC_REG_IsConversionOngoing>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d101      	bne.n	8003b26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b0a3      	sub	sp, #140	; 0x8c
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e0c1      	b.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a5e      	ldr	r2, [pc, #376]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d102      	bne.n	8003b72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b6c:	4b5d      	ldr	r3, [pc, #372]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e001      	b.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0a0      	b.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ffb9 	bl	8003b0e <LL_ADC_REG_IsConversionOngoing>
 8003b9c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ffb2 	bl	8003b0e <LL_ADC_REG_IsConversionOngoing>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 8081 	bne.w	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d17c      	bne.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a48      	ldr	r2, [pc, #288]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a46      	ldr	r2, [pc, #280]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003bce:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003bd0:	e000      	b.n	8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003bd2:	4b46      	ldr	r3, [pc, #280]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003bd4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d039      	beq.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a3a      	ldr	r2, [pc, #232]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a39      	ldr	r2, [pc, #228]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10e      	bne.n	8003c22 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003c04:	4836      	ldr	r0, [pc, #216]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c06:	f7ff ff6f 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4835      	ldr	r0, [pc, #212]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c0e:	f7ff ff6b 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4323      	orrs	r3, r4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	e008      	b.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003c22:	4833      	ldr	r0, [pc, #204]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c24:	f7ff ff60 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d047      	beq.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	6811      	ldr	r1, [r2, #0]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c4e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c50:	e03a      	b.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d10e      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003c72:	481b      	ldr	r0, [pc, #108]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c74:	f7ff ff38 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c78:	4604      	mov	r4, r0
 8003c7a:	481a      	ldr	r0, [pc, #104]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c7c:	f7ff ff34 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4323      	orrs	r3, r4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e008      	b.n	8003ca2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003c90:	4817      	ldr	r0, [pc, #92]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c92:	f7ff ff29 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003cb0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb2:	e009      	b.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003cc6:	e000      	b.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003cd2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	378c      	adds	r7, #140	; 0x8c
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd90      	pop	{r4, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40022000 	.word	0x40022000
 8003ce4:	40022100 	.word	0x40022100
 8003ce8:	40022300 	.word	0x40022300
 8003cec:	58026300 	.word	0x58026300
 8003cf0:	58026000 	.word	0x58026000
 8003cf4:	fffff0e0 	.word	0xfffff0e0

08003cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <__NVIC_SetPriorityGrouping+0x40>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d14:	4013      	ands	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <__NVIC_SetPriorityGrouping+0x44>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <__NVIC_SetPriorityGrouping+0x40>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00
 8003d3c:	05fa0000 	.word	0x05fa0000

08003d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <__NVIC_GetPriorityGrouping+0x18>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	f003 0307 	and.w	r3, r3, #7
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	db0b      	blt.n	8003d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	f003 021f 	and.w	r2, r3, #31
 8003d74:	4907      	ldr	r1, [pc, #28]	; (8003d94 <__NVIC_EnableIRQ+0x38>)
 8003d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	e000e100 	.word	0xe000e100

08003d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db0a      	blt.n	8003dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	490c      	ldr	r1, [pc, #48]	; (8003de4 <__NVIC_SetPriority+0x4c>)
 8003db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003db6:	0112      	lsls	r2, r2, #4
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	440b      	add	r3, r1
 8003dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dc0:	e00a      	b.n	8003dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	4908      	ldr	r1, [pc, #32]	; (8003de8 <__NVIC_SetPriority+0x50>)
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	3b04      	subs	r3, #4
 8003dd0:	0112      	lsls	r2, r2, #4
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	761a      	strb	r2, [r3, #24]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000e100 	.word	0xe000e100
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b089      	sub	sp, #36	; 0x24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f1c3 0307 	rsb	r3, r3, #7
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	bf28      	it	cs
 8003e0a:	2304      	movcs	r3, #4
 8003e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3304      	adds	r3, #4
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d902      	bls.n	8003e1c <NVIC_EncodePriority+0x30>
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3b03      	subs	r3, #3
 8003e1a:	e000      	b.n	8003e1e <NVIC_EncodePriority+0x32>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	401a      	ands	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e34:	f04f 31ff 	mov.w	r1, #4294967295
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	43d9      	mvns	r1, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e44:	4313      	orrs	r3, r2
         );
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e64:	d301      	bcc.n	8003e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00f      	b.n	8003e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e6a:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <SysTick_Config+0x40>)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e72:	210f      	movs	r1, #15
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	f7ff ff8e 	bl	8003d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <SysTick_Config+0x40>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e82:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <SysTick_Config+0x40>)
 8003e84:	2207      	movs	r2, #7
 8003e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	e000e010 	.word	0xe000e010

08003e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ff29 	bl	8003cf8 <__NVIC_SetPriorityGrouping>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ebc:	f7ff ff40 	bl	8003d40 <__NVIC_GetPriorityGrouping>
 8003ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff90 	bl	8003dec <NVIC_EncodePriority>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff5f 	bl	8003d98 <__NVIC_SetPriority>
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff33 	bl	8003d5c <__NVIC_EnableIRQ>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffa4 	bl	8003e54 <SysTick_Config>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f20:	f7fe f8da 	bl	80020d8 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e312      	b.n	8004556 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a66      	ldr	r2, [pc, #408]	; (80040d0 <HAL_DMA_Init+0x1b8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04a      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a65      	ldr	r2, [pc, #404]	; (80040d4 <HAL_DMA_Init+0x1bc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d045      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a63      	ldr	r2, [pc, #396]	; (80040d8 <HAL_DMA_Init+0x1c0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d040      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a62      	ldr	r2, [pc, #392]	; (80040dc <HAL_DMA_Init+0x1c4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d03b      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a60      	ldr	r2, [pc, #384]	; (80040e0 <HAL_DMA_Init+0x1c8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d036      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a5f      	ldr	r2, [pc, #380]	; (80040e4 <HAL_DMA_Init+0x1cc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d031      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5d      	ldr	r2, [pc, #372]	; (80040e8 <HAL_DMA_Init+0x1d0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d02c      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5c      	ldr	r2, [pc, #368]	; (80040ec <HAL_DMA_Init+0x1d4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d027      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a5a      	ldr	r2, [pc, #360]	; (80040f0 <HAL_DMA_Init+0x1d8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d022      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a59      	ldr	r2, [pc, #356]	; (80040f4 <HAL_DMA_Init+0x1dc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01d      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_DMA_Init+0x1e0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a56      	ldr	r2, [pc, #344]	; (80040fc <HAL_DMA_Init+0x1e4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a54      	ldr	r2, [pc, #336]	; (8004100 <HAL_DMA_Init+0x1e8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a53      	ldr	r2, [pc, #332]	; (8004104 <HAL_DMA_Init+0x1ec>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a51      	ldr	r2, [pc, #324]	; (8004108 <HAL_DMA_Init+0x1f0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_DMA_Init+0xb8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a50      	ldr	r2, [pc, #320]	; (800410c <HAL_DMA_Init+0x1f4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_DMA_Init+0xbc>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_DMA_Init+0xbe>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 813c 	beq.w	8004254 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a37      	ldr	r2, [pc, #220]	; (80040d0 <HAL_DMA_Init+0x1b8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d04a      	beq.n	800408c <HAL_DMA_Init+0x174>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a36      	ldr	r2, [pc, #216]	; (80040d4 <HAL_DMA_Init+0x1bc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d045      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a34      	ldr	r2, [pc, #208]	; (80040d8 <HAL_DMA_Init+0x1c0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d040      	beq.n	800408c <HAL_DMA_Init+0x174>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a33      	ldr	r2, [pc, #204]	; (80040dc <HAL_DMA_Init+0x1c4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d03b      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a31      	ldr	r2, [pc, #196]	; (80040e0 <HAL_DMA_Init+0x1c8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d036      	beq.n	800408c <HAL_DMA_Init+0x174>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a30      	ldr	r2, [pc, #192]	; (80040e4 <HAL_DMA_Init+0x1cc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d031      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2e      	ldr	r2, [pc, #184]	; (80040e8 <HAL_DMA_Init+0x1d0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02c      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2d      	ldr	r2, [pc, #180]	; (80040ec <HAL_DMA_Init+0x1d4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d027      	beq.n	800408c <HAL_DMA_Init+0x174>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2b      	ldr	r2, [pc, #172]	; (80040f0 <HAL_DMA_Init+0x1d8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d022      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <HAL_DMA_Init+0x1dc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d01d      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <HAL_DMA_Init+0x1e0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_DMA_Init+0x174>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a27      	ldr	r2, [pc, #156]	; (80040fc <HAL_DMA_Init+0x1e4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <HAL_DMA_Init+0x1e8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_DMA_Init+0x174>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a24      	ldr	r2, [pc, #144]	; (8004104 <HAL_DMA_Init+0x1ec>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a22      	ldr	r2, [pc, #136]	; (8004108 <HAL_DMA_Init+0x1f0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_DMA_Init+0x174>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a21      	ldr	r2, [pc, #132]	; (800410c <HAL_DMA_Init+0x1f4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <HAL_DMA_Init+0x186>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e007      	b.n	80040ae <HAL_DMA_Init+0x196>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040ae:	e02f      	b.n	8004110 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040b0:	f7fe f812 	bl	80020d8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d928      	bls.n	8004110 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2203      	movs	r2, #3
 80040c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e242      	b.n	8004556 <HAL_DMA_Init+0x63e>
 80040d0:	40020010 	.word	0x40020010
 80040d4:	40020028 	.word	0x40020028
 80040d8:	40020040 	.word	0x40020040
 80040dc:	40020058 	.word	0x40020058
 80040e0:	40020070 	.word	0x40020070
 80040e4:	40020088 	.word	0x40020088
 80040e8:	400200a0 	.word	0x400200a0
 80040ec:	400200b8 	.word	0x400200b8
 80040f0:	40020410 	.word	0x40020410
 80040f4:	40020428 	.word	0x40020428
 80040f8:	40020440 	.word	0x40020440
 80040fc:	40020458 	.word	0x40020458
 8004100:	40020470 	.word	0x40020470
 8004104:	40020488 	.word	0x40020488
 8004108:	400204a0 	.word	0x400204a0
 800410c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1c8      	bne.n	80040b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4b83      	ldr	r3, [pc, #524]	; (8004338 <HAL_DMA_Init+0x420>)
 800412a:	4013      	ands	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004136:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004142:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2b04      	cmp	r3, #4
 8004162:	d107      	bne.n	8004174 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	4313      	orrs	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b28      	cmp	r3, #40	; 0x28
 800417a:	d903      	bls.n	8004184 <HAL_DMA_Init+0x26c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b2e      	cmp	r3, #46	; 0x2e
 8004182:	d91f      	bls.n	80041c4 <HAL_DMA_Init+0x2ac>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b3e      	cmp	r3, #62	; 0x3e
 800418a:	d903      	bls.n	8004194 <HAL_DMA_Init+0x27c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b42      	cmp	r3, #66	; 0x42
 8004192:	d917      	bls.n	80041c4 <HAL_DMA_Init+0x2ac>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b46      	cmp	r3, #70	; 0x46
 800419a:	d903      	bls.n	80041a4 <HAL_DMA_Init+0x28c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b48      	cmp	r3, #72	; 0x48
 80041a2:	d90f      	bls.n	80041c4 <HAL_DMA_Init+0x2ac>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b4e      	cmp	r3, #78	; 0x4e
 80041aa:	d903      	bls.n	80041b4 <HAL_DMA_Init+0x29c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b52      	cmp	r3, #82	; 0x52
 80041b2:	d907      	bls.n	80041c4 <HAL_DMA_Init+0x2ac>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b73      	cmp	r3, #115	; 0x73
 80041ba:	d905      	bls.n	80041c8 <HAL_DMA_Init+0x2b0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b77      	cmp	r3, #119	; 0x77
 80041c2:	d801      	bhi.n	80041c8 <HAL_DMA_Init+0x2b0>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_DMA_Init+0x2b2>
 80041c8:	2300      	movs	r3, #0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 0307 	bic.w	r3, r3, #7
 80041ec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d117      	bne.n	8004230 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00e      	beq.n	8004230 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f002 fb2e 	bl	8006874 <DMA_CheckFifoParam>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2240      	movs	r2, #64	; 0x40
 8004222:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e192      	b.n	8004556 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f002 fa69 	bl	8006710 <DMA_CalcBaseAndBitshift>
 800423e:	4603      	mov	r3, r0
 8004240:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	223f      	movs	r2, #63	; 0x3f
 800424c:	409a      	lsls	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	609a      	str	r2, [r3, #8]
 8004252:	e0c8      	b.n	80043e6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a38      	ldr	r2, [pc, #224]	; (800433c <HAL_DMA_Init+0x424>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d022      	beq.n	80042a4 <HAL_DMA_Init+0x38c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a37      	ldr	r2, [pc, #220]	; (8004340 <HAL_DMA_Init+0x428>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d01d      	beq.n	80042a4 <HAL_DMA_Init+0x38c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a35      	ldr	r2, [pc, #212]	; (8004344 <HAL_DMA_Init+0x42c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d018      	beq.n	80042a4 <HAL_DMA_Init+0x38c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a34      	ldr	r2, [pc, #208]	; (8004348 <HAL_DMA_Init+0x430>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_DMA_Init+0x38c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a32      	ldr	r2, [pc, #200]	; (800434c <HAL_DMA_Init+0x434>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <HAL_DMA_Init+0x38c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a31      	ldr	r2, [pc, #196]	; (8004350 <HAL_DMA_Init+0x438>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_DMA_Init+0x38c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2f      	ldr	r2, [pc, #188]	; (8004354 <HAL_DMA_Init+0x43c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_DMA_Init+0x38c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2e      	ldr	r2, [pc, #184]	; (8004358 <HAL_DMA_Init+0x440>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_DMA_Init+0x390>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_DMA_Init+0x392>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8092 	beq.w	80043d4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a21      	ldr	r2, [pc, #132]	; (800433c <HAL_DMA_Init+0x424>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d021      	beq.n	80042fe <HAL_DMA_Init+0x3e6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a20      	ldr	r2, [pc, #128]	; (8004340 <HAL_DMA_Init+0x428>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d01c      	beq.n	80042fe <HAL_DMA_Init+0x3e6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_DMA_Init+0x42c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d017      	beq.n	80042fe <HAL_DMA_Init+0x3e6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <HAL_DMA_Init+0x430>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d012      	beq.n	80042fe <HAL_DMA_Init+0x3e6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_DMA_Init+0x434>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00d      	beq.n	80042fe <HAL_DMA_Init+0x3e6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <HAL_DMA_Init+0x438>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d008      	beq.n	80042fe <HAL_DMA_Init+0x3e6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a18      	ldr	r2, [pc, #96]	; (8004354 <HAL_DMA_Init+0x43c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d003      	beq.n	80042fe <HAL_DMA_Init+0x3e6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <HAL_DMA_Init+0x440>)
 80042fc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <HAL_DMA_Init+0x444>)
 800431a:	4013      	ands	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d01c      	beq.n	8004360 <HAL_DMA_Init+0x448>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d102      	bne.n	8004334 <HAL_DMA_Init+0x41c>
 800432e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004332:	e016      	b.n	8004362 <HAL_DMA_Init+0x44a>
 8004334:	2300      	movs	r3, #0
 8004336:	e014      	b.n	8004362 <HAL_DMA_Init+0x44a>
 8004338:	fe10803f 	.word	0xfe10803f
 800433c:	58025408 	.word	0x58025408
 8004340:	5802541c 	.word	0x5802541c
 8004344:	58025430 	.word	0x58025430
 8004348:	58025444 	.word	0x58025444
 800434c:	58025458 	.word	0x58025458
 8004350:	5802546c 	.word	0x5802546c
 8004354:	58025480 	.word	0x58025480
 8004358:	58025494 	.word	0x58025494
 800435c:	fffe000f 	.word	0xfffe000f
 8004360:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004388:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004390:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b6e      	ldr	r3, [pc, #440]	; (8004560 <HAL_DMA_Init+0x648>)
 80043a8:	4413      	add	r3, r2
 80043aa:	4a6e      	ldr	r2, [pc, #440]	; (8004564 <HAL_DMA_Init+0x64c>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	009a      	lsls	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f002 f9a9 	bl	8006710 <DMA_CalcBaseAndBitshift>
 80043be:	4603      	mov	r3, r0
 80043c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	2201      	movs	r2, #1
 80043cc:	409a      	lsls	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	e008      	b.n	80043e6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2240      	movs	r2, #64	; 0x40
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2203      	movs	r2, #3
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0b7      	b.n	8004556 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a5f      	ldr	r2, [pc, #380]	; (8004568 <HAL_DMA_Init+0x650>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d072      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5d      	ldr	r2, [pc, #372]	; (800456c <HAL_DMA_Init+0x654>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d06d      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a5c      	ldr	r2, [pc, #368]	; (8004570 <HAL_DMA_Init+0x658>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d068      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a5a      	ldr	r2, [pc, #360]	; (8004574 <HAL_DMA_Init+0x65c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d063      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a59      	ldr	r2, [pc, #356]	; (8004578 <HAL_DMA_Init+0x660>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d05e      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a57      	ldr	r2, [pc, #348]	; (800457c <HAL_DMA_Init+0x664>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d059      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a56      	ldr	r2, [pc, #344]	; (8004580 <HAL_DMA_Init+0x668>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d054      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a54      	ldr	r2, [pc, #336]	; (8004584 <HAL_DMA_Init+0x66c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d04f      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a53      	ldr	r2, [pc, #332]	; (8004588 <HAL_DMA_Init+0x670>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d04a      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a51      	ldr	r2, [pc, #324]	; (800458c <HAL_DMA_Init+0x674>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d045      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a50      	ldr	r2, [pc, #320]	; (8004590 <HAL_DMA_Init+0x678>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d040      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a4e      	ldr	r2, [pc, #312]	; (8004594 <HAL_DMA_Init+0x67c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d03b      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4d      	ldr	r2, [pc, #308]	; (8004598 <HAL_DMA_Init+0x680>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d036      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a4b      	ldr	r2, [pc, #300]	; (800459c <HAL_DMA_Init+0x684>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d031      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4a      	ldr	r2, [pc, #296]	; (80045a0 <HAL_DMA_Init+0x688>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d02c      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a48      	ldr	r2, [pc, #288]	; (80045a4 <HAL_DMA_Init+0x68c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d027      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a47      	ldr	r2, [pc, #284]	; (80045a8 <HAL_DMA_Init+0x690>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a45      	ldr	r2, [pc, #276]	; (80045ac <HAL_DMA_Init+0x694>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a44      	ldr	r2, [pc, #272]	; (80045b0 <HAL_DMA_Init+0x698>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a42      	ldr	r2, [pc, #264]	; (80045b4 <HAL_DMA_Init+0x69c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a41      	ldr	r2, [pc, #260]	; (80045b8 <HAL_DMA_Init+0x6a0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a3f      	ldr	r2, [pc, #252]	; (80045bc <HAL_DMA_Init+0x6a4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a3e      	ldr	r2, [pc, #248]	; (80045c0 <HAL_DMA_Init+0x6a8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_DMA_Init+0x5be>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <HAL_DMA_Init+0x6ac>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_DMA_Init+0x5c2>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_DMA_Init+0x5c4>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d032      	beq.n	8004546 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f002 fa43 	bl	800696c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d102      	bne.n	80044f4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004508:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_DMA_Init+0x61c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b08      	cmp	r3, #8
 8004518:	d80c      	bhi.n	8004534 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f002 fac0 	bl	8006aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e008      	b.n	8004546 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	a7fdabf8 	.word	0xa7fdabf8
 8004564:	cccccccd 	.word	0xcccccccd
 8004568:	40020010 	.word	0x40020010
 800456c:	40020028 	.word	0x40020028
 8004570:	40020040 	.word	0x40020040
 8004574:	40020058 	.word	0x40020058
 8004578:	40020070 	.word	0x40020070
 800457c:	40020088 	.word	0x40020088
 8004580:	400200a0 	.word	0x400200a0
 8004584:	400200b8 	.word	0x400200b8
 8004588:	40020410 	.word	0x40020410
 800458c:	40020428 	.word	0x40020428
 8004590:	40020440 	.word	0x40020440
 8004594:	40020458 	.word	0x40020458
 8004598:	40020470 	.word	0x40020470
 800459c:	40020488 	.word	0x40020488
 80045a0:	400204a0 	.word	0x400204a0
 80045a4:	400204b8 	.word	0x400204b8
 80045a8:	58025408 	.word	0x58025408
 80045ac:	5802541c 	.word	0x5802541c
 80045b0:	58025430 	.word	0x58025430
 80045b4:	58025444 	.word	0x58025444
 80045b8:	58025458 	.word	0x58025458
 80045bc:	5802546c 	.word	0x5802546c
 80045c0:	58025480 	.word	0x58025480
 80045c4:	58025494 	.word	0x58025494

080045c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e226      	b.n	8004a32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_DMA_Start_IT+0x2a>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e21f      	b.n	8004a32 <HAL_DMA_Start_IT+0x46a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b01      	cmp	r3, #1
 8004604:	f040 820a 	bne.w	8004a1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a68      	ldr	r2, [pc, #416]	; (80047bc <HAL_DMA_Start_IT+0x1f4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d04a      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a66      	ldr	r2, [pc, #408]	; (80047c0 <HAL_DMA_Start_IT+0x1f8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d045      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <HAL_DMA_Start_IT+0x1fc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d040      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a63      	ldr	r2, [pc, #396]	; (80047c8 <HAL_DMA_Start_IT+0x200>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d03b      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a62      	ldr	r2, [pc, #392]	; (80047cc <HAL_DMA_Start_IT+0x204>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d036      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a60      	ldr	r2, [pc, #384]	; (80047d0 <HAL_DMA_Start_IT+0x208>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d031      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a5f      	ldr	r2, [pc, #380]	; (80047d4 <HAL_DMA_Start_IT+0x20c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d02c      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a5d      	ldr	r2, [pc, #372]	; (80047d8 <HAL_DMA_Start_IT+0x210>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d027      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a5c      	ldr	r2, [pc, #368]	; (80047dc <HAL_DMA_Start_IT+0x214>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a5a      	ldr	r2, [pc, #360]	; (80047e0 <HAL_DMA_Start_IT+0x218>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01d      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a59      	ldr	r2, [pc, #356]	; (80047e4 <HAL_DMA_Start_IT+0x21c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d018      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a57      	ldr	r2, [pc, #348]	; (80047e8 <HAL_DMA_Start_IT+0x220>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a56      	ldr	r2, [pc, #344]	; (80047ec <HAL_DMA_Start_IT+0x224>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a54      	ldr	r2, [pc, #336]	; (80047f0 <HAL_DMA_Start_IT+0x228>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a53      	ldr	r2, [pc, #332]	; (80047f4 <HAL_DMA_Start_IT+0x22c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_DMA_Start_IT+0xee>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a51      	ldr	r2, [pc, #324]	; (80047f8 <HAL_DMA_Start_IT+0x230>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <HAL_DMA_Start_IT+0x100>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e007      	b.n	80046d8 <HAL_DMA_Start_IT+0x110>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f001 fe6a 	bl	80063b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a34      	ldr	r2, [pc, #208]	; (80047bc <HAL_DMA_Start_IT+0x1f4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d04a      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a33      	ldr	r2, [pc, #204]	; (80047c0 <HAL_DMA_Start_IT+0x1f8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d045      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a31      	ldr	r2, [pc, #196]	; (80047c4 <HAL_DMA_Start_IT+0x1fc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d040      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a30      	ldr	r2, [pc, #192]	; (80047c8 <HAL_DMA_Start_IT+0x200>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d03b      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2e      	ldr	r2, [pc, #184]	; (80047cc <HAL_DMA_Start_IT+0x204>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d036      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <HAL_DMA_Start_IT+0x208>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d031      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <HAL_DMA_Start_IT+0x20c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02c      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <HAL_DMA_Start_IT+0x210>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d027      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a28      	ldr	r2, [pc, #160]	; (80047dc <HAL_DMA_Start_IT+0x214>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d022      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a27      	ldr	r2, [pc, #156]	; (80047e0 <HAL_DMA_Start_IT+0x218>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d01d      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <HAL_DMA_Start_IT+0x21c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d018      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a24      	ldr	r2, [pc, #144]	; (80047e8 <HAL_DMA_Start_IT+0x220>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a22      	ldr	r2, [pc, #136]	; (80047ec <HAL_DMA_Start_IT+0x224>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00e      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <HAL_DMA_Start_IT+0x228>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <HAL_DMA_Start_IT+0x22c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_DMA_Start_IT+0x1bc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <HAL_DMA_Start_IT+0x230>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <HAL_DMA_Start_IT+0x1c0>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_DMA_Start_IT+0x1c2>
 8004788:	2300      	movs	r3, #0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d036      	beq.n	80047fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f023 021e 	bic.w	r2, r3, #30
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0216 	orr.w	r2, r2, #22
 80047a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d03e      	beq.n	8004828 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0208 	orr.w	r2, r2, #8
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e035      	b.n	8004828 <HAL_DMA_Start_IT+0x260>
 80047bc:	40020010 	.word	0x40020010
 80047c0:	40020028 	.word	0x40020028
 80047c4:	40020040 	.word	0x40020040
 80047c8:	40020058 	.word	0x40020058
 80047cc:	40020070 	.word	0x40020070
 80047d0:	40020088 	.word	0x40020088
 80047d4:	400200a0 	.word	0x400200a0
 80047d8:	400200b8 	.word	0x400200b8
 80047dc:	40020410 	.word	0x40020410
 80047e0:	40020428 	.word	0x40020428
 80047e4:	40020440 	.word	0x40020440
 80047e8:	40020458 	.word	0x40020458
 80047ec:	40020470 	.word	0x40020470
 80047f0:	40020488 	.word	0x40020488
 80047f4:	400204a0 	.word	0x400204a0
 80047f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 020e 	bic.w	r2, r3, #14
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 020a 	orr.w	r2, r2, #10
 800480e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0204 	orr.w	r2, r2, #4
 8004826:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a83      	ldr	r2, [pc, #524]	; (8004a3c <HAL_DMA_Start_IT+0x474>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d072      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a82      	ldr	r2, [pc, #520]	; (8004a40 <HAL_DMA_Start_IT+0x478>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d06d      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a80      	ldr	r2, [pc, #512]	; (8004a44 <HAL_DMA_Start_IT+0x47c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d068      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7f      	ldr	r2, [pc, #508]	; (8004a48 <HAL_DMA_Start_IT+0x480>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d063      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7d      	ldr	r2, [pc, #500]	; (8004a4c <HAL_DMA_Start_IT+0x484>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d05e      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7c      	ldr	r2, [pc, #496]	; (8004a50 <HAL_DMA_Start_IT+0x488>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d059      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a7a      	ldr	r2, [pc, #488]	; (8004a54 <HAL_DMA_Start_IT+0x48c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d054      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a79      	ldr	r2, [pc, #484]	; (8004a58 <HAL_DMA_Start_IT+0x490>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d04f      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a77      	ldr	r2, [pc, #476]	; (8004a5c <HAL_DMA_Start_IT+0x494>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04a      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a76      	ldr	r2, [pc, #472]	; (8004a60 <HAL_DMA_Start_IT+0x498>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d045      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a74      	ldr	r2, [pc, #464]	; (8004a64 <HAL_DMA_Start_IT+0x49c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d040      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a73      	ldr	r2, [pc, #460]	; (8004a68 <HAL_DMA_Start_IT+0x4a0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d03b      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a71      	ldr	r2, [pc, #452]	; (8004a6c <HAL_DMA_Start_IT+0x4a4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d036      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a70      	ldr	r2, [pc, #448]	; (8004a70 <HAL_DMA_Start_IT+0x4a8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d031      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6e      	ldr	r2, [pc, #440]	; (8004a74 <HAL_DMA_Start_IT+0x4ac>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d02c      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6d      	ldr	r2, [pc, #436]	; (8004a78 <HAL_DMA_Start_IT+0x4b0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d027      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a6b      	ldr	r2, [pc, #428]	; (8004a7c <HAL_DMA_Start_IT+0x4b4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d022      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a6a      	ldr	r2, [pc, #424]	; (8004a80 <HAL_DMA_Start_IT+0x4b8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d01d      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a68      	ldr	r2, [pc, #416]	; (8004a84 <HAL_DMA_Start_IT+0x4bc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d018      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a67      	ldr	r2, [pc, #412]	; (8004a88 <HAL_DMA_Start_IT+0x4c0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a65      	ldr	r2, [pc, #404]	; (8004a8c <HAL_DMA_Start_IT+0x4c4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00e      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a64      	ldr	r2, [pc, #400]	; (8004a90 <HAL_DMA_Start_IT+0x4c8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a62      	ldr	r2, [pc, #392]	; (8004a94 <HAL_DMA_Start_IT+0x4cc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_DMA_Start_IT+0x350>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a61      	ldr	r2, [pc, #388]	; (8004a98 <HAL_DMA_Start_IT+0x4d0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_DMA_Start_IT+0x354>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_DMA_Start_IT+0x356>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01a      	beq.n	8004958 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800493e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004956:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a37      	ldr	r2, [pc, #220]	; (8004a3c <HAL_DMA_Start_IT+0x474>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d04a      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a36      	ldr	r2, [pc, #216]	; (8004a40 <HAL_DMA_Start_IT+0x478>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d045      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a34      	ldr	r2, [pc, #208]	; (8004a44 <HAL_DMA_Start_IT+0x47c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d040      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a33      	ldr	r2, [pc, #204]	; (8004a48 <HAL_DMA_Start_IT+0x480>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d03b      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a31      	ldr	r2, [pc, #196]	; (8004a4c <HAL_DMA_Start_IT+0x484>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d036      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a30      	ldr	r2, [pc, #192]	; (8004a50 <HAL_DMA_Start_IT+0x488>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d031      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2e      	ldr	r2, [pc, #184]	; (8004a54 <HAL_DMA_Start_IT+0x48c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02c      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2d      	ldr	r2, [pc, #180]	; (8004a58 <HAL_DMA_Start_IT+0x490>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d027      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2b      	ldr	r2, [pc, #172]	; (8004a5c <HAL_DMA_Start_IT+0x494>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d022      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2a      	ldr	r2, [pc, #168]	; (8004a60 <HAL_DMA_Start_IT+0x498>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d01d      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a28      	ldr	r2, [pc, #160]	; (8004a64 <HAL_DMA_Start_IT+0x49c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d018      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <HAL_DMA_Start_IT+0x4a0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <HAL_DMA_Start_IT+0x4a4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00e      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <HAL_DMA_Start_IT+0x4a8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <HAL_DMA_Start_IT+0x4ac>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <HAL_DMA_Start_IT+0x430>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <HAL_DMA_Start_IT+0x4b0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d108      	bne.n	8004a0a <HAL_DMA_Start_IT+0x442>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e012      	b.n	8004a30 <HAL_DMA_Start_IT+0x468>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e009      	b.n	8004a30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40020010 	.word	0x40020010
 8004a40:	40020028 	.word	0x40020028
 8004a44:	40020040 	.word	0x40020040
 8004a48:	40020058 	.word	0x40020058
 8004a4c:	40020070 	.word	0x40020070
 8004a50:	40020088 	.word	0x40020088
 8004a54:	400200a0 	.word	0x400200a0
 8004a58:	400200b8 	.word	0x400200b8
 8004a5c:	40020410 	.word	0x40020410
 8004a60:	40020428 	.word	0x40020428
 8004a64:	40020440 	.word	0x40020440
 8004a68:	40020458 	.word	0x40020458
 8004a6c:	40020470 	.word	0x40020470
 8004a70:	40020488 	.word	0x40020488
 8004a74:	400204a0 	.word	0x400204a0
 8004a78:	400204b8 	.word	0x400204b8
 8004a7c:	58025408 	.word	0x58025408
 8004a80:	5802541c 	.word	0x5802541c
 8004a84:	58025430 	.word	0x58025430
 8004a88:	58025444 	.word	0x58025444
 8004a8c:	58025458 	.word	0x58025458
 8004a90:	5802546c 	.word	0x5802546c
 8004a94:	58025480 	.word	0x58025480
 8004a98:	58025494 	.word	0x58025494

08004a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004aa4:	f7fd fb18 	bl	80020d8 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e2dc      	b.n	800506e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d008      	beq.n	8004ad2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e2cd      	b.n	800506e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a76      	ldr	r2, [pc, #472]	; (8004cb0 <HAL_DMA_Abort+0x214>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d04a      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a74      	ldr	r2, [pc, #464]	; (8004cb4 <HAL_DMA_Abort+0x218>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d045      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a73      	ldr	r2, [pc, #460]	; (8004cb8 <HAL_DMA_Abort+0x21c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d040      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a71      	ldr	r2, [pc, #452]	; (8004cbc <HAL_DMA_Abort+0x220>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d03b      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a70      	ldr	r2, [pc, #448]	; (8004cc0 <HAL_DMA_Abort+0x224>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d036      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a6e      	ldr	r2, [pc, #440]	; (8004cc4 <HAL_DMA_Abort+0x228>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d031      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a6d      	ldr	r2, [pc, #436]	; (8004cc8 <HAL_DMA_Abort+0x22c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d02c      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6b      	ldr	r2, [pc, #428]	; (8004ccc <HAL_DMA_Abort+0x230>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d027      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6a      	ldr	r2, [pc, #424]	; (8004cd0 <HAL_DMA_Abort+0x234>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d022      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a68      	ldr	r2, [pc, #416]	; (8004cd4 <HAL_DMA_Abort+0x238>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01d      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a67      	ldr	r2, [pc, #412]	; (8004cd8 <HAL_DMA_Abort+0x23c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d018      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a65      	ldr	r2, [pc, #404]	; (8004cdc <HAL_DMA_Abort+0x240>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a64      	ldr	r2, [pc, #400]	; (8004ce0 <HAL_DMA_Abort+0x244>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00e      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a62      	ldr	r2, [pc, #392]	; (8004ce4 <HAL_DMA_Abort+0x248>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a61      	ldr	r2, [pc, #388]	; (8004ce8 <HAL_DMA_Abort+0x24c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d004      	beq.n	8004b72 <HAL_DMA_Abort+0xd6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a5f      	ldr	r2, [pc, #380]	; (8004cec <HAL_DMA_Abort+0x250>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <HAL_DMA_Abort+0xda>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_DMA_Abort+0xdc>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 021e 	bic.w	r2, r2, #30
 8004b8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e00a      	b.n	8004bba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 020e 	bic.w	r2, r2, #14
 8004bb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3c      	ldr	r2, [pc, #240]	; (8004cb0 <HAL_DMA_Abort+0x214>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d072      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a3a      	ldr	r2, [pc, #232]	; (8004cb4 <HAL_DMA_Abort+0x218>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d06d      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a39      	ldr	r2, [pc, #228]	; (8004cb8 <HAL_DMA_Abort+0x21c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d068      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a37      	ldr	r2, [pc, #220]	; (8004cbc <HAL_DMA_Abort+0x220>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d063      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a36      	ldr	r2, [pc, #216]	; (8004cc0 <HAL_DMA_Abort+0x224>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d05e      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a34      	ldr	r2, [pc, #208]	; (8004cc4 <HAL_DMA_Abort+0x228>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d059      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a33      	ldr	r2, [pc, #204]	; (8004cc8 <HAL_DMA_Abort+0x22c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d054      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a31      	ldr	r2, [pc, #196]	; (8004ccc <HAL_DMA_Abort+0x230>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d04f      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a30      	ldr	r2, [pc, #192]	; (8004cd0 <HAL_DMA_Abort+0x234>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d04a      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2e      	ldr	r2, [pc, #184]	; (8004cd4 <HAL_DMA_Abort+0x238>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d045      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2d      	ldr	r2, [pc, #180]	; (8004cd8 <HAL_DMA_Abort+0x23c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d040      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2b      	ldr	r2, [pc, #172]	; (8004cdc <HAL_DMA_Abort+0x240>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d03b      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <HAL_DMA_Abort+0x244>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d036      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a28      	ldr	r2, [pc, #160]	; (8004ce4 <HAL_DMA_Abort+0x248>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d031      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <HAL_DMA_Abort+0x24c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d02c      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a25      	ldr	r2, [pc, #148]	; (8004cec <HAL_DMA_Abort+0x250>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d027      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <HAL_DMA_Abort+0x254>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d022      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a22      	ldr	r2, [pc, #136]	; (8004cf4 <HAL_DMA_Abort+0x258>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01d      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <HAL_DMA_Abort+0x25c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <HAL_DMA_Abort+0x260>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <HAL_DMA_Abort+0x264>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <HAL_DMA_Abort+0x268>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <HAL_DMA_Abort+0x26c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_DMA_Abort+0x20e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <HAL_DMA_Abort+0x270>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d132      	bne.n	8004d10 <HAL_DMA_Abort+0x274>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e031      	b.n	8004d12 <HAL_DMA_Abort+0x276>
 8004cae:	bf00      	nop
 8004cb0:	40020010 	.word	0x40020010
 8004cb4:	40020028 	.word	0x40020028
 8004cb8:	40020040 	.word	0x40020040
 8004cbc:	40020058 	.word	0x40020058
 8004cc0:	40020070 	.word	0x40020070
 8004cc4:	40020088 	.word	0x40020088
 8004cc8:	400200a0 	.word	0x400200a0
 8004ccc:	400200b8 	.word	0x400200b8
 8004cd0:	40020410 	.word	0x40020410
 8004cd4:	40020428 	.word	0x40020428
 8004cd8:	40020440 	.word	0x40020440
 8004cdc:	40020458 	.word	0x40020458
 8004ce0:	40020470 	.word	0x40020470
 8004ce4:	40020488 	.word	0x40020488
 8004ce8:	400204a0 	.word	0x400204a0
 8004cec:	400204b8 	.word	0x400204b8
 8004cf0:	58025408 	.word	0x58025408
 8004cf4:	5802541c 	.word	0x5802541c
 8004cf8:	58025430 	.word	0x58025430
 8004cfc:	58025444 	.word	0x58025444
 8004d00:	58025458 	.word	0x58025458
 8004d04:	5802546c 	.word	0x5802546c
 8004d08:	58025480 	.word	0x58025480
 8004d0c:	58025494 	.word	0x58025494
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a6d      	ldr	r2, [pc, #436]	; (8004ee0 <HAL_DMA_Abort+0x444>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d04a      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a6b      	ldr	r2, [pc, #428]	; (8004ee4 <HAL_DMA_Abort+0x448>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d045      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a6a      	ldr	r2, [pc, #424]	; (8004ee8 <HAL_DMA_Abort+0x44c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d040      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a68      	ldr	r2, [pc, #416]	; (8004eec <HAL_DMA_Abort+0x450>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d03b      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a67      	ldr	r2, [pc, #412]	; (8004ef0 <HAL_DMA_Abort+0x454>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d036      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a65      	ldr	r2, [pc, #404]	; (8004ef4 <HAL_DMA_Abort+0x458>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d031      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a64      	ldr	r2, [pc, #400]	; (8004ef8 <HAL_DMA_Abort+0x45c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d02c      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a62      	ldr	r2, [pc, #392]	; (8004efc <HAL_DMA_Abort+0x460>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d027      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a61      	ldr	r2, [pc, #388]	; (8004f00 <HAL_DMA_Abort+0x464>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d022      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a5f      	ldr	r2, [pc, #380]	; (8004f04 <HAL_DMA_Abort+0x468>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01d      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a5e      	ldr	r2, [pc, #376]	; (8004f08 <HAL_DMA_Abort+0x46c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d018      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a5c      	ldr	r2, [pc, #368]	; (8004f0c <HAL_DMA_Abort+0x470>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5b      	ldr	r2, [pc, #364]	; (8004f10 <HAL_DMA_Abort+0x474>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a59      	ldr	r2, [pc, #356]	; (8004f14 <HAL_DMA_Abort+0x478>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a58      	ldr	r2, [pc, #352]	; (8004f18 <HAL_DMA_Abort+0x47c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_DMA_Abort+0x32a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a56      	ldr	r2, [pc, #344]	; (8004f1c <HAL_DMA_Abort+0x480>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <HAL_DMA_Abort+0x33c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e007      	b.n	8004de8 <HAL_DMA_Abort+0x34c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004de8:	e013      	b.n	8004e12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dea:	f7fd f975 	bl	80020d8 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d90c      	bls.n	8004e12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2203      	movs	r2, #3
 8004e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e12d      	b.n	800506e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e5      	bne.n	8004dea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2f      	ldr	r2, [pc, #188]	; (8004ee0 <HAL_DMA_Abort+0x444>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d04a      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <HAL_DMA_Abort+0x448>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d045      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <HAL_DMA_Abort+0x44c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d040      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <HAL_DMA_Abort+0x450>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d03b      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <HAL_DMA_Abort+0x454>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d036      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a27      	ldr	r2, [pc, #156]	; (8004ef4 <HAL_DMA_Abort+0x458>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d031      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <HAL_DMA_Abort+0x45c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d02c      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a24      	ldr	r2, [pc, #144]	; (8004efc <HAL_DMA_Abort+0x460>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d027      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <HAL_DMA_Abort+0x464>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d022      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <HAL_DMA_Abort+0x468>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01d      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <HAL_DMA_Abort+0x46c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d018      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <HAL_DMA_Abort+0x470>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <HAL_DMA_Abort+0x474>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00e      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <HAL_DMA_Abort+0x478>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d009      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <HAL_DMA_Abort+0x47c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d004      	beq.n	8004ebe <HAL_DMA_Abort+0x422>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_DMA_Abort+0x480>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <HAL_DMA_Abort+0x426>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_DMA_Abort+0x428>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02b      	beq.n	8004f20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ecc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	223f      	movs	r2, #63	; 0x3f
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	609a      	str	r2, [r3, #8]
 8004ede:	e02a      	b.n	8004f36 <HAL_DMA_Abort+0x49a>
 8004ee0:	40020010 	.word	0x40020010
 8004ee4:	40020028 	.word	0x40020028
 8004ee8:	40020040 	.word	0x40020040
 8004eec:	40020058 	.word	0x40020058
 8004ef0:	40020070 	.word	0x40020070
 8004ef4:	40020088 	.word	0x40020088
 8004ef8:	400200a0 	.word	0x400200a0
 8004efc:	400200b8 	.word	0x400200b8
 8004f00:	40020410 	.word	0x40020410
 8004f04:	40020428 	.word	0x40020428
 8004f08:	40020440 	.word	0x40020440
 8004f0c:	40020458 	.word	0x40020458
 8004f10:	40020470 	.word	0x40020470
 8004f14:	40020488 	.word	0x40020488
 8004f18:	400204a0 	.word	0x400204a0
 8004f1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2201      	movs	r2, #1
 8004f30:	409a      	lsls	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a4f      	ldr	r2, [pc, #316]	; (8005078 <HAL_DMA_Abort+0x5dc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d072      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a4d      	ldr	r2, [pc, #308]	; (800507c <HAL_DMA_Abort+0x5e0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d06d      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a4c      	ldr	r2, [pc, #304]	; (8005080 <HAL_DMA_Abort+0x5e4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d068      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a4a      	ldr	r2, [pc, #296]	; (8005084 <HAL_DMA_Abort+0x5e8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d063      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a49      	ldr	r2, [pc, #292]	; (8005088 <HAL_DMA_Abort+0x5ec>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d05e      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a47      	ldr	r2, [pc, #284]	; (800508c <HAL_DMA_Abort+0x5f0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d059      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a46      	ldr	r2, [pc, #280]	; (8005090 <HAL_DMA_Abort+0x5f4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d054      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a44      	ldr	r2, [pc, #272]	; (8005094 <HAL_DMA_Abort+0x5f8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d04f      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a43      	ldr	r2, [pc, #268]	; (8005098 <HAL_DMA_Abort+0x5fc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d04a      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a41      	ldr	r2, [pc, #260]	; (800509c <HAL_DMA_Abort+0x600>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d045      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a40      	ldr	r2, [pc, #256]	; (80050a0 <HAL_DMA_Abort+0x604>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d040      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a3e      	ldr	r2, [pc, #248]	; (80050a4 <HAL_DMA_Abort+0x608>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d03b      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3d      	ldr	r2, [pc, #244]	; (80050a8 <HAL_DMA_Abort+0x60c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d036      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a3b      	ldr	r2, [pc, #236]	; (80050ac <HAL_DMA_Abort+0x610>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d031      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a3a      	ldr	r2, [pc, #232]	; (80050b0 <HAL_DMA_Abort+0x614>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d02c      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a38      	ldr	r2, [pc, #224]	; (80050b4 <HAL_DMA_Abort+0x618>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d027      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a37      	ldr	r2, [pc, #220]	; (80050b8 <HAL_DMA_Abort+0x61c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d022      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a35      	ldr	r2, [pc, #212]	; (80050bc <HAL_DMA_Abort+0x620>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01d      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a34      	ldr	r2, [pc, #208]	; (80050c0 <HAL_DMA_Abort+0x624>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d018      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a32      	ldr	r2, [pc, #200]	; (80050c4 <HAL_DMA_Abort+0x628>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a31      	ldr	r2, [pc, #196]	; (80050c8 <HAL_DMA_Abort+0x62c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00e      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <HAL_DMA_Abort+0x630>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2e      	ldr	r2, [pc, #184]	; (80050d0 <HAL_DMA_Abort+0x634>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_DMA_Abort+0x58a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <HAL_DMA_Abort+0x638>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <HAL_DMA_Abort+0x58e>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_DMA_Abort+0x590>
 800502a:	2300      	movs	r3, #0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d015      	beq.n	800505c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005038:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00c      	beq.n	800505c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005050:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800505a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40020010 	.word	0x40020010
 800507c:	40020028 	.word	0x40020028
 8005080:	40020040 	.word	0x40020040
 8005084:	40020058 	.word	0x40020058
 8005088:	40020070 	.word	0x40020070
 800508c:	40020088 	.word	0x40020088
 8005090:	400200a0 	.word	0x400200a0
 8005094:	400200b8 	.word	0x400200b8
 8005098:	40020410 	.word	0x40020410
 800509c:	40020428 	.word	0x40020428
 80050a0:	40020440 	.word	0x40020440
 80050a4:	40020458 	.word	0x40020458
 80050a8:	40020470 	.word	0x40020470
 80050ac:	40020488 	.word	0x40020488
 80050b0:	400204a0 	.word	0x400204a0
 80050b4:	400204b8 	.word	0x400204b8
 80050b8:	58025408 	.word	0x58025408
 80050bc:	5802541c 	.word	0x5802541c
 80050c0:	58025430 	.word	0x58025430
 80050c4:	58025444 	.word	0x58025444
 80050c8:	58025458 	.word	0x58025458
 80050cc:	5802546c 	.word	0x5802546c
 80050d0:	58025480 	.word	0x58025480
 80050d4:	58025494 	.word	0x58025494

080050d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e237      	b.n	800555a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d004      	beq.n	8005100 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2280      	movs	r2, #128	; 0x80
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e22c      	b.n	800555a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a5c      	ldr	r2, [pc, #368]	; (8005278 <HAL_DMA_Abort_IT+0x1a0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d04a      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a5b      	ldr	r2, [pc, #364]	; (800527c <HAL_DMA_Abort_IT+0x1a4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d045      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a59      	ldr	r2, [pc, #356]	; (8005280 <HAL_DMA_Abort_IT+0x1a8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d040      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a58      	ldr	r2, [pc, #352]	; (8005284 <HAL_DMA_Abort_IT+0x1ac>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d03b      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a56      	ldr	r2, [pc, #344]	; (8005288 <HAL_DMA_Abort_IT+0x1b0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d036      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a55      	ldr	r2, [pc, #340]	; (800528c <HAL_DMA_Abort_IT+0x1b4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d031      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a53      	ldr	r2, [pc, #332]	; (8005290 <HAL_DMA_Abort_IT+0x1b8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d02c      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a52      	ldr	r2, [pc, #328]	; (8005294 <HAL_DMA_Abort_IT+0x1bc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d027      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a50      	ldr	r2, [pc, #320]	; (8005298 <HAL_DMA_Abort_IT+0x1c0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a4f      	ldr	r2, [pc, #316]	; (800529c <HAL_DMA_Abort_IT+0x1c4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d01d      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a4d      	ldr	r2, [pc, #308]	; (80052a0 <HAL_DMA_Abort_IT+0x1c8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a4c      	ldr	r2, [pc, #304]	; (80052a4 <HAL_DMA_Abort_IT+0x1cc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a4a      	ldr	r2, [pc, #296]	; (80052a8 <HAL_DMA_Abort_IT+0x1d0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a49      	ldr	r2, [pc, #292]	; (80052ac <HAL_DMA_Abort_IT+0x1d4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a47      	ldr	r2, [pc, #284]	; (80052b0 <HAL_DMA_Abort_IT+0x1d8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_DMA_Abort_IT+0xc8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a46      	ldr	r2, [pc, #280]	; (80052b4 <HAL_DMA_Abort_IT+0x1dc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d101      	bne.n	80051a4 <HAL_DMA_Abort_IT+0xcc>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <HAL_DMA_Abort_IT+0xce>
 80051a4:	2300      	movs	r3, #0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8086 	beq.w	80052b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2204      	movs	r2, #4
 80051b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2f      	ldr	r2, [pc, #188]	; (8005278 <HAL_DMA_Abort_IT+0x1a0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d04a      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a2e      	ldr	r2, [pc, #184]	; (800527c <HAL_DMA_Abort_IT+0x1a4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d045      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <HAL_DMA_Abort_IT+0x1a8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d040      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2b      	ldr	r2, [pc, #172]	; (8005284 <HAL_DMA_Abort_IT+0x1ac>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d03b      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a29      	ldr	r2, [pc, #164]	; (8005288 <HAL_DMA_Abort_IT+0x1b0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d036      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a28      	ldr	r2, [pc, #160]	; (800528c <HAL_DMA_Abort_IT+0x1b4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d031      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a26      	ldr	r2, [pc, #152]	; (8005290 <HAL_DMA_Abort_IT+0x1b8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02c      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a25      	ldr	r2, [pc, #148]	; (8005294 <HAL_DMA_Abort_IT+0x1bc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d027      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a23      	ldr	r2, [pc, #140]	; (8005298 <HAL_DMA_Abort_IT+0x1c0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a22      	ldr	r2, [pc, #136]	; (800529c <HAL_DMA_Abort_IT+0x1c4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d01d      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <HAL_DMA_Abort_IT+0x1c8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <HAL_DMA_Abort_IT+0x1cc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <HAL_DMA_Abort_IT+0x1d0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <HAL_DMA_Abort_IT+0x1d4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_DMA_Abort_IT+0x1d8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_DMA_Abort_IT+0x17c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <HAL_DMA_Abort_IT+0x1dc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d108      	bne.n	8005266 <HAL_DMA_Abort_IT+0x18e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e178      	b.n	8005558 <HAL_DMA_Abort_IT+0x480>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e16f      	b.n	8005558 <HAL_DMA_Abort_IT+0x480>
 8005278:	40020010 	.word	0x40020010
 800527c:	40020028 	.word	0x40020028
 8005280:	40020040 	.word	0x40020040
 8005284:	40020058 	.word	0x40020058
 8005288:	40020070 	.word	0x40020070
 800528c:	40020088 	.word	0x40020088
 8005290:	400200a0 	.word	0x400200a0
 8005294:	400200b8 	.word	0x400200b8
 8005298:	40020410 	.word	0x40020410
 800529c:	40020428 	.word	0x40020428
 80052a0:	40020440 	.word	0x40020440
 80052a4:	40020458 	.word	0x40020458
 80052a8:	40020470 	.word	0x40020470
 80052ac:	40020488 	.word	0x40020488
 80052b0:	400204a0 	.word	0x400204a0
 80052b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 020e 	bic.w	r2, r2, #14
 80052c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6c      	ldr	r2, [pc, #432]	; (8005480 <HAL_DMA_Abort_IT+0x3a8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d04a      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6b      	ldr	r2, [pc, #428]	; (8005484 <HAL_DMA_Abort_IT+0x3ac>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d045      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a69      	ldr	r2, [pc, #420]	; (8005488 <HAL_DMA_Abort_IT+0x3b0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d040      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a68      	ldr	r2, [pc, #416]	; (800548c <HAL_DMA_Abort_IT+0x3b4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d03b      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a66      	ldr	r2, [pc, #408]	; (8005490 <HAL_DMA_Abort_IT+0x3b8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d036      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a65      	ldr	r2, [pc, #404]	; (8005494 <HAL_DMA_Abort_IT+0x3bc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d031      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a63      	ldr	r2, [pc, #396]	; (8005498 <HAL_DMA_Abort_IT+0x3c0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d02c      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a62      	ldr	r2, [pc, #392]	; (800549c <HAL_DMA_Abort_IT+0x3c4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d027      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a60      	ldr	r2, [pc, #384]	; (80054a0 <HAL_DMA_Abort_IT+0x3c8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d022      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a5f      	ldr	r2, [pc, #380]	; (80054a4 <HAL_DMA_Abort_IT+0x3cc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d01d      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a5d      	ldr	r2, [pc, #372]	; (80054a8 <HAL_DMA_Abort_IT+0x3d0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d018      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a5c      	ldr	r2, [pc, #368]	; (80054ac <HAL_DMA_Abort_IT+0x3d4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a5a      	ldr	r2, [pc, #360]	; (80054b0 <HAL_DMA_Abort_IT+0x3d8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a59      	ldr	r2, [pc, #356]	; (80054b4 <HAL_DMA_Abort_IT+0x3dc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a57      	ldr	r2, [pc, #348]	; (80054b8 <HAL_DMA_Abort_IT+0x3e0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <HAL_DMA_Abort_IT+0x290>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a56      	ldr	r2, [pc, #344]	; (80054bc <HAL_DMA_Abort_IT+0x3e4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d108      	bne.n	800537a <HAL_DMA_Abort_IT+0x2a2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e007      	b.n	800538a <HAL_DMA_Abort_IT+0x2b2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a3c      	ldr	r2, [pc, #240]	; (8005480 <HAL_DMA_Abort_IT+0x3a8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d072      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a3a      	ldr	r2, [pc, #232]	; (8005484 <HAL_DMA_Abort_IT+0x3ac>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d06d      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a39      	ldr	r2, [pc, #228]	; (8005488 <HAL_DMA_Abort_IT+0x3b0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d068      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a37      	ldr	r2, [pc, #220]	; (800548c <HAL_DMA_Abort_IT+0x3b4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d063      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a36      	ldr	r2, [pc, #216]	; (8005490 <HAL_DMA_Abort_IT+0x3b8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d05e      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a34      	ldr	r2, [pc, #208]	; (8005494 <HAL_DMA_Abort_IT+0x3bc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d059      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a33      	ldr	r2, [pc, #204]	; (8005498 <HAL_DMA_Abort_IT+0x3c0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d054      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a31      	ldr	r2, [pc, #196]	; (800549c <HAL_DMA_Abort_IT+0x3c4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d04f      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <HAL_DMA_Abort_IT+0x3c8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d04a      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2e      	ldr	r2, [pc, #184]	; (80054a4 <HAL_DMA_Abort_IT+0x3cc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d045      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2d      	ldr	r2, [pc, #180]	; (80054a8 <HAL_DMA_Abort_IT+0x3d0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d040      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <HAL_DMA_Abort_IT+0x3d4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d03b      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a2a      	ldr	r2, [pc, #168]	; (80054b0 <HAL_DMA_Abort_IT+0x3d8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d036      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <HAL_DMA_Abort_IT+0x3dc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d031      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a27      	ldr	r2, [pc, #156]	; (80054b8 <HAL_DMA_Abort_IT+0x3e0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d02c      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a25      	ldr	r2, [pc, #148]	; (80054bc <HAL_DMA_Abort_IT+0x3e4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d027      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a24      	ldr	r2, [pc, #144]	; (80054c0 <HAL_DMA_Abort_IT+0x3e8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d022      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <HAL_DMA_Abort_IT+0x3ec>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01d      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a21      	ldr	r2, [pc, #132]	; (80054c8 <HAL_DMA_Abort_IT+0x3f0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d018      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <HAL_DMA_Abort_IT+0x3f4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_DMA_Abort_IT+0x3f8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_DMA_Abort_IT+0x3fc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_DMA_Abort_IT+0x400>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_DMA_Abort_IT+0x3a2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a19      	ldr	r2, [pc, #100]	; (80054dc <HAL_DMA_Abort_IT+0x404>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d132      	bne.n	80054e0 <HAL_DMA_Abort_IT+0x408>
 800547a:	2301      	movs	r3, #1
 800547c:	e031      	b.n	80054e2 <HAL_DMA_Abort_IT+0x40a>
 800547e:	bf00      	nop
 8005480:	40020010 	.word	0x40020010
 8005484:	40020028 	.word	0x40020028
 8005488:	40020040 	.word	0x40020040
 800548c:	40020058 	.word	0x40020058
 8005490:	40020070 	.word	0x40020070
 8005494:	40020088 	.word	0x40020088
 8005498:	400200a0 	.word	0x400200a0
 800549c:	400200b8 	.word	0x400200b8
 80054a0:	40020410 	.word	0x40020410
 80054a4:	40020428 	.word	0x40020428
 80054a8:	40020440 	.word	0x40020440
 80054ac:	40020458 	.word	0x40020458
 80054b0:	40020470 	.word	0x40020470
 80054b4:	40020488 	.word	0x40020488
 80054b8:	400204a0 	.word	0x400204a0
 80054bc:	400204b8 	.word	0x400204b8
 80054c0:	58025408 	.word	0x58025408
 80054c4:	5802541c 	.word	0x5802541c
 80054c8:	58025430 	.word	0x58025430
 80054cc:	58025444 	.word	0x58025444
 80054d0:	58025458 	.word	0x58025458
 80054d4:	5802546c 	.word	0x5802546c
 80054d8:	58025480 	.word	0x58025480
 80054dc:	58025494 	.word	0x58025494
 80054e0:	2300      	movs	r3, #0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d028      	beq.n	8005538 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2201      	movs	r2, #1
 8005506:	409a      	lsls	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005514:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800552c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005536:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop

08005564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005570:	4b67      	ldr	r3, [pc, #412]	; (8005710 <HAL_DMA_IRQHandler+0x1ac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a67      	ldr	r2, [pc, #412]	; (8005714 <HAL_DMA_IRQHandler+0x1b0>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	0a9b      	lsrs	r3, r3, #10
 800557c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5f      	ldr	r2, [pc, #380]	; (8005718 <HAL_DMA_IRQHandler+0x1b4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d04a      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a5d      	ldr	r2, [pc, #372]	; (800571c <HAL_DMA_IRQHandler+0x1b8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d045      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a5c      	ldr	r2, [pc, #368]	; (8005720 <HAL_DMA_IRQHandler+0x1bc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d040      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a5a      	ldr	r2, [pc, #360]	; (8005724 <HAL_DMA_IRQHandler+0x1c0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d03b      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a59      	ldr	r2, [pc, #356]	; (8005728 <HAL_DMA_IRQHandler+0x1c4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d036      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a57      	ldr	r2, [pc, #348]	; (800572c <HAL_DMA_IRQHandler+0x1c8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d031      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a56      	ldr	r2, [pc, #344]	; (8005730 <HAL_DMA_IRQHandler+0x1cc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d02c      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a54      	ldr	r2, [pc, #336]	; (8005734 <HAL_DMA_IRQHandler+0x1d0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d027      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a53      	ldr	r2, [pc, #332]	; (8005738 <HAL_DMA_IRQHandler+0x1d4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d022      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a51      	ldr	r2, [pc, #324]	; (800573c <HAL_DMA_IRQHandler+0x1d8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01d      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a50      	ldr	r2, [pc, #320]	; (8005740 <HAL_DMA_IRQHandler+0x1dc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a4e      	ldr	r2, [pc, #312]	; (8005744 <HAL_DMA_IRQHandler+0x1e0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4d      	ldr	r2, [pc, #308]	; (8005748 <HAL_DMA_IRQHandler+0x1e4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4b      	ldr	r2, [pc, #300]	; (800574c <HAL_DMA_IRQHandler+0x1e8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a4a      	ldr	r2, [pc, #296]	; (8005750 <HAL_DMA_IRQHandler+0x1ec>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_DMA_IRQHandler+0xd2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a48      	ldr	r2, [pc, #288]	; (8005754 <HAL_DMA_IRQHandler+0x1f0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d101      	bne.n	800563a <HAL_DMA_IRQHandler+0xd6>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <HAL_DMA_IRQHandler+0xd8>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 842b 	beq.w	8005e98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	2208      	movs	r2, #8
 800564c:	409a      	lsls	r2, r3
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80a2 	beq.w	800579c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2e      	ldr	r2, [pc, #184]	; (8005718 <HAL_DMA_IRQHandler+0x1b4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d04a      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a2d      	ldr	r2, [pc, #180]	; (800571c <HAL_DMA_IRQHandler+0x1b8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d045      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a2b      	ldr	r2, [pc, #172]	; (8005720 <HAL_DMA_IRQHandler+0x1bc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d040      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2a      	ldr	r2, [pc, #168]	; (8005724 <HAL_DMA_IRQHandler+0x1c0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d03b      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a28      	ldr	r2, [pc, #160]	; (8005728 <HAL_DMA_IRQHandler+0x1c4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d036      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a27      	ldr	r2, [pc, #156]	; (800572c <HAL_DMA_IRQHandler+0x1c8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d031      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a25      	ldr	r2, [pc, #148]	; (8005730 <HAL_DMA_IRQHandler+0x1cc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02c      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a24      	ldr	r2, [pc, #144]	; (8005734 <HAL_DMA_IRQHandler+0x1d0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d027      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a22      	ldr	r2, [pc, #136]	; (8005738 <HAL_DMA_IRQHandler+0x1d4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d022      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_DMA_IRQHandler+0x1d8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d01d      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <HAL_DMA_IRQHandler+0x1dc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d018      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_DMA_IRQHandler+0x1e0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <HAL_DMA_IRQHandler+0x1e4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00e      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HAL_DMA_IRQHandler+0x1e8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d009      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a19      	ldr	r2, [pc, #100]	; (8005750 <HAL_DMA_IRQHandler+0x1ec>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d004      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x194>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a18      	ldr	r2, [pc, #96]	; (8005754 <HAL_DMA_IRQHandler+0x1f0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d12f      	bne.n	8005758 <HAL_DMA_IRQHandler+0x1f4>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf14      	ite	ne
 8005706:	2301      	movne	r3, #1
 8005708:	2300      	moveq	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	e02e      	b.n	800576c <HAL_DMA_IRQHandler+0x208>
 800570e:	bf00      	nop
 8005710:	24000004 	.word	0x24000004
 8005714:	1b4e81b5 	.word	0x1b4e81b5
 8005718:	40020010 	.word	0x40020010
 800571c:	40020028 	.word	0x40020028
 8005720:	40020040 	.word	0x40020040
 8005724:	40020058 	.word	0x40020058
 8005728:	40020070 	.word	0x40020070
 800572c:	40020088 	.word	0x40020088
 8005730:	400200a0 	.word	0x400200a0
 8005734:	400200b8 	.word	0x400200b8
 8005738:	40020410 	.word	0x40020410
 800573c:	40020428 	.word	0x40020428
 8005740:	40020440 	.word	0x40020440
 8005744:	40020458 	.word	0x40020458
 8005748:	40020470 	.word	0x40020470
 800574c:	40020488 	.word	0x40020488
 8005750:	400204a0 	.word	0x400204a0
 8005754:	400204b8 	.word	0x400204b8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d015      	beq.n	800579c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0204 	bic.w	r2, r2, #4
 800577e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	2208      	movs	r2, #8
 800578a:	409a      	lsls	r2, r3
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	f043 0201 	orr.w	r2, r3, #1
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	fa22 f303 	lsr.w	r3, r2, r3
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d06e      	beq.n	8005890 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a69      	ldr	r2, [pc, #420]	; (800595c <HAL_DMA_IRQHandler+0x3f8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d04a      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a67      	ldr	r2, [pc, #412]	; (8005960 <HAL_DMA_IRQHandler+0x3fc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d045      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a66      	ldr	r2, [pc, #408]	; (8005964 <HAL_DMA_IRQHandler+0x400>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d040      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a64      	ldr	r2, [pc, #400]	; (8005968 <HAL_DMA_IRQHandler+0x404>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d03b      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a63      	ldr	r2, [pc, #396]	; (800596c <HAL_DMA_IRQHandler+0x408>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d036      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a61      	ldr	r2, [pc, #388]	; (8005970 <HAL_DMA_IRQHandler+0x40c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d031      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a60      	ldr	r2, [pc, #384]	; (8005974 <HAL_DMA_IRQHandler+0x410>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d02c      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a5e      	ldr	r2, [pc, #376]	; (8005978 <HAL_DMA_IRQHandler+0x414>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d027      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a5d      	ldr	r2, [pc, #372]	; (800597c <HAL_DMA_IRQHandler+0x418>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a5b      	ldr	r2, [pc, #364]	; (8005980 <HAL_DMA_IRQHandler+0x41c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01d      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a5a      	ldr	r2, [pc, #360]	; (8005984 <HAL_DMA_IRQHandler+0x420>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a58      	ldr	r2, [pc, #352]	; (8005988 <HAL_DMA_IRQHandler+0x424>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a57      	ldr	r2, [pc, #348]	; (800598c <HAL_DMA_IRQHandler+0x428>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a55      	ldr	r2, [pc, #340]	; (8005990 <HAL_DMA_IRQHandler+0x42c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a54      	ldr	r2, [pc, #336]	; (8005994 <HAL_DMA_IRQHandler+0x430>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_DMA_IRQHandler+0x2ee>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a52      	ldr	r2, [pc, #328]	; (8005998 <HAL_DMA_IRQHandler+0x434>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10a      	bne.n	8005868 <HAL_DMA_IRQHandler+0x304>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b00      	cmp	r3, #0
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e003      	b.n	8005870 <HAL_DMA_IRQHandler+0x30c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2201      	movs	r2, #1
 800587e:	409a      	lsls	r2, r3
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	f043 0202 	orr.w	r2, r3, #2
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2204      	movs	r2, #4
 800589a:	409a      	lsls	r2, r3
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 808f 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a2c      	ldr	r2, [pc, #176]	; (800595c <HAL_DMA_IRQHandler+0x3f8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d04a      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <HAL_DMA_IRQHandler+0x3fc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d045      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a29      	ldr	r2, [pc, #164]	; (8005964 <HAL_DMA_IRQHandler+0x400>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d040      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a27      	ldr	r2, [pc, #156]	; (8005968 <HAL_DMA_IRQHandler+0x404>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d03b      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a26      	ldr	r2, [pc, #152]	; (800596c <HAL_DMA_IRQHandler+0x408>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d036      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a24      	ldr	r2, [pc, #144]	; (8005970 <HAL_DMA_IRQHandler+0x40c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d031      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a23      	ldr	r2, [pc, #140]	; (8005974 <HAL_DMA_IRQHandler+0x410>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d02c      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a21      	ldr	r2, [pc, #132]	; (8005978 <HAL_DMA_IRQHandler+0x414>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d027      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a20      	ldr	r2, [pc, #128]	; (800597c <HAL_DMA_IRQHandler+0x418>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d022      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1e      	ldr	r2, [pc, #120]	; (8005980 <HAL_DMA_IRQHandler+0x41c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d01d      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <HAL_DMA_IRQHandler+0x420>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d018      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <HAL_DMA_IRQHandler+0x424>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1a      	ldr	r2, [pc, #104]	; (800598c <HAL_DMA_IRQHandler+0x428>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00e      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a18      	ldr	r2, [pc, #96]	; (8005990 <HAL_DMA_IRQHandler+0x42c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a17      	ldr	r2, [pc, #92]	; (8005994 <HAL_DMA_IRQHandler+0x430>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_DMA_IRQHandler+0x3e2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a15      	ldr	r2, [pc, #84]	; (8005998 <HAL_DMA_IRQHandler+0x434>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d12a      	bne.n	800599c <HAL_DMA_IRQHandler+0x438>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e023      	b.n	80059a4 <HAL_DMA_IRQHandler+0x440>
 800595c:	40020010 	.word	0x40020010
 8005960:	40020028 	.word	0x40020028
 8005964:	40020040 	.word	0x40020040
 8005968:	40020058 	.word	0x40020058
 800596c:	40020070 	.word	0x40020070
 8005970:	40020088 	.word	0x40020088
 8005974:	400200a0 	.word	0x400200a0
 8005978:	400200b8 	.word	0x400200b8
 800597c:	40020410 	.word	0x40020410
 8005980:	40020428 	.word	0x40020428
 8005984:	40020440 	.word	0x40020440
 8005988:	40020458 	.word	0x40020458
 800598c:	40020470 	.word	0x40020470
 8005990:	40020488 	.word	0x40020488
 8005994:	400204a0 	.word	0x400204a0
 8005998:	400204b8 	.word	0x400204b8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00d      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	2204      	movs	r2, #4
 80059b2:	409a      	lsls	r2, r3
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	f043 0204 	orr.w	r2, r3, #4
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	2210      	movs	r2, #16
 80059ce:	409a      	lsls	r2, r3
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80a6 	beq.w	8005b26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a85      	ldr	r2, [pc, #532]	; (8005bf4 <HAL_DMA_IRQHandler+0x690>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d04a      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a83      	ldr	r2, [pc, #524]	; (8005bf8 <HAL_DMA_IRQHandler+0x694>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d045      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a82      	ldr	r2, [pc, #520]	; (8005bfc <HAL_DMA_IRQHandler+0x698>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d040      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a80      	ldr	r2, [pc, #512]	; (8005c00 <HAL_DMA_IRQHandler+0x69c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d03b      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a7f      	ldr	r2, [pc, #508]	; (8005c04 <HAL_DMA_IRQHandler+0x6a0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d036      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a7d      	ldr	r2, [pc, #500]	; (8005c08 <HAL_DMA_IRQHandler+0x6a4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d031      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a7c      	ldr	r2, [pc, #496]	; (8005c0c <HAL_DMA_IRQHandler+0x6a8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d02c      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a7a      	ldr	r2, [pc, #488]	; (8005c10 <HAL_DMA_IRQHandler+0x6ac>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d027      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a79      	ldr	r2, [pc, #484]	; (8005c14 <HAL_DMA_IRQHandler+0x6b0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d022      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a77      	ldr	r2, [pc, #476]	; (8005c18 <HAL_DMA_IRQHandler+0x6b4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01d      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a76      	ldr	r2, [pc, #472]	; (8005c1c <HAL_DMA_IRQHandler+0x6b8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d018      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a74      	ldr	r2, [pc, #464]	; (8005c20 <HAL_DMA_IRQHandler+0x6bc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a73      	ldr	r2, [pc, #460]	; (8005c24 <HAL_DMA_IRQHandler+0x6c0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a71      	ldr	r2, [pc, #452]	; (8005c28 <HAL_DMA_IRQHandler+0x6c4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a70      	ldr	r2, [pc, #448]	; (8005c2c <HAL_DMA_IRQHandler+0x6c8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x516>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a6e      	ldr	r2, [pc, #440]	; (8005c30 <HAL_DMA_IRQHandler+0x6cc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10a      	bne.n	8005a90 <HAL_DMA_IRQHandler+0x52c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	e009      	b.n	8005aa4 <HAL_DMA_IRQHandler+0x540>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bf14      	ite	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	2300      	moveq	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d03e      	beq.n	8005b26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d018      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d108      	bne.n	8005ae6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d024      	beq.n	8005b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
 8005ae4:	e01f      	b.n	8005b26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d01b      	beq.n	8005b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
 8005af6:	e016      	b.n	8005b26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d107      	bne.n	8005b16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0208 	bic.w	r2, r2, #8
 8005b14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	2220      	movs	r2, #32
 8005b30:	409a      	lsls	r2, r3
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8110 	beq.w	8005d5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <HAL_DMA_IRQHandler+0x690>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d04a      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <HAL_DMA_IRQHandler+0x694>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d045      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <HAL_DMA_IRQHandler+0x698>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d040      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <HAL_DMA_IRQHandler+0x69c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d03b      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a26      	ldr	r2, [pc, #152]	; (8005c04 <HAL_DMA_IRQHandler+0x6a0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d036      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <HAL_DMA_IRQHandler+0x6a4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d031      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a23      	ldr	r2, [pc, #140]	; (8005c0c <HAL_DMA_IRQHandler+0x6a8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d02c      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <HAL_DMA_IRQHandler+0x6ac>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d027      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a20      	ldr	r2, [pc, #128]	; (8005c14 <HAL_DMA_IRQHandler+0x6b0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d022      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <HAL_DMA_IRQHandler+0x6b4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01d      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <HAL_DMA_IRQHandler+0x6b8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <HAL_DMA_IRQHandler+0x6bc>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <HAL_DMA_IRQHandler+0x6c0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <HAL_DMA_IRQHandler+0x6c4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <HAL_DMA_IRQHandler+0x6c8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x678>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <HAL_DMA_IRQHandler+0x6cc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d12b      	bne.n	8005c34 <HAL_DMA_IRQHandler+0x6d0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bf14      	ite	ne
 8005bea:	2301      	movne	r3, #1
 8005bec:	2300      	moveq	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	e02a      	b.n	8005c48 <HAL_DMA_IRQHandler+0x6e4>
 8005bf2:	bf00      	nop
 8005bf4:	40020010 	.word	0x40020010
 8005bf8:	40020028 	.word	0x40020028
 8005bfc:	40020040 	.word	0x40020040
 8005c00:	40020058 	.word	0x40020058
 8005c04:	40020070 	.word	0x40020070
 8005c08:	40020088 	.word	0x40020088
 8005c0c:	400200a0 	.word	0x400200a0
 8005c10:	400200b8 	.word	0x400200b8
 8005c14:	40020410 	.word	0x40020410
 8005c18:	40020428 	.word	0x40020428
 8005c1c:	40020440 	.word	0x40020440
 8005c20:	40020458 	.word	0x40020458
 8005c24:	40020470 	.word	0x40020470
 8005c28:	40020488 	.word	0x40020488
 8005c2c:	400204a0 	.word	0x400204a0
 8005c30:	400204b8 	.word	0x400204b8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bf14      	ite	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	2300      	moveq	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8087 	beq.w	8005d5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	2220      	movs	r2, #32
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d139      	bne.n	8005cde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0216 	bic.w	r2, r2, #22
 8005c78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <HAL_DMA_IRQHandler+0x736>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0208 	bic.w	r2, r2, #8
 8005ca8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	223f      	movs	r2, #63	; 0x3f
 8005cb4:	409a      	lsls	r2, r3
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 834a 	beq.w	8006368 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4798      	blx	r3
          }
          return;
 8005cdc:	e344      	b.n	8006368 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d018      	beq.n	8005d1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d108      	bne.n	8005d0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d02c      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
 8005d0a:	e027      	b.n	8005d5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d023      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
 8005d1c:	e01e      	b.n	8005d5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10f      	bne.n	8005d4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0210 	bic.w	r2, r2, #16
 8005d3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8306 	beq.w	8006372 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8088 	beq.w	8005e84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2204      	movs	r2, #4
 8005d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a7a      	ldr	r2, [pc, #488]	; (8005f6c <HAL_DMA_IRQHandler+0xa08>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d04a      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a79      	ldr	r2, [pc, #484]	; (8005f70 <HAL_DMA_IRQHandler+0xa0c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d045      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a77      	ldr	r2, [pc, #476]	; (8005f74 <HAL_DMA_IRQHandler+0xa10>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d040      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a76      	ldr	r2, [pc, #472]	; (8005f78 <HAL_DMA_IRQHandler+0xa14>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d03b      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a74      	ldr	r2, [pc, #464]	; (8005f7c <HAL_DMA_IRQHandler+0xa18>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d036      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a73      	ldr	r2, [pc, #460]	; (8005f80 <HAL_DMA_IRQHandler+0xa1c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d031      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a71      	ldr	r2, [pc, #452]	; (8005f84 <HAL_DMA_IRQHandler+0xa20>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d02c      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a70      	ldr	r2, [pc, #448]	; (8005f88 <HAL_DMA_IRQHandler+0xa24>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d027      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a6e      	ldr	r2, [pc, #440]	; (8005f8c <HAL_DMA_IRQHandler+0xa28>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d022      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a6d      	ldr	r2, [pc, #436]	; (8005f90 <HAL_DMA_IRQHandler+0xa2c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d01d      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a6b      	ldr	r2, [pc, #428]	; (8005f94 <HAL_DMA_IRQHandler+0xa30>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d018      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6a      	ldr	r2, [pc, #424]	; (8005f98 <HAL_DMA_IRQHandler+0xa34>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a68      	ldr	r2, [pc, #416]	; (8005f9c <HAL_DMA_IRQHandler+0xa38>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00e      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a67      	ldr	r2, [pc, #412]	; (8005fa0 <HAL_DMA_IRQHandler+0xa3c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d009      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a65      	ldr	r2, [pc, #404]	; (8005fa4 <HAL_DMA_IRQHandler+0xa40>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x8b8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a64      	ldr	r2, [pc, #400]	; (8005fa8 <HAL_DMA_IRQHandler+0xa44>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <HAL_DMA_IRQHandler+0x8ca>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e007      	b.n	8005e3e <HAL_DMA_IRQHandler+0x8da>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d307      	bcc.n	8005e5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f2      	bne.n	8005e3e <HAL_DMA_IRQHandler+0x8da>
 8005e58:	e000      	b.n	8005e5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d004      	beq.n	8005e74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005e72:	e003      	b.n	8005e7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 8272 	beq.w	8006372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
 8005e96:	e26c      	b.n	8006372 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a43      	ldr	r2, [pc, #268]	; (8005fac <HAL_DMA_IRQHandler+0xa48>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d022      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x984>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a42      	ldr	r2, [pc, #264]	; (8005fb0 <HAL_DMA_IRQHandler+0xa4c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x984>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a40      	ldr	r2, [pc, #256]	; (8005fb4 <HAL_DMA_IRQHandler+0xa50>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d018      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x984>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a3f      	ldr	r2, [pc, #252]	; (8005fb8 <HAL_DMA_IRQHandler+0xa54>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x984>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a3d      	ldr	r2, [pc, #244]	; (8005fbc <HAL_DMA_IRQHandler+0xa58>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x984>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <HAL_DMA_IRQHandler+0xa5c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d009      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x984>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a3a      	ldr	r2, [pc, #232]	; (8005fc4 <HAL_DMA_IRQHandler+0xa60>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x984>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a39      	ldr	r2, [pc, #228]	; (8005fc8 <HAL_DMA_IRQHandler+0xa64>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_DMA_IRQHandler+0x988>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <HAL_DMA_IRQHandler+0x98a>
 8005eec:	2300      	movs	r3, #0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 823f 	beq.w	8006372 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	2204      	movs	r2, #4
 8005f06:	409a      	lsls	r2, r3
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80cd 	beq.w	80060ac <HAL_DMA_IRQHandler+0xb48>
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80c7 	beq.w	80060ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2204      	movs	r2, #4
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d049      	beq.n	8005fcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8210 	beq.w	800636c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f54:	e20a      	b.n	800636c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 8206 	beq.w	800636c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f68:	e200      	b.n	800636c <HAL_DMA_IRQHandler+0xe08>
 8005f6a:	bf00      	nop
 8005f6c:	40020010 	.word	0x40020010
 8005f70:	40020028 	.word	0x40020028
 8005f74:	40020040 	.word	0x40020040
 8005f78:	40020058 	.word	0x40020058
 8005f7c:	40020070 	.word	0x40020070
 8005f80:	40020088 	.word	0x40020088
 8005f84:	400200a0 	.word	0x400200a0
 8005f88:	400200b8 	.word	0x400200b8
 8005f8c:	40020410 	.word	0x40020410
 8005f90:	40020428 	.word	0x40020428
 8005f94:	40020440 	.word	0x40020440
 8005f98:	40020458 	.word	0x40020458
 8005f9c:	40020470 	.word	0x40020470
 8005fa0:	40020488 	.word	0x40020488
 8005fa4:	400204a0 	.word	0x400204a0
 8005fa8:	400204b8 	.word	0x400204b8
 8005fac:	58025408 	.word	0x58025408
 8005fb0:	5802541c 	.word	0x5802541c
 8005fb4:	58025430 	.word	0x58025430
 8005fb8:	58025444 	.word	0x58025444
 8005fbc:	58025458 	.word	0x58025458
 8005fc0:	5802546c 	.word	0x5802546c
 8005fc4:	58025480 	.word	0x58025480
 8005fc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d160      	bne.n	8006098 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a7f      	ldr	r2, [pc, #508]	; (80061d8 <HAL_DMA_IRQHandler+0xc74>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d04a      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a7d      	ldr	r2, [pc, #500]	; (80061dc <HAL_DMA_IRQHandler+0xc78>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d045      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a7c      	ldr	r2, [pc, #496]	; (80061e0 <HAL_DMA_IRQHandler+0xc7c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d040      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7a      	ldr	r2, [pc, #488]	; (80061e4 <HAL_DMA_IRQHandler+0xc80>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d03b      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a79      	ldr	r2, [pc, #484]	; (80061e8 <HAL_DMA_IRQHandler+0xc84>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d036      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a77      	ldr	r2, [pc, #476]	; (80061ec <HAL_DMA_IRQHandler+0xc88>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d031      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a76      	ldr	r2, [pc, #472]	; (80061f0 <HAL_DMA_IRQHandler+0xc8c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d02c      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a74      	ldr	r2, [pc, #464]	; (80061f4 <HAL_DMA_IRQHandler+0xc90>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d027      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a73      	ldr	r2, [pc, #460]	; (80061f8 <HAL_DMA_IRQHandler+0xc94>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d022      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a71      	ldr	r2, [pc, #452]	; (80061fc <HAL_DMA_IRQHandler+0xc98>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01d      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a70      	ldr	r2, [pc, #448]	; (8006200 <HAL_DMA_IRQHandler+0xc9c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d018      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6e      	ldr	r2, [pc, #440]	; (8006204 <HAL_DMA_IRQHandler+0xca0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6d      	ldr	r2, [pc, #436]	; (8006208 <HAL_DMA_IRQHandler+0xca4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00e      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a6b      	ldr	r2, [pc, #428]	; (800620c <HAL_DMA_IRQHandler+0xca8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6a      	ldr	r2, [pc, #424]	; (8006210 <HAL_DMA_IRQHandler+0xcac>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_DMA_IRQHandler+0xb12>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a68      	ldr	r2, [pc, #416]	; (8006214 <HAL_DMA_IRQHandler+0xcb0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d108      	bne.n	8006088 <HAL_DMA_IRQHandler+0xb24>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0208 	bic.w	r2, r2, #8
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e007      	b.n	8006098 <HAL_DMA_IRQHandler+0xb34>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0204 	bic.w	r2, r2, #4
 8006096:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8165 	beq.w	800636c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060aa:	e15f      	b.n	800636c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	2202      	movs	r2, #2
 80060b6:	409a      	lsls	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80c5 	beq.w	800624c <HAL_DMA_IRQHandler+0xce8>
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80bf 	beq.w	800624c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2202      	movs	r2, #2
 80060d8:	409a      	lsls	r2, r3
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d018      	beq.n	800611a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 813a 	beq.w	8006370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006104:	e134      	b.n	8006370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8130 	beq.w	8006370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006118:	e12a      	b.n	8006370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	f040 8089 	bne.w	8006238 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2b      	ldr	r2, [pc, #172]	; (80061d8 <HAL_DMA_IRQHandler+0xc74>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d04a      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a29      	ldr	r2, [pc, #164]	; (80061dc <HAL_DMA_IRQHandler+0xc78>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d045      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a28      	ldr	r2, [pc, #160]	; (80061e0 <HAL_DMA_IRQHandler+0xc7c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d040      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a26      	ldr	r2, [pc, #152]	; (80061e4 <HAL_DMA_IRQHandler+0xc80>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d03b      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a25      	ldr	r2, [pc, #148]	; (80061e8 <HAL_DMA_IRQHandler+0xc84>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d036      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a23      	ldr	r2, [pc, #140]	; (80061ec <HAL_DMA_IRQHandler+0xc88>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d031      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a22      	ldr	r2, [pc, #136]	; (80061f0 <HAL_DMA_IRQHandler+0xc8c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d02c      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <HAL_DMA_IRQHandler+0xc90>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d027      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1f      	ldr	r2, [pc, #124]	; (80061f8 <HAL_DMA_IRQHandler+0xc94>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d022      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <HAL_DMA_IRQHandler+0xc98>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01d      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <HAL_DMA_IRQHandler+0xc9c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d018      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1a      	ldr	r2, [pc, #104]	; (8006204 <HAL_DMA_IRQHandler+0xca0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a19      	ldr	r2, [pc, #100]	; (8006208 <HAL_DMA_IRQHandler+0xca4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a17      	ldr	r2, [pc, #92]	; (800620c <HAL_DMA_IRQHandler+0xca8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a16      	ldr	r2, [pc, #88]	; (8006210 <HAL_DMA_IRQHandler+0xcac>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_DMA_IRQHandler+0xc62>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <HAL_DMA_IRQHandler+0xcb0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d128      	bne.n	8006218 <HAL_DMA_IRQHandler+0xcb4>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0214 	bic.w	r2, r2, #20
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e027      	b.n	8006228 <HAL_DMA_IRQHandler+0xcc4>
 80061d8:	40020010 	.word	0x40020010
 80061dc:	40020028 	.word	0x40020028
 80061e0:	40020040 	.word	0x40020040
 80061e4:	40020058 	.word	0x40020058
 80061e8:	40020070 	.word	0x40020070
 80061ec:	40020088 	.word	0x40020088
 80061f0:	400200a0 	.word	0x400200a0
 80061f4:	400200b8 	.word	0x400200b8
 80061f8:	40020410 	.word	0x40020410
 80061fc:	40020428 	.word	0x40020428
 8006200:	40020440 	.word	0x40020440
 8006204:	40020458 	.word	0x40020458
 8006208:	40020470 	.word	0x40020470
 800620c:	40020488 	.word	0x40020488
 8006210:	400204a0 	.word	0x400204a0
 8006214:	400204b8 	.word	0x400204b8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 020a 	bic.w	r2, r2, #10
 8006226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8097 	beq.w	8006370 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800624a:	e091      	b.n	8006370 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	2208      	movs	r2, #8
 8006256:	409a      	lsls	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8088 	beq.w	8006372 <HAL_DMA_IRQHandler+0xe0e>
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8082 	beq.w	8006372 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a41      	ldr	r2, [pc, #260]	; (8006378 <HAL_DMA_IRQHandler+0xe14>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d04a      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a3f      	ldr	r2, [pc, #252]	; (800637c <HAL_DMA_IRQHandler+0xe18>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d045      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a3e      	ldr	r2, [pc, #248]	; (8006380 <HAL_DMA_IRQHandler+0xe1c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d040      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a3c      	ldr	r2, [pc, #240]	; (8006384 <HAL_DMA_IRQHandler+0xe20>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d03b      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a3b      	ldr	r2, [pc, #236]	; (8006388 <HAL_DMA_IRQHandler+0xe24>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d036      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a39      	ldr	r2, [pc, #228]	; (800638c <HAL_DMA_IRQHandler+0xe28>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d031      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a38      	ldr	r2, [pc, #224]	; (8006390 <HAL_DMA_IRQHandler+0xe2c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d02c      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a36      	ldr	r2, [pc, #216]	; (8006394 <HAL_DMA_IRQHandler+0xe30>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d027      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a35      	ldr	r2, [pc, #212]	; (8006398 <HAL_DMA_IRQHandler+0xe34>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d022      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a33      	ldr	r2, [pc, #204]	; (800639c <HAL_DMA_IRQHandler+0xe38>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01d      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a32      	ldr	r2, [pc, #200]	; (80063a0 <HAL_DMA_IRQHandler+0xe3c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d018      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a30      	ldr	r2, [pc, #192]	; (80063a4 <HAL_DMA_IRQHandler+0xe40>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a2f      	ldr	r2, [pc, #188]	; (80063a8 <HAL_DMA_IRQHandler+0xe44>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a2d      	ldr	r2, [pc, #180]	; (80063ac <HAL_DMA_IRQHandler+0xe48>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a2c      	ldr	r2, [pc, #176]	; (80063b0 <HAL_DMA_IRQHandler+0xe4c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_DMA_IRQHandler+0xdaa>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <HAL_DMA_IRQHandler+0xe50>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d108      	bne.n	8006320 <HAL_DMA_IRQHandler+0xdbc>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 021c 	bic.w	r2, r2, #28
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e007      	b.n	8006330 <HAL_DMA_IRQHandler+0xdcc>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 020e 	bic.w	r2, r2, #14
 800632e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2201      	movs	r2, #1
 800633a:	409a      	lsls	r2, r3
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
 8006366:	e004      	b.n	8006372 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006368:	bf00      	nop
 800636a:	e002      	b.n	8006372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006370:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006372:	3728      	adds	r7, #40	; 0x28
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40020010 	.word	0x40020010
 800637c:	40020028 	.word	0x40020028
 8006380:	40020040 	.word	0x40020040
 8006384:	40020058 	.word	0x40020058
 8006388:	40020070 	.word	0x40020070
 800638c:	40020088 	.word	0x40020088
 8006390:	400200a0 	.word	0x400200a0
 8006394:	400200b8 	.word	0x400200b8
 8006398:	40020410 	.word	0x40020410
 800639c:	40020428 	.word	0x40020428
 80063a0:	40020440 	.word	0x40020440
 80063a4:	40020458 	.word	0x40020458
 80063a8:	40020470 	.word	0x40020470
 80063ac:	40020488 	.word	0x40020488
 80063b0:	400204a0 	.word	0x400204a0
 80063b4:	400204b8 	.word	0x400204b8

080063b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a7f      	ldr	r2, [pc, #508]	; (80065d4 <DMA_SetConfig+0x21c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d072      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a7d      	ldr	r2, [pc, #500]	; (80065d8 <DMA_SetConfig+0x220>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d06d      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a7c      	ldr	r2, [pc, #496]	; (80065dc <DMA_SetConfig+0x224>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d068      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a7a      	ldr	r2, [pc, #488]	; (80065e0 <DMA_SetConfig+0x228>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d063      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a79      	ldr	r2, [pc, #484]	; (80065e4 <DMA_SetConfig+0x22c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d05e      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a77      	ldr	r2, [pc, #476]	; (80065e8 <DMA_SetConfig+0x230>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d059      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a76      	ldr	r2, [pc, #472]	; (80065ec <DMA_SetConfig+0x234>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d054      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a74      	ldr	r2, [pc, #464]	; (80065f0 <DMA_SetConfig+0x238>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d04f      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a73      	ldr	r2, [pc, #460]	; (80065f4 <DMA_SetConfig+0x23c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d04a      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a71      	ldr	r2, [pc, #452]	; (80065f8 <DMA_SetConfig+0x240>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d045      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a70      	ldr	r2, [pc, #448]	; (80065fc <DMA_SetConfig+0x244>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d040      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a6e      	ldr	r2, [pc, #440]	; (8006600 <DMA_SetConfig+0x248>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d03b      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a6d      	ldr	r2, [pc, #436]	; (8006604 <DMA_SetConfig+0x24c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d036      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a6b      	ldr	r2, [pc, #428]	; (8006608 <DMA_SetConfig+0x250>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d031      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a6a      	ldr	r2, [pc, #424]	; (800660c <DMA_SetConfig+0x254>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d02c      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a68      	ldr	r2, [pc, #416]	; (8006610 <DMA_SetConfig+0x258>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d027      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a67      	ldr	r2, [pc, #412]	; (8006614 <DMA_SetConfig+0x25c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d022      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a65      	ldr	r2, [pc, #404]	; (8006618 <DMA_SetConfig+0x260>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01d      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a64      	ldr	r2, [pc, #400]	; (800661c <DMA_SetConfig+0x264>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a62      	ldr	r2, [pc, #392]	; (8006620 <DMA_SetConfig+0x268>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a61      	ldr	r2, [pc, #388]	; (8006624 <DMA_SetConfig+0x26c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a5f      	ldr	r2, [pc, #380]	; (8006628 <DMA_SetConfig+0x270>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a5e      	ldr	r2, [pc, #376]	; (800662c <DMA_SetConfig+0x274>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <DMA_SetConfig+0x10a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a5c      	ldr	r2, [pc, #368]	; (8006630 <DMA_SetConfig+0x278>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d101      	bne.n	80064c6 <DMA_SetConfig+0x10e>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <DMA_SetConfig+0x110>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00d      	beq.n	80064e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a39      	ldr	r2, [pc, #228]	; (80065d4 <DMA_SetConfig+0x21c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d04a      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a38      	ldr	r2, [pc, #224]	; (80065d8 <DMA_SetConfig+0x220>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d045      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a36      	ldr	r2, [pc, #216]	; (80065dc <DMA_SetConfig+0x224>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d040      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a35      	ldr	r2, [pc, #212]	; (80065e0 <DMA_SetConfig+0x228>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d03b      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a33      	ldr	r2, [pc, #204]	; (80065e4 <DMA_SetConfig+0x22c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d036      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a32      	ldr	r2, [pc, #200]	; (80065e8 <DMA_SetConfig+0x230>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d031      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a30      	ldr	r2, [pc, #192]	; (80065ec <DMA_SetConfig+0x234>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d02c      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2f      	ldr	r2, [pc, #188]	; (80065f0 <DMA_SetConfig+0x238>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d027      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2d      	ldr	r2, [pc, #180]	; (80065f4 <DMA_SetConfig+0x23c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d022      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a2c      	ldr	r2, [pc, #176]	; (80065f8 <DMA_SetConfig+0x240>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d01d      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <DMA_SetConfig+0x244>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d018      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a29      	ldr	r2, [pc, #164]	; (8006600 <DMA_SetConfig+0x248>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <DMA_SetConfig+0x24c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00e      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a26      	ldr	r2, [pc, #152]	; (8006608 <DMA_SetConfig+0x250>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d009      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a24      	ldr	r2, [pc, #144]	; (800660c <DMA_SetConfig+0x254>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d004      	beq.n	8006588 <DMA_SetConfig+0x1d0>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a23      	ldr	r2, [pc, #140]	; (8006610 <DMA_SetConfig+0x258>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d101      	bne.n	800658c <DMA_SetConfig+0x1d4>
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <DMA_SetConfig+0x1d6>
 800658c:	2300      	movs	r3, #0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d059      	beq.n	8006646 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	223f      	movs	r2, #63	; 0x3f
 800659c:	409a      	lsls	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d138      	bne.n	8006634 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065d2:	e086      	b.n	80066e2 <DMA_SetConfig+0x32a>
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	40020040 	.word	0x40020040
 80065e0:	40020058 	.word	0x40020058
 80065e4:	40020070 	.word	0x40020070
 80065e8:	40020088 	.word	0x40020088
 80065ec:	400200a0 	.word	0x400200a0
 80065f0:	400200b8 	.word	0x400200b8
 80065f4:	40020410 	.word	0x40020410
 80065f8:	40020428 	.word	0x40020428
 80065fc:	40020440 	.word	0x40020440
 8006600:	40020458 	.word	0x40020458
 8006604:	40020470 	.word	0x40020470
 8006608:	40020488 	.word	0x40020488
 800660c:	400204a0 	.word	0x400204a0
 8006610:	400204b8 	.word	0x400204b8
 8006614:	58025408 	.word	0x58025408
 8006618:	5802541c 	.word	0x5802541c
 800661c:	58025430 	.word	0x58025430
 8006620:	58025444 	.word	0x58025444
 8006624:	58025458 	.word	0x58025458
 8006628:	5802546c 	.word	0x5802546c
 800662c:	58025480 	.word	0x58025480
 8006630:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
}
 8006644:	e04d      	b.n	80066e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <DMA_SetConfig+0x338>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d022      	beq.n	8006696 <DMA_SetConfig+0x2de>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <DMA_SetConfig+0x33c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01d      	beq.n	8006696 <DMA_SetConfig+0x2de>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a26      	ldr	r2, [pc, #152]	; (80066f8 <DMA_SetConfig+0x340>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d018      	beq.n	8006696 <DMA_SetConfig+0x2de>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a24      	ldr	r2, [pc, #144]	; (80066fc <DMA_SetConfig+0x344>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <DMA_SetConfig+0x2de>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a23      	ldr	r2, [pc, #140]	; (8006700 <DMA_SetConfig+0x348>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <DMA_SetConfig+0x2de>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a21      	ldr	r2, [pc, #132]	; (8006704 <DMA_SetConfig+0x34c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <DMA_SetConfig+0x2de>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a20      	ldr	r2, [pc, #128]	; (8006708 <DMA_SetConfig+0x350>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <DMA_SetConfig+0x2de>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1e      	ldr	r2, [pc, #120]	; (800670c <DMA_SetConfig+0x354>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <DMA_SetConfig+0x2e2>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <DMA_SetConfig+0x2e4>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d020      	beq.n	80066e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	2201      	movs	r2, #1
 80066aa:	409a      	lsls	r2, r3
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b40      	cmp	r3, #64	; 0x40
 80066be:	d108      	bne.n	80066d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	60da      	str	r2, [r3, #12]
}
 80066d0:	e007      	b.n	80066e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	60da      	str	r2, [r3, #12]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	58025408 	.word	0x58025408
 80066f4:	5802541c 	.word	0x5802541c
 80066f8:	58025430 	.word	0x58025430
 80066fc:	58025444 	.word	0x58025444
 8006700:	58025458 	.word	0x58025458
 8006704:	5802546c 	.word	0x5802546c
 8006708:	58025480 	.word	0x58025480
 800670c:	58025494 	.word	0x58025494

08006710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a42      	ldr	r2, [pc, #264]	; (8006828 <DMA_CalcBaseAndBitshift+0x118>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d04a      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a41      	ldr	r2, [pc, #260]	; (800682c <DMA_CalcBaseAndBitshift+0x11c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d045      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a3f      	ldr	r2, [pc, #252]	; (8006830 <DMA_CalcBaseAndBitshift+0x120>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d040      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a3e      	ldr	r2, [pc, #248]	; (8006834 <DMA_CalcBaseAndBitshift+0x124>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d03b      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a3c      	ldr	r2, [pc, #240]	; (8006838 <DMA_CalcBaseAndBitshift+0x128>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d036      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a3b      	ldr	r2, [pc, #236]	; (800683c <DMA_CalcBaseAndBitshift+0x12c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d031      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a39      	ldr	r2, [pc, #228]	; (8006840 <DMA_CalcBaseAndBitshift+0x130>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d02c      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a38      	ldr	r2, [pc, #224]	; (8006844 <DMA_CalcBaseAndBitshift+0x134>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d027      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a36      	ldr	r2, [pc, #216]	; (8006848 <DMA_CalcBaseAndBitshift+0x138>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d022      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a35      	ldr	r2, [pc, #212]	; (800684c <DMA_CalcBaseAndBitshift+0x13c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d01d      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a33      	ldr	r2, [pc, #204]	; (8006850 <DMA_CalcBaseAndBitshift+0x140>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d018      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a32      	ldr	r2, [pc, #200]	; (8006854 <DMA_CalcBaseAndBitshift+0x144>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a30      	ldr	r2, [pc, #192]	; (8006858 <DMA_CalcBaseAndBitshift+0x148>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00e      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a2f      	ldr	r2, [pc, #188]	; (800685c <DMA_CalcBaseAndBitshift+0x14c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d009      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a2d      	ldr	r2, [pc, #180]	; (8006860 <DMA_CalcBaseAndBitshift+0x150>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xa8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a2c      	ldr	r2, [pc, #176]	; (8006864 <DMA_CalcBaseAndBitshift+0x154>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d101      	bne.n	80067bc <DMA_CalcBaseAndBitshift+0xac>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <DMA_CalcBaseAndBitshift+0xae>
 80067bc:	2300      	movs	r3, #0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d024      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	3b10      	subs	r3, #16
 80067ca:	4a27      	ldr	r2, [pc, #156]	; (8006868 <DMA_CalcBaseAndBitshift+0x158>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	4a24      	ldr	r2, [pc, #144]	; (800686c <DMA_CalcBaseAndBitshift+0x15c>)
 80067dc:	5cd3      	ldrb	r3, [r2, r3]
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d908      	bls.n	80067fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	4b1f      	ldr	r3, [pc, #124]	; (8006870 <DMA_CalcBaseAndBitshift+0x160>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	1d1a      	adds	r2, r3, #4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	659a      	str	r2, [r3, #88]	; 0x58
 80067fa:	e00d      	b.n	8006818 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	4b1b      	ldr	r3, [pc, #108]	; (8006870 <DMA_CalcBaseAndBitshift+0x160>)
 8006804:	4013      	ands	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6593      	str	r3, [r2, #88]	; 0x58
 800680a:	e005      	b.n	8006818 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40020010 	.word	0x40020010
 800682c:	40020028 	.word	0x40020028
 8006830:	40020040 	.word	0x40020040
 8006834:	40020058 	.word	0x40020058
 8006838:	40020070 	.word	0x40020070
 800683c:	40020088 	.word	0x40020088
 8006840:	400200a0 	.word	0x400200a0
 8006844:	400200b8 	.word	0x400200b8
 8006848:	40020410 	.word	0x40020410
 800684c:	40020428 	.word	0x40020428
 8006850:	40020440 	.word	0x40020440
 8006854:	40020458 	.word	0x40020458
 8006858:	40020470 	.word	0x40020470
 800685c:	40020488 	.word	0x40020488
 8006860:	400204a0 	.word	0x400204a0
 8006864:	400204b8 	.word	0x400204b8
 8006868:	aaaaaaab 	.word	0xaaaaaaab
 800686c:	0800dc54 	.word	0x0800dc54
 8006870:	fffffc00 	.word	0xfffffc00

08006874 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d120      	bne.n	80068ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	2b03      	cmp	r3, #3
 800688e:	d858      	bhi.n	8006942 <DMA_CheckFifoParam+0xce>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <DMA_CheckFifoParam+0x24>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068bb 	.word	0x080068bb
 80068a0:	080068a9 	.word	0x080068a9
 80068a4:	08006943 	.word	0x08006943
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d048      	beq.n	8006946 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068b8:	e045      	b.n	8006946 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068c2:	d142      	bne.n	800694a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068c8:	e03f      	b.n	800694a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	d123      	bne.n	800691c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d838      	bhi.n	800694e <DMA_CheckFifoParam+0xda>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <DMA_CheckFifoParam+0x70>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	080068fb 	.word	0x080068fb
 80068ec:	080068f5 	.word	0x080068f5
 80068f0:	0800690d 	.word	0x0800690d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
        break;
 80068f8:	e030      	b.n	800695c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d025      	beq.n	8006952 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800690a:	e022      	b.n	8006952 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006914:	d11f      	bne.n	8006956 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800691a:	e01c      	b.n	8006956 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	2b02      	cmp	r3, #2
 8006922:	d902      	bls.n	800692a <DMA_CheckFifoParam+0xb6>
 8006924:	2b03      	cmp	r3, #3
 8006926:	d003      	beq.n	8006930 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006928:	e018      	b.n	800695c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	73fb      	strb	r3, [r7, #15]
        break;
 800692e:	e015      	b.n	800695c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00e      	beq.n	800695a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
    break;
 8006940:	e00b      	b.n	800695a <DMA_CheckFifoParam+0xe6>
        break;
 8006942:	bf00      	nop
 8006944:	e00a      	b.n	800695c <DMA_CheckFifoParam+0xe8>
        break;
 8006946:	bf00      	nop
 8006948:	e008      	b.n	800695c <DMA_CheckFifoParam+0xe8>
        break;
 800694a:	bf00      	nop
 800694c:	e006      	b.n	800695c <DMA_CheckFifoParam+0xe8>
        break;
 800694e:	bf00      	nop
 8006950:	e004      	b.n	800695c <DMA_CheckFifoParam+0xe8>
        break;
 8006952:	bf00      	nop
 8006954:	e002      	b.n	800695c <DMA_CheckFifoParam+0xe8>
        break;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <DMA_CheckFifoParam+0xe8>
    break;
 800695a:	bf00      	nop
    }
  }

  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop

0800696c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a38      	ldr	r2, [pc, #224]	; (8006a60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d022      	beq.n	80069ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a36      	ldr	r2, [pc, #216]	; (8006a64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01d      	beq.n	80069ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a35      	ldr	r2, [pc, #212]	; (8006a68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d018      	beq.n	80069ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a33      	ldr	r2, [pc, #204]	; (8006a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a32      	ldr	r2, [pc, #200]	; (8006a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00e      	beq.n	80069ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a30      	ldr	r2, [pc, #192]	; (8006a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a2f      	ldr	r2, [pc, #188]	; (8006a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a2d      	ldr	r2, [pc, #180]	; (8006a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01a      	beq.n	8006a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	3b08      	subs	r3, #8
 80069dc:	4a28      	ldr	r2, [pc, #160]	; (8006a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80069de:	fba2 2303 	umull	r2, r3, r2, r3
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4b26      	ldr	r3, [pc, #152]	; (8006a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a24      	ldr	r2, [pc, #144]	; (8006a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80069f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	2201      	movs	r2, #1
 8006a02:	409a      	lsls	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a08:	e024      	b.n	8006a54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	3b10      	subs	r3, #16
 8006a12:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a14:	fba2 2303 	umull	r2, r3, r2, r3
 8006a18:	091b      	lsrs	r3, r3, #4
 8006a1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d806      	bhi.n	8006a32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d902      	bls.n	8006a32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a16      	ldr	r2, [pc, #88]	; (8006a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006a44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	409a      	lsls	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a54:	bf00      	nop
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	58025408 	.word	0x58025408
 8006a64:	5802541c 	.word	0x5802541c
 8006a68:	58025430 	.word	0x58025430
 8006a6c:	58025444 	.word	0x58025444
 8006a70:	58025458 	.word	0x58025458
 8006a74:	5802546c 	.word	0x5802546c
 8006a78:	58025480 	.word	0x58025480
 8006a7c:	58025494 	.word	0x58025494
 8006a80:	cccccccd 	.word	0xcccccccd
 8006a84:	16009600 	.word	0x16009600
 8006a88:	58025880 	.word	0x58025880
 8006a8c:	aaaaaaab 	.word	0xaaaaaaab
 8006a90:	400204b8 	.word	0x400204b8
 8006a94:	4002040f 	.word	0x4002040f
 8006a98:	10008200 	.word	0x10008200
 8006a9c:	40020880 	.word	0x40020880

08006aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d04a      	beq.n	8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d847      	bhi.n	8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a25      	ldr	r2, [pc, #148]	; (8006b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1b      	ldr	r2, [pc, #108]	; (8006b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d101      	bne.n	8006b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4b17      	ldr	r3, [pc, #92]	; (8006b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b28:	671a      	str	r2, [r3, #112]	; 0x70
 8006b2a:	e009      	b.n	8006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	461a      	mov	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a11      	ldr	r2, [pc, #68]	; (8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006b3e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	2201      	movs	r2, #1
 8006b46:	409a      	lsls	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	58025408 	.word	0x58025408
 8006b5c:	5802541c 	.word	0x5802541c
 8006b60:	58025430 	.word	0x58025430
 8006b64:	58025444 	.word	0x58025444
 8006b68:	58025458 	.word	0x58025458
 8006b6c:	5802546c 	.word	0x5802546c
 8006b70:	58025480 	.word	0x58025480
 8006b74:	58025494 	.word	0x58025494
 8006b78:	1600963f 	.word	0x1600963f
 8006b7c:	58025940 	.word	0x58025940
 8006b80:	1000823f 	.word	0x1000823f
 8006b84:	40020940 	.word	0x40020940

08006b88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b098      	sub	sp, #96	; 0x60
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006b90:	4a84      	ldr	r2, [pc, #528]	; (8006da4 <HAL_FDCAN_Init+0x21c>)
 8006b92:	f107 030c 	add.w	r3, r7, #12
 8006b96:	4611      	mov	r1, r2
 8006b98:	224c      	movs	r2, #76	; 0x4c
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f006 fbc4 	bl	800d328 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e1c6      	b.n	8006f38 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a7e      	ldr	r2, [pc, #504]	; (8006da8 <HAL_FDCAN_Init+0x220>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d106      	bne.n	8006bc2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fa fd1a 	bl	8001610 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0210 	bic.w	r2, r2, #16
 8006bea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bec:	f7fb fa74 	bl	80020d8 <HAL_GetTick>
 8006bf0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006bf2:	e014      	b.n	8006c1e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006bf4:	f7fb fa70 	bl	80020d8 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b0a      	cmp	r3, #10
 8006c00:	d90d      	bls.n	8006c1e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c08:	f043 0201 	orr.w	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2203      	movs	r2, #3
 8006c16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e18c      	b.n	8006f38 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d0e3      	beq.n	8006bf4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c3c:	f7fb fa4c 	bl	80020d8 <HAL_GetTick>
 8006c40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c42:	e014      	b.n	8006c6e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c44:	f7fb fa48 	bl	80020d8 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b0a      	cmp	r3, #10
 8006c50:	d90d      	bls.n	8006c6e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c58:	f043 0201 	orr.w	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2203      	movs	r2, #3
 8006c66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e164      	b.n	8006f38 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0e3      	beq.n	8006c44 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0202 	orr.w	r2, r2, #2
 8006c8a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7c1b      	ldrb	r3, [r3, #16]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d108      	bne.n	8006ca6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca2:	619a      	str	r2, [r3, #24]
 8006ca4:	e007      	b.n	8006cb6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7c5b      	ldrb	r3, [r3, #17]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d108      	bne.n	8006cd0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ccc:	619a      	str	r2, [r3, #24]
 8006cce:	e007      	b.n	8006ce0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cde:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7c9b      	ldrb	r3, [r3, #18]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d108      	bne.n	8006cfa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cf6:	619a      	str	r2, [r3, #24]
 8006cf8:	e007      	b.n	8006d0a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d08:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006d2e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0210 	bic.w	r2, r2, #16
 8006d3e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d108      	bne.n	8006d5a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699a      	ldr	r2, [r3, #24]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0204 	orr.w	r2, r2, #4
 8006d56:	619a      	str	r2, [r3, #24]
 8006d58:	e030      	b.n	8006dbc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d02c      	beq.n	8006dbc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d020      	beq.n	8006dac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699a      	ldr	r2, [r3, #24]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d78:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0210 	orr.w	r2, r2, #16
 8006d88:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d114      	bne.n	8006dbc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0220 	orr.w	r2, r2, #32
 8006da0:	619a      	str	r2, [r3, #24]
 8006da2:	e00b      	b.n	8006dbc <HAL_FDCAN_Init+0x234>
 8006da4:	0800dbf8 	.word	0x0800dbf8
 8006da8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0220 	orr.w	r2, r2, #32
 8006dba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006dcc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006dd4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006de4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006de6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df0:	d115      	bne.n	8006e1e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006e00:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	3b01      	subs	r3, #1
 8006e08:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006e0a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	3b01      	subs	r3, #1
 8006e14:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006e1a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006e1c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e44:	4413      	add	r3, r2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d011      	beq.n	8006e6e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006e52:	f023 0107 	bic.w	r1, r3, #7
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	3360      	adds	r3, #96	; 0x60
 8006e5e:	443b      	add	r3, r7
 8006e60:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d011      	beq.n	8006e9a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e7e:	f023 0107 	bic.w	r1, r3, #7
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	3360      	adds	r3, #96	; 0x60
 8006e8a:	443b      	add	r3, r7
 8006e8c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d012      	beq.n	8006ec8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006eaa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	3360      	adds	r3, #96	; 0x60
 8006eb6:	443b      	add	r3, r7
 8006eb8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006ebc:	011a      	lsls	r2, r3, #4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d012      	beq.n	8006ef6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006ed8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	3360      	adds	r3, #96	; 0x60
 8006ee4:	443b      	add	r3, r7
 8006ee6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006eea:	021a      	lsls	r2, r3, #8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a11      	ldr	r2, [pc, #68]	; (8006f40 <HAL_FDCAN_Init+0x3b8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d107      	bne.n	8006f10 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f022 0203 	bic.w	r2, r2, #3
 8006f0e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f80b 	bl	8006f44 <FDCAN_CalcultateRamBlockAddresses>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006f34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3760      	adds	r7, #96	; 0x60
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	4000a000 	.word	0x4000a000

08006f44 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f50:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f5a:	4ba7      	ldr	r3, [pc, #668]	; (80071f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	0091      	lsls	r1, r2, #2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6812      	ldr	r2, [r2, #0]
 8006f66:	430b      	orrs	r3, r1
 8006f68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f74:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	041a      	lsls	r2, r3, #16
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	4413      	add	r3, r2
 8006f90:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f9a:	4b97      	ldr	r3, [pc, #604]	; (80071f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	0091      	lsls	r1, r2, #2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbc:	041a      	lsls	r2, r3, #16
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006fdc:	4b86      	ldr	r3, [pc, #536]	; (80071f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	0091      	lsls	r1, r2, #2
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ff6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	041a      	lsls	r2, r3, #16
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007012:	fb02 f303 	mul.w	r3, r2, r3
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	4413      	add	r3, r2
 800701a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007024:	4b74      	ldr	r3, [pc, #464]	; (80071f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007026:	4013      	ands	r3, r2
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	0091      	lsls	r1, r2, #2
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	430b      	orrs	r3, r1
 8007032:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800703e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007046:	041a      	lsls	r2, r3, #16
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800706c:	4b62      	ldr	r3, [pc, #392]	; (80071f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800706e:	4013      	ands	r3, r2
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	0091      	lsls	r1, r2, #2
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	430b      	orrs	r3, r1
 800707a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007086:	fb02 f303 	mul.w	r3, r2, r3
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	4413      	add	r3, r2
 800708e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007098:	4b57      	ldr	r3, [pc, #348]	; (80071f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	0091      	lsls	r1, r2, #2
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	430b      	orrs	r3, r1
 80070a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070b2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	041a      	lsls	r2, r3, #16
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	4413      	add	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80070da:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070dc:	4013      	ands	r3, r2
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	0091      	lsls	r1, r2, #2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	430b      	orrs	r3, r1
 80070e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070f4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fc:	041a      	lsls	r2, r3, #16
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007110:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007118:	061a      	lsls	r2, r3, #24
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007128:	4b34      	ldr	r3, [pc, #208]	; (80071fc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800712a:	4413      	add	r3, r2
 800712c:	009a      	lsls	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	441a      	add	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	441a      	add	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800715e:	fb01 f303 	mul.w	r3, r1, r3
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007176:	fb01 f303 	mul.w	r3, r1, r3
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	441a      	add	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	441a      	add	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	441a      	add	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	441a      	add	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	441a      	add	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ee:	4a04      	ldr	r2, [pc, #16]	; (8007200 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d915      	bls.n	8007220 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80071f4:	e006      	b.n	8007204 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80071f6:	bf00      	nop
 80071f8:	ffff0003 	.word	0xffff0003
 80071fc:	10002b00 	.word	0x10002b00
 8007200:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800720a:	f043 0220 	orr.w	r2, r3, #32
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2203      	movs	r2, #3
 8007218:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e010      	b.n	8007242 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	e005      	b.n	8007234 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3304      	adds	r3, #4
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	429a      	cmp	r2, r3
 800723e:	d3f3      	bcc.n	8007228 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop

08007250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007250:	b480      	push	{r7}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800725e:	4b86      	ldr	r3, [pc, #536]	; (8007478 <HAL_GPIO_Init+0x228>)
 8007260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007262:	e18c      	b.n	800757e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	2101      	movs	r1, #1
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	fa01 f303 	lsl.w	r3, r1, r3
 8007270:	4013      	ands	r3, r2
 8007272:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 817e 	beq.w	8007578 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d005      	beq.n	8007294 <HAL_GPIO_Init+0x44>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d130      	bne.n	80072f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	2203      	movs	r2, #3
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	43db      	mvns	r3, r3
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	4013      	ands	r3, r2
 80072aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072ca:	2201      	movs	r2, #1
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	43db      	mvns	r3, r3
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	4013      	ands	r3, r2
 80072d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	091b      	lsrs	r3, r3, #4
 80072e0:	f003 0201 	and.w	r2, r3, #1
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d017      	beq.n	8007332 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	2203      	movs	r2, #3
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	43db      	mvns	r3, r3
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	4013      	ands	r3, r2
 8007318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	4313      	orrs	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d123      	bne.n	8007386 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	08da      	lsrs	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3208      	adds	r2, #8
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	220f      	movs	r2, #15
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	43db      	mvns	r3, r3
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	4013      	ands	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	fa02 f303 	lsl.w	r3, r2, r3
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	4313      	orrs	r3, r2
 8007376:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	08da      	lsrs	r2, r3, #3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3208      	adds	r2, #8
 8007380:	69b9      	ldr	r1, [r7, #24]
 8007382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	2203      	movs	r2, #3
 8007392:	fa02 f303 	lsl.w	r3, r2, r3
 8007396:	43db      	mvns	r3, r3
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4013      	ands	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f003 0203 	and.w	r2, r3, #3
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 80d8 	beq.w	8007578 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c8:	4b2c      	ldr	r3, [pc, #176]	; (800747c <HAL_GPIO_Init+0x22c>)
 80073ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073ce:	4a2b      	ldr	r2, [pc, #172]	; (800747c <HAL_GPIO_Init+0x22c>)
 80073d0:	f043 0302 	orr.w	r3, r3, #2
 80073d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80073d8:	4b28      	ldr	r3, [pc, #160]	; (800747c <HAL_GPIO_Init+0x22c>)
 80073da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073e6:	4a26      	ldr	r2, [pc, #152]	; (8007480 <HAL_GPIO_Init+0x230>)
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	089b      	lsrs	r3, r3, #2
 80073ec:	3302      	adds	r3, #2
 80073ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	220f      	movs	r2, #15
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43db      	mvns	r3, r3
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	4013      	ands	r3, r2
 8007408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <HAL_GPIO_Init+0x234>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d04a      	beq.n	80074a8 <HAL_GPIO_Init+0x258>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <HAL_GPIO_Init+0x238>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d02b      	beq.n	8007472 <HAL_GPIO_Init+0x222>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1b      	ldr	r2, [pc, #108]	; (800748c <HAL_GPIO_Init+0x23c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d025      	beq.n	800746e <HAL_GPIO_Init+0x21e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1a      	ldr	r2, [pc, #104]	; (8007490 <HAL_GPIO_Init+0x240>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01f      	beq.n	800746a <HAL_GPIO_Init+0x21a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a19      	ldr	r2, [pc, #100]	; (8007494 <HAL_GPIO_Init+0x244>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d019      	beq.n	8007466 <HAL_GPIO_Init+0x216>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a18      	ldr	r2, [pc, #96]	; (8007498 <HAL_GPIO_Init+0x248>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_GPIO_Init+0x212>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a17      	ldr	r2, [pc, #92]	; (800749c <HAL_GPIO_Init+0x24c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00d      	beq.n	800745e <HAL_GPIO_Init+0x20e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <HAL_GPIO_Init+0x250>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <HAL_GPIO_Init+0x20a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <HAL_GPIO_Init+0x254>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d101      	bne.n	8007456 <HAL_GPIO_Init+0x206>
 8007452:	2309      	movs	r3, #9
 8007454:	e029      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 8007456:	230a      	movs	r3, #10
 8007458:	e027      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 800745a:	2307      	movs	r3, #7
 800745c:	e025      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 800745e:	2306      	movs	r3, #6
 8007460:	e023      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 8007462:	2305      	movs	r3, #5
 8007464:	e021      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 8007466:	2304      	movs	r3, #4
 8007468:	e01f      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 800746a:	2303      	movs	r3, #3
 800746c:	e01d      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 800746e:	2302      	movs	r3, #2
 8007470:	e01b      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 8007472:	2301      	movs	r3, #1
 8007474:	e019      	b.n	80074aa <HAL_GPIO_Init+0x25a>
 8007476:	bf00      	nop
 8007478:	58000080 	.word	0x58000080
 800747c:	58024400 	.word	0x58024400
 8007480:	58000400 	.word	0x58000400
 8007484:	58020000 	.word	0x58020000
 8007488:	58020400 	.word	0x58020400
 800748c:	58020800 	.word	0x58020800
 8007490:	58020c00 	.word	0x58020c00
 8007494:	58021000 	.word	0x58021000
 8007498:	58021400 	.word	0x58021400
 800749c:	58021800 	.word	0x58021800
 80074a0:	58021c00 	.word	0x58021c00
 80074a4:	58022400 	.word	0x58022400
 80074a8:	2300      	movs	r3, #0
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	f002 0203 	and.w	r2, r2, #3
 80074b0:	0092      	lsls	r2, r2, #2
 80074b2:	4093      	lsls	r3, r2
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074ba:	4938      	ldr	r1, [pc, #224]	; (800759c <HAL_GPIO_Init+0x34c>)
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	089b      	lsrs	r3, r3, #2
 80074c0:	3302      	adds	r3, #2
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	43db      	mvns	r3, r3
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	4013      	ands	r3, r2
 80074d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80074ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80074f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	43db      	mvns	r3, r3
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	4013      	ands	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800751c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	43db      	mvns	r3, r3
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	4013      	ands	r3, r2
 8007532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	4313      	orrs	r3, r2
 8007546:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	43db      	mvns	r3, r3
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	4013      	ands	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	3301      	adds	r3, #1
 800757c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	f47f ae6b 	bne.w	8007264 <HAL_GPIO_Init+0x14>
  }
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	3724      	adds	r7, #36	; 0x24
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	58000400 	.word	0x58000400

080075a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	807b      	strh	r3, [r7, #2]
 80075ac:	4613      	mov	r3, r2
 80075ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075b0:	787b      	ldrb	r3, [r7, #1]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075b6:	887a      	ldrh	r2, [r7, #2]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80075bc:	e003      	b.n	80075c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80075be:	887b      	ldrh	r3, [r7, #2]
 80075c0:	041a      	lsls	r2, r3, #16
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	619a      	str	r2, [r3, #24]
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
	...

080075d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e07f      	b.n	80076e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fa f8d8 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2224      	movs	r2, #36	; 0x24
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0201 	bic.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d107      	bne.n	800764e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800764a:	609a      	str	r2, [r3, #8]
 800764c:	e006      	b.n	800765c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800765a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d104      	bne.n	800766e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800766c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6859      	ldr	r1, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	4b1d      	ldr	r3, [pc, #116]	; (80076f0 <HAL_I2C_Init+0x11c>)
 800767a:	430b      	orrs	r3, r1
 800767c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800768c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69d9      	ldr	r1, [r3, #28]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	02008000 	.word	0x02008000

080076f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b20      	cmp	r3, #32
 8007708:	d138      	bne.n	800777c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007714:	2302      	movs	r3, #2
 8007716:	e032      	b.n	800777e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2224      	movs	r2, #36	; 0x24
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0201 	bic.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	e000      	b.n	800777e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800777c:	2302      	movs	r3, #2
  }
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b20      	cmp	r3, #32
 800779e:	d139      	bne.n	8007814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e033      	b.n	8007816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2224      	movs	r2, #36	; 0x24
 80077ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0201 	bic.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	e000      	b.n	8007816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007814:	2302      	movs	r3, #2
  }
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
	...

08007824 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800782c:	4b29      	ldr	r3, [pc, #164]	; (80078d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	2b06      	cmp	r3, #6
 8007836:	d00a      	beq.n	800784e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007838:	4b26      	ldr	r3, [pc, #152]	; (80078d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	429a      	cmp	r2, r3
 8007844:	d001      	beq.n	800784a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e03f      	b.n	80078ca <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e03d      	b.n	80078ca <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800784e:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007856:	491f      	ldr	r1, [pc, #124]	; (80078d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4313      	orrs	r3, r2
 800785c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800785e:	f7fa fc3b 	bl	80020d8 <HAL_GetTick>
 8007862:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007864:	e009      	b.n	800787a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007866:	f7fa fc37 	bl	80020d8 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007874:	d901      	bls.n	800787a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e027      	b.n	80078ca <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007886:	d1ee      	bne.n	8007866 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b1e      	cmp	r3, #30
 800788c:	d008      	beq.n	80078a0 <HAL_PWREx_ConfigSupply+0x7c>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b2e      	cmp	r3, #46	; 0x2e
 8007892:	d005      	beq.n	80078a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b1d      	cmp	r3, #29
 8007898:	d002      	beq.n	80078a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b2d      	cmp	r3, #45	; 0x2d
 800789e:	d113      	bne.n	80078c8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80078a0:	f7fa fc1a 	bl	80020d8 <HAL_GetTick>
 80078a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80078a6:	e009      	b.n	80078bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078a8:	f7fa fc16 	bl	80020d8 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078b6:	d901      	bls.n	80078bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e006      	b.n	80078ca <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0311 	and.w	r3, r3, #17
 80078c4:	2b11      	cmp	r3, #17
 80078c6:	d1ef      	bne.n	80078a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	58024800 	.word	0x58024800

080078d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	; 0x30
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e3c8      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 8087 	beq.w	8007a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078f8:	4b88      	ldr	r3, [pc, #544]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007902:	4b86      	ldr	r3, [pc, #536]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	2b10      	cmp	r3, #16
 800790c:	d007      	beq.n	800791e <HAL_RCC_OscConfig+0x46>
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	2b18      	cmp	r3, #24
 8007912:	d110      	bne.n	8007936 <HAL_RCC_OscConfig+0x5e>
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d10b      	bne.n	8007936 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800791e:	4b7f      	ldr	r3, [pc, #508]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d06c      	beq.n	8007a04 <HAL_RCC_OscConfig+0x12c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d168      	bne.n	8007a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e3a2      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800793e:	d106      	bne.n	800794e <HAL_RCC_OscConfig+0x76>
 8007940:	4b76      	ldr	r3, [pc, #472]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a75      	ldr	r2, [pc, #468]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	e02e      	b.n	80079ac <HAL_RCC_OscConfig+0xd4>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10c      	bne.n	8007970 <HAL_RCC_OscConfig+0x98>
 8007956:	4b71      	ldr	r3, [pc, #452]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a70      	ldr	r2, [pc, #448]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 800795c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	4b6e      	ldr	r3, [pc, #440]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a6d      	ldr	r2, [pc, #436]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	e01d      	b.n	80079ac <HAL_RCC_OscConfig+0xd4>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007978:	d10c      	bne.n	8007994 <HAL_RCC_OscConfig+0xbc>
 800797a:	4b68      	ldr	r3, [pc, #416]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a67      	ldr	r2, [pc, #412]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	4b65      	ldr	r3, [pc, #404]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a64      	ldr	r2, [pc, #400]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 800798c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	e00b      	b.n	80079ac <HAL_RCC_OscConfig+0xd4>
 8007994:	4b61      	ldr	r3, [pc, #388]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a60      	ldr	r2, [pc, #384]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 800799a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	4b5e      	ldr	r3, [pc, #376]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a5d      	ldr	r2, [pc, #372]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 80079a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d013      	beq.n	80079dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fa fb90 	bl	80020d8 <HAL_GetTick>
 80079b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079bc:	f7fa fb8c 	bl	80020d8 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b64      	cmp	r3, #100	; 0x64
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e356      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079ce:	4b53      	ldr	r3, [pc, #332]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f0      	beq.n	80079bc <HAL_RCC_OscConfig+0xe4>
 80079da:	e014      	b.n	8007a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079dc:	f7fa fb7c 	bl	80020d8 <HAL_GetTick>
 80079e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079e4:	f7fa fb78 	bl	80020d8 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b64      	cmp	r3, #100	; 0x64
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e342      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079f6:	4b49      	ldr	r3, [pc, #292]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f0      	bne.n	80079e4 <HAL_RCC_OscConfig+0x10c>
 8007a02:	e000      	b.n	8007a06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 808c 	beq.w	8007b2c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a14:	4b41      	ldr	r3, [pc, #260]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a1e:	4b3f      	ldr	r3, [pc, #252]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <HAL_RCC_OscConfig+0x162>
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	2b18      	cmp	r3, #24
 8007a2e:	d137      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x1c8>
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d132      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a3a:	4b38      	ldr	r3, [pc, #224]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <HAL_RCC_OscConfig+0x17a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e314      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a52:	4b32      	ldr	r3, [pc, #200]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f023 0219 	bic.w	r2, r3, #25
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	492f      	ldr	r1, [pc, #188]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a64:	f7fa fb38 	bl	80020d8 <HAL_GetTick>
 8007a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a6c:	f7fa fb34 	bl	80020d8 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e2fe      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a7e:	4b27      	ldr	r3, [pc, #156]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0304 	and.w	r3, r3, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0f0      	beq.n	8007a6c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8a:	4b24      	ldr	r3, [pc, #144]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	061b      	lsls	r3, r3, #24
 8007a98:	4920      	ldr	r1, [pc, #128]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a9e:	e045      	b.n	8007b2c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d026      	beq.n	8007af6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f023 0219 	bic.w	r2, r3, #25
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	4919      	ldr	r1, [pc, #100]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aba:	f7fa fb0d 	bl	80020d8 <HAL_GetTick>
 8007abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ac0:	e008      	b.n	8007ad4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ac2:	f7fa fb09 	bl	80020d8 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d901      	bls.n	8007ad4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e2d3      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ad4:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0f0      	beq.n	8007ac2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	061b      	lsls	r3, r3, #24
 8007aee:	490b      	ldr	r1, [pc, #44]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	604b      	str	r3, [r1, #4]
 8007af4:	e01a      	b.n	8007b2c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007af6:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <HAL_RCC_OscConfig+0x244>)
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b02:	f7fa fae9 	bl	80020d8 <HAL_GetTick>
 8007b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b08:	e00a      	b.n	8007b20 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b0a:	f7fa fae5 	bl	80020d8 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d903      	bls.n	8007b20 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e2af      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
 8007b1c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b20:	4b96      	ldr	r3, [pc, #600]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1ee      	bne.n	8007b0a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d06a      	beq.n	8007c0e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b38:	4b90      	ldr	r3, [pc, #576]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b40:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b42:	4b8e      	ldr	r3, [pc, #568]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d007      	beq.n	8007b5e <HAL_RCC_OscConfig+0x286>
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	2b18      	cmp	r3, #24
 8007b52:	d11b      	bne.n	8007b8c <HAL_RCC_OscConfig+0x2b4>
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d116      	bne.n	8007b8c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b5e:	4b87      	ldr	r3, [pc, #540]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <HAL_RCC_OscConfig+0x29e>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	2b80      	cmp	r3, #128	; 0x80
 8007b70:	d001      	beq.n	8007b76 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e282      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b76:	4b81      	ldr	r3, [pc, #516]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	061b      	lsls	r3, r3, #24
 8007b84:	497d      	ldr	r1, [pc, #500]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b8a:	e040      	b.n	8007c0e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d023      	beq.n	8007bdc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b94:	4b79      	ldr	r3, [pc, #484]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a78      	ldr	r2, [pc, #480]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba0:	f7fa fa9a 	bl	80020d8 <HAL_GetTick>
 8007ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ba8:	f7fa fa96 	bl	80020d8 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e260      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bba:	4b70      	ldr	r3, [pc, #448]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0f0      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bc6:	4b6d      	ldr	r3, [pc, #436]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	061b      	lsls	r3, r3, #24
 8007bd4:	4969      	ldr	r1, [pc, #420]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60cb      	str	r3, [r1, #12]
 8007bda:	e018      	b.n	8007c0e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007bdc:	4b67      	ldr	r3, [pc, #412]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a66      	ldr	r2, [pc, #408]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be8:	f7fa fa76 	bl	80020d8 <HAL_GetTick>
 8007bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bf0:	f7fa fa72 	bl	80020d8 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e23c      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c02:	4b5e      	ldr	r3, [pc, #376]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f0      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d036      	beq.n	8007c88 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d019      	beq.n	8007c56 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c22:	4b56      	ldr	r3, [pc, #344]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c26:	4a55      	ldr	r2, [pc, #340]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007c28:	f043 0301 	orr.w	r3, r3, #1
 8007c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c2e:	f7fa fa53 	bl	80020d8 <HAL_GetTick>
 8007c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c34:	e008      	b.n	8007c48 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c36:	f7fa fa4f 	bl	80020d8 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e219      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c48:	4b4c      	ldr	r3, [pc, #304]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f0      	beq.n	8007c36 <HAL_RCC_OscConfig+0x35e>
 8007c54:	e018      	b.n	8007c88 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c56:	4b49      	ldr	r3, [pc, #292]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5a:	4a48      	ldr	r2, [pc, #288]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c62:	f7fa fa39 	bl	80020d8 <HAL_GetTick>
 8007c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c68:	e008      	b.n	8007c7c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c6a:	f7fa fa35 	bl	80020d8 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e1ff      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c7c:	4b3f      	ldr	r3, [pc, #252]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1f0      	bne.n	8007c6a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d036      	beq.n	8007d02 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d019      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c9c:	4b37      	ldr	r3, [pc, #220]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a36      	ldr	r2, [pc, #216]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007ca2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ca6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ca8:	f7fa fa16 	bl	80020d8 <HAL_GetTick>
 8007cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cb0:	f7fa fa12 	bl	80020d8 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e1dc      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cc2:	4b2e      	ldr	r3, [pc, #184]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0f0      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x3d8>
 8007cce:	e018      	b.n	8007d02 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cd0:	4b2a      	ldr	r3, [pc, #168]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a29      	ldr	r2, [pc, #164]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cdc:	f7fa f9fc 	bl	80020d8 <HAL_GetTick>
 8007ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ce2:	e008      	b.n	8007cf6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ce4:	f7fa f9f8 	bl	80020d8 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e1c2      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cf6:	4b21      	ldr	r3, [pc, #132]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f0      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 8086 	beq.w	8007e1c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d10:	4b1b      	ldr	r3, [pc, #108]	; (8007d80 <HAL_RCC_OscConfig+0x4a8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1a      	ldr	r2, [pc, #104]	; (8007d80 <HAL_RCC_OscConfig+0x4a8>)
 8007d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d1c:	f7fa f9dc 	bl	80020d8 <HAL_GetTick>
 8007d20:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d22:	e008      	b.n	8007d36 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d24:	f7fa f9d8 	bl	80020d8 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b64      	cmp	r3, #100	; 0x64
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e1a2      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <HAL_RCC_OscConfig+0x4a8>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f0      	beq.n	8007d24 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d106      	bne.n	8007d58 <HAL_RCC_OscConfig+0x480>
 8007d4a:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4e:	4a0b      	ldr	r2, [pc, #44]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007d50:	f043 0301 	orr.w	r3, r3, #1
 8007d54:	6713      	str	r3, [r2, #112]	; 0x70
 8007d56:	e032      	b.n	8007dbe <HAL_RCC_OscConfig+0x4e6>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d111      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4ac>
 8007d60:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d64:	4a05      	ldr	r2, [pc, #20]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	4a02      	ldr	r2, [pc, #8]	; (8007d7c <HAL_RCC_OscConfig+0x4a4>)
 8007d72:	f023 0304 	bic.w	r3, r3, #4
 8007d76:	6713      	str	r3, [r2, #112]	; 0x70
 8007d78:	e021      	b.n	8007dbe <HAL_RCC_OscConfig+0x4e6>
 8007d7a:	bf00      	nop
 8007d7c:	58024400 	.word	0x58024400
 8007d80:	58024800 	.word	0x58024800
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	d10c      	bne.n	8007da6 <HAL_RCC_OscConfig+0x4ce>
 8007d8c:	4b83      	ldr	r3, [pc, #524]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d90:	4a82      	ldr	r2, [pc, #520]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007d92:	f043 0304 	orr.w	r3, r3, #4
 8007d96:	6713      	str	r3, [r2, #112]	; 0x70
 8007d98:	4b80      	ldr	r3, [pc, #512]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	4a7f      	ldr	r2, [pc, #508]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007d9e:	f043 0301 	orr.w	r3, r3, #1
 8007da2:	6713      	str	r3, [r2, #112]	; 0x70
 8007da4:	e00b      	b.n	8007dbe <HAL_RCC_OscConfig+0x4e6>
 8007da6:	4b7d      	ldr	r3, [pc, #500]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007daa:	4a7c      	ldr	r2, [pc, #496]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	6713      	str	r3, [r2, #112]	; 0x70
 8007db2:	4b7a      	ldr	r3, [pc, #488]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db6:	4a79      	ldr	r2, [pc, #484]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007db8:	f023 0304 	bic.w	r3, r3, #4
 8007dbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d015      	beq.n	8007df2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc6:	f7fa f987 	bl	80020d8 <HAL_GetTick>
 8007dca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dcc:	e00a      	b.n	8007de4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dce:	f7fa f983 	bl	80020d8 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e14b      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007de4:	4b6d      	ldr	r3, [pc, #436]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0ee      	beq.n	8007dce <HAL_RCC_OscConfig+0x4f6>
 8007df0:	e014      	b.n	8007e1c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df2:	f7fa f971 	bl	80020d8 <HAL_GetTick>
 8007df6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007df8:	e00a      	b.n	8007e10 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dfa:	f7fa f96d 	bl	80020d8 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d901      	bls.n	8007e10 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e135      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e10:	4b62      	ldr	r3, [pc, #392]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1ee      	bne.n	8007dfa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 812a 	beq.w	800807a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e26:	4b5d      	ldr	r3, [pc, #372]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e2e:	2b18      	cmp	r3, #24
 8007e30:	f000 80ba 	beq.w	8007fa8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	f040 8095 	bne.w	8007f68 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e3e:	4b57      	ldr	r3, [pc, #348]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a56      	ldr	r2, [pc, #344]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4a:	f7fa f945 	bl	80020d8 <HAL_GetTick>
 8007e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e50:	e008      	b.n	8007e64 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e52:	f7fa f941 	bl	80020d8 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e10b      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e64:	4b4d      	ldr	r3, [pc, #308]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1f0      	bne.n	8007e52 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e70:	4b4a      	ldr	r3, [pc, #296]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e74:	4b4a      	ldr	r3, [pc, #296]	; (8007fa0 <HAL_RCC_OscConfig+0x6c8>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e80:	0112      	lsls	r2, r2, #4
 8007e82:	430a      	orrs	r2, r1
 8007e84:	4945      	ldr	r1, [pc, #276]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	628b      	str	r3, [r1, #40]	; 0x28
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	025b      	lsls	r3, r3, #9
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	061b      	lsls	r3, r3, #24
 8007eb6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007eba:	4938      	ldr	r1, [pc, #224]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007ec0:	4b36      	ldr	r3, [pc, #216]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	4a35      	ldr	r2, [pc, #212]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007ec6:	f023 0301 	bic.w	r3, r3, #1
 8007eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ecc:	4b33      	ldr	r3, [pc, #204]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed0:	4b34      	ldr	r3, [pc, #208]	; (8007fa4 <HAL_RCC_OscConfig+0x6cc>)
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ed8:	00d2      	lsls	r2, r2, #3
 8007eda:	4930      	ldr	r1, [pc, #192]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ee0:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	f023 020c 	bic.w	r2, r3, #12
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	492b      	ldr	r1, [pc, #172]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ef2:	4b2a      	ldr	r3, [pc, #168]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	f023 0202 	bic.w	r2, r3, #2
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efe:	4927      	ldr	r1, [pc, #156]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f04:	4b25      	ldr	r3, [pc, #148]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f10:	4b22      	ldr	r3, [pc, #136]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	4a21      	ldr	r2, [pc, #132]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f1c:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	4a1e      	ldr	r2, [pc, #120]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007f28:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f34:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a18      	ldr	r2, [pc, #96]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f40:	f7fa f8ca 	bl	80020d8 <HAL_GetTick>
 8007f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f46:	e008      	b.n	8007f5a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f48:	f7fa f8c6 	bl	80020d8 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e090      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f5a:	4b10      	ldr	r3, [pc, #64]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0f0      	beq.n	8007f48 <HAL_RCC_OscConfig+0x670>
 8007f66:	e088      	b.n	800807a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a0b      	ldr	r2, [pc, #44]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f74:	f7fa f8b0 	bl	80020d8 <HAL_GetTick>
 8007f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f7c:	f7fa f8ac 	bl	80020d8 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e076      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f8e:	4b03      	ldr	r3, [pc, #12]	; (8007f9c <HAL_RCC_OscConfig+0x6c4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f0      	bne.n	8007f7c <HAL_RCC_OscConfig+0x6a4>
 8007f9a:	e06e      	b.n	800807a <HAL_RCC_OscConfig+0x7a2>
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	fffffc0c 	.word	0xfffffc0c
 8007fa4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007fa8:	4b36      	ldr	r3, [pc, #216]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 8007faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007fae:	4b35      	ldr	r3, [pc, #212]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d031      	beq.n	8008020 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f003 0203 	and.w	r2, r3, #3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d12a      	bne.n	8008020 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	091b      	lsrs	r3, r3, #4
 8007fce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d122      	bne.n	8008020 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d11a      	bne.n	8008020 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	0a5b      	lsrs	r3, r3, #9
 8007fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d111      	bne.n	8008020 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	0c1b      	lsrs	r3, r3, #16
 8008000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008008:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800800a:	429a      	cmp	r2, r3
 800800c:	d108      	bne.n	8008020 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	0e1b      	lsrs	r3, r3, #24
 8008012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800801c:	429a      	cmp	r2, r3
 800801e:	d001      	beq.n	8008024 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e02b      	b.n	800807c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008024:	4b17      	ldr	r3, [pc, #92]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 8008026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008028:	08db      	lsrs	r3, r3, #3
 800802a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800802e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	429a      	cmp	r2, r3
 8008038:	d01f      	beq.n	800807a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	4a11      	ldr	r2, [pc, #68]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 8008040:	f023 0301 	bic.w	r3, r3, #1
 8008044:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008046:	f7fa f847 	bl	80020d8 <HAL_GetTick>
 800804a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800804c:	bf00      	nop
 800804e:	f7fa f843 	bl	80020d8 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	4293      	cmp	r3, r2
 8008058:	d0f9      	beq.n	800804e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800805a:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 800805c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800805e:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <HAL_RCC_OscConfig+0x7b0>)
 8008060:	4013      	ands	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008066:	00d2      	lsls	r2, r2, #3
 8008068:	4906      	ldr	r1, [pc, #24]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 800806a:	4313      	orrs	r3, r2
 800806c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	4a04      	ldr	r2, [pc, #16]	; (8008084 <HAL_RCC_OscConfig+0x7ac>)
 8008074:	f043 0301 	orr.w	r3, r3, #1
 8008078:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3730      	adds	r7, #48	; 0x30
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	58024400 	.word	0x58024400
 8008088:	ffff0007 	.word	0xffff0007

0800808c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e19c      	b.n	80083da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080a0:	4b8a      	ldr	r3, [pc, #552]	; (80082cc <HAL_RCC_ClockConfig+0x240>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d910      	bls.n	80080d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ae:	4b87      	ldr	r3, [pc, #540]	; (80082cc <HAL_RCC_ClockConfig+0x240>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f023 020f 	bic.w	r2, r3, #15
 80080b6:	4985      	ldr	r1, [pc, #532]	; (80082cc <HAL_RCC_ClockConfig+0x240>)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080be:	4b83      	ldr	r3, [pc, #524]	; (80082cc <HAL_RCC_ClockConfig+0x240>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d001      	beq.n	80080d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e184      	b.n	80083da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d010      	beq.n	80080fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	4b7b      	ldr	r3, [pc, #492]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d908      	bls.n	80080fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080ec:	4b78      	ldr	r3, [pc, #480]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	4975      	ldr	r1, [pc, #468]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0308 	and.w	r3, r3, #8
 8008106:	2b00      	cmp	r3, #0
 8008108:	d010      	beq.n	800812c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	695a      	ldr	r2, [r3, #20]
 800810e:	4b70      	ldr	r3, [pc, #448]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008116:	429a      	cmp	r2, r3
 8008118:	d908      	bls.n	800812c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800811a:	4b6d      	ldr	r3, [pc, #436]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	496a      	ldr	r1, [pc, #424]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 8008128:	4313      	orrs	r3, r2
 800812a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b00      	cmp	r3, #0
 8008136:	d010      	beq.n	800815a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699a      	ldr	r2, [r3, #24]
 800813c:	4b64      	ldr	r3, [pc, #400]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008144:	429a      	cmp	r2, r3
 8008146:	d908      	bls.n	800815a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008148:	4b61      	ldr	r3, [pc, #388]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	495e      	ldr	r1, [pc, #376]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 8008156:	4313      	orrs	r3, r2
 8008158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	d010      	beq.n	8008188 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69da      	ldr	r2, [r3, #28]
 800816a:	4b59      	ldr	r3, [pc, #356]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008172:	429a      	cmp	r2, r3
 8008174:	d908      	bls.n	8008188 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008176:	4b56      	ldr	r3, [pc, #344]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	4953      	ldr	r1, [pc, #332]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 8008184:	4313      	orrs	r3, r2
 8008186:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d010      	beq.n	80081b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	4b4d      	ldr	r3, [pc, #308]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d908      	bls.n	80081b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081a4:	4b4a      	ldr	r3, [pc, #296]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	f023 020f 	bic.w	r2, r3, #15
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	4947      	ldr	r1, [pc, #284]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d055      	beq.n	800826e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80081c2:	4b43      	ldr	r3, [pc, #268]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	4940      	ldr	r1, [pc, #256]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d107      	bne.n	80081ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081dc:	4b3c      	ldr	r3, [pc, #240]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d121      	bne.n	800822c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e0f6      	b.n	80083da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d107      	bne.n	8008204 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081f4:	4b36      	ldr	r3, [pc, #216]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d115      	bne.n	800822c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e0ea      	b.n	80083da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d107      	bne.n	800821c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800820c:	4b30      	ldr	r3, [pc, #192]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008214:	2b00      	cmp	r3, #0
 8008216:	d109      	bne.n	800822c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e0de      	b.n	80083da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800821c:	4b2c      	ldr	r3, [pc, #176]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0d6      	b.n	80083da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800822c:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f023 0207 	bic.w	r2, r3, #7
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4925      	ldr	r1, [pc, #148]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800823a:	4313      	orrs	r3, r2
 800823c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800823e:	f7f9 ff4b 	bl	80020d8 <HAL_GetTick>
 8008242:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008244:	e00a      	b.n	800825c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008246:	f7f9 ff47 	bl	80020d8 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	f241 3288 	movw	r2, #5000	; 0x1388
 8008254:	4293      	cmp	r3, r2
 8008256:	d901      	bls.n	800825c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e0be      	b.n	80083da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800825c:	4b1c      	ldr	r3, [pc, #112]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	429a      	cmp	r2, r3
 800826c:	d1eb      	bne.n	8008246 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d010      	beq.n	800829c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f003 030f 	and.w	r3, r3, #15
 8008286:	429a      	cmp	r2, r3
 8008288:	d208      	bcs.n	800829c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800828a:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	f023 020f 	bic.w	r2, r3, #15
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	490e      	ldr	r1, [pc, #56]	; (80082d0 <HAL_RCC_ClockConfig+0x244>)
 8008298:	4313      	orrs	r3, r2
 800829a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800829c:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <HAL_RCC_ClockConfig+0x240>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d214      	bcs.n	80082d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082aa:	4b08      	ldr	r3, [pc, #32]	; (80082cc <HAL_RCC_ClockConfig+0x240>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f023 020f 	bic.w	r2, r3, #15
 80082b2:	4906      	ldr	r1, [pc, #24]	; (80082cc <HAL_RCC_ClockConfig+0x240>)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ba:	4b04      	ldr	r3, [pc, #16]	; (80082cc <HAL_RCC_ClockConfig+0x240>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d005      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e086      	b.n	80083da <HAL_RCC_ClockConfig+0x34e>
 80082cc:	52002000 	.word	0x52002000
 80082d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d010      	beq.n	8008302 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	691a      	ldr	r2, [r3, #16]
 80082e4:	4b3f      	ldr	r3, [pc, #252]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d208      	bcs.n	8008302 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082f0:	4b3c      	ldr	r3, [pc, #240]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	4939      	ldr	r1, [pc, #228]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d010      	beq.n	8008330 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	4b34      	ldr	r3, [pc, #208]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800831a:	429a      	cmp	r2, r3
 800831c:	d208      	bcs.n	8008330 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800831e:	4b31      	ldr	r3, [pc, #196]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	492e      	ldr	r1, [pc, #184]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 800832c:	4313      	orrs	r3, r2
 800832e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b00      	cmp	r3, #0
 800833a:	d010      	beq.n	800835e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699a      	ldr	r2, [r3, #24]
 8008340:	4b28      	ldr	r3, [pc, #160]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008348:	429a      	cmp	r2, r3
 800834a:	d208      	bcs.n	800835e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800834c:	4b25      	ldr	r3, [pc, #148]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	4922      	ldr	r1, [pc, #136]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 800835a:	4313      	orrs	r3, r2
 800835c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	d010      	beq.n	800838c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	69da      	ldr	r2, [r3, #28]
 800836e:	4b1d      	ldr	r3, [pc, #116]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008376:	429a      	cmp	r2, r3
 8008378:	d208      	bcs.n	800838c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800837a:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	4917      	ldr	r1, [pc, #92]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 8008388:	4313      	orrs	r3, r2
 800838a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800838c:	f000 f834 	bl	80083f8 <HAL_RCC_GetSysClockFreq>
 8008390:	4602      	mov	r2, r0
 8008392:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	4912      	ldr	r1, [pc, #72]	; (80083e8 <HAL_RCC_ClockConfig+0x35c>)
 800839e:	5ccb      	ldrb	r3, [r1, r3]
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
 80083a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80083aa:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <HAL_RCC_ClockConfig+0x358>)
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	4a0d      	ldr	r2, [pc, #52]	; (80083e8 <HAL_RCC_ClockConfig+0x35c>)
 80083b4:	5cd3      	ldrb	r3, [r2, r3]
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	fa22 f303 	lsr.w	r3, r2, r3
 80083c0:	4a0a      	ldr	r2, [pc, #40]	; (80083ec <HAL_RCC_ClockConfig+0x360>)
 80083c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083c4:	4a0a      	ldr	r2, [pc, #40]	; (80083f0 <HAL_RCC_ClockConfig+0x364>)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80083ca:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <HAL_RCC_ClockConfig+0x368>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7f9 fe38 	bl	8002044 <HAL_InitTick>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	58024400 	.word	0x58024400
 80083e8:	0800dc44 	.word	0x0800dc44
 80083ec:	24000008 	.word	0x24000008
 80083f0:	24000004 	.word	0x24000004
 80083f4:	2400000c 	.word	0x2400000c

080083f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	; 0x24
 80083fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083fe:	4bb3      	ldr	r3, [pc, #716]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008406:	2b18      	cmp	r3, #24
 8008408:	f200 8155 	bhi.w	80086b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800840c:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <HAL_RCC_GetSysClockFreq+0x1c>)
 800840e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008412:	bf00      	nop
 8008414:	08008479 	.word	0x08008479
 8008418:	080086b7 	.word	0x080086b7
 800841c:	080086b7 	.word	0x080086b7
 8008420:	080086b7 	.word	0x080086b7
 8008424:	080086b7 	.word	0x080086b7
 8008428:	080086b7 	.word	0x080086b7
 800842c:	080086b7 	.word	0x080086b7
 8008430:	080086b7 	.word	0x080086b7
 8008434:	0800849f 	.word	0x0800849f
 8008438:	080086b7 	.word	0x080086b7
 800843c:	080086b7 	.word	0x080086b7
 8008440:	080086b7 	.word	0x080086b7
 8008444:	080086b7 	.word	0x080086b7
 8008448:	080086b7 	.word	0x080086b7
 800844c:	080086b7 	.word	0x080086b7
 8008450:	080086b7 	.word	0x080086b7
 8008454:	080084a5 	.word	0x080084a5
 8008458:	080086b7 	.word	0x080086b7
 800845c:	080086b7 	.word	0x080086b7
 8008460:	080086b7 	.word	0x080086b7
 8008464:	080086b7 	.word	0x080086b7
 8008468:	080086b7 	.word	0x080086b7
 800846c:	080086b7 	.word	0x080086b7
 8008470:	080086b7 	.word	0x080086b7
 8008474:	080084ab 	.word	0x080084ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008478:	4b94      	ldr	r3, [pc, #592]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b00      	cmp	r3, #0
 8008482:	d009      	beq.n	8008498 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008484:	4b91      	ldr	r3, [pc, #580]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	4a90      	ldr	r2, [pc, #576]	; (80086d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008490:	fa22 f303 	lsr.w	r3, r2, r3
 8008494:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008496:	e111      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008498:	4b8d      	ldr	r3, [pc, #564]	; (80086d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800849a:	61bb      	str	r3, [r7, #24]
      break;
 800849c:	e10e      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800849e:	4b8d      	ldr	r3, [pc, #564]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084a0:	61bb      	str	r3, [r7, #24]
      break;
 80084a2:	e10b      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80084a4:	4b8c      	ldr	r3, [pc, #560]	; (80086d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80084a6:	61bb      	str	r3, [r7, #24]
      break;
 80084a8:	e108      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084aa:	4b88      	ldr	r3, [pc, #544]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80084b4:	4b85      	ldr	r3, [pc, #532]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b8:	091b      	lsrs	r3, r3, #4
 80084ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80084c0:	4b82      	ldr	r3, [pc, #520]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084ca:	4b80      	ldr	r3, [pc, #512]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ce:	08db      	lsrs	r3, r3, #3
 80084d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 80e1 	beq.w	80086b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	f000 8083 	beq.w	80085fc <HAL_RCC_GetSysClockFreq+0x204>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	f200 80a1 	bhi.w	8008640 <HAL_RCC_GetSysClockFreq+0x248>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_RCC_GetSysClockFreq+0x114>
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d056      	beq.n	80085b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800850a:	e099      	b.n	8008640 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800850c:	4b6f      	ldr	r3, [pc, #444]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d02d      	beq.n	8008574 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008518:	4b6c      	ldr	r3, [pc, #432]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	08db      	lsrs	r3, r3, #3
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	4a6b      	ldr	r2, [pc, #428]	; (80086d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008524:	fa22 f303 	lsr.w	r3, r2, r3
 8008528:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	ee07 3a90 	vmov	s15, r3
 8008530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008542:	4b62      	ldr	r3, [pc, #392]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008552:	ed97 6a02 	vldr	s12, [r7, #8]
 8008556:	eddf 5a61 	vldr	s11, [pc, #388]	; 80086dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800855a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008572:	e087      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80086e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008586:	4b51      	ldr	r3, [pc, #324]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	ed97 6a02 	vldr	s12, [r7, #8]
 800859a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80086dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800859e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085b6:	e065      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80086e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80085c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ca:	4b40      	ldr	r3, [pc, #256]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085da:	ed97 6a02 	vldr	s12, [r7, #8]
 80085de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80086dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80085e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085fa:	e043      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008606:	eddf 6a38 	vldr	s13, [pc, #224]	; 80086e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800860a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860e:	4b2f      	ldr	r3, [pc, #188]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008616:	ee07 3a90 	vmov	s15, r3
 800861a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008622:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80086dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800863e:	e021      	b.n	8008684 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80086e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800864e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008652:	4b1e      	ldr	r3, [pc, #120]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008662:	ed97 6a02 	vldr	s12, [r7, #8]
 8008666:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80086dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800866a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008682:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008684:	4b11      	ldr	r3, [pc, #68]	; (80086cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008688:	0a5b      	lsrs	r3, r3, #9
 800868a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800868e:	3301      	adds	r3, #1
 8008690:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800869c:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a8:	ee17 3a90 	vmov	r3, s15
 80086ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80086ae:	e005      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61bb      	str	r3, [r7, #24]
      break;
 80086b4:	e002      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086b8:	61bb      	str	r3, [r7, #24]
      break;
 80086ba:	bf00      	nop
  }

  return sysclockfreq;
 80086bc:	69bb      	ldr	r3, [r7, #24]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3724      	adds	r7, #36	; 0x24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	58024400 	.word	0x58024400
 80086d0:	03d09000 	.word	0x03d09000
 80086d4:	003d0900 	.word	0x003d0900
 80086d8:	017d7840 	.word	0x017d7840
 80086dc:	46000000 	.word	0x46000000
 80086e0:	4c742400 	.word	0x4c742400
 80086e4:	4a742400 	.word	0x4a742400
 80086e8:	4bbebc20 	.word	0x4bbebc20

080086ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80086f2:	f7ff fe81 	bl	80083f8 <HAL_RCC_GetSysClockFreq>
 80086f6:	4602      	mov	r2, r0
 80086f8:	4b10      	ldr	r3, [pc, #64]	; (800873c <HAL_RCC_GetHCLKFreq+0x50>)
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	0a1b      	lsrs	r3, r3, #8
 80086fe:	f003 030f 	and.w	r3, r3, #15
 8008702:	490f      	ldr	r1, [pc, #60]	; (8008740 <HAL_RCC_GetHCLKFreq+0x54>)
 8008704:	5ccb      	ldrb	r3, [r1, r3]
 8008706:	f003 031f 	and.w	r3, r3, #31
 800870a:	fa22 f303 	lsr.w	r3, r2, r3
 800870e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008710:	4b0a      	ldr	r3, [pc, #40]	; (800873c <HAL_RCC_GetHCLKFreq+0x50>)
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	4a09      	ldr	r2, [pc, #36]	; (8008740 <HAL_RCC_GetHCLKFreq+0x54>)
 800871a:	5cd3      	ldrb	r3, [r2, r3]
 800871c:	f003 031f 	and.w	r3, r3, #31
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	fa22 f303 	lsr.w	r3, r2, r3
 8008726:	4a07      	ldr	r2, [pc, #28]	; (8008744 <HAL_RCC_GetHCLKFreq+0x58>)
 8008728:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800872a:	4a07      	ldr	r2, [pc, #28]	; (8008748 <HAL_RCC_GetHCLKFreq+0x5c>)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008730:	4b04      	ldr	r3, [pc, #16]	; (8008744 <HAL_RCC_GetHCLKFreq+0x58>)
 8008732:	681b      	ldr	r3, [r3, #0]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	58024400 	.word	0x58024400
 8008740:	0800dc44 	.word	0x0800dc44
 8008744:	24000008 	.word	0x24000008
 8008748:	24000004 	.word	0x24000004

0800874c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008750:	f7ff ffcc 	bl	80086ec <HAL_RCC_GetHCLKFreq>
 8008754:	4602      	mov	r2, r0
 8008756:	4b06      	ldr	r3, [pc, #24]	; (8008770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	091b      	lsrs	r3, r3, #4
 800875c:	f003 0307 	and.w	r3, r3, #7
 8008760:	4904      	ldr	r1, [pc, #16]	; (8008774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008762:	5ccb      	ldrb	r3, [r1, r3]
 8008764:	f003 031f 	and.w	r3, r3, #31
 8008768:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800876c:	4618      	mov	r0, r3
 800876e:	bd80      	pop	{r7, pc}
 8008770:	58024400 	.word	0x58024400
 8008774:	0800dc44 	.word	0x0800dc44

08008778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800877c:	f7ff ffb6 	bl	80086ec <HAL_RCC_GetHCLKFreq>
 8008780:	4602      	mov	r2, r0
 8008782:	4b06      	ldr	r3, [pc, #24]	; (800879c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	4904      	ldr	r1, [pc, #16]	; (80087a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800878e:	5ccb      	ldrb	r3, [r1, r3]
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008798:	4618      	mov	r0, r3
 800879a:	bd80      	pop	{r7, pc}
 800879c:	58024400 	.word	0x58024400
 80087a0:	0800dc44 	.word	0x0800dc44

080087a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087a8:	b0c6      	sub	sp, #280	; 0x118
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80087b0:	2300      	movs	r3, #0
 80087b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087b6:	2300      	movs	r3, #0
 80087b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80087c8:	2500      	movs	r5, #0
 80087ca:	ea54 0305 	orrs.w	r3, r4, r5
 80087ce:	d049      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087da:	d02f      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80087dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087e0:	d828      	bhi.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087e6:	d01a      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80087e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087ec:	d822      	bhi.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f6:	d007      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80087f8:	e01c      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087fa:	4bab      	ldr	r3, [pc, #684]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	4aaa      	ldr	r2, [pc, #680]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008806:	e01a      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880c:	3308      	adds	r3, #8
 800880e:	2102      	movs	r1, #2
 8008810:	4618      	mov	r0, r3
 8008812:	f002 fa49 	bl	800aca8 <RCCEx_PLL2_Config>
 8008816:	4603      	mov	r3, r0
 8008818:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800881c:	e00f      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008822:	3328      	adds	r3, #40	; 0x28
 8008824:	2102      	movs	r1, #2
 8008826:	4618      	mov	r0, r3
 8008828:	f002 faf0 	bl	800ae0c <RCCEx_PLL3_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008832:	e004      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800883a:	e000      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800883c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800883e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008846:	4b98      	ldr	r3, [pc, #608]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800884a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800884e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008854:	4a94      	ldr	r2, [pc, #592]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008856:	430b      	orrs	r3, r1
 8008858:	6513      	str	r3, [r2, #80]	; 0x50
 800885a:	e003      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008860:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008870:	f04f 0900 	mov.w	r9, #0
 8008874:	ea58 0309 	orrs.w	r3, r8, r9
 8008878:	d047      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800887a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008880:	2b04      	cmp	r3, #4
 8008882:	d82a      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088a1 	.word	0x080088a1
 8008890:	080088af 	.word	0x080088af
 8008894:	080088c5 	.word	0x080088c5
 8008898:	080088e3 	.word	0x080088e3
 800889c:	080088e3 	.word	0x080088e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a0:	4b81      	ldr	r3, [pc, #516]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	4a80      	ldr	r2, [pc, #512]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088ac:	e01a      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b2:	3308      	adds	r3, #8
 80088b4:	2100      	movs	r1, #0
 80088b6:	4618      	mov	r0, r3
 80088b8:	f002 f9f6 	bl	800aca8 <RCCEx_PLL2_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088c2:	e00f      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c8:	3328      	adds	r3, #40	; 0x28
 80088ca:	2100      	movs	r1, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f002 fa9d 	bl	800ae0c <RCCEx_PLL3_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088d8:	e004      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80088e0:	e000      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80088e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088ec:	4b6e      	ldr	r3, [pc, #440]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f0:	f023 0107 	bic.w	r1, r3, #7
 80088f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088fa:	4a6b      	ldr	r2, [pc, #428]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088fc:	430b      	orrs	r3, r1
 80088fe:	6513      	str	r3, [r2, #80]	; 0x50
 8008900:	e003      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008902:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008906:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800890a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8008916:	f04f 0b00 	mov.w	fp, #0
 800891a:	ea5a 030b 	orrs.w	r3, sl, fp
 800891e:	d05b      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008928:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800892c:	d03b      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800892e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008932:	d834      	bhi.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008934:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008938:	d037      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800893a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800893e:	d82e      	bhi.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008940:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008944:	d033      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008946:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800894a:	d828      	bhi.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800894c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008950:	d01a      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008956:	d822      	bhi.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800895c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008960:	d007      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008962:	e01c      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008964:	4b50      	ldr	r3, [pc, #320]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	4a4f      	ldr	r2, [pc, #316]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800896a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800896e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008970:	e01e      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008976:	3308      	adds	r3, #8
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f002 f994 	bl	800aca8 <RCCEx_PLL2_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008986:	e013      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898c:	3328      	adds	r3, #40	; 0x28
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f002 fa3b 	bl	800ae0c <RCCEx_PLL3_Config>
 8008996:	4603      	mov	r3, r0
 8008998:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800899c:	e008      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80089a4:	e004      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80089a6:	bf00      	nop
 80089a8:	e002      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80089aa:	bf00      	nop
 80089ac:	e000      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80089ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10b      	bne.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80089b8:	4b3b      	ldr	r3, [pc, #236]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089bc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80089c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089c8:	4a37      	ldr	r2, [pc, #220]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089ca:	430b      	orrs	r3, r1
 80089cc:	6593      	str	r3, [r2, #88]	; 0x58
 80089ce:	e003      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80089d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80089e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089e8:	2300      	movs	r3, #0
 80089ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80089f2:	460b      	mov	r3, r1
 80089f4:	4313      	orrs	r3, r2
 80089f6:	d05d      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80089f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a00:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a04:	d03b      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008a06:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a0a:	d834      	bhi.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a10:	d037      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a16:	d82e      	bhi.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a1c:	d033      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008a1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a22:	d828      	bhi.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a28:	d01a      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a2e:	d822      	bhi.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a38:	d007      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008a3a:	e01c      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a3c:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a48:	e01e      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4e:	3308      	adds	r3, #8
 8008a50:	2100      	movs	r1, #0
 8008a52:	4618      	mov	r0, r3
 8008a54:	f002 f928 	bl	800aca8 <RCCEx_PLL2_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a5e:	e013      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a64:	3328      	adds	r3, #40	; 0x28
 8008a66:	2100      	movs	r1, #0
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f002 f9cf 	bl	800ae0c <RCCEx_PLL3_Config>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a74:	e008      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a7c:	e004      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a7e:	bf00      	nop
 8008a80:	e002      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a82:	bf00      	nop
 8008a84:	e000      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10d      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a90:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a94:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008aa0:	4a01      	ldr	r2, [pc, #4]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8008aa6:	e005      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ab0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008ac0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008aca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	d03a      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ada:	2b30      	cmp	r3, #48	; 0x30
 8008adc:	d01f      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008ade:	2b30      	cmp	r3, #48	; 0x30
 8008ae0:	d819      	bhi.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d00c      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d815      	bhi.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d019      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d111      	bne.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af2:	4baa      	ldr	r3, [pc, #680]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	4aa9      	ldr	r2, [pc, #676]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008afe:	e011      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b04:	3308      	adds	r3, #8
 8008b06:	2102      	movs	r1, #2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f002 f8cd 	bl	800aca8 <RCCEx_PLL2_Config>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008b14:	e006      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b1c:	e002      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008b1e:	bf00      	nop
 8008b20:	e000      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008b2c:	4b9b      	ldr	r3, [pc, #620]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b30:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b3a:	4a98      	ldr	r2, [pc, #608]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b40:	e003      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008b56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008b64:	460b      	mov	r3, r1
 8008b66:	4313      	orrs	r3, r2
 8008b68:	d051      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b74:	d035      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b7a:	d82e      	bhi.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b80:	d031      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b86:	d828      	bhi.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b8c:	d01a      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b92:	d822      	bhi.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9c:	d007      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008b9e:	e01c      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba0:	4b7e      	ldr	r3, [pc, #504]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	4a7d      	ldr	r2, [pc, #500]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bac:	e01c      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f002 f876 	bl	800aca8 <RCCEx_PLL2_Config>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bc2:	e011      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc8:	3328      	adds	r3, #40	; 0x28
 8008bca:	2100      	movs	r1, #0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f002 f91d 	bl	800ae0c <RCCEx_PLL3_Config>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bd8:	e006      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008be0:	e002      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008be2:	bf00      	nop
 8008be4:	e000      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008be8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008bf0:	4b6a      	ldr	r3, [pc, #424]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bfe:	4a67      	ldr	r2, [pc, #412]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c00:	430b      	orrs	r3, r1
 8008c02:	6513      	str	r3, [r2, #80]	; 0x50
 8008c04:	e003      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008c1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c24:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	d053      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c38:	d033      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c3e:	d82c      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c44:	d02f      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008c46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c4a:	d826      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c50:	d02b      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008c52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c56:	d820      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c5c:	d012      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008c5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c62:	d81a      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d022      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c6c:	d115      	bne.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c72:	3308      	adds	r3, #8
 8008c74:	2101      	movs	r1, #1
 8008c76:	4618      	mov	r0, r3
 8008c78:	f002 f816 	bl	800aca8 <RCCEx_PLL2_Config>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c82:	e015      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c88:	3328      	adds	r3, #40	; 0x28
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f002 f8bd 	bl	800ae0c <RCCEx_PLL3_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c98:	e00a      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ca0:	e006      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008ca2:	bf00      	nop
 8008ca4:	e004      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e002      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008caa:	bf00      	nop
 8008cac:	e000      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008cb8:	4b38      	ldr	r3, [pc, #224]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc6:	4a35      	ldr	r2, [pc, #212]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	6513      	str	r3, [r2, #80]	; 0x50
 8008ccc:	e003      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cd2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	d058      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d02:	d033      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d08:	d82c      	bhi.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d0e:	d02f      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d14:	d826      	bhi.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d1a:	d02b      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008d1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d20:	d820      	bhi.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d26:	d012      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2c:	d81a      	bhi.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d022      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d36:	d115      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	2101      	movs	r1, #1
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 ffb1 	bl	800aca8 <RCCEx_PLL2_Config>
 8008d46:	4603      	mov	r3, r0
 8008d48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d4c:	e015      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d52:	3328      	adds	r3, #40	; 0x28
 8008d54:	2101      	movs	r1, #1
 8008d56:	4618      	mov	r0, r3
 8008d58:	f002 f858 	bl	800ae0c <RCCEx_PLL3_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d62:	e00a      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d6a:	e006      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d6c:	bf00      	nop
 8008d6e:	e004      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d70:	bf00      	nop
 8008d72:	e002      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d74:	bf00      	nop
 8008d76:	e000      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10e      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d82:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d92:	4a02      	ldr	r2, [pc, #8]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d94:	430b      	orrs	r3, r1
 8008d96:	6593      	str	r3, [r2, #88]	; 0x58
 8008d98:	e006      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008da4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008db8:	2300      	movs	r3, #0
 8008dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008dbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	d037      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dd2:	d00e      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dd8:	d816      	bhi.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d018      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008de2:	d111      	bne.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de4:	4bc4      	ldr	r3, [pc, #784]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	4ac3      	ldr	r2, [pc, #780]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008df0:	e00f      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df6:	3308      	adds	r3, #8
 8008df8:	2101      	movs	r1, #1
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 ff54 	bl	800aca8 <RCCEx_PLL2_Config>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e06:	e004      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e0e:	e000      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e1a:	4bb7      	ldr	r3, [pc, #732]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e28:	4ab3      	ldr	r2, [pc, #716]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	6513      	str	r3, [r2, #80]	; 0x50
 8008e2e:	e003      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008e52:	460b      	mov	r3, r1
 8008e54:	4313      	orrs	r3, r2
 8008e56:	d039      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d81c      	bhi.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008e62:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008ea5 	.word	0x08008ea5
 8008e6c:	08008e79 	.word	0x08008e79
 8008e70:	08008e87 	.word	0x08008e87
 8008e74:	08008ea5 	.word	0x08008ea5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e78:	4b9f      	ldr	r3, [pc, #636]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	4a9e      	ldr	r2, [pc, #632]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e84:	e00f      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f001 ff0a 	bl	800aca8 <RCCEx_PLL2_Config>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e9a:	e004      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ea2:	e000      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10a      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008eae:	4b92      	ldr	r3, [pc, #584]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb2:	f023 0103 	bic.w	r1, r3, #3
 8008eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ebc:	4a8e      	ldr	r2, [pc, #568]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ebe:	430b      	orrs	r3, r1
 8008ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ec2:	e003      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ec8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008edc:	2300      	movs	r3, #0
 8008ede:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ee2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	f000 8099 	beq.w	8009020 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008eee:	4b83      	ldr	r3, [pc, #524]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a82      	ldr	r2, [pc, #520]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008efa:	f7f9 f8ed 	bl	80020d8 <HAL_GetTick>
 8008efe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f02:	e00b      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f04:	f7f9 f8e8 	bl	80020d8 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b64      	cmp	r3, #100	; 0x64
 8008f12:	d903      	bls.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f1a:	e005      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f1c:	4b77      	ldr	r3, [pc, #476]	; (80090fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0ed      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008f28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d173      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f30:	4b71      	ldr	r3, [pc, #452]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f3c:	4053      	eors	r3, r2
 8008f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d015      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f46:	4b6c      	ldr	r3, [pc, #432]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f52:	4b69      	ldr	r3, [pc, #420]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f56:	4a68      	ldr	r2, [pc, #416]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f5e:	4b66      	ldr	r3, [pc, #408]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f62:	4a65      	ldr	r2, [pc, #404]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f6a:	4a63      	ldr	r2, [pc, #396]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f7e:	d118      	bne.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f80:	f7f9 f8aa 	bl	80020d8 <HAL_GetTick>
 8008f84:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f88:	e00d      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f8a:	f7f9 f8a5 	bl	80020d8 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f94:	1ad2      	subs	r2, r2, r3
 8008f96:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d903      	bls.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008fa4:	e005      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fa6:	4b54      	ldr	r3, [pc, #336]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0eb      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008fb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d129      	bne.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fca:	d10e      	bne.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008fcc:	4b4a      	ldr	r3, [pc, #296]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fdc:	091a      	lsrs	r2, r3, #4
 8008fde:	4b48      	ldr	r3, [pc, #288]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	4a45      	ldr	r2, [pc, #276]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	6113      	str	r3, [r2, #16]
 8008fe8:	e005      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008fea:	4b43      	ldr	r3, [pc, #268]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	4a42      	ldr	r2, [pc, #264]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ff0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ff4:	6113      	str	r3, [r2, #16]
 8008ff6:	4b40      	ldr	r3, [pc, #256]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ff8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009006:	4a3c      	ldr	r2, [pc, #240]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009008:	430b      	orrs	r3, r1
 800900a:	6713      	str	r3, [r2, #112]	; 0x70
 800900c:	e008      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800900e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009012:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8009016:	e003      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800901c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f002 0301 	and.w	r3, r2, #1
 800902c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009030:	2300      	movs	r3, #0
 8009032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009036:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800903a:	460b      	mov	r3, r1
 800903c:	4313      	orrs	r3, r2
 800903e:	f000 808f 	beq.w	8009160 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009048:	2b28      	cmp	r3, #40	; 0x28
 800904a:	d871      	bhi.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800904c:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800904e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009052:	bf00      	nop
 8009054:	08009139 	.word	0x08009139
 8009058:	08009131 	.word	0x08009131
 800905c:	08009131 	.word	0x08009131
 8009060:	08009131 	.word	0x08009131
 8009064:	08009131 	.word	0x08009131
 8009068:	08009131 	.word	0x08009131
 800906c:	08009131 	.word	0x08009131
 8009070:	08009131 	.word	0x08009131
 8009074:	08009105 	.word	0x08009105
 8009078:	08009131 	.word	0x08009131
 800907c:	08009131 	.word	0x08009131
 8009080:	08009131 	.word	0x08009131
 8009084:	08009131 	.word	0x08009131
 8009088:	08009131 	.word	0x08009131
 800908c:	08009131 	.word	0x08009131
 8009090:	08009131 	.word	0x08009131
 8009094:	0800911b 	.word	0x0800911b
 8009098:	08009131 	.word	0x08009131
 800909c:	08009131 	.word	0x08009131
 80090a0:	08009131 	.word	0x08009131
 80090a4:	08009131 	.word	0x08009131
 80090a8:	08009131 	.word	0x08009131
 80090ac:	08009131 	.word	0x08009131
 80090b0:	08009131 	.word	0x08009131
 80090b4:	08009139 	.word	0x08009139
 80090b8:	08009131 	.word	0x08009131
 80090bc:	08009131 	.word	0x08009131
 80090c0:	08009131 	.word	0x08009131
 80090c4:	08009131 	.word	0x08009131
 80090c8:	08009131 	.word	0x08009131
 80090cc:	08009131 	.word	0x08009131
 80090d0:	08009131 	.word	0x08009131
 80090d4:	08009139 	.word	0x08009139
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009131 	.word	0x08009131
 80090e0:	08009131 	.word	0x08009131
 80090e4:	08009131 	.word	0x08009131
 80090e8:	08009131 	.word	0x08009131
 80090ec:	08009131 	.word	0x08009131
 80090f0:	08009131 	.word	0x08009131
 80090f4:	08009139 	.word	0x08009139
 80090f8:	58024400 	.word	0x58024400
 80090fc:	58024800 	.word	0x58024800
 8009100:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009108:	3308      	adds	r3, #8
 800910a:	2101      	movs	r1, #1
 800910c:	4618      	mov	r0, r3
 800910e:	f001 fdcb 	bl	800aca8 <RCCEx_PLL2_Config>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009118:	e00f      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800911a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800911e:	3328      	adds	r3, #40	; 0x28
 8009120:	2101      	movs	r1, #1
 8009122:	4618      	mov	r0, r3
 8009124:	f001 fe72 	bl	800ae0c <RCCEx_PLL3_Config>
 8009128:	4603      	mov	r3, r0
 800912a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800912e:	e004      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009136:	e000      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800913a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10a      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009142:	4bbf      	ldr	r3, [pc, #764]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009146:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800914a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009150:	4abb      	ldr	r2, [pc, #748]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009152:	430b      	orrs	r3, r1
 8009154:	6553      	str	r3, [r2, #84]	; 0x54
 8009156:	e003      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009158:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800915c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f002 0302 	and.w	r3, r2, #2
 800916c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009170:	2300      	movs	r3, #0
 8009172:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009176:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800917a:	460b      	mov	r3, r1
 800917c:	4313      	orrs	r3, r2
 800917e:	d041      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009186:	2b05      	cmp	r3, #5
 8009188:	d824      	bhi.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800918a:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091dd 	.word	0x080091dd
 8009194:	080091a9 	.word	0x080091a9
 8009198:	080091bf 	.word	0x080091bf
 800919c:	080091dd 	.word	0x080091dd
 80091a0:	080091dd 	.word	0x080091dd
 80091a4:	080091dd 	.word	0x080091dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ac:	3308      	adds	r3, #8
 80091ae:	2101      	movs	r1, #1
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 fd79 	bl	800aca8 <RCCEx_PLL2_Config>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091bc:	e00f      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c2:	3328      	adds	r3, #40	; 0x28
 80091c4:	2101      	movs	r1, #1
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 fe20 	bl	800ae0c <RCCEx_PLL3_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091d2:	e004      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091da:	e000      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80091dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10a      	bne.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80091e6:	4b96      	ldr	r3, [pc, #600]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ea:	f023 0107 	bic.w	r1, r3, #7
 80091ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f4:	4a92      	ldr	r2, [pc, #584]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091f6:	430b      	orrs	r3, r1
 80091f8:	6553      	str	r3, [r2, #84]	; 0x54
 80091fa:	e003      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009200:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f002 0304 	and.w	r3, r2, #4
 8009210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009214:	2300      	movs	r3, #0
 8009216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800921a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800921e:	460b      	mov	r3, r1
 8009220:	4313      	orrs	r3, r2
 8009222:	d044      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800922c:	2b05      	cmp	r3, #5
 800922e:	d825      	bhi.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	08009285 	.word	0x08009285
 800923c:	08009251 	.word	0x08009251
 8009240:	08009267 	.word	0x08009267
 8009244:	08009285 	.word	0x08009285
 8009248:	08009285 	.word	0x08009285
 800924c:	08009285 	.word	0x08009285
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009254:	3308      	adds	r3, #8
 8009256:	2101      	movs	r1, #1
 8009258:	4618      	mov	r0, r3
 800925a:	f001 fd25 	bl	800aca8 <RCCEx_PLL2_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009264:	e00f      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800926a:	3328      	adds	r3, #40	; 0x28
 800926c:	2101      	movs	r1, #1
 800926e:	4618      	mov	r0, r3
 8009270:	f001 fdcc 	bl	800ae0c <RCCEx_PLL3_Config>
 8009274:	4603      	mov	r3, r0
 8009276:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800927a:	e004      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009282:	e000      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009286:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10b      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800928e:	4b6c      	ldr	r3, [pc, #432]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009292:	f023 0107 	bic.w	r1, r3, #7
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800929e:	4a68      	ldr	r2, [pc, #416]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092a0:	430b      	orrs	r3, r1
 80092a2:	6593      	str	r3, [r2, #88]	; 0x58
 80092a4:	e003      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f002 0320 	and.w	r3, r2, #32
 80092ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092be:	2300      	movs	r3, #0
 80092c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80092c8:	460b      	mov	r3, r1
 80092ca:	4313      	orrs	r3, r2
 80092cc:	d055      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80092ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092da:	d033      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80092dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e0:	d82c      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e6:	d02f      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80092e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ec:	d826      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092f2:	d02b      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80092f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092f8:	d820      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092fe:	d012      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009304:	d81a      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d022      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800930a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800930e:	d115      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009314:	3308      	adds	r3, #8
 8009316:	2100      	movs	r1, #0
 8009318:	4618      	mov	r0, r3
 800931a:	f001 fcc5 	bl	800aca8 <RCCEx_PLL2_Config>
 800931e:	4603      	mov	r3, r0
 8009320:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009324:	e015      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800932a:	3328      	adds	r3, #40	; 0x28
 800932c:	2102      	movs	r1, #2
 800932e:	4618      	mov	r0, r3
 8009330:	f001 fd6c 	bl	800ae0c <RCCEx_PLL3_Config>
 8009334:	4603      	mov	r3, r0
 8009336:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800933a:	e00a      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009342:	e006      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009344:	bf00      	nop
 8009346:	e004      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009348:	bf00      	nop
 800934a:	e002      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800934c:	bf00      	nop
 800934e:	e000      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10b      	bne.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800935a:	4b39      	ldr	r3, [pc, #228]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800935c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936a:	4a35      	ldr	r2, [pc, #212]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800936c:	430b      	orrs	r3, r1
 800936e:	6553      	str	r3, [r2, #84]	; 0x54
 8009370:	e003      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009372:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009376:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800937a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009386:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800938a:	2300      	movs	r3, #0
 800938c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009390:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009394:	460b      	mov	r3, r1
 8009396:	4313      	orrs	r3, r2
 8009398:	d058      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093a6:	d033      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80093a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093ac:	d82c      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b2:	d02f      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80093b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b8:	d826      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093be:	d02b      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80093c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093c4:	d820      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ca:	d012      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80093cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093d0:	d81a      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d022      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80093d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093da:	d115      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e0:	3308      	adds	r3, #8
 80093e2:	2100      	movs	r1, #0
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fc5f 	bl	800aca8 <RCCEx_PLL2_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093f0:	e015      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f6:	3328      	adds	r3, #40	; 0x28
 80093f8:	2102      	movs	r1, #2
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 fd06 	bl	800ae0c <RCCEx_PLL3_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009406:	e00a      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800940e:	e006      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009410:	bf00      	nop
 8009412:	e004      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009414:	bf00      	nop
 8009416:	e002      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009418:	bf00      	nop
 800941a:	e000      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800941c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800941e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10e      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009426:	4b06      	ldr	r3, [pc, #24]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800942e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009436:	4a02      	ldr	r2, [pc, #8]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009438:	430b      	orrs	r3, r1
 800943a:	6593      	str	r3, [r2, #88]	; 0x58
 800943c:	e006      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009444:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009448:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800945c:	2300      	movs	r3, #0
 800945e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009462:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009466:	460b      	mov	r3, r1
 8009468:	4313      	orrs	r3, r2
 800946a:	d055      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800946c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009470:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009474:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009478:	d033      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800947a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800947e:	d82c      	bhi.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009484:	d02f      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800948a:	d826      	bhi.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800948c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009490:	d02b      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009492:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009496:	d820      	bhi.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800949c:	d012      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800949e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094a2:	d81a      	bhi.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d022      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80094a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ac:	d115      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b2:	3308      	adds	r3, #8
 80094b4:	2100      	movs	r1, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 fbf6 	bl	800aca8 <RCCEx_PLL2_Config>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094c2:	e015      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c8:	3328      	adds	r3, #40	; 0x28
 80094ca:	2102      	movs	r1, #2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 fc9d 	bl	800ae0c <RCCEx_PLL3_Config>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094d8:	e00a      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80094e0:	e006      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094e2:	bf00      	nop
 80094e4:	e004      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094e6:	bf00      	nop
 80094e8:	e002      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094ea:	bf00      	nop
 80094ec:	e000      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10b      	bne.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80094f8:	4ba0      	ldr	r3, [pc, #640]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009508:	4a9c      	ldr	r2, [pc, #624]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800950a:	430b      	orrs	r3, r1
 800950c:	6593      	str	r3, [r2, #88]	; 0x58
 800950e:	e003      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009510:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009514:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f002 0308 	and.w	r3, r2, #8
 8009524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009528:	2300      	movs	r3, #0
 800952a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800952e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009532:	460b      	mov	r3, r1
 8009534:	4313      	orrs	r3, r2
 8009536:	d01e      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009544:	d10c      	bne.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954a:	3328      	adds	r3, #40	; 0x28
 800954c:	2102      	movs	r1, #2
 800954e:	4618      	mov	r0, r3
 8009550:	f001 fc5c 	bl	800ae0c <RCCEx_PLL3_Config>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009560:	4b86      	ldr	r3, [pc, #536]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009564:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800956c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009570:	4a82      	ldr	r2, [pc, #520]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009572:	430b      	orrs	r3, r1
 8009574:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f002 0310 	and.w	r3, r2, #16
 8009582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009586:	2300      	movs	r3, #0
 8009588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800958c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009590:	460b      	mov	r3, r1
 8009592:	4313      	orrs	r3, r2
 8009594:	d01e      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800959a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800959e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095a2:	d10c      	bne.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a8:	3328      	adds	r3, #40	; 0x28
 80095aa:	2102      	movs	r1, #2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 fc2d 	bl	800ae0c <RCCEx_PLL3_Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095be:	4b6f      	ldr	r3, [pc, #444]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ce:	4a6b      	ldr	r2, [pc, #428]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095d0:	430b      	orrs	r3, r1
 80095d2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80095e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80095e2:	2300      	movs	r3, #0
 80095e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80095ea:	460b      	mov	r3, r1
 80095ec:	4313      	orrs	r3, r2
 80095ee:	d03e      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80095f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095fc:	d022      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80095fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009602:	d81b      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800960c:	d00b      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800960e:	e015      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009614:	3308      	adds	r3, #8
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f001 fb45 	bl	800aca8 <RCCEx_PLL2_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009624:	e00f      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962a:	3328      	adds	r3, #40	; 0x28
 800962c:	2102      	movs	r1, #2
 800962e:	4618      	mov	r0, r3
 8009630:	f001 fbec 	bl	800ae0c <RCCEx_PLL3_Config>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800963a:	e004      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009642:	e000      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009646:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10b      	bne.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800964e:	4b4b      	ldr	r3, [pc, #300]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009652:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800965a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800965e:	4a47      	ldr	r2, [pc, #284]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009660:	430b      	orrs	r3, r1
 8009662:	6593      	str	r3, [r2, #88]	; 0x58
 8009664:	e003      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009666:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800966a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800966e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800967a:	673b      	str	r3, [r7, #112]	; 0x70
 800967c:	2300      	movs	r3, #0
 800967e:	677b      	str	r3, [r7, #116]	; 0x74
 8009680:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009684:	460b      	mov	r3, r1
 8009686:	4313      	orrs	r3, r2
 8009688:	d03b      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800968a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009696:	d01f      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009698:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800969c:	d818      	bhi.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800969e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096a2:	d003      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80096a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096a8:	d007      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80096aa:	e011      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ac:	4b33      	ldr	r3, [pc, #204]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	4a32      	ldr	r2, [pc, #200]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80096b8:	e00f      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096be:	3328      	adds	r3, #40	; 0x28
 80096c0:	2101      	movs	r1, #1
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 fba2 	bl	800ae0c <RCCEx_PLL3_Config>
 80096c8:	4603      	mov	r3, r0
 80096ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80096ce:	e004      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096d6:	e000      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80096d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096e2:	4b26      	ldr	r3, [pc, #152]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096f2:	4a22      	ldr	r2, [pc, #136]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096f4:	430b      	orrs	r3, r1
 80096f6:	6553      	str	r3, [r2, #84]	; 0x54
 80096f8:	e003      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800970e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009710:	2300      	movs	r3, #0
 8009712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009714:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009718:	460b      	mov	r3, r1
 800971a:	4313      	orrs	r3, r2
 800971c:	d034      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800971e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800972c:	d007      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800972e:	e011      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009730:	4b12      	ldr	r3, [pc, #72]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009734:	4a11      	ldr	r2, [pc, #68]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800973a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800973c:	e00e      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800973e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009742:	3308      	adds	r3, #8
 8009744:	2102      	movs	r1, #2
 8009746:	4618      	mov	r0, r3
 8009748:	f001 faae 	bl	800aca8 <RCCEx_PLL2_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009752:	e003      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800975a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800975c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10d      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009764:	4b05      	ldr	r3, [pc, #20]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800976c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009772:	4a02      	ldr	r2, [pc, #8]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009774:	430b      	orrs	r3, r1
 8009776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009778:	e006      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800977a:	bf00      	nop
 800977c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009784:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009794:	663b      	str	r3, [r7, #96]	; 0x60
 8009796:	2300      	movs	r3, #0
 8009798:	667b      	str	r3, [r7, #100]	; 0x64
 800979a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800979e:	460b      	mov	r3, r1
 80097a0:	4313      	orrs	r3, r2
 80097a2:	d00c      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a8:	3328      	adds	r3, #40	; 0x28
 80097aa:	2102      	movs	r1, #2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 fb2d 	bl	800ae0c <RCCEx_PLL3_Config>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80097be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80097ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80097cc:	2300      	movs	r3, #0
 80097ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80097d4:	460b      	mov	r3, r1
 80097d6:	4313      	orrs	r3, r2
 80097d8:	d036      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80097da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097e4:	d018      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80097e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ea:	d811      	bhi.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80097ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097f0:	d014      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80097f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097f6:	d80b      	bhi.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d011      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80097fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009800:	d106      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009802:	4bb7      	ldr	r3, [pc, #732]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	4ab6      	ldr	r2, [pc, #728]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800980e:	e008      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009816:	e004      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009818:	bf00      	nop
 800981a:	e002      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800981c:	bf00      	nop
 800981e:	e000      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009822:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10a      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800982a:	4bad      	ldr	r3, [pc, #692]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800982c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009838:	4aa9      	ldr	r2, [pc, #676]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800983a:	430b      	orrs	r3, r1
 800983c:	6553      	str	r3, [r2, #84]	; 0x54
 800983e:	e003      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009840:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009844:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009854:	653b      	str	r3, [r7, #80]	; 0x50
 8009856:	2300      	movs	r3, #0
 8009858:	657b      	str	r3, [r7, #84]	; 0x54
 800985a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800985e:	460b      	mov	r3, r1
 8009860:	4313      	orrs	r3, r2
 8009862:	d009      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009864:	4b9e      	ldr	r3, [pc, #632]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009868:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800986c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009872:	4a9b      	ldr	r2, [pc, #620]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009874:	430b      	orrs	r3, r1
 8009876:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009884:	64bb      	str	r3, [r7, #72]	; 0x48
 8009886:	2300      	movs	r3, #0
 8009888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800988a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800988e:	460b      	mov	r3, r1
 8009890:	4313      	orrs	r3, r2
 8009892:	d009      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009894:	4b92      	ldr	r3, [pc, #584]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009898:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800989c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a2:	4a8f      	ldr	r2, [pc, #572]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098a4:	430b      	orrs	r3, r1
 80098a6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80098b4:	643b      	str	r3, [r7, #64]	; 0x40
 80098b6:	2300      	movs	r3, #0
 80098b8:	647b      	str	r3, [r7, #68]	; 0x44
 80098ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80098be:	460b      	mov	r3, r1
 80098c0:	4313      	orrs	r3, r2
 80098c2:	d00e      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098c4:	4b86      	ldr	r3, [pc, #536]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	4a85      	ldr	r2, [pc, #532]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098ce:	6113      	str	r3, [r2, #16]
 80098d0:	4b83      	ldr	r3, [pc, #524]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098d2:	6919      	ldr	r1, [r3, #16]
 80098d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098dc:	4a80      	ldr	r2, [pc, #512]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098de:	430b      	orrs	r3, r1
 80098e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80098ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80098f0:	2300      	movs	r3, #0
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80098f8:	460b      	mov	r3, r1
 80098fa:	4313      	orrs	r3, r2
 80098fc:	d009      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098fe:	4b78      	ldr	r3, [pc, #480]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009902:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800990a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990c:	4a74      	ldr	r2, [pc, #464]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800990e:	430b      	orrs	r3, r1
 8009910:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800991e:	633b      	str	r3, [r7, #48]	; 0x30
 8009920:	2300      	movs	r3, #0
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
 8009924:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009928:	460b      	mov	r3, r1
 800992a:	4313      	orrs	r3, r2
 800992c:	d00a      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800992e:	4b6c      	ldr	r3, [pc, #432]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009932:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993e:	4a68      	ldr	r2, [pc, #416]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009940:	430b      	orrs	r3, r1
 8009942:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	2100      	movs	r1, #0
 800994e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009956:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800995a:	460b      	mov	r3, r1
 800995c:	4313      	orrs	r3, r2
 800995e:	d011      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009964:	3308      	adds	r3, #8
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f001 f99d 	bl	800aca8 <RCCEx_PLL2_Config>
 800996e:	4603      	mov	r3, r0
 8009970:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009974:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009980:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	2100      	movs	r1, #0
 800998e:	6239      	str	r1, [r7, #32]
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
 8009996:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800999a:	460b      	mov	r3, r1
 800999c:	4313      	orrs	r3, r2
 800999e:	d011      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a4:	3308      	adds	r3, #8
 80099a6:	2101      	movs	r1, #1
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 f97d 	bl	800aca8 <RCCEx_PLL2_Config>
 80099ae:	4603      	mov	r3, r0
 80099b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80099b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80099c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	2100      	movs	r1, #0
 80099ce:	61b9      	str	r1, [r7, #24]
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	61fb      	str	r3, [r7, #28]
 80099d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80099da:	460b      	mov	r3, r1
 80099dc:	4313      	orrs	r3, r2
 80099de:	d011      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e4:	3308      	adds	r3, #8
 80099e6:	2102      	movs	r1, #2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 f95d 	bl	800aca8 <RCCEx_PLL2_Config>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80099f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	6139      	str	r1, [r7, #16]
 8009a10:	f003 0308 	and.w	r3, r3, #8
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	d011      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a24:	3328      	adds	r3, #40	; 0x28
 8009a26:	2100      	movs	r1, #0
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 f9ef 	bl	800ae0c <RCCEx_PLL3_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009a34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	d011      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a64:	3328      	adds	r3, #40	; 0x28
 8009a66:	2101      	movs	r1, #1
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 f9cf 	bl	800ae0c <RCCEx_PLL3_Config>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009a74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	6039      	str	r1, [r7, #0]
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	607b      	str	r3, [r7, #4]
 8009a96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	d011      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa4:	3328      	adds	r3, #40	; 0x28
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 f9af 	bl	800ae0c <RCCEx_PLL3_Config>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d003      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009abc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ac0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009ac4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	e000      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ade:	bf00      	nop
 8009ae0:	58024400 	.word	0x58024400

08009ae4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b090      	sub	sp, #64	; 0x40
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009af6:	430b      	orrs	r3, r1
 8009af8:	f040 8094 	bne.w	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009afc:	4b9b      	ldr	r3, [pc, #620]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	f200 8087 	bhi.w	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009b0e:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b14:	08009b29 	.word	0x08009b29
 8009b18:	08009b51 	.word	0x08009b51
 8009b1c:	08009b79 	.word	0x08009b79
 8009b20:	08009c15 	.word	0x08009c15
 8009b24:	08009ba1 	.word	0x08009ba1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b28:	4b90      	ldr	r3, [pc, #576]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b34:	d108      	bne.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 ff62 	bl	800aa04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b44:	f000 bc93 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b4c:	f000 bc8f 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b50:	4b86      	ldr	r3, [pc, #536]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b5c:	d108      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b5e:	f107 0318 	add.w	r3, r7, #24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 fca6 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b6c:	f000 bc7f 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b74:	f000 bc7b 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b78:	4b7c      	ldr	r3, [pc, #496]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b84:	d108      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b86:	f107 030c 	add.w	r3, r7, #12
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 fde6 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b94:	f000 bc6b 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b9c:	f000 bc67 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ba0:	4b72      	ldr	r3, [pc, #456]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009baa:	4b70      	ldr	r3, [pc, #448]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0304 	and.w	r3, r3, #4
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d10c      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d109      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bbc:	4b6b      	ldr	r3, [pc, #428]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	08db      	lsrs	r3, r3, #3
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	4a6a      	ldr	r2, [pc, #424]	; (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bce:	e01f      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bd0:	4b66      	ldr	r3, [pc, #408]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bdc:	d106      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009be4:	d102      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009be6:	4b63      	ldr	r3, [pc, #396]	; (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bea:	e011      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bec:	4b5f      	ldr	r3, [pc, #380]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bf8:	d106      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c00:	d102      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c02:	4b5d      	ldr	r3, [pc, #372]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c06:	e003      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009c0c:	f000 bc2f 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009c10:	f000 bc2d 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c14:	4b59      	ldr	r3, [pc, #356]	; (8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c18:	f000 bc29 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c20:	f000 bc25 	b.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c28:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009c2c:	430b      	orrs	r3, r1
 8009c2e:	f040 80a7 	bne.w	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009c32:	4b4e      	ldr	r3, [pc, #312]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c36:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009c3a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c42:	d054      	beq.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c4a:	f200 808b 	bhi.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c54:	f000 8083 	beq.w	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c5e:	f200 8081 	bhi.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c68:	d02f      	beq.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c70:	d878      	bhi.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d004      	beq.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c7e:	d012      	beq.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009c80:	e070      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c82:	4b3a      	ldr	r3, [pc, #232]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c8e:	d107      	bne.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 feb5 	bl	800aa04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c9e:	e3e6      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca4:	e3e3      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ca6:	4b31      	ldr	r3, [pc, #196]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cb2:	d107      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cb4:	f107 0318 	add.w	r3, r7, #24
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fbfb 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc2:	e3d4      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cc8:	e3d1      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cca:	4b28      	ldr	r3, [pc, #160]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cd6:	d107      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cd8:	f107 030c 	add.w	r3, r7, #12
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fd3d 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ce6:	e3c2      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cec:	e3bf      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cee:	4b1f      	ldr	r3, [pc, #124]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cf6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cf8:	4b1c      	ldr	r3, [pc, #112]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	d10c      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d109      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d0a:	4b18      	ldr	r3, [pc, #96]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	08db      	lsrs	r3, r3, #3
 8009d10:	f003 0303 	and.w	r3, r3, #3
 8009d14:	4a16      	ldr	r2, [pc, #88]	; (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009d16:	fa22 f303 	lsr.w	r3, r2, r3
 8009d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d1c:	e01e      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d1e:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d2a:	d106      	bne.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d32:	d102      	bne.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d34:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d38:	e010      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d3a:	4b0c      	ldr	r3, [pc, #48]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d46:	d106      	bne.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d4e:	d102      	bne.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d50:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d54:	e002      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009d5a:	e388      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d5c:	e387      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d5e:	4b07      	ldr	r3, [pc, #28]	; (8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d62:	e384      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d68:	e381      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d6a:	bf00      	nop
 8009d6c:	58024400 	.word	0x58024400
 8009d70:	03d09000 	.word	0x03d09000
 8009d74:	003d0900 	.word	0x003d0900
 8009d78:	017d7840 	.word	0x017d7840
 8009d7c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d84:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	f040 809c 	bne.w	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009d8e:	4b9e      	ldr	r3, [pc, #632]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d92:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009d96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d9e:	d054      	beq.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009da6:	f200 808b 	bhi.w	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009db0:	f000 8083 	beq.w	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009dba:	f200 8081 	bhi.w	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dc4:	d02f      	beq.n	8009e26 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dcc:	d878      	bhi.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d004      	beq.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009dda:	d012      	beq.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009ddc:	e070      	b.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009dde:	4b8a      	ldr	r3, [pc, #552]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dea:	d107      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 fe07 	bl	800aa04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dfa:	e338      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e00:	e335      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e02:	4b81      	ldr	r3, [pc, #516]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e0e:	d107      	bne.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e10:	f107 0318 	add.w	r3, r7, #24
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fb4d 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e1e:	e326      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e24:	e323      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e26:	4b78      	ldr	r3, [pc, #480]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e32:	d107      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e34:	f107 030c 	add.w	r3, r7, #12
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fc8f 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e42:	e314      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e48:	e311      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e4a:	4b6f      	ldr	r3, [pc, #444]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e54:	4b6c      	ldr	r3, [pc, #432]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d10c      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d109      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e66:	4b68      	ldr	r3, [pc, #416]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	08db      	lsrs	r3, r3, #3
 8009e6c:	f003 0303 	and.w	r3, r3, #3
 8009e70:	4a66      	ldr	r2, [pc, #408]	; (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009e72:	fa22 f303 	lsr.w	r3, r2, r3
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e78:	e01e      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e7a:	4b63      	ldr	r3, [pc, #396]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e86:	d106      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e8e:	d102      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e90:	4b5f      	ldr	r3, [pc, #380]	; (800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e94:	e010      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e96:	4b5c      	ldr	r3, [pc, #368]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ea2:	d106      	bne.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eaa:	d102      	bne.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009eac:	4b59      	ldr	r3, [pc, #356]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eb0:	e002      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009eb6:	e2da      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009eb8:	e2d9      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009eba:	4b57      	ldr	r3, [pc, #348]	; (800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ebe:	e2d6      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ec4:	e2d3      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eca:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009ece:	430b      	orrs	r3, r1
 8009ed0:	f040 80a7 	bne.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009ed4:	4b4c      	ldr	r3, [pc, #304]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009edc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ee4:	d055      	beq.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eec:	f200 8096 	bhi.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ef6:	f000 8084 	beq.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f00:	f200 808c 	bhi.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f0a:	d030      	beq.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f12:	f200 8083 	bhi.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d004      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f22:	d012      	beq.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009f24:	e07a      	b.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f26:	4b38      	ldr	r3, [pc, #224]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f32:	d107      	bne.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 fd63 	bl	800aa04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f42:	e294      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f48:	e291      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f4a:	4b2f      	ldr	r3, [pc, #188]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f56:	d107      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f58:	f107 0318 	add.w	r3, r7, #24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 faa9 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f66:	e282      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f6c:	e27f      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f6e:	4b26      	ldr	r3, [pc, #152]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f7a:	d107      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f7c:	f107 030c 	add.w	r3, r7, #12
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fbeb 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f8a:	e270      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f90:	e26d      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f92:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d10c      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d109      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fae:	4b16      	ldr	r3, [pc, #88]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	08db      	lsrs	r3, r3, #3
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	4a14      	ldr	r2, [pc, #80]	; (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009fba:	fa22 f303 	lsr.w	r3, r2, r3
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc0:	e01e      	b.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fc2:	4b11      	ldr	r3, [pc, #68]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fce:	d106      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fd6:	d102      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fd8:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fdc:	e010      	b.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fde:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fea:	d106      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff2:	d102      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ff8:	e002      	b.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009ffe:	e236      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a000:	e235      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a002:	4b05      	ldr	r3, [pc, #20]	; (800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a006:	e232      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a008:	58024400 	.word	0x58024400
 800a00c:	03d09000 	.word	0x03d09000
 800a010:	003d0900 	.word	0x003d0900
 800a014:	017d7840 	.word	0x017d7840
 800a018:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a01c:	2300      	movs	r3, #0
 800a01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a020:	e225      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a022:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a026:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a02a:	430b      	orrs	r3, r1
 800a02c:	f040 8085 	bne.w	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a030:	4b9c      	ldr	r3, [pc, #624]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a034:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a038:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a040:	d06b      	beq.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a048:	d874      	bhi.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a050:	d056      	beq.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a058:	d86c      	bhi.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a060:	d03b      	beq.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a064:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a068:	d864      	bhi.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a070:	d021      	beq.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a078:	d85c      	bhi.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d004      	beq.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a086:	d004      	beq.n	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a088:	e054      	b.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a08a:	f7fe fb5f 	bl	800874c <HAL_RCC_GetPCLK1Freq>
 800a08e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a090:	e1ed      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a092:	4b84      	ldr	r3, [pc, #528]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a09a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a09e:	d107      	bne.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a0:	f107 0318 	add.w	r3, r7, #24
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 fa05 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ae:	e1de      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0b4:	e1db      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0b6:	4b7b      	ldr	r3, [pc, #492]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0c2:	d107      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c4:	f107 030c 	add.w	r3, r7, #12
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 fb47 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d2:	e1cc      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0d8:	e1c9      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0da:	4b72      	ldr	r3, [pc, #456]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d109      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0e6:	4b6f      	ldr	r3, [pc, #444]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	08db      	lsrs	r3, r3, #3
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	4a6d      	ldr	r2, [pc, #436]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0f8:	e1b9      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0fe:	e1b6      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a100:	4b68      	ldr	r3, [pc, #416]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a10c:	d102      	bne.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a10e:	4b67      	ldr	r3, [pc, #412]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a112:	e1ac      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a118:	e1a9      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a11a:	4b62      	ldr	r3, [pc, #392]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a126:	d102      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a128:	4b61      	ldr	r3, [pc, #388]	; (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a12c:	e19f      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a132:	e19c      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a138:	e199      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a142:	430b      	orrs	r3, r1
 800a144:	d173      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a146:	4b57      	ldr	r3, [pc, #348]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a14a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a14e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a156:	d02f      	beq.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a15e:	d863      	bhi.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	2b00      	cmp	r3, #0
 800a164:	d004      	beq.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a16c:	d012      	beq.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a16e:	e05b      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a170:	4b4c      	ldr	r3, [pc, #304]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a17c:	d107      	bne.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17e:	f107 0318 	add.w	r3, r7, #24
 800a182:	4618      	mov	r0, r3
 800a184:	f000 f996 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a18c:	e16f      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a192:	e16c      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a194:	4b43      	ldr	r3, [pc, #268]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a19c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1a0:	d107      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fad8 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1b0:	e15d      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1b6:	e15a      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1b8:	4b3a      	ldr	r3, [pc, #232]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1c2:	4b38      	ldr	r3, [pc, #224]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d10c      	bne.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d109      	bne.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1d4:	4b33      	ldr	r3, [pc, #204]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	08db      	lsrs	r3, r3, #3
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	4a32      	ldr	r2, [pc, #200]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e6:	e01e      	b.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1e8:	4b2e      	ldr	r3, [pc, #184]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1f4:	d106      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1fc:	d102      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1fe:	4b2b      	ldr	r3, [pc, #172]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a200:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a202:	e010      	b.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a204:	4b27      	ldr	r3, [pc, #156]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a20c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a210:	d106      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a218:	d102      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a21a:	4b25      	ldr	r3, [pc, #148]	; (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a21e:	e002      	b.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a224:	e123      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a226:	e122      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a22c:	e11f      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a232:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a236:	430b      	orrs	r3, r1
 800a238:	d13c      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a23a:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a23e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a242:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	2b00      	cmp	r3, #0
 800a248:	d004      	beq.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a250:	d012      	beq.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a252:	e023      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a254:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a25c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a260:	d107      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a266:	4618      	mov	r0, r3
 800a268:	f000 fbcc 	bl	800aa04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a270:	e0fd      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a276:	e0fa      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a284:	d107      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a286:	f107 0318 	add.w	r3, r7, #24
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 f912 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a294:	e0eb      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a29a:	e0e8      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a0:	e0e5      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a2a2:	bf00      	nop
 800a2a4:	58024400 	.word	0x58024400
 800a2a8:	03d09000 	.word	0x03d09000
 800a2ac:	003d0900 	.word	0x003d0900
 800a2b0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a2b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2b8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	f040 8085 	bne.w	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a2c2:	4b6d      	ldr	r3, [pc, #436]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a2ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2d2:	d06b      	beq.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2da:	d874      	bhi.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2e2:	d056      	beq.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ea:	d86c      	bhi.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2f2:	d03b      	beq.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2fa:	d864      	bhi.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a302:	d021      	beq.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a30a:	d85c      	bhi.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d004      	beq.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a318:	d004      	beq.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a31a:	e054      	b.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a31c:	f000 f8b4 	bl	800a488 <HAL_RCCEx_GetD3PCLK1Freq>
 800a320:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a322:	e0a4      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a324:	4b54      	ldr	r3, [pc, #336]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a32c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a330:	d107      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a332:	f107 0318 	add.w	r3, r7, #24
 800a336:	4618      	mov	r0, r3
 800a338:	f000 f8bc 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a340:	e095      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a346:	e092      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a348:	4b4b      	ldr	r3, [pc, #300]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a354:	d107      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a356:	f107 030c 	add.w	r3, r7, #12
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 f9fe 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a364:	e083      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a36a:	e080      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a36c:	4b42      	ldr	r3, [pc, #264]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b04      	cmp	r3, #4
 800a376:	d109      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a378:	4b3f      	ldr	r3, [pc, #252]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	08db      	lsrs	r3, r3, #3
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	4a3e      	ldr	r2, [pc, #248]	; (800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a384:	fa22 f303 	lsr.w	r3, r2, r3
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38a:	e070      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a390:	e06d      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a392:	4b39      	ldr	r3, [pc, #228]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39e:	d102      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a3a0:	4b37      	ldr	r3, [pc, #220]	; (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3a4:	e063      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3aa:	e060      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3ac:	4b32      	ldr	r3, [pc, #200]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3b8:	d102      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a3ba:	4b32      	ldr	r3, [pc, #200]	; (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3be:	e056      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c4:	e053      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ca:	e050      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a3cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	d148      	bne.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a3d8:	4b27      	ldr	r3, [pc, #156]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3e8:	d02a      	beq.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f0:	d838      	bhi.n	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3fe:	d00d      	beq.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a400:	e030      	b.n	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a402:	4b1d      	ldr	r3, [pc, #116]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a40a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a40e:	d102      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a410:	4b1c      	ldr	r3, [pc, #112]	; (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a414:	e02b      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a41a:	e028      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a41c:	4b16      	ldr	r3, [pc, #88]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a428:	d107      	bne.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 fae8 	bl	800aa04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a438:	e019      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a43e:	e016      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a440:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a44c:	d107      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a44e:	f107 0318 	add.w	r3, r7, #24
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f82e 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a45c:	e007      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a462:	e004      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a468:	e001      	b.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a470:	4618      	mov	r0, r3
 800a472:	3740      	adds	r7, #64	; 0x40
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	58024400 	.word	0x58024400
 800a47c:	03d09000 	.word	0x03d09000
 800a480:	003d0900 	.word	0x003d0900
 800a484:	017d7840 	.word	0x017d7840

0800a488 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a48c:	f7fe f92e 	bl	80086ec <HAL_RCC_GetHCLKFreq>
 800a490:	4602      	mov	r2, r0
 800a492:	4b06      	ldr	r3, [pc, #24]	; (800a4ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	091b      	lsrs	r3, r3, #4
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	4904      	ldr	r1, [pc, #16]	; (800a4b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a49e:	5ccb      	ldrb	r3, [r1, r3]
 800a4a0:	f003 031f 	and.w	r3, r3, #31
 800a4a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	58024400 	.word	0x58024400
 800a4b0:	0800dc44 	.word	0x0800dc44

0800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b089      	sub	sp, #36	; 0x24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4bc:	4ba1      	ldr	r3, [pc, #644]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a4c6:	4b9f      	ldr	r3, [pc, #636]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ca:	0b1b      	lsrs	r3, r3, #12
 800a4cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a4d2:	4b9c      	ldr	r3, [pc, #624]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d6:	091b      	lsrs	r3, r3, #4
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a4de:	4b99      	ldr	r3, [pc, #612]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	08db      	lsrs	r3, r3, #3
 800a4e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	fb02 f303 	mul.w	r3, r2, r3
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 8111 	beq.w	800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	2b02      	cmp	r3, #2
 800a506:	f000 8083 	beq.w	800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	f200 80a1 	bhi.w	800a654 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d056      	beq.n	800a5cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a51e:	e099      	b.n	800a654 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a520:	4b88      	ldr	r3, [pc, #544]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0320 	and.w	r3, r3, #32
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d02d      	beq.n	800a588 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a52c:	4b85      	ldr	r3, [pc, #532]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	08db      	lsrs	r3, r3, #3
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	4a84      	ldr	r2, [pc, #528]	; (800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a538:	fa22 f303 	lsr.w	r3, r2, r3
 800a53c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	ee07 3a90 	vmov	s15, r3
 800a54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a556:	4b7b      	ldr	r3, [pc, #492]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a566:	ed97 6a03 	vldr	s12, [r7, #12]
 800a56a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a582:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a586:	e087      	b.n	800a698 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a592:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a750 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59a:	4b6a      	ldr	r3, [pc, #424]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ca:	e065      	b.n	800a698 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5de:	4b59      	ldr	r3, [pc, #356]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a60e:	e043      	b.n	800a698 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a622:	4b48      	ldr	r3, [pc, #288]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a632:	ed97 6a03 	vldr	s12, [r7, #12]
 800a636:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a652:	e021      	b.n	800a698 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a666:	4b37      	ldr	r3, [pc, #220]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66e:	ee07 3a90 	vmov	s15, r3
 800a672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a676:	ed97 6a03 	vldr	s12, [r7, #12]
 800a67a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a696:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a698:	4b2a      	ldr	r3, [pc, #168]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69c:	0a5b      	lsrs	r3, r3, #9
 800a69e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6be:	ee17 2a90 	vmov	r2, s15
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a6c6:	4b1f      	ldr	r3, [pc, #124]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ca:	0c1b      	lsrs	r3, r3, #16
 800a6cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6d0:	ee07 3a90 	vmov	s15, r3
 800a6d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ec:	ee17 2a90 	vmov	r2, s15
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a6f4:	4b13      	ldr	r3, [pc, #76]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f8:	0e1b      	lsrs	r3, r3, #24
 800a6fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a70a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a70e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71a:	ee17 2a90 	vmov	r2, s15
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a722:	e008      	b.n	800a736 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	609a      	str	r2, [r3, #8]
}
 800a736:	bf00      	nop
 800a738:	3724      	adds	r7, #36	; 0x24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	58024400 	.word	0x58024400
 800a748:	03d09000 	.word	0x03d09000
 800a74c:	46000000 	.word	0x46000000
 800a750:	4c742400 	.word	0x4c742400
 800a754:	4a742400 	.word	0x4a742400
 800a758:	4bbebc20 	.word	0x4bbebc20

0800a75c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b089      	sub	sp, #36	; 0x24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a764:	4ba1      	ldr	r3, [pc, #644]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a768:	f003 0303 	and.w	r3, r3, #3
 800a76c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a76e:	4b9f      	ldr	r3, [pc, #636]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a772:	0d1b      	lsrs	r3, r3, #20
 800a774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a778:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a77a:	4b9c      	ldr	r3, [pc, #624]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77e:	0a1b      	lsrs	r3, r3, #8
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a786:	4b99      	ldr	r3, [pc, #612]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a78a:	08db      	lsrs	r3, r3, #3
 800a78c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	fb02 f303 	mul.w	r3, r2, r3
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 8111 	beq.w	800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	f000 8083 	beq.w	800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	f200 80a1 	bhi.w	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d056      	beq.n	800a874 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a7c6:	e099      	b.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7c8:	4b88      	ldr	r3, [pc, #544]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d02d      	beq.n	800a830 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7d4:	4b85      	ldr	r3, [pc, #532]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	08db      	lsrs	r3, r3, #3
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	4a84      	ldr	r2, [pc, #528]	; (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fe:	4b7b      	ldr	r3, [pc, #492]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a812:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a82e:	e087      	b.n	800a940 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a842:	4b6a      	ldr	r3, [pc, #424]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a852:	ed97 6a03 	vldr	s12, [r7, #12]
 800a856:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a872:	e065      	b.n	800a940 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a886:	4b59      	ldr	r3, [pc, #356]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a896:	ed97 6a03 	vldr	s12, [r7, #12]
 800a89a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8b6:	e043      	b.n	800a940 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aa00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ca:	4b48      	ldr	r3, [pc, #288]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8de:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8fa:	e021      	b.n	800a940 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a906:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a90a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a90e:	4b37      	ldr	r3, [pc, #220]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a91e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a922:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a92e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a93e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a940:	4b2a      	ldr	r3, [pc, #168]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a944:	0a5b      	lsrs	r3, r3, #9
 800a946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a94a:	ee07 3a90 	vmov	s15, r3
 800a94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a95a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a95e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a966:	ee17 2a90 	vmov	r2, s15
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a96e:	4b1f      	ldr	r3, [pc, #124]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a972:	0c1b      	lsrs	r3, r3, #16
 800a974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a978:	ee07 3a90 	vmov	s15, r3
 800a97c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a984:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a988:	edd7 6a07 	vldr	s13, [r7, #28]
 800a98c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a994:	ee17 2a90 	vmov	r2, s15
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a99c:	4b13      	ldr	r3, [pc, #76]	; (800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a0:	0e1b      	lsrs	r3, r3, #24
 800a9a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c2:	ee17 2a90 	vmov	r2, s15
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a9ca:	e008      	b.n	800a9de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	609a      	str	r2, [r3, #8]
}
 800a9de:	bf00      	nop
 800a9e0:	3724      	adds	r7, #36	; 0x24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	58024400 	.word	0x58024400
 800a9f0:	03d09000 	.word	0x03d09000
 800a9f4:	46000000 	.word	0x46000000
 800a9f8:	4c742400 	.word	0x4c742400
 800a9fc:	4a742400 	.word	0x4a742400
 800aa00:	4bbebc20 	.word	0x4bbebc20

0800aa04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b089      	sub	sp, #36	; 0x24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa0c:	4ba0      	ldr	r3, [pc, #640]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa10:	f003 0303 	and.w	r3, r3, #3
 800aa14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aa16:	4b9e      	ldr	r3, [pc, #632]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1a:	091b      	lsrs	r3, r3, #4
 800aa1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aa22:	4b9b      	ldr	r3, [pc, #620]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aa2c:	4b98      	ldr	r3, [pc, #608]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa30:	08db      	lsrs	r3, r3, #3
 800aa32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	fb02 f303 	mul.w	r3, r2, r3
 800aa3c:	ee07 3a90 	vmov	s15, r3
 800aa40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 8111 	beq.w	800ac72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	f000 8083 	beq.w	800ab5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	f200 80a1 	bhi.w	800aba2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d003      	beq.n	800aa6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d056      	beq.n	800ab1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aa6c:	e099      	b.n	800aba2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa6e:	4b88      	ldr	r3, [pc, #544]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0320 	and.w	r3, r3, #32
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d02d      	beq.n	800aad6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa7a:	4b85      	ldr	r3, [pc, #532]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	08db      	lsrs	r3, r3, #3
 800aa80:	f003 0303 	and.w	r3, r3, #3
 800aa84:	4a83      	ldr	r2, [pc, #524]	; (800ac94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aa86:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa4:	4b7a      	ldr	r3, [pc, #488]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaac:	ee07 3a90 	vmov	s15, r3
 800aab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ac98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aabc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aad4:	e087      	b.n	800abe6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	ee07 3a90 	vmov	s15, r3
 800aadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ac9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae8:	4b69      	ldr	r3, [pc, #420]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf0:	ee07 3a90 	vmov	s15, r3
 800aaf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ac98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab18:	e065      	b.n	800abe6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	ee07 3a90 	vmov	s15, r3
 800ab20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aca0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ab28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2c:	4b58      	ldr	r3, [pc, #352]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab34:	ee07 3a90 	vmov	s15, r3
 800ab38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab40:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ac98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab5c:	e043      	b.n	800abe6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	ee07 3a90 	vmov	s15, r3
 800ab64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab68:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ab6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab70:	4b47      	ldr	r3, [pc, #284]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab78:	ee07 3a90 	vmov	s15, r3
 800ab7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab80:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab84:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aba0:	e021      	b.n	800abe6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	ee07 3a90 	vmov	s15, r3
 800aba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ac9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800abb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abb4:	4b36      	ldr	r3, [pc, #216]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abbc:	ee07 3a90 	vmov	s15, r3
 800abc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc4:	ed97 6a03 	vldr	s12, [r7, #12]
 800abc8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800abcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abe4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800abe6:	4b2a      	ldr	r3, [pc, #168]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abea:	0a5b      	lsrs	r3, r3, #9
 800abec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf0:	ee07 3a90 	vmov	s15, r3
 800abf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac0c:	ee17 2a90 	vmov	r2, s15
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ac14:	4b1e      	ldr	r3, [pc, #120]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac18:	0c1b      	lsrs	r3, r3, #16
 800ac1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3a:	ee17 2a90 	vmov	r2, s15
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ac42:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac46:	0e1b      	lsrs	r3, r3, #24
 800ac48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac68:	ee17 2a90 	vmov	r2, s15
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ac70:	e008      	b.n	800ac84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	609a      	str	r2, [r3, #8]
}
 800ac84:	bf00      	nop
 800ac86:	3724      	adds	r7, #36	; 0x24
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	58024400 	.word	0x58024400
 800ac94:	03d09000 	.word	0x03d09000
 800ac98:	46000000 	.word	0x46000000
 800ac9c:	4c742400 	.word	0x4c742400
 800aca0:	4a742400 	.word	0x4a742400
 800aca4:	4bbebc20 	.word	0x4bbebc20

0800aca8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acb6:	4b53      	ldr	r3, [pc, #332]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800acb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d101      	bne.n	800acc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e099      	b.n	800adfa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800acc6:	4b4f      	ldr	r3, [pc, #316]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a4e      	ldr	r2, [pc, #312]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800accc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800acd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acd2:	f7f7 fa01 	bl	80020d8 <HAL_GetTick>
 800acd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acd8:	e008      	b.n	800acec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acda:	f7f7 f9fd 	bl	80020d8 <HAL_GetTick>
 800acde:	4602      	mov	r2, r0
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d901      	bls.n	800acec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e086      	b.n	800adfa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acec:	4b45      	ldr	r3, [pc, #276]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1f0      	bne.n	800acda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acf8:	4b42      	ldr	r3, [pc, #264]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800acfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	031b      	lsls	r3, r3, #12
 800ad06:	493f      	ldr	r1, [pc, #252]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	628b      	str	r3, [r1, #40]	; 0x28
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	025b      	lsls	r3, r3, #9
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	431a      	orrs	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	041b      	lsls	r3, r3, #16
 800ad2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	3b01      	subs	r3, #1
 800ad36:	061b      	lsls	r3, r3, #24
 800ad38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad3c:	4931      	ldr	r1, [pc, #196]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad42:	4b30      	ldr	r3, [pc, #192]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	695b      	ldr	r3, [r3, #20]
 800ad4e:	492d      	ldr	r1, [pc, #180]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad54:	4b2b      	ldr	r3, [pc, #172]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	f023 0220 	bic.w	r2, r3, #32
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	4928      	ldr	r1, [pc, #160]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad66:	4b27      	ldr	r3, [pc, #156]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	4a26      	ldr	r2, [pc, #152]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad6c:	f023 0310 	bic.w	r3, r3, #16
 800ad70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad72:	4b24      	ldr	r3, [pc, #144]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad76:	4b24      	ldr	r3, [pc, #144]	; (800ae08 <RCCEx_PLL2_Config+0x160>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	69d2      	ldr	r2, [r2, #28]
 800ad7e:	00d2      	lsls	r2, r2, #3
 800ad80:	4920      	ldr	r1, [pc, #128]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad86:	4b1f      	ldr	r3, [pc, #124]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8a:	4a1e      	ldr	r2, [pc, #120]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad8c:	f043 0310 	orr.w	r3, r3, #16
 800ad90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d106      	bne.n	800ada6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad98:	4b1a      	ldr	r3, [pc, #104]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9c:	4a19      	ldr	r2, [pc, #100]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800ad9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ada2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ada4:	e00f      	b.n	800adc6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d106      	bne.n	800adba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800adac:	4b15      	ldr	r3, [pc, #84]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	4a14      	ldr	r2, [pc, #80]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800adb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adb8:	e005      	b.n	800adc6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800adba:	4b12      	ldr	r3, [pc, #72]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800adbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbe:	4a11      	ldr	r2, [pc, #68]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800adc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800adc6:	4b0f      	ldr	r3, [pc, #60]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a0e      	ldr	r2, [pc, #56]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800adcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800add0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800add2:	f7f7 f981 	bl	80020d8 <HAL_GetTick>
 800add6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800add8:	e008      	b.n	800adec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800adda:	f7f7 f97d 	bl	80020d8 <HAL_GetTick>
 800adde:	4602      	mov	r2, r0
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d901      	bls.n	800adec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	e006      	b.n	800adfa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adec:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <RCCEx_PLL2_Config+0x15c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0f0      	beq.n	800adda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	58024400 	.word	0x58024400
 800ae08:	ffff0007 	.word	0xffff0007

0800ae0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae1a:	4b53      	ldr	r3, [pc, #332]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1e:	f003 0303 	and.w	r3, r3, #3
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d101      	bne.n	800ae2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e099      	b.n	800af5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ae2a:	4b4f      	ldr	r3, [pc, #316]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a4e      	ldr	r2, [pc, #312]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800ae30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae36:	f7f7 f94f 	bl	80020d8 <HAL_GetTick>
 800ae3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae3c:	e008      	b.n	800ae50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae3e:	f7f7 f94b 	bl	80020d8 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d901      	bls.n	800ae50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e086      	b.n	800af5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae50:	4b45      	ldr	r3, [pc, #276]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f0      	bne.n	800ae3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae5c:	4b42      	ldr	r3, [pc, #264]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800ae5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	051b      	lsls	r3, r3, #20
 800ae6a:	493f      	ldr	r1, [pc, #252]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	628b      	str	r3, [r1, #40]	; 0x28
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	025b      	lsls	r3, r3, #9
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	431a      	orrs	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	041b      	lsls	r3, r3, #16
 800ae8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	061b      	lsls	r3, r3, #24
 800ae9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aea0:	4931      	ldr	r1, [pc, #196]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aea6:	4b30      	ldr	r3, [pc, #192]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	492d      	ldr	r1, [pc, #180]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aeb8:	4b2b      	ldr	r3, [pc, #172]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	4928      	ldr	r1, [pc, #160]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aeca:	4b27      	ldr	r3, [pc, #156]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aece:	4a26      	ldr	r2, [pc, #152]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aed6:	4b24      	ldr	r3, [pc, #144]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeda:	4b24      	ldr	r3, [pc, #144]	; (800af6c <RCCEx_PLL3_Config+0x160>)
 800aedc:	4013      	ands	r3, r2
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	69d2      	ldr	r2, [r2, #28]
 800aee2:	00d2      	lsls	r2, r2, #3
 800aee4:	4920      	ldr	r1, [pc, #128]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aee6:	4313      	orrs	r3, r2
 800aee8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aeea:	4b1f      	ldr	r3, [pc, #124]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	4a1e      	ldr	r2, [pc, #120]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aef4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d106      	bne.n	800af0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aefc:	4b1a      	ldr	r3, [pc, #104]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	4a19      	ldr	r2, [pc, #100]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800af02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af08:	e00f      	b.n	800af2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d106      	bne.n	800af1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800af10:	4b15      	ldr	r3, [pc, #84]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800af12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af14:	4a14      	ldr	r2, [pc, #80]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800af16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af1c:	e005      	b.n	800af2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800af1e:	4b12      	ldr	r3, [pc, #72]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	4a11      	ldr	r2, [pc, #68]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800af24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800af2a:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a0e      	ldr	r2, [pc, #56]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800af30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af36:	f7f7 f8cf 	bl	80020d8 <HAL_GetTick>
 800af3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af3c:	e008      	b.n	800af50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af3e:	f7f7 f8cb 	bl	80020d8 <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d901      	bls.n	800af50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e006      	b.n	800af5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af50:	4b05      	ldr	r3, [pc, #20]	; (800af68 <RCCEx_PLL3_Config+0x15c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d0f0      	beq.n	800af3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	58024400 	.word	0x58024400
 800af6c:	ffff0007 	.word	0xffff0007

0800af70 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	e10f      	b.n	800b1a2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a87      	ldr	r2, [pc, #540]	; (800b1ac <HAL_SPI_Init+0x23c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d00f      	beq.n	800afb2 <HAL_SPI_Init+0x42>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a86      	ldr	r2, [pc, #536]	; (800b1b0 <HAL_SPI_Init+0x240>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00a      	beq.n	800afb2 <HAL_SPI_Init+0x42>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a84      	ldr	r2, [pc, #528]	; (800b1b4 <HAL_SPI_Init+0x244>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d005      	beq.n	800afb2 <HAL_SPI_Init+0x42>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	2b0f      	cmp	r3, #15
 800afac:	d901      	bls.n	800afb2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e0f7      	b.n	800b1a2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f900 	bl	800b1b8 <SPI_GetPacketSize>
 800afb8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a7b      	ldr	r2, [pc, #492]	; (800b1ac <HAL_SPI_Init+0x23c>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d00c      	beq.n	800afde <HAL_SPI_Init+0x6e>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a79      	ldr	r2, [pc, #484]	; (800b1b0 <HAL_SPI_Init+0x240>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d007      	beq.n	800afde <HAL_SPI_Init+0x6e>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a78      	ldr	r2, [pc, #480]	; (800b1b4 <HAL_SPI_Init+0x244>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d002      	beq.n	800afde <HAL_SPI_Init+0x6e>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b08      	cmp	r3, #8
 800afdc:	d811      	bhi.n	800b002 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afe2:	4a72      	ldr	r2, [pc, #456]	; (800b1ac <HAL_SPI_Init+0x23c>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d009      	beq.n	800affc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a70      	ldr	r2, [pc, #448]	; (800b1b0 <HAL_SPI_Init+0x240>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d004      	beq.n	800affc <HAL_SPI_Init+0x8c>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a6f      	ldr	r2, [pc, #444]	; (800b1b4 <HAL_SPI_Init+0x244>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d104      	bne.n	800b006 <HAL_SPI_Init+0x96>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b10      	cmp	r3, #16
 800b000:	d901      	bls.n	800b006 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e0cd      	b.n	800b1a2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d106      	bne.n	800b020 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7f6 fc30 	bl	8001880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2202      	movs	r2, #2
 800b024:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f022 0201 	bic.w	r2, r2, #1
 800b036:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b042:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b04c:	d119      	bne.n	800b082 <HAL_SPI_Init+0x112>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b056:	d103      	bne.n	800b060 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d008      	beq.n	800b072 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10c      	bne.n	800b082 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b06c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b070:	d107      	bne.n	800b082 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b080:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00f      	beq.n	800b0ae <HAL_SPI_Init+0x13e>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	2b06      	cmp	r3, #6
 800b094:	d90b      	bls.n	800b0ae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	e007      	b.n	800b0be <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	69da      	ldr	r2, [r3, #28]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d0:	ea42 0103 	orr.w	r1, r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68da      	ldr	r2, [r3, #12]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	431a      	orrs	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	431a      	orrs	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	431a      	orrs	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	431a      	orrs	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b112:	431a      	orrs	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	431a      	orrs	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b11e:	ea42 0103 	orr.w	r1, r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d113      	bne.n	800b15e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b148:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b15c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f022 0201 	bic.w	r2, r2, #1
 800b16c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40013000 	.word	0x40013000
 800b1b0:	40003800 	.word	0x40003800
 800b1b4:	40003c00 	.word	0x40003c00

0800b1b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c4:	095b      	lsrs	r3, r3, #5
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	3307      	adds	r3, #7
 800b1d6:	08db      	lsrs	r3, r3, #3
 800b1d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	fb02 f303 	mul.w	r3, r2, r3
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e042      	b.n	800b286 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7f6 fcb4 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2224      	movs	r2, #36	; 0x24
 800b21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0201 	bic.w	r2, r2, #1
 800b22e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fc9b 	bl	800bb6c <UART_SetConfig>
 800b236:	4603      	mov	r3, r0
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e022      	b.n	800b286 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f001 fafb 	bl	800c844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	685a      	ldr	r2, [r3, #4]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b25c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b26c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f042 0201 	orr.w	r2, r2, #1
 800b27c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f001 fb82 	bl	800c988 <UART_CheckIdleState>
 800b284:	4603      	mov	r3, r0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b290:	b480      	push	{r7}
 800b292:	b091      	sub	sp, #68	; 0x44
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	4613      	mov	r3, r2
 800b29c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a4:	2b20      	cmp	r3, #32
 800b2a6:	d178      	bne.n	800b39a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <HAL_UART_Transmit_IT+0x24>
 800b2ae:	88fb      	ldrh	r3, [r7, #6]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e071      	b.n	800b39c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	88fa      	ldrh	r2, [r7, #6]
 800b2c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	88fa      	ldrh	r2, [r7, #6]
 800b2ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2221      	movs	r2, #33	; 0x21
 800b2e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ec:	d12a      	bne.n	800b344 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f6:	d107      	bne.n	800b308 <HAL_UART_Transmit_IT+0x78>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d103      	bne.n	800b308 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4a29      	ldr	r2, [pc, #164]	; (800b3a8 <HAL_UART_Transmit_IT+0x118>)
 800b304:	679a      	str	r2, [r3, #120]	; 0x78
 800b306:	e002      	b.n	800b30e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4a28      	ldr	r2, [pc, #160]	; (800b3ac <HAL_UART_Transmit_IT+0x11c>)
 800b30c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3308      	adds	r3, #8
 800b314:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b324:	63bb      	str	r3, [r7, #56]	; 0x38
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32e:	637a      	str	r2, [r7, #52]	; 0x34
 800b330:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e5      	bne.n	800b30e <HAL_UART_Transmit_IT+0x7e>
 800b342:	e028      	b.n	800b396 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b34c:	d107      	bne.n	800b35e <HAL_UART_Transmit_IT+0xce>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d103      	bne.n	800b35e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4a15      	ldr	r2, [pc, #84]	; (800b3b0 <HAL_UART_Transmit_IT+0x120>)
 800b35a:	679a      	str	r2, [r3, #120]	; 0x78
 800b35c:	e002      	b.n	800b364 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	4a14      	ldr	r2, [pc, #80]	; (800b3b4 <HAL_UART_Transmit_IT+0x124>)
 800b362:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	613b      	str	r3, [r7, #16]
   return(result);
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b382:	623b      	str	r3, [r7, #32]
 800b384:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	69f9      	ldr	r1, [r7, #28]
 800b388:	6a3a      	ldr	r2, [r7, #32]
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e6      	bne.n	800b364 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	e000      	b.n	800b39c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b39a:	2302      	movs	r3, #2
  }
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3744      	adds	r7, #68	; 0x44
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	0800ceff 	.word	0x0800ceff
 800b3ac:	0800ce1f 	.word	0x0800ce1f
 800b3b0:	0800cd5d 	.word	0x0800cd5d
 800b3b4:	0800cca5 	.word	0x0800cca5

0800b3b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b0ba      	sub	sp, #232	; 0xe8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b3e2:	f640 030f 	movw	r3, #2063	; 0x80f
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b3ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d11b      	bne.n	800b42c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3f8:	f003 0320 	and.w	r3, r3, #32
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d015      	beq.n	800b42c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b404:	f003 0320 	and.w	r3, r3, #32
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d105      	bne.n	800b418 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b40c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d009      	beq.n	800b42c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 8377 	beq.w	800bb10 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	4798      	blx	r3
      }
      return;
 800b42a:	e371      	b.n	800bb10 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b42c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b430:	2b00      	cmp	r3, #0
 800b432:	f000 8123 	beq.w	800b67c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b436:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b43a:	4b8d      	ldr	r3, [pc, #564]	; (800b670 <HAL_UART_IRQHandler+0x2b8>)
 800b43c:	4013      	ands	r3, r2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b442:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b446:	4b8b      	ldr	r3, [pc, #556]	; (800b674 <HAL_UART_IRQHandler+0x2bc>)
 800b448:	4013      	ands	r3, r2
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 8116 	beq.w	800b67c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d011      	beq.n	800b480 <HAL_UART_IRQHandler+0xc8>
 800b45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00b      	beq.n	800b480 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2201      	movs	r2, #1
 800b46e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b476:	f043 0201 	orr.w	r2, r3, #1
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b484:	f003 0302 	and.w	r3, r3, #2
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d011      	beq.n	800b4b0 <HAL_UART_IRQHandler+0xf8>
 800b48c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00b      	beq.n	800b4b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2202      	movs	r2, #2
 800b49e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4a6:	f043 0204 	orr.w	r2, r3, #4
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b4:	f003 0304 	and.w	r3, r3, #4
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d011      	beq.n	800b4e0 <HAL_UART_IRQHandler+0x128>
 800b4bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00b      	beq.n	800b4e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2204      	movs	r2, #4
 800b4ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d6:	f043 0202 	orr.w	r2, r3, #2
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4e4:	f003 0308 	and.w	r3, r3, #8
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d017      	beq.n	800b51c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4f0:	f003 0320 	and.w	r3, r3, #32
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d105      	bne.n	800b504 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b4fc:	4b5c      	ldr	r3, [pc, #368]	; (800b670 <HAL_UART_IRQHandler+0x2b8>)
 800b4fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2208      	movs	r2, #8
 800b50a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b512:	f043 0208 	orr.w	r2, r3, #8
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b524:	2b00      	cmp	r3, #0
 800b526:	d012      	beq.n	800b54e <HAL_UART_IRQHandler+0x196>
 800b528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b52c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00c      	beq.n	800b54e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b53c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b544:	f043 0220 	orr.w	r2, r3, #32
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 82dd 	beq.w	800bb14 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	d013      	beq.n	800b58e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b56a:	f003 0320 	and.w	r3, r3, #32
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d105      	bne.n	800b57e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d007      	beq.n	800b58e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a2:	2b40      	cmp	r3, #64	; 0x40
 800b5a4:	d005      	beq.n	800b5b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b5a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d054      	beq.n	800b65c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fafa 	bl	800cbac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c2:	2b40      	cmp	r3, #64	; 0x40
 800b5c4:	d146      	bne.n	800b654 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5d4:	e853 3f00 	ldrex	r3, [r3]
 800b5d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b5dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b5f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b5f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b5fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b602:	e841 2300 	strex	r3, r2, [r1]
 800b606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b60a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1d9      	bne.n	800b5c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d017      	beq.n	800b64c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b622:	4a15      	ldr	r2, [pc, #84]	; (800b678 <HAL_UART_IRQHandler+0x2c0>)
 800b624:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7f9 fd53 	bl	80050d8 <HAL_DMA_Abort_IT>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d019      	beq.n	800b66c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b63e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b646:	4610      	mov	r0, r2
 800b648:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b64a:	e00f      	b.n	800b66c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fa77 	bl	800bb40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b652:	e00b      	b.n	800b66c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fa73 	bl	800bb40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b65a:	e007      	b.n	800b66c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fa6f 	bl	800bb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b66a:	e253      	b.n	800bb14 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b66c:	bf00      	nop
    return;
 800b66e:	e251      	b.n	800bb14 <HAL_UART_IRQHandler+0x75c>
 800b670:	10000001 	.word	0x10000001
 800b674:	04000120 	.word	0x04000120
 800b678:	0800cc79 	.word	0x0800cc79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b680:	2b01      	cmp	r3, #1
 800b682:	f040 81e7 	bne.w	800ba54 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b68a:	f003 0310 	and.w	r3, r3, #16
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 81e0 	beq.w	800ba54 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b698:	f003 0310 	and.w	r3, r3, #16
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 81d9 	beq.w	800ba54 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2210      	movs	r2, #16
 800b6a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b4:	2b40      	cmp	r3, #64	; 0x40
 800b6b6:	f040 8151 	bne.w	800b95c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a96      	ldr	r2, [pc, #600]	; (800b91c <HAL_UART_IRQHandler+0x564>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d068      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a93      	ldr	r2, [pc, #588]	; (800b920 <HAL_UART_IRQHandler+0x568>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d061      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a91      	ldr	r2, [pc, #580]	; (800b924 <HAL_UART_IRQHandler+0x56c>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d05a      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a8e      	ldr	r2, [pc, #568]	; (800b928 <HAL_UART_IRQHandler+0x570>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d053      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a8c      	ldr	r2, [pc, #560]	; (800b92c <HAL_UART_IRQHandler+0x574>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d04c      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a89      	ldr	r2, [pc, #548]	; (800b930 <HAL_UART_IRQHandler+0x578>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d045      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a87      	ldr	r2, [pc, #540]	; (800b934 <HAL_UART_IRQHandler+0x57c>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d03e      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a84      	ldr	r2, [pc, #528]	; (800b938 <HAL_UART_IRQHandler+0x580>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d037      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a82      	ldr	r2, [pc, #520]	; (800b93c <HAL_UART_IRQHandler+0x584>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d030      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a7f      	ldr	r2, [pc, #508]	; (800b940 <HAL_UART_IRQHandler+0x588>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d029      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a7d      	ldr	r2, [pc, #500]	; (800b944 <HAL_UART_IRQHandler+0x58c>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d022      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a7a      	ldr	r2, [pc, #488]	; (800b948 <HAL_UART_IRQHandler+0x590>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d01b      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a78      	ldr	r2, [pc, #480]	; (800b94c <HAL_UART_IRQHandler+0x594>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d014      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a75      	ldr	r2, [pc, #468]	; (800b950 <HAL_UART_IRQHandler+0x598>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d00d      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a73      	ldr	r2, [pc, #460]	; (800b954 <HAL_UART_IRQHandler+0x59c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d006      	beq.n	800b79a <HAL_UART_IRQHandler+0x3e2>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a70      	ldr	r2, [pc, #448]	; (800b958 <HAL_UART_IRQHandler+0x5a0>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d106      	bne.n	800b7a8 <HAL_UART_IRQHandler+0x3f0>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	e005      	b.n	800b7b4 <HAL_UART_IRQHandler+0x3fc>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 81ab 	beq.w	800bb18 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	f080 81a3 	bcs.w	800bb18 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7e2:	69db      	ldr	r3, [r3, #28]
 800b7e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7e8:	f000 8087 	beq.w	800b8fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7f8:	e853 3f00 	ldrex	r3, [r3]
 800b7fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b81a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b822:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b826:	e841 2300 	strex	r3, r2, [r1]
 800b82a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b82e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1da      	bne.n	800b7ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3308      	adds	r3, #8
 800b83c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b840:	e853 3f00 	ldrex	r3, [r3]
 800b844:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b848:	f023 0301 	bic.w	r3, r3, #1
 800b84c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3308      	adds	r3, #8
 800b856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b85a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b85e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b860:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b862:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b866:	e841 2300 	strex	r3, r2, [r1]
 800b86a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b86c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1e1      	bne.n	800b836 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	3308      	adds	r3, #8
 800b878:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b87c:	e853 3f00 	ldrex	r3, [r3]
 800b880:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3308      	adds	r3, #8
 800b892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b896:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b898:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b89c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e3      	bne.n	800b872 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2220      	movs	r2, #32
 800b8ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c8:	f023 0310 	bic.w	r3, r3, #16
 800b8cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8da:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1e4      	bne.n	800b8b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7f9 f8d1 	bl	8004a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2202      	movs	r2, #2
 800b8fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	b29b      	uxth	r3, r3
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f91d 	bl	800bb54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b91a:	e0fd      	b.n	800bb18 <HAL_UART_IRQHandler+0x760>
 800b91c:	40020010 	.word	0x40020010
 800b920:	40020028 	.word	0x40020028
 800b924:	40020040 	.word	0x40020040
 800b928:	40020058 	.word	0x40020058
 800b92c:	40020070 	.word	0x40020070
 800b930:	40020088 	.word	0x40020088
 800b934:	400200a0 	.word	0x400200a0
 800b938:	400200b8 	.word	0x400200b8
 800b93c:	40020410 	.word	0x40020410
 800b940:	40020428 	.word	0x40020428
 800b944:	40020440 	.word	0x40020440
 800b948:	40020458 	.word	0x40020458
 800b94c:	40020470 	.word	0x40020470
 800b950:	40020488 	.word	0x40020488
 800b954:	400204a0 	.word	0x400204a0
 800b958:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b968:	b29b      	uxth	r3, r3
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b976:	b29b      	uxth	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 80cf 	beq.w	800bb1c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b97e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 80ca 	beq.w	800bb1c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	e853 3f00 	ldrex	r3, [r3]
 800b994:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b99c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e4      	bne.n	800b988 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	e853 3f00 	ldrex	r3, [r3]
 800b9cc:	623b      	str	r3, [r7, #32]
   return(result);
 800b9ce:	6a3a      	ldr	r2, [r7, #32]
 800b9d0:	4b55      	ldr	r3, [pc, #340]	; (800bb28 <HAL_UART_IRQHandler+0x770>)
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3308      	adds	r3, #8
 800b9de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9e2:	633a      	str	r2, [r7, #48]	; 0x30
 800b9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e3      	bne.n	800b9be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	e853 3f00 	ldrex	r3, [r3]
 800ba16:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f023 0310 	bic.w	r3, r3, #16
 800ba1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba2c:	61fb      	str	r3, [r7, #28]
 800ba2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba30:	69b9      	ldr	r1, [r7, #24]
 800ba32:	69fa      	ldr	r2, [r7, #28]
 800ba34:	e841 2300 	strex	r3, r2, [r1]
 800ba38:	617b      	str	r3, [r7, #20]
   return(result);
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e4      	bne.n	800ba0a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2202      	movs	r2, #2
 800ba44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f881 	bl	800bb54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba52:	e063      	b.n	800bb1c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00e      	beq.n	800ba7e <HAL_UART_IRQHandler+0x6c6>
 800ba60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d008      	beq.n	800ba7e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f001 fae1 	bl	800d03e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba7c:	e051      	b.n	800bb22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d014      	beq.n	800bab4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d105      	bne.n	800baa2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d008      	beq.n	800bab4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d03a      	beq.n	800bb20 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	4798      	blx	r3
    }
    return;
 800bab2:	e035      	b.n	800bb20 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800babc:	2b00      	cmp	r3, #0
 800babe:	d009      	beq.n	800bad4 <HAL_UART_IRQHandler+0x71c>
 800bac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f001 fa8b 	bl	800cfe8 <UART_EndTransmit_IT>
    return;
 800bad2:	e026      	b.n	800bb22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d009      	beq.n	800baf4 <HAL_UART_IRQHandler+0x73c>
 800bae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bae4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f001 faba 	bl	800d066 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baf2:	e016      	b.n	800bb22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800baf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d010      	beq.n	800bb22 <HAL_UART_IRQHandler+0x76a>
 800bb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	da0c      	bge.n	800bb22 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f001 faa2 	bl	800d052 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb0e:	e008      	b.n	800bb22 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb10:	bf00      	nop
 800bb12:	e006      	b.n	800bb22 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb14:	bf00      	nop
 800bb16:	e004      	b.n	800bb22 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb18:	bf00      	nop
 800bb1a:	e002      	b.n	800bb22 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb1c:	bf00      	nop
 800bb1e:	e000      	b.n	800bb22 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb20:	bf00      	nop
  }
}
 800bb22:	37e8      	adds	r7, #232	; 0xe8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	effffffe 	.word	0xeffffffe

0800bb2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb70:	b092      	sub	sp, #72	; 0x48
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb76:	2300      	movs	r3, #0
 800bb78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	689a      	ldr	r2, [r3, #8]
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	431a      	orrs	r2, r3
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	4bbe      	ldr	r3, [pc, #760]	; (800be94 <UART_SetConfig+0x328>)
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	6812      	ldr	r2, [r2, #0]
 800bba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bba4:	430b      	orrs	r3, r1
 800bba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4ab3      	ldr	r2, [pc, #716]	; (800be98 <UART_SetConfig+0x32c>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d004      	beq.n	800bbd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689a      	ldr	r2, [r3, #8]
 800bbde:	4baf      	ldr	r3, [pc, #700]	; (800be9c <UART_SetConfig+0x330>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	6812      	ldr	r2, [r2, #0]
 800bbe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf2:	f023 010f 	bic.w	r1, r3, #15
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4aa6      	ldr	r2, [pc, #664]	; (800bea0 <UART_SetConfig+0x334>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d177      	bne.n	800bcfc <UART_SetConfig+0x190>
 800bc0c:	4ba5      	ldr	r3, [pc, #660]	; (800bea4 <UART_SetConfig+0x338>)
 800bc0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc14:	2b28      	cmp	r3, #40	; 0x28
 800bc16:	d86d      	bhi.n	800bcf4 <UART_SetConfig+0x188>
 800bc18:	a201      	add	r2, pc, #4	; (adr r2, 800bc20 <UART_SetConfig+0xb4>)
 800bc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1e:	bf00      	nop
 800bc20:	0800bcc5 	.word	0x0800bcc5
 800bc24:	0800bcf5 	.word	0x0800bcf5
 800bc28:	0800bcf5 	.word	0x0800bcf5
 800bc2c:	0800bcf5 	.word	0x0800bcf5
 800bc30:	0800bcf5 	.word	0x0800bcf5
 800bc34:	0800bcf5 	.word	0x0800bcf5
 800bc38:	0800bcf5 	.word	0x0800bcf5
 800bc3c:	0800bcf5 	.word	0x0800bcf5
 800bc40:	0800bccd 	.word	0x0800bccd
 800bc44:	0800bcf5 	.word	0x0800bcf5
 800bc48:	0800bcf5 	.word	0x0800bcf5
 800bc4c:	0800bcf5 	.word	0x0800bcf5
 800bc50:	0800bcf5 	.word	0x0800bcf5
 800bc54:	0800bcf5 	.word	0x0800bcf5
 800bc58:	0800bcf5 	.word	0x0800bcf5
 800bc5c:	0800bcf5 	.word	0x0800bcf5
 800bc60:	0800bcd5 	.word	0x0800bcd5
 800bc64:	0800bcf5 	.word	0x0800bcf5
 800bc68:	0800bcf5 	.word	0x0800bcf5
 800bc6c:	0800bcf5 	.word	0x0800bcf5
 800bc70:	0800bcf5 	.word	0x0800bcf5
 800bc74:	0800bcf5 	.word	0x0800bcf5
 800bc78:	0800bcf5 	.word	0x0800bcf5
 800bc7c:	0800bcf5 	.word	0x0800bcf5
 800bc80:	0800bcdd 	.word	0x0800bcdd
 800bc84:	0800bcf5 	.word	0x0800bcf5
 800bc88:	0800bcf5 	.word	0x0800bcf5
 800bc8c:	0800bcf5 	.word	0x0800bcf5
 800bc90:	0800bcf5 	.word	0x0800bcf5
 800bc94:	0800bcf5 	.word	0x0800bcf5
 800bc98:	0800bcf5 	.word	0x0800bcf5
 800bc9c:	0800bcf5 	.word	0x0800bcf5
 800bca0:	0800bce5 	.word	0x0800bce5
 800bca4:	0800bcf5 	.word	0x0800bcf5
 800bca8:	0800bcf5 	.word	0x0800bcf5
 800bcac:	0800bcf5 	.word	0x0800bcf5
 800bcb0:	0800bcf5 	.word	0x0800bcf5
 800bcb4:	0800bcf5 	.word	0x0800bcf5
 800bcb8:	0800bcf5 	.word	0x0800bcf5
 800bcbc:	0800bcf5 	.word	0x0800bcf5
 800bcc0:	0800bced 	.word	0x0800bced
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcca:	e326      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bccc:	2304      	movs	r3, #4
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcd2:	e322      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bcd4:	2308      	movs	r3, #8
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcda:	e31e      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bcdc:	2310      	movs	r3, #16
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bce2:	e31a      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bce4:	2320      	movs	r3, #32
 800bce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcea:	e316      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bcec:	2340      	movs	r3, #64	; 0x40
 800bcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcf2:	e312      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bcf4:	2380      	movs	r3, #128	; 0x80
 800bcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcfa:	e30e      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a69      	ldr	r2, [pc, #420]	; (800bea8 <UART_SetConfig+0x33c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d130      	bne.n	800bd68 <UART_SetConfig+0x1fc>
 800bd06:	4b67      	ldr	r3, [pc, #412]	; (800bea4 <UART_SetConfig+0x338>)
 800bd08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd0a:	f003 0307 	and.w	r3, r3, #7
 800bd0e:	2b05      	cmp	r3, #5
 800bd10:	d826      	bhi.n	800bd60 <UART_SetConfig+0x1f4>
 800bd12:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <UART_SetConfig+0x1ac>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800bd31 	.word	0x0800bd31
 800bd1c:	0800bd39 	.word	0x0800bd39
 800bd20:	0800bd41 	.word	0x0800bd41
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd51 	.word	0x0800bd51
 800bd2c:	0800bd59 	.word	0x0800bd59
 800bd30:	2300      	movs	r3, #0
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd36:	e2f0      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bd38:	2304      	movs	r3, #4
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3e:	e2ec      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bd40:	2308      	movs	r3, #8
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd46:	e2e8      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bd48:	2310      	movs	r3, #16
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd4e:	e2e4      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bd50:	2320      	movs	r3, #32
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd56:	e2e0      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bd58:	2340      	movs	r3, #64	; 0x40
 800bd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd5e:	e2dc      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bd60:	2380      	movs	r3, #128	; 0x80
 800bd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd66:	e2d8      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a4f      	ldr	r2, [pc, #316]	; (800beac <UART_SetConfig+0x340>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d130      	bne.n	800bdd4 <UART_SetConfig+0x268>
 800bd72:	4b4c      	ldr	r3, [pc, #304]	; (800bea4 <UART_SetConfig+0x338>)
 800bd74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	2b05      	cmp	r3, #5
 800bd7c:	d826      	bhi.n	800bdcc <UART_SetConfig+0x260>
 800bd7e:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <UART_SetConfig+0x218>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bd9d 	.word	0x0800bd9d
 800bd88:	0800bda5 	.word	0x0800bda5
 800bd8c:	0800bdad 	.word	0x0800bdad
 800bd90:	0800bdb5 	.word	0x0800bdb5
 800bd94:	0800bdbd 	.word	0x0800bdbd
 800bd98:	0800bdc5 	.word	0x0800bdc5
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bda2:	e2ba      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bda4:	2304      	movs	r3, #4
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdaa:	e2b6      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bdac:	2308      	movs	r3, #8
 800bdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdb2:	e2b2      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdba:	e2ae      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bdbc:	2320      	movs	r3, #32
 800bdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdc2:	e2aa      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bdc4:	2340      	movs	r3, #64	; 0x40
 800bdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdca:	e2a6      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bdcc:	2380      	movs	r3, #128	; 0x80
 800bdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdd2:	e2a2      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a35      	ldr	r2, [pc, #212]	; (800beb0 <UART_SetConfig+0x344>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d130      	bne.n	800be40 <UART_SetConfig+0x2d4>
 800bdde:	4b31      	ldr	r3, [pc, #196]	; (800bea4 <UART_SetConfig+0x338>)
 800bde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde2:	f003 0307 	and.w	r3, r3, #7
 800bde6:	2b05      	cmp	r3, #5
 800bde8:	d826      	bhi.n	800be38 <UART_SetConfig+0x2cc>
 800bdea:	a201      	add	r2, pc, #4	; (adr r2, 800bdf0 <UART_SetConfig+0x284>)
 800bdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf0:	0800be09 	.word	0x0800be09
 800bdf4:	0800be11 	.word	0x0800be11
 800bdf8:	0800be19 	.word	0x0800be19
 800bdfc:	0800be21 	.word	0x0800be21
 800be00:	0800be29 	.word	0x0800be29
 800be04:	0800be31 	.word	0x0800be31
 800be08:	2300      	movs	r3, #0
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0e:	e284      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be10:	2304      	movs	r3, #4
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be16:	e280      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be18:	2308      	movs	r3, #8
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1e:	e27c      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be20:	2310      	movs	r3, #16
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be26:	e278      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be28:	2320      	movs	r3, #32
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be2e:	e274      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be30:	2340      	movs	r3, #64	; 0x40
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be36:	e270      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be38:	2380      	movs	r3, #128	; 0x80
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be3e:	e26c      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a1b      	ldr	r2, [pc, #108]	; (800beb4 <UART_SetConfig+0x348>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d142      	bne.n	800bed0 <UART_SetConfig+0x364>
 800be4a:	4b16      	ldr	r3, [pc, #88]	; (800bea4 <UART_SetConfig+0x338>)
 800be4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4e:	f003 0307 	and.w	r3, r3, #7
 800be52:	2b05      	cmp	r3, #5
 800be54:	d838      	bhi.n	800bec8 <UART_SetConfig+0x35c>
 800be56:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <UART_SetConfig+0x2f0>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800be75 	.word	0x0800be75
 800be60:	0800be7d 	.word	0x0800be7d
 800be64:	0800be85 	.word	0x0800be85
 800be68:	0800be8d 	.word	0x0800be8d
 800be6c:	0800beb9 	.word	0x0800beb9
 800be70:	0800bec1 	.word	0x0800bec1
 800be74:	2300      	movs	r3, #0
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7a:	e24e      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be7c:	2304      	movs	r3, #4
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be82:	e24a      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be84:	2308      	movs	r3, #8
 800be86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8a:	e246      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be8c:	2310      	movs	r3, #16
 800be8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be92:	e242      	b.n	800c31a <UART_SetConfig+0x7ae>
 800be94:	cfff69f3 	.word	0xcfff69f3
 800be98:	58000c00 	.word	0x58000c00
 800be9c:	11fff4ff 	.word	0x11fff4ff
 800bea0:	40011000 	.word	0x40011000
 800bea4:	58024400 	.word	0x58024400
 800bea8:	40004400 	.word	0x40004400
 800beac:	40004800 	.word	0x40004800
 800beb0:	40004c00 	.word	0x40004c00
 800beb4:	40005000 	.word	0x40005000
 800beb8:	2320      	movs	r3, #32
 800beba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bebe:	e22c      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bec0:	2340      	movs	r3, #64	; 0x40
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec6:	e228      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bec8:	2380      	movs	r3, #128	; 0x80
 800beca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bece:	e224      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4ab1      	ldr	r2, [pc, #708]	; (800c19c <UART_SetConfig+0x630>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d176      	bne.n	800bfc8 <UART_SetConfig+0x45c>
 800beda:	4bb1      	ldr	r3, [pc, #708]	; (800c1a0 <UART_SetConfig+0x634>)
 800bedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bee2:	2b28      	cmp	r3, #40	; 0x28
 800bee4:	d86c      	bhi.n	800bfc0 <UART_SetConfig+0x454>
 800bee6:	a201      	add	r2, pc, #4	; (adr r2, 800beec <UART_SetConfig+0x380>)
 800bee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beec:	0800bf91 	.word	0x0800bf91
 800bef0:	0800bfc1 	.word	0x0800bfc1
 800bef4:	0800bfc1 	.word	0x0800bfc1
 800bef8:	0800bfc1 	.word	0x0800bfc1
 800befc:	0800bfc1 	.word	0x0800bfc1
 800bf00:	0800bfc1 	.word	0x0800bfc1
 800bf04:	0800bfc1 	.word	0x0800bfc1
 800bf08:	0800bfc1 	.word	0x0800bfc1
 800bf0c:	0800bf99 	.word	0x0800bf99
 800bf10:	0800bfc1 	.word	0x0800bfc1
 800bf14:	0800bfc1 	.word	0x0800bfc1
 800bf18:	0800bfc1 	.word	0x0800bfc1
 800bf1c:	0800bfc1 	.word	0x0800bfc1
 800bf20:	0800bfc1 	.word	0x0800bfc1
 800bf24:	0800bfc1 	.word	0x0800bfc1
 800bf28:	0800bfc1 	.word	0x0800bfc1
 800bf2c:	0800bfa1 	.word	0x0800bfa1
 800bf30:	0800bfc1 	.word	0x0800bfc1
 800bf34:	0800bfc1 	.word	0x0800bfc1
 800bf38:	0800bfc1 	.word	0x0800bfc1
 800bf3c:	0800bfc1 	.word	0x0800bfc1
 800bf40:	0800bfc1 	.word	0x0800bfc1
 800bf44:	0800bfc1 	.word	0x0800bfc1
 800bf48:	0800bfc1 	.word	0x0800bfc1
 800bf4c:	0800bfa9 	.word	0x0800bfa9
 800bf50:	0800bfc1 	.word	0x0800bfc1
 800bf54:	0800bfc1 	.word	0x0800bfc1
 800bf58:	0800bfc1 	.word	0x0800bfc1
 800bf5c:	0800bfc1 	.word	0x0800bfc1
 800bf60:	0800bfc1 	.word	0x0800bfc1
 800bf64:	0800bfc1 	.word	0x0800bfc1
 800bf68:	0800bfc1 	.word	0x0800bfc1
 800bf6c:	0800bfb1 	.word	0x0800bfb1
 800bf70:	0800bfc1 	.word	0x0800bfc1
 800bf74:	0800bfc1 	.word	0x0800bfc1
 800bf78:	0800bfc1 	.word	0x0800bfc1
 800bf7c:	0800bfc1 	.word	0x0800bfc1
 800bf80:	0800bfc1 	.word	0x0800bfc1
 800bf84:	0800bfc1 	.word	0x0800bfc1
 800bf88:	0800bfc1 	.word	0x0800bfc1
 800bf8c:	0800bfb9 	.word	0x0800bfb9
 800bf90:	2301      	movs	r3, #1
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e1c0      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bf98:	2304      	movs	r3, #4
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e1bc      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e1b8      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bfa8:	2310      	movs	r3, #16
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e1b4      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb6:	e1b0      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bfb8:	2340      	movs	r3, #64	; 0x40
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfbe:	e1ac      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bfc0:	2380      	movs	r3, #128	; 0x80
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc6:	e1a8      	b.n	800c31a <UART_SetConfig+0x7ae>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a75      	ldr	r2, [pc, #468]	; (800c1a4 <UART_SetConfig+0x638>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d130      	bne.n	800c034 <UART_SetConfig+0x4c8>
 800bfd2:	4b73      	ldr	r3, [pc, #460]	; (800c1a0 <UART_SetConfig+0x634>)
 800bfd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfd6:	f003 0307 	and.w	r3, r3, #7
 800bfda:	2b05      	cmp	r3, #5
 800bfdc:	d826      	bhi.n	800c02c <UART_SetConfig+0x4c0>
 800bfde:	a201      	add	r2, pc, #4	; (adr r2, 800bfe4 <UART_SetConfig+0x478>)
 800bfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe4:	0800bffd 	.word	0x0800bffd
 800bfe8:	0800c005 	.word	0x0800c005
 800bfec:	0800c00d 	.word	0x0800c00d
 800bff0:	0800c015 	.word	0x0800c015
 800bff4:	0800c01d 	.word	0x0800c01d
 800bff8:	0800c025 	.word	0x0800c025
 800bffc:	2300      	movs	r3, #0
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e18a      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c004:	2304      	movs	r3, #4
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00a:	e186      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c00c:	2308      	movs	r3, #8
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c012:	e182      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c014:	2310      	movs	r3, #16
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01a:	e17e      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c01c:	2320      	movs	r3, #32
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c022:	e17a      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c024:	2340      	movs	r3, #64	; 0x40
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c02a:	e176      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c02c:	2380      	movs	r3, #128	; 0x80
 800c02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c032:	e172      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a5b      	ldr	r2, [pc, #364]	; (800c1a8 <UART_SetConfig+0x63c>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d130      	bne.n	800c0a0 <UART_SetConfig+0x534>
 800c03e:	4b58      	ldr	r3, [pc, #352]	; (800c1a0 <UART_SetConfig+0x634>)
 800c040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	2b05      	cmp	r3, #5
 800c048:	d826      	bhi.n	800c098 <UART_SetConfig+0x52c>
 800c04a:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <UART_SetConfig+0x4e4>)
 800c04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c050:	0800c069 	.word	0x0800c069
 800c054:	0800c071 	.word	0x0800c071
 800c058:	0800c079 	.word	0x0800c079
 800c05c:	0800c081 	.word	0x0800c081
 800c060:	0800c089 	.word	0x0800c089
 800c064:	0800c091 	.word	0x0800c091
 800c068:	2300      	movs	r3, #0
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e154      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c070:	2304      	movs	r3, #4
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c076:	e150      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c078:	2308      	movs	r3, #8
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07e:	e14c      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c080:	2310      	movs	r3, #16
 800c082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c086:	e148      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c088:	2320      	movs	r3, #32
 800c08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c08e:	e144      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c090:	2340      	movs	r3, #64	; 0x40
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c096:	e140      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c098:	2380      	movs	r3, #128	; 0x80
 800c09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c09e:	e13c      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a41      	ldr	r2, [pc, #260]	; (800c1ac <UART_SetConfig+0x640>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	f040 8082 	bne.w	800c1b0 <UART_SetConfig+0x644>
 800c0ac:	4b3c      	ldr	r3, [pc, #240]	; (800c1a0 <UART_SetConfig+0x634>)
 800c0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0b4:	2b28      	cmp	r3, #40	; 0x28
 800c0b6:	d86d      	bhi.n	800c194 <UART_SetConfig+0x628>
 800c0b8:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <UART_SetConfig+0x554>)
 800c0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0be:	bf00      	nop
 800c0c0:	0800c165 	.word	0x0800c165
 800c0c4:	0800c195 	.word	0x0800c195
 800c0c8:	0800c195 	.word	0x0800c195
 800c0cc:	0800c195 	.word	0x0800c195
 800c0d0:	0800c195 	.word	0x0800c195
 800c0d4:	0800c195 	.word	0x0800c195
 800c0d8:	0800c195 	.word	0x0800c195
 800c0dc:	0800c195 	.word	0x0800c195
 800c0e0:	0800c16d 	.word	0x0800c16d
 800c0e4:	0800c195 	.word	0x0800c195
 800c0e8:	0800c195 	.word	0x0800c195
 800c0ec:	0800c195 	.word	0x0800c195
 800c0f0:	0800c195 	.word	0x0800c195
 800c0f4:	0800c195 	.word	0x0800c195
 800c0f8:	0800c195 	.word	0x0800c195
 800c0fc:	0800c195 	.word	0x0800c195
 800c100:	0800c175 	.word	0x0800c175
 800c104:	0800c195 	.word	0x0800c195
 800c108:	0800c195 	.word	0x0800c195
 800c10c:	0800c195 	.word	0x0800c195
 800c110:	0800c195 	.word	0x0800c195
 800c114:	0800c195 	.word	0x0800c195
 800c118:	0800c195 	.word	0x0800c195
 800c11c:	0800c195 	.word	0x0800c195
 800c120:	0800c17d 	.word	0x0800c17d
 800c124:	0800c195 	.word	0x0800c195
 800c128:	0800c195 	.word	0x0800c195
 800c12c:	0800c195 	.word	0x0800c195
 800c130:	0800c195 	.word	0x0800c195
 800c134:	0800c195 	.word	0x0800c195
 800c138:	0800c195 	.word	0x0800c195
 800c13c:	0800c195 	.word	0x0800c195
 800c140:	0800c185 	.word	0x0800c185
 800c144:	0800c195 	.word	0x0800c195
 800c148:	0800c195 	.word	0x0800c195
 800c14c:	0800c195 	.word	0x0800c195
 800c150:	0800c195 	.word	0x0800c195
 800c154:	0800c195 	.word	0x0800c195
 800c158:	0800c195 	.word	0x0800c195
 800c15c:	0800c195 	.word	0x0800c195
 800c160:	0800c18d 	.word	0x0800c18d
 800c164:	2301      	movs	r3, #1
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e0d6      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c16c:	2304      	movs	r3, #4
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c172:	e0d2      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c174:	2308      	movs	r3, #8
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17a:	e0ce      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c17c:	2310      	movs	r3, #16
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c182:	e0ca      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c184:	2320      	movs	r3, #32
 800c186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18a:	e0c6      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c18c:	2340      	movs	r3, #64	; 0x40
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c192:	e0c2      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c194:	2380      	movs	r3, #128	; 0x80
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19a:	e0be      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c19c:	40011400 	.word	0x40011400
 800c1a0:	58024400 	.word	0x58024400
 800c1a4:	40007800 	.word	0x40007800
 800c1a8:	40007c00 	.word	0x40007c00
 800c1ac:	40011800 	.word	0x40011800
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4aad      	ldr	r2, [pc, #692]	; (800c46c <UART_SetConfig+0x900>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d176      	bne.n	800c2a8 <UART_SetConfig+0x73c>
 800c1ba:	4bad      	ldr	r3, [pc, #692]	; (800c470 <UART_SetConfig+0x904>)
 800c1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1c2:	2b28      	cmp	r3, #40	; 0x28
 800c1c4:	d86c      	bhi.n	800c2a0 <UART_SetConfig+0x734>
 800c1c6:	a201      	add	r2, pc, #4	; (adr r2, 800c1cc <UART_SetConfig+0x660>)
 800c1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1cc:	0800c271 	.word	0x0800c271
 800c1d0:	0800c2a1 	.word	0x0800c2a1
 800c1d4:	0800c2a1 	.word	0x0800c2a1
 800c1d8:	0800c2a1 	.word	0x0800c2a1
 800c1dc:	0800c2a1 	.word	0x0800c2a1
 800c1e0:	0800c2a1 	.word	0x0800c2a1
 800c1e4:	0800c2a1 	.word	0x0800c2a1
 800c1e8:	0800c2a1 	.word	0x0800c2a1
 800c1ec:	0800c279 	.word	0x0800c279
 800c1f0:	0800c2a1 	.word	0x0800c2a1
 800c1f4:	0800c2a1 	.word	0x0800c2a1
 800c1f8:	0800c2a1 	.word	0x0800c2a1
 800c1fc:	0800c2a1 	.word	0x0800c2a1
 800c200:	0800c2a1 	.word	0x0800c2a1
 800c204:	0800c2a1 	.word	0x0800c2a1
 800c208:	0800c2a1 	.word	0x0800c2a1
 800c20c:	0800c281 	.word	0x0800c281
 800c210:	0800c2a1 	.word	0x0800c2a1
 800c214:	0800c2a1 	.word	0x0800c2a1
 800c218:	0800c2a1 	.word	0x0800c2a1
 800c21c:	0800c2a1 	.word	0x0800c2a1
 800c220:	0800c2a1 	.word	0x0800c2a1
 800c224:	0800c2a1 	.word	0x0800c2a1
 800c228:	0800c2a1 	.word	0x0800c2a1
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c2a1 	.word	0x0800c2a1
 800c234:	0800c2a1 	.word	0x0800c2a1
 800c238:	0800c2a1 	.word	0x0800c2a1
 800c23c:	0800c2a1 	.word	0x0800c2a1
 800c240:	0800c2a1 	.word	0x0800c2a1
 800c244:	0800c2a1 	.word	0x0800c2a1
 800c248:	0800c2a1 	.word	0x0800c2a1
 800c24c:	0800c291 	.word	0x0800c291
 800c250:	0800c2a1 	.word	0x0800c2a1
 800c254:	0800c2a1 	.word	0x0800c2a1
 800c258:	0800c2a1 	.word	0x0800c2a1
 800c25c:	0800c2a1 	.word	0x0800c2a1
 800c260:	0800c2a1 	.word	0x0800c2a1
 800c264:	0800c2a1 	.word	0x0800c2a1
 800c268:	0800c2a1 	.word	0x0800c2a1
 800c26c:	0800c299 	.word	0x0800c299
 800c270:	2301      	movs	r3, #1
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e050      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c278:	2304      	movs	r3, #4
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e04c      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c280:	2308      	movs	r3, #8
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e048      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c288:	2310      	movs	r3, #16
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e044      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c290:	2320      	movs	r3, #32
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c296:	e040      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c298:	2340      	movs	r3, #64	; 0x40
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e03c      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c2a0:	2380      	movs	r3, #128	; 0x80
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a6:	e038      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a71      	ldr	r2, [pc, #452]	; (800c474 <UART_SetConfig+0x908>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d130      	bne.n	800c314 <UART_SetConfig+0x7a8>
 800c2b2:	4b6f      	ldr	r3, [pc, #444]	; (800c470 <UART_SetConfig+0x904>)
 800c2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	2b05      	cmp	r3, #5
 800c2bc:	d826      	bhi.n	800c30c <UART_SetConfig+0x7a0>
 800c2be:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <UART_SetConfig+0x758>)
 800c2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c4:	0800c2dd 	.word	0x0800c2dd
 800c2c8:	0800c2e5 	.word	0x0800c2e5
 800c2cc:	0800c2ed 	.word	0x0800c2ed
 800c2d0:	0800c2f5 	.word	0x0800c2f5
 800c2d4:	0800c2fd 	.word	0x0800c2fd
 800c2d8:	0800c305 	.word	0x0800c305
 800c2dc:	2302      	movs	r3, #2
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e01a      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c2e4:	2304      	movs	r3, #4
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e016      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c2ec:	2308      	movs	r3, #8
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f2:	e012      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c2f4:	2310      	movs	r3, #16
 800c2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fa:	e00e      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c2fc:	2320      	movs	r3, #32
 800c2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c302:	e00a      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c304:	2340      	movs	r3, #64	; 0x40
 800c306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30a:	e006      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c30c:	2380      	movs	r3, #128	; 0x80
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c312:	e002      	b.n	800c31a <UART_SetConfig+0x7ae>
 800c314:	2380      	movs	r3, #128	; 0x80
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a55      	ldr	r2, [pc, #340]	; (800c474 <UART_SetConfig+0x908>)
 800c320:	4293      	cmp	r3, r2
 800c322:	f040 80f8 	bne.w	800c516 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c326:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	dc46      	bgt.n	800c3bc <UART_SetConfig+0x850>
 800c32e:	2b02      	cmp	r3, #2
 800c330:	db75      	blt.n	800c41e <UART_SetConfig+0x8b2>
 800c332:	3b02      	subs	r3, #2
 800c334:	2b1e      	cmp	r3, #30
 800c336:	d872      	bhi.n	800c41e <UART_SetConfig+0x8b2>
 800c338:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <UART_SetConfig+0x7d4>)
 800c33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33e:	bf00      	nop
 800c340:	0800c3c3 	.word	0x0800c3c3
 800c344:	0800c41f 	.word	0x0800c41f
 800c348:	0800c3cb 	.word	0x0800c3cb
 800c34c:	0800c41f 	.word	0x0800c41f
 800c350:	0800c41f 	.word	0x0800c41f
 800c354:	0800c41f 	.word	0x0800c41f
 800c358:	0800c3db 	.word	0x0800c3db
 800c35c:	0800c41f 	.word	0x0800c41f
 800c360:	0800c41f 	.word	0x0800c41f
 800c364:	0800c41f 	.word	0x0800c41f
 800c368:	0800c41f 	.word	0x0800c41f
 800c36c:	0800c41f 	.word	0x0800c41f
 800c370:	0800c41f 	.word	0x0800c41f
 800c374:	0800c41f 	.word	0x0800c41f
 800c378:	0800c3eb 	.word	0x0800c3eb
 800c37c:	0800c41f 	.word	0x0800c41f
 800c380:	0800c41f 	.word	0x0800c41f
 800c384:	0800c41f 	.word	0x0800c41f
 800c388:	0800c41f 	.word	0x0800c41f
 800c38c:	0800c41f 	.word	0x0800c41f
 800c390:	0800c41f 	.word	0x0800c41f
 800c394:	0800c41f 	.word	0x0800c41f
 800c398:	0800c41f 	.word	0x0800c41f
 800c39c:	0800c41f 	.word	0x0800c41f
 800c3a0:	0800c41f 	.word	0x0800c41f
 800c3a4:	0800c41f 	.word	0x0800c41f
 800c3a8:	0800c41f 	.word	0x0800c41f
 800c3ac:	0800c41f 	.word	0x0800c41f
 800c3b0:	0800c41f 	.word	0x0800c41f
 800c3b4:	0800c41f 	.word	0x0800c41f
 800c3b8:	0800c411 	.word	0x0800c411
 800c3bc:	2b40      	cmp	r3, #64	; 0x40
 800c3be:	d02a      	beq.n	800c416 <UART_SetConfig+0x8aa>
 800c3c0:	e02d      	b.n	800c41e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c3c2:	f7fe f861 	bl	800a488 <HAL_RCCEx_GetD3PCLK1Freq>
 800c3c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3c8:	e02f      	b.n	800c42a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe f870 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3d8:	e027      	b.n	800c42a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3da:	f107 0318 	add.w	r3, r7, #24
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe f9bc 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e8:	e01f      	b.n	800c42a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3ea:	4b21      	ldr	r3, [pc, #132]	; (800c470 <UART_SetConfig+0x904>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0320 	and.w	r3, r3, #32
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d009      	beq.n	800c40a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3f6:	4b1e      	ldr	r3, [pc, #120]	; (800c470 <UART_SetConfig+0x904>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	08db      	lsrs	r3, r3, #3
 800c3fc:	f003 0303 	and.w	r3, r3, #3
 800c400:	4a1d      	ldr	r2, [pc, #116]	; (800c478 <UART_SetConfig+0x90c>)
 800c402:	fa22 f303 	lsr.w	r3, r2, r3
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c408:	e00f      	b.n	800c42a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c40a:	4b1b      	ldr	r3, [pc, #108]	; (800c478 <UART_SetConfig+0x90c>)
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40e:	e00c      	b.n	800c42a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c410:	4b1a      	ldr	r3, [pc, #104]	; (800c47c <UART_SetConfig+0x910>)
 800c412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c414:	e009      	b.n	800c42a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	e005      	b.n	800c42a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c41e:	2300      	movs	r3, #0
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c428:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f000 81ee 	beq.w	800c80e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c436:	4a12      	ldr	r2, [pc, #72]	; (800c480 <UART_SetConfig+0x914>)
 800c438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c43c:	461a      	mov	r2, r3
 800c43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c440:	fbb3 f3f2 	udiv	r3, r3, r2
 800c444:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	4613      	mov	r3, r2
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	4413      	add	r3, r2
 800c450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c452:	429a      	cmp	r2, r3
 800c454:	d305      	bcc.n	800c462 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c45e:	429a      	cmp	r2, r3
 800c460:	d910      	bls.n	800c484 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c468:	e1d1      	b.n	800c80e <UART_SetConfig+0xca2>
 800c46a:	bf00      	nop
 800c46c:	40011c00 	.word	0x40011c00
 800c470:	58024400 	.word	0x58024400
 800c474:	58000c00 	.word	0x58000c00
 800c478:	03d09000 	.word	0x03d09000
 800c47c:	003d0900 	.word	0x003d0900
 800c480:	0800dc5c 	.word	0x0800dc5c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c486:	2200      	movs	r2, #0
 800c488:	60bb      	str	r3, [r7, #8]
 800c48a:	60fa      	str	r2, [r7, #12]
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c490:	4ac0      	ldr	r2, [pc, #768]	; (800c794 <UART_SetConfig+0xc28>)
 800c492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c496:	b29b      	uxth	r3, r3
 800c498:	2200      	movs	r2, #0
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	607a      	str	r2, [r7, #4]
 800c49e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4a6:	f7f3 ff83 	bl	80003b0 <__aeabi_uldivmod>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	f04f 0200 	mov.w	r2, #0
 800c4b6:	f04f 0300 	mov.w	r3, #0
 800c4ba:	020b      	lsls	r3, r1, #8
 800c4bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4c0:	0202      	lsls	r2, r0, #8
 800c4c2:	6979      	ldr	r1, [r7, #20]
 800c4c4:	6849      	ldr	r1, [r1, #4]
 800c4c6:	0849      	lsrs	r1, r1, #1
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	eb12 0804 	adds.w	r8, r2, r4
 800c4d2:	eb43 0905 	adc.w	r9, r3, r5
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	469a      	mov	sl, r3
 800c4de:	4693      	mov	fp, r2
 800c4e0:	4652      	mov	r2, sl
 800c4e2:	465b      	mov	r3, fp
 800c4e4:	4640      	mov	r0, r8
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	f7f3 ff62 	bl	80003b0 <__aeabi_uldivmod>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4fa:	d308      	bcc.n	800c50e <UART_SetConfig+0x9a2>
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c502:	d204      	bcs.n	800c50e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c50a:	60da      	str	r2, [r3, #12]
 800c50c:	e17f      	b.n	800c80e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c514:	e17b      	b.n	800c80e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	69db      	ldr	r3, [r3, #28]
 800c51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c51e:	f040 80bd 	bne.w	800c69c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c522:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c526:	2b20      	cmp	r3, #32
 800c528:	dc48      	bgt.n	800c5bc <UART_SetConfig+0xa50>
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	db7b      	blt.n	800c626 <UART_SetConfig+0xaba>
 800c52e:	2b20      	cmp	r3, #32
 800c530:	d879      	bhi.n	800c626 <UART_SetConfig+0xaba>
 800c532:	a201      	add	r2, pc, #4	; (adr r2, 800c538 <UART_SetConfig+0x9cc>)
 800c534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c538:	0800c5c3 	.word	0x0800c5c3
 800c53c:	0800c5cb 	.word	0x0800c5cb
 800c540:	0800c627 	.word	0x0800c627
 800c544:	0800c627 	.word	0x0800c627
 800c548:	0800c5d3 	.word	0x0800c5d3
 800c54c:	0800c627 	.word	0x0800c627
 800c550:	0800c627 	.word	0x0800c627
 800c554:	0800c627 	.word	0x0800c627
 800c558:	0800c5e3 	.word	0x0800c5e3
 800c55c:	0800c627 	.word	0x0800c627
 800c560:	0800c627 	.word	0x0800c627
 800c564:	0800c627 	.word	0x0800c627
 800c568:	0800c627 	.word	0x0800c627
 800c56c:	0800c627 	.word	0x0800c627
 800c570:	0800c627 	.word	0x0800c627
 800c574:	0800c627 	.word	0x0800c627
 800c578:	0800c5f3 	.word	0x0800c5f3
 800c57c:	0800c627 	.word	0x0800c627
 800c580:	0800c627 	.word	0x0800c627
 800c584:	0800c627 	.word	0x0800c627
 800c588:	0800c627 	.word	0x0800c627
 800c58c:	0800c627 	.word	0x0800c627
 800c590:	0800c627 	.word	0x0800c627
 800c594:	0800c627 	.word	0x0800c627
 800c598:	0800c627 	.word	0x0800c627
 800c59c:	0800c627 	.word	0x0800c627
 800c5a0:	0800c627 	.word	0x0800c627
 800c5a4:	0800c627 	.word	0x0800c627
 800c5a8:	0800c627 	.word	0x0800c627
 800c5ac:	0800c627 	.word	0x0800c627
 800c5b0:	0800c627 	.word	0x0800c627
 800c5b4:	0800c627 	.word	0x0800c627
 800c5b8:	0800c619 	.word	0x0800c619
 800c5bc:	2b40      	cmp	r3, #64	; 0x40
 800c5be:	d02e      	beq.n	800c61e <UART_SetConfig+0xab2>
 800c5c0:	e031      	b.n	800c626 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5c2:	f7fc f8c3 	bl	800874c <HAL_RCC_GetPCLK1Freq>
 800c5c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5c8:	e033      	b.n	800c632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5ca:	f7fc f8d5 	bl	8008778 <HAL_RCC_GetPCLK2Freq>
 800c5ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5d0:	e02f      	b.n	800c632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fd ff6c 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e0:	e027      	b.n	800c632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5e2:	f107 0318 	add.w	r3, r7, #24
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe f8b8 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f0:	e01f      	b.n	800c632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5f2:	4b69      	ldr	r3, [pc, #420]	; (800c798 <UART_SetConfig+0xc2c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f003 0320 	and.w	r3, r3, #32
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d009      	beq.n	800c612 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5fe:	4b66      	ldr	r3, [pc, #408]	; (800c798 <UART_SetConfig+0xc2c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	08db      	lsrs	r3, r3, #3
 800c604:	f003 0303 	and.w	r3, r3, #3
 800c608:	4a64      	ldr	r2, [pc, #400]	; (800c79c <UART_SetConfig+0xc30>)
 800c60a:	fa22 f303 	lsr.w	r3, r2, r3
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c610:	e00f      	b.n	800c632 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c612:	4b62      	ldr	r3, [pc, #392]	; (800c79c <UART_SetConfig+0xc30>)
 800c614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c616:	e00c      	b.n	800c632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c618:	4b61      	ldr	r3, [pc, #388]	; (800c7a0 <UART_SetConfig+0xc34>)
 800c61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61c:	e009      	b.n	800c632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c61e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c624:	e005      	b.n	800c632 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c626:	2300      	movs	r3, #0
 800c628:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 80ea 	beq.w	800c80e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63e:	4a55      	ldr	r2, [pc, #340]	; (800c794 <UART_SetConfig+0xc28>)
 800c640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c644:	461a      	mov	r2, r3
 800c646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c648:	fbb3 f3f2 	udiv	r3, r3, r2
 800c64c:	005a      	lsls	r2, r3, #1
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	085b      	lsrs	r3, r3, #1
 800c654:	441a      	add	r2, r3
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c65e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	2b0f      	cmp	r3, #15
 800c664:	d916      	bls.n	800c694 <UART_SetConfig+0xb28>
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c66c:	d212      	bcs.n	800c694 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c670:	b29b      	uxth	r3, r3
 800c672:	f023 030f 	bic.w	r3, r3, #15
 800c676:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67a:	085b      	lsrs	r3, r3, #1
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	f003 0307 	and.w	r3, r3, #7
 800c682:	b29a      	uxth	r2, r3
 800c684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c686:	4313      	orrs	r3, r2
 800c688:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c690:	60da      	str	r2, [r3, #12]
 800c692:	e0bc      	b.n	800c80e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c69a:	e0b8      	b.n	800c80e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c69c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6a0:	2b20      	cmp	r3, #32
 800c6a2:	dc4b      	bgt.n	800c73c <UART_SetConfig+0xbd0>
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f2c0 8087 	blt.w	800c7b8 <UART_SetConfig+0xc4c>
 800c6aa:	2b20      	cmp	r3, #32
 800c6ac:	f200 8084 	bhi.w	800c7b8 <UART_SetConfig+0xc4c>
 800c6b0:	a201      	add	r2, pc, #4	; (adr r2, 800c6b8 <UART_SetConfig+0xb4c>)
 800c6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b6:	bf00      	nop
 800c6b8:	0800c743 	.word	0x0800c743
 800c6bc:	0800c74b 	.word	0x0800c74b
 800c6c0:	0800c7b9 	.word	0x0800c7b9
 800c6c4:	0800c7b9 	.word	0x0800c7b9
 800c6c8:	0800c753 	.word	0x0800c753
 800c6cc:	0800c7b9 	.word	0x0800c7b9
 800c6d0:	0800c7b9 	.word	0x0800c7b9
 800c6d4:	0800c7b9 	.word	0x0800c7b9
 800c6d8:	0800c763 	.word	0x0800c763
 800c6dc:	0800c7b9 	.word	0x0800c7b9
 800c6e0:	0800c7b9 	.word	0x0800c7b9
 800c6e4:	0800c7b9 	.word	0x0800c7b9
 800c6e8:	0800c7b9 	.word	0x0800c7b9
 800c6ec:	0800c7b9 	.word	0x0800c7b9
 800c6f0:	0800c7b9 	.word	0x0800c7b9
 800c6f4:	0800c7b9 	.word	0x0800c7b9
 800c6f8:	0800c773 	.word	0x0800c773
 800c6fc:	0800c7b9 	.word	0x0800c7b9
 800c700:	0800c7b9 	.word	0x0800c7b9
 800c704:	0800c7b9 	.word	0x0800c7b9
 800c708:	0800c7b9 	.word	0x0800c7b9
 800c70c:	0800c7b9 	.word	0x0800c7b9
 800c710:	0800c7b9 	.word	0x0800c7b9
 800c714:	0800c7b9 	.word	0x0800c7b9
 800c718:	0800c7b9 	.word	0x0800c7b9
 800c71c:	0800c7b9 	.word	0x0800c7b9
 800c720:	0800c7b9 	.word	0x0800c7b9
 800c724:	0800c7b9 	.word	0x0800c7b9
 800c728:	0800c7b9 	.word	0x0800c7b9
 800c72c:	0800c7b9 	.word	0x0800c7b9
 800c730:	0800c7b9 	.word	0x0800c7b9
 800c734:	0800c7b9 	.word	0x0800c7b9
 800c738:	0800c7ab 	.word	0x0800c7ab
 800c73c:	2b40      	cmp	r3, #64	; 0x40
 800c73e:	d037      	beq.n	800c7b0 <UART_SetConfig+0xc44>
 800c740:	e03a      	b.n	800c7b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c742:	f7fc f803 	bl	800874c <HAL_RCC_GetPCLK1Freq>
 800c746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c748:	e03c      	b.n	800c7c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c74a:	f7fc f815 	bl	8008778 <HAL_RCC_GetPCLK2Freq>
 800c74e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c750:	e038      	b.n	800c7c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c756:	4618      	mov	r0, r3
 800c758:	f7fd feac 	bl	800a4b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c760:	e030      	b.n	800c7c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c762:	f107 0318 	add.w	r3, r7, #24
 800c766:	4618      	mov	r0, r3
 800c768:	f7fd fff8 	bl	800a75c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c770:	e028      	b.n	800c7c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c772:	4b09      	ldr	r3, [pc, #36]	; (800c798 <UART_SetConfig+0xc2c>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f003 0320 	and.w	r3, r3, #32
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d012      	beq.n	800c7a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c77e:	4b06      	ldr	r3, [pc, #24]	; (800c798 <UART_SetConfig+0xc2c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	08db      	lsrs	r3, r3, #3
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	4a04      	ldr	r2, [pc, #16]	; (800c79c <UART_SetConfig+0xc30>)
 800c78a:	fa22 f303 	lsr.w	r3, r2, r3
 800c78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c790:	e018      	b.n	800c7c4 <UART_SetConfig+0xc58>
 800c792:	bf00      	nop
 800c794:	0800dc5c 	.word	0x0800dc5c
 800c798:	58024400 	.word	0x58024400
 800c79c:	03d09000 	.word	0x03d09000
 800c7a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c7a4:	4b24      	ldr	r3, [pc, #144]	; (800c838 <UART_SetConfig+0xccc>)
 800c7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a8:	e00c      	b.n	800c7c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7aa:	4b24      	ldr	r3, [pc, #144]	; (800c83c <UART_SetConfig+0xcd0>)
 800c7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ae:	e009      	b.n	800c7c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b6:	e005      	b.n	800c7c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c7c2:	bf00      	nop
    }

    if (pclk != 0U)
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d021      	beq.n	800c80e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ce:	4a1c      	ldr	r2, [pc, #112]	; (800c840 <UART_SetConfig+0xcd4>)
 800c7d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	085b      	lsrs	r3, r3, #1
 800c7e2:	441a      	add	r2, r3
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	2b0f      	cmp	r3, #15
 800c7f2:	d909      	bls.n	800c808 <UART_SetConfig+0xc9c>
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7fa:	d205      	bcs.n	800c808 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	60da      	str	r2, [r3, #12]
 800c806:	e002      	b.n	800c80e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2201      	movs	r2, #1
 800c812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	2201      	movs	r2, #1
 800c81a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2200      	movs	r2, #0
 800c822:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2200      	movs	r2, #0
 800c828:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c82a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3748      	adds	r7, #72	; 0x48
 800c832:	46bd      	mov	sp, r7
 800c834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c838:	03d09000 	.word	0x03d09000
 800c83c:	003d0900 	.word	0x003d0900
 800c840:	0800dc5c 	.word	0x0800dc5c

0800c844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c850:	f003 0301 	and.w	r3, r3, #1
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00a      	beq.n	800c86e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	430a      	orrs	r2, r1
 800c86c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c872:	f003 0302 	and.w	r3, r3, #2
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00a      	beq.n	800c890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	430a      	orrs	r2, r1
 800c88e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c894:	f003 0304 	and.w	r3, r3, #4
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00a      	beq.n	800c8b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b6:	f003 0308 	and.w	r3, r3, #8
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00a      	beq.n	800c8d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d8:	f003 0310 	and.w	r3, r3, #16
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00a      	beq.n	800c8f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	430a      	orrs	r2, r1
 800c8f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fa:	f003 0320 	and.w	r3, r3, #32
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00a      	beq.n	800c918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	430a      	orrs	r2, r1
 800c916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c920:	2b00      	cmp	r3, #0
 800c922:	d01a      	beq.n	800c95a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	430a      	orrs	r2, r1
 800c938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c93e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c942:	d10a      	bne.n	800c95a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	430a      	orrs	r2, r1
 800c958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00a      	beq.n	800c97c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	430a      	orrs	r2, r1
 800c97a:	605a      	str	r2, [r3, #4]
  }
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b098      	sub	sp, #96	; 0x60
 800c98c:	af02      	add	r7, sp, #8
 800c98e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c998:	f7f5 fb9e 	bl	80020d8 <HAL_GetTick>
 800c99c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 0308 	and.w	r3, r3, #8
 800c9a8:	2b08      	cmp	r3, #8
 800c9aa:	d12f      	bne.n	800ca0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f88e 	bl	800cadc <UART_WaitOnFlagUntilTimeout>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d022      	beq.n	800ca0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	e853 3f00 	ldrex	r3, [r3]
 800c9d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9da:	653b      	str	r3, [r7, #80]	; 0x50
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9e4:	647b      	str	r3, [r7, #68]	; 0x44
 800c9e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9ec:	e841 2300 	strex	r3, r2, [r1]
 800c9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1e6      	bne.n	800c9c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e063      	b.n	800cad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0304 	and.w	r3, r3, #4
 800ca16:	2b04      	cmp	r3, #4
 800ca18:	d149      	bne.n	800caae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca22:	2200      	movs	r2, #0
 800ca24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f857 	bl	800cadc <UART_WaitOnFlagUntilTimeout>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d03c      	beq.n	800caae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	623b      	str	r3, [r7, #32]
   return(result);
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca52:	633b      	str	r3, [r7, #48]	; 0x30
 800ca54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca5a:	e841 2300 	strex	r3, r2, [r1]
 800ca5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e6      	bne.n	800ca34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3308      	adds	r3, #8
 800ca6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	e853 3f00 	ldrex	r3, [r3]
 800ca74:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f023 0301 	bic.w	r3, r3, #1
 800ca7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	3308      	adds	r3, #8
 800ca84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca86:	61fa      	str	r2, [r7, #28]
 800ca88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8a:	69b9      	ldr	r1, [r7, #24]
 800ca8c:	69fa      	ldr	r2, [r7, #28]
 800ca8e:	e841 2300 	strex	r3, r2, [r1]
 800ca92:	617b      	str	r3, [r7, #20]
   return(result);
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1e5      	bne.n	800ca66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800caaa:	2303      	movs	r3, #3
 800caac:	e012      	b.n	800cad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2220      	movs	r2, #32
 800cab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2220      	movs	r2, #32
 800caba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3758      	adds	r7, #88	; 0x58
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	603b      	str	r3, [r7, #0]
 800cae8:	4613      	mov	r3, r2
 800caea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caec:	e049      	b.n	800cb82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf4:	d045      	beq.n	800cb82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800caf6:	f7f5 faef 	bl	80020d8 <HAL_GetTick>
 800cafa:	4602      	mov	r2, r0
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	69ba      	ldr	r2, [r7, #24]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d302      	bcc.n	800cb0c <UART_WaitOnFlagUntilTimeout+0x30>
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d101      	bne.n	800cb10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cb0c:	2303      	movs	r3, #3
 800cb0e:	e048      	b.n	800cba2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 0304 	and.w	r3, r3, #4
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d031      	beq.n	800cb82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	69db      	ldr	r3, [r3, #28]
 800cb24:	f003 0308 	and.w	r3, r3, #8
 800cb28:	2b08      	cmp	r3, #8
 800cb2a:	d110      	bne.n	800cb4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2208      	movs	r2, #8
 800cb32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 f839 	bl	800cbac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2208      	movs	r2, #8
 800cb3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e029      	b.n	800cba2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	69db      	ldr	r3, [r3, #28]
 800cb54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb5c:	d111      	bne.n	800cb82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f000 f81f 	bl	800cbac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2220      	movs	r2, #32
 800cb72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	e00f      	b.n	800cba2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	69da      	ldr	r2, [r3, #28]
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	68ba      	ldr	r2, [r7, #8]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	bf0c      	ite	eq
 800cb92:	2301      	moveq	r3, #1
 800cb94:	2300      	movne	r3, #0
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	461a      	mov	r2, r3
 800cb9a:	79fb      	ldrb	r3, [r7, #7]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d0a6      	beq.n	800caee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
	...

0800cbac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b095      	sub	sp, #84	; 0x54
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbbc:	e853 3f00 	ldrex	r3, [r3]
 800cbc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd2:	643b      	str	r3, [r7, #64]	; 0x40
 800cbd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbda:	e841 2300 	strex	r3, r2, [r1]
 800cbde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1e6      	bne.n	800cbb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	3308      	adds	r3, #8
 800cbec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	e853 3f00 	ldrex	r3, [r3]
 800cbf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbf6:	69fa      	ldr	r2, [r7, #28]
 800cbf8:	4b1e      	ldr	r3, [pc, #120]	; (800cc74 <UART_EndRxTransfer+0xc8>)
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3308      	adds	r3, #8
 800cc04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc0e:	e841 2300 	strex	r3, r2, [r1]
 800cc12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1e5      	bne.n	800cbe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d118      	bne.n	800cc54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	e853 3f00 	ldrex	r3, [r3]
 800cc2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	f023 0310 	bic.w	r3, r3, #16
 800cc36:	647b      	str	r3, [r7, #68]	; 0x44
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc40:	61bb      	str	r3, [r7, #24]
 800cc42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc44:	6979      	ldr	r1, [r7, #20]
 800cc46:	69ba      	ldr	r2, [r7, #24]
 800cc48:	e841 2300 	strex	r3, r2, [r1]
 800cc4c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1e6      	bne.n	800cc22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2220      	movs	r2, #32
 800cc58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cc68:	bf00      	nop
 800cc6a:	3754      	adds	r7, #84	; 0x54
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	effffffe 	.word	0xeffffffe

0800cc78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f7fe ff52 	bl	800bb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc9c:	bf00      	nop
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b08f      	sub	sp, #60	; 0x3c
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccb2:	2b21      	cmp	r3, #33	; 0x21
 800ccb4:	d14c      	bne.n	800cd50 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d132      	bne.n	800cd28 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	e853 3f00 	ldrex	r3, [r3]
 800ccce:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccd6:	637b      	str	r3, [r7, #52]	; 0x34
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cce2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cce8:	e841 2300 	strex	r3, r2, [r1]
 800ccec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1e6      	bne.n	800ccc2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	e853 3f00 	ldrex	r3, [r3]
 800cd00:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd08:	633b      	str	r3, [r7, #48]	; 0x30
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	61bb      	str	r3, [r7, #24]
 800cd14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd16:	6979      	ldr	r1, [r7, #20]
 800cd18:	69ba      	ldr	r2, [r7, #24]
 800cd1a:	e841 2300 	strex	r3, r2, [r1]
 800cd1e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1e6      	bne.n	800ccf4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cd26:	e013      	b.n	800cd50 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd2c:	781a      	ldrb	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	3b01      	subs	r3, #1
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800cd50:	bf00      	nop
 800cd52:	373c      	adds	r7, #60	; 0x3c
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b091      	sub	sp, #68	; 0x44
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd6a:	2b21      	cmp	r3, #33	; 0x21
 800cd6c:	d151      	bne.n	800ce12 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d132      	bne.n	800cde0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	e853 3f00 	ldrex	r3, [r3]
 800cd86:	623b      	str	r3, [r7, #32]
   return(result);
 800cd88:	6a3b      	ldr	r3, [r7, #32]
 800cd8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	461a      	mov	r2, r3
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	633b      	str	r3, [r7, #48]	; 0x30
 800cd9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cda0:	e841 2300 	strex	r3, r2, [r1]
 800cda4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1e6      	bne.n	800cd7a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	e853 3f00 	ldrex	r3, [r3]
 800cdb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdca:	61fb      	str	r3, [r7, #28]
 800cdcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdce:	69b9      	ldr	r1, [r7, #24]
 800cdd0:	69fa      	ldr	r2, [r7, #28]
 800cdd2:	e841 2300 	strex	r3, r2, [r1]
 800cdd6:	617b      	str	r3, [r7, #20]
   return(result);
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1e6      	bne.n	800cdac <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cdde:	e018      	b.n	800ce12 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	461a      	mov	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cdf4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdfa:	1c9a      	adds	r2, r3, #2
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ce12:	bf00      	nop
 800ce14:	3744      	adds	r7, #68	; 0x44
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b091      	sub	sp, #68	; 0x44
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce2c:	2b21      	cmp	r3, #33	; 0x21
 800ce2e:	d160      	bne.n	800cef2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce36:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ce38:	e057      	b.n	800ceea <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d133      	bne.n	800ceae <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	e853 3f00 	ldrex	r3, [r3]
 800ce54:	623b      	str	r3, [r7, #32]
   return(result);
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ce5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3308      	adds	r3, #8
 800ce64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce66:	633a      	str	r2, [r7, #48]	; 0x30
 800ce68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e5      	bne.n	800ce46 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	e853 3f00 	ldrex	r3, [r3]
 800ce86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	461a      	mov	r2, r3
 800ce96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce98:	61fb      	str	r3, [r7, #28]
 800ce9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9c:	69b9      	ldr	r1, [r7, #24]
 800ce9e:	69fa      	ldr	r2, [r7, #28]
 800cea0:	e841 2300 	strex	r3, r2, [r1]
 800cea4:	617b      	str	r3, [r7, #20]
   return(result);
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1e6      	bne.n	800ce7a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ceac:	e021      	b.n	800cef2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	69db      	ldr	r3, [r3, #28]
 800ceb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d013      	beq.n	800cee4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cec0:	781a      	ldrb	r2, [r3, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cecc:	1c5a      	adds	r2, r3, #1
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	3b01      	subs	r3, #1
 800cedc:	b29a      	uxth	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cee4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cee6:	3b01      	subs	r3, #1
 800cee8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ceea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1a4      	bne.n	800ce3a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800cef0:	e7ff      	b.n	800cef2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800cef2:	bf00      	nop
 800cef4:	3744      	adds	r7, #68	; 0x44
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr

0800cefe <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cefe:	b480      	push	{r7}
 800cf00:	b091      	sub	sp, #68	; 0x44
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf0c:	2b21      	cmp	r3, #33	; 0x21
 800cf0e:	d165      	bne.n	800cfdc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf16:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cf18:	e05c      	b.n	800cfd4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d133      	bne.n	800cf8e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	e853 3f00 	ldrex	r3, [r3]
 800cf34:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf36:	69fb      	ldr	r3, [r7, #28]
 800cf38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf3c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3308      	adds	r3, #8
 800cf44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf4e:	e841 2300 	strex	r3, r2, [r1]
 800cf52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1e5      	bne.n	800cf26 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	e853 3f00 	ldrex	r3, [r3]
 800cf66:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf6e:	633b      	str	r3, [r7, #48]	; 0x30
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	461a      	mov	r2, r3
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	61bb      	str	r3, [r7, #24]
 800cf7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7c:	6979      	ldr	r1, [r7, #20]
 800cf7e:	69ba      	ldr	r2, [r7, #24]
 800cf80:	e841 2300 	strex	r3, r2, [r1]
 800cf84:	613b      	str	r3, [r7, #16]
   return(result);
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1e6      	bne.n	800cf5a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cf8c:	e026      	b.n	800cfdc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	69db      	ldr	r3, [r3, #28]
 800cf94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d018      	beq.n	800cfce <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfa0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	881b      	ldrh	r3, [r3, #0]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfb0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfb6:	1c9a      	adds	r2, r3, #2
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cfce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cfd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d19f      	bne.n	800cf1a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800cfda:	e7ff      	b.n	800cfdc <UART_TxISR_16BIT_FIFOEN+0xde>
 800cfdc:	bf00      	nop
 800cfde:	3744      	adds	r7, #68	; 0x44
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	e853 3f00 	ldrex	r3, [r3]
 800cffc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d004:	61fb      	str	r3, [r7, #28]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	461a      	mov	r2, r3
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	61bb      	str	r3, [r7, #24]
 800d010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d012:	6979      	ldr	r1, [r7, #20]
 800d014:	69ba      	ldr	r2, [r7, #24]
 800d016:	e841 2300 	strex	r3, r2, [r1]
 800d01a:	613b      	str	r3, [r7, #16]
   return(result);
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1e6      	bne.n	800cff0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2220      	movs	r2, #32
 800d026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7fe fd7b 	bl	800bb2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d036:	bf00      	nop
 800d038:	3720      	adds	r7, #32
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d03e:	b480      	push	{r7}
 800d040:	b083      	sub	sp, #12
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d046:	bf00      	nop
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d052:	b480      	push	{r7}
 800d054:	b083      	sub	sp, #12
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d05a:	bf00      	nop
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d066:	b480      	push	{r7}
 800d068:	b083      	sub	sp, #12
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d06e:	bf00      	nop
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d07a:	b480      	push	{r7}
 800d07c:	b085      	sub	sp, #20
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d101      	bne.n	800d090 <HAL_UARTEx_DisableFifoMode+0x16>
 800d08c:	2302      	movs	r3, #2
 800d08e:	e027      	b.n	800d0e0 <HAL_UARTEx_DisableFifoMode+0x66>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2224      	movs	r2, #36	; 0x24
 800d09c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f022 0201 	bic.w	r2, r2, #1
 800d0b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2220      	movs	r2, #32
 800d0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d101      	bne.n	800d104 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d100:	2302      	movs	r3, #2
 800d102:	e02d      	b.n	800d160 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2224      	movs	r2, #36	; 0x24
 800d110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f022 0201 	bic.w	r2, r2, #1
 800d12a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	683a      	ldr	r2, [r7, #0]
 800d13c:	430a      	orrs	r2, r1
 800d13e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 f84f 	bl	800d1e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2220      	movs	r2, #32
 800d152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d101      	bne.n	800d180 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d17c:	2302      	movs	r3, #2
 800d17e:	e02d      	b.n	800d1dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2224      	movs	r2, #36	; 0x24
 800d18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f022 0201 	bic.w	r2, r2, #1
 800d1a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	430a      	orrs	r2, r1
 800d1ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f811 	bl	800d1e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2220      	movs	r2, #32
 800d1ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d108      	bne.n	800d206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d204:	e031      	b.n	800d26a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d206:	2310      	movs	r3, #16
 800d208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d20a:	2310      	movs	r3, #16
 800d20c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	0e5b      	lsrs	r3, r3, #25
 800d216:	b2db      	uxtb	r3, r3
 800d218:	f003 0307 	and.w	r3, r3, #7
 800d21c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	0f5b      	lsrs	r3, r3, #29
 800d226:	b2db      	uxtb	r3, r3
 800d228:	f003 0307 	and.w	r3, r3, #7
 800d22c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
 800d230:	7b3a      	ldrb	r2, [r7, #12]
 800d232:	4911      	ldr	r1, [pc, #68]	; (800d278 <UARTEx_SetNbDataToProcess+0x94>)
 800d234:	5c8a      	ldrb	r2, [r1, r2]
 800d236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d23a:	7b3a      	ldrb	r2, [r7, #12]
 800d23c:	490f      	ldr	r1, [pc, #60]	; (800d27c <UARTEx_SetNbDataToProcess+0x98>)
 800d23e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d240:	fb93 f3f2 	sdiv	r3, r3, r2
 800d244:	b29a      	uxth	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	7b7a      	ldrb	r2, [r7, #13]
 800d250:	4909      	ldr	r1, [pc, #36]	; (800d278 <UARTEx_SetNbDataToProcess+0x94>)
 800d252:	5c8a      	ldrb	r2, [r1, r2]
 800d254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d258:	7b7a      	ldrb	r2, [r7, #13]
 800d25a:	4908      	ldr	r1, [pc, #32]	; (800d27c <UARTEx_SetNbDataToProcess+0x98>)
 800d25c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d25e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d262:	b29a      	uxth	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d26a:	bf00      	nop
 800d26c:	3714      	adds	r7, #20
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	0800dc74 	.word	0x0800dc74
 800d27c:	0800dc7c 	.word	0x0800dc7c

0800d280 <siprintf>:
 800d280:	b40e      	push	{r1, r2, r3}
 800d282:	b500      	push	{lr}
 800d284:	b09c      	sub	sp, #112	; 0x70
 800d286:	ab1d      	add	r3, sp, #116	; 0x74
 800d288:	9002      	str	r0, [sp, #8]
 800d28a:	9006      	str	r0, [sp, #24]
 800d28c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d290:	4809      	ldr	r0, [pc, #36]	; (800d2b8 <siprintf+0x38>)
 800d292:	9107      	str	r1, [sp, #28]
 800d294:	9104      	str	r1, [sp, #16]
 800d296:	4909      	ldr	r1, [pc, #36]	; (800d2bc <siprintf+0x3c>)
 800d298:	f853 2b04 	ldr.w	r2, [r3], #4
 800d29c:	9105      	str	r1, [sp, #20]
 800d29e:	6800      	ldr	r0, [r0, #0]
 800d2a0:	9301      	str	r3, [sp, #4]
 800d2a2:	a902      	add	r1, sp, #8
 800d2a4:	f000 f9a0 	bl	800d5e8 <_svfiprintf_r>
 800d2a8:	9b02      	ldr	r3, [sp, #8]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	b01c      	add	sp, #112	; 0x70
 800d2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2b4:	b003      	add	sp, #12
 800d2b6:	4770      	bx	lr
 800d2b8:	24000060 	.word	0x24000060
 800d2bc:	ffff0208 	.word	0xffff0208

0800d2c0 <memset>:
 800d2c0:	4402      	add	r2, r0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d100      	bne.n	800d2ca <memset+0xa>
 800d2c8:	4770      	bx	lr
 800d2ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d2ce:	e7f9      	b.n	800d2c4 <memset+0x4>

0800d2d0 <__errno>:
 800d2d0:	4b01      	ldr	r3, [pc, #4]	; (800d2d8 <__errno+0x8>)
 800d2d2:	6818      	ldr	r0, [r3, #0]
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	24000060 	.word	0x24000060

0800d2dc <__libc_init_array>:
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	4d0d      	ldr	r5, [pc, #52]	; (800d314 <__libc_init_array+0x38>)
 800d2e0:	4c0d      	ldr	r4, [pc, #52]	; (800d318 <__libc_init_array+0x3c>)
 800d2e2:	1b64      	subs	r4, r4, r5
 800d2e4:	10a4      	asrs	r4, r4, #2
 800d2e6:	2600      	movs	r6, #0
 800d2e8:	42a6      	cmp	r6, r4
 800d2ea:	d109      	bne.n	800d300 <__libc_init_array+0x24>
 800d2ec:	4d0b      	ldr	r5, [pc, #44]	; (800d31c <__libc_init_array+0x40>)
 800d2ee:	4c0c      	ldr	r4, [pc, #48]	; (800d320 <__libc_init_array+0x44>)
 800d2f0:	f000 fc6a 	bl	800dbc8 <_init>
 800d2f4:	1b64      	subs	r4, r4, r5
 800d2f6:	10a4      	asrs	r4, r4, #2
 800d2f8:	2600      	movs	r6, #0
 800d2fa:	42a6      	cmp	r6, r4
 800d2fc:	d105      	bne.n	800d30a <__libc_init_array+0x2e>
 800d2fe:	bd70      	pop	{r4, r5, r6, pc}
 800d300:	f855 3b04 	ldr.w	r3, [r5], #4
 800d304:	4798      	blx	r3
 800d306:	3601      	adds	r6, #1
 800d308:	e7ee      	b.n	800d2e8 <__libc_init_array+0xc>
 800d30a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d30e:	4798      	blx	r3
 800d310:	3601      	adds	r6, #1
 800d312:	e7f2      	b.n	800d2fa <__libc_init_array+0x1e>
 800d314:	0800dcc0 	.word	0x0800dcc0
 800d318:	0800dcc0 	.word	0x0800dcc0
 800d31c:	0800dcc0 	.word	0x0800dcc0
 800d320:	0800dcc4 	.word	0x0800dcc4

0800d324 <__retarget_lock_acquire_recursive>:
 800d324:	4770      	bx	lr

0800d326 <__retarget_lock_release_recursive>:
 800d326:	4770      	bx	lr

0800d328 <memcpy>:
 800d328:	440a      	add	r2, r1
 800d32a:	4291      	cmp	r1, r2
 800d32c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d330:	d100      	bne.n	800d334 <memcpy+0xc>
 800d332:	4770      	bx	lr
 800d334:	b510      	push	{r4, lr}
 800d336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d33a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d33e:	4291      	cmp	r1, r2
 800d340:	d1f9      	bne.n	800d336 <memcpy+0xe>
 800d342:	bd10      	pop	{r4, pc}

0800d344 <_free_r>:
 800d344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d346:	2900      	cmp	r1, #0
 800d348:	d044      	beq.n	800d3d4 <_free_r+0x90>
 800d34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d34e:	9001      	str	r0, [sp, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	f1a1 0404 	sub.w	r4, r1, #4
 800d356:	bfb8      	it	lt
 800d358:	18e4      	addlt	r4, r4, r3
 800d35a:	f000 f8df 	bl	800d51c <__malloc_lock>
 800d35e:	4a1e      	ldr	r2, [pc, #120]	; (800d3d8 <_free_r+0x94>)
 800d360:	9801      	ldr	r0, [sp, #4]
 800d362:	6813      	ldr	r3, [r2, #0]
 800d364:	b933      	cbnz	r3, 800d374 <_free_r+0x30>
 800d366:	6063      	str	r3, [r4, #4]
 800d368:	6014      	str	r4, [r2, #0]
 800d36a:	b003      	add	sp, #12
 800d36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d370:	f000 b8da 	b.w	800d528 <__malloc_unlock>
 800d374:	42a3      	cmp	r3, r4
 800d376:	d908      	bls.n	800d38a <_free_r+0x46>
 800d378:	6825      	ldr	r5, [r4, #0]
 800d37a:	1961      	adds	r1, r4, r5
 800d37c:	428b      	cmp	r3, r1
 800d37e:	bf01      	itttt	eq
 800d380:	6819      	ldreq	r1, [r3, #0]
 800d382:	685b      	ldreq	r3, [r3, #4]
 800d384:	1949      	addeq	r1, r1, r5
 800d386:	6021      	streq	r1, [r4, #0]
 800d388:	e7ed      	b.n	800d366 <_free_r+0x22>
 800d38a:	461a      	mov	r2, r3
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	b10b      	cbz	r3, 800d394 <_free_r+0x50>
 800d390:	42a3      	cmp	r3, r4
 800d392:	d9fa      	bls.n	800d38a <_free_r+0x46>
 800d394:	6811      	ldr	r1, [r2, #0]
 800d396:	1855      	adds	r5, r2, r1
 800d398:	42a5      	cmp	r5, r4
 800d39a:	d10b      	bne.n	800d3b4 <_free_r+0x70>
 800d39c:	6824      	ldr	r4, [r4, #0]
 800d39e:	4421      	add	r1, r4
 800d3a0:	1854      	adds	r4, r2, r1
 800d3a2:	42a3      	cmp	r3, r4
 800d3a4:	6011      	str	r1, [r2, #0]
 800d3a6:	d1e0      	bne.n	800d36a <_free_r+0x26>
 800d3a8:	681c      	ldr	r4, [r3, #0]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	6053      	str	r3, [r2, #4]
 800d3ae:	440c      	add	r4, r1
 800d3b0:	6014      	str	r4, [r2, #0]
 800d3b2:	e7da      	b.n	800d36a <_free_r+0x26>
 800d3b4:	d902      	bls.n	800d3bc <_free_r+0x78>
 800d3b6:	230c      	movs	r3, #12
 800d3b8:	6003      	str	r3, [r0, #0]
 800d3ba:	e7d6      	b.n	800d36a <_free_r+0x26>
 800d3bc:	6825      	ldr	r5, [r4, #0]
 800d3be:	1961      	adds	r1, r4, r5
 800d3c0:	428b      	cmp	r3, r1
 800d3c2:	bf04      	itt	eq
 800d3c4:	6819      	ldreq	r1, [r3, #0]
 800d3c6:	685b      	ldreq	r3, [r3, #4]
 800d3c8:	6063      	str	r3, [r4, #4]
 800d3ca:	bf04      	itt	eq
 800d3cc:	1949      	addeq	r1, r1, r5
 800d3ce:	6021      	streq	r1, [r4, #0]
 800d3d0:	6054      	str	r4, [r2, #4]
 800d3d2:	e7ca      	b.n	800d36a <_free_r+0x26>
 800d3d4:	b003      	add	sp, #12
 800d3d6:	bd30      	pop	{r4, r5, pc}
 800d3d8:	240009a0 	.word	0x240009a0

0800d3dc <sbrk_aligned>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	4e0e      	ldr	r6, [pc, #56]	; (800d418 <sbrk_aligned+0x3c>)
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	6831      	ldr	r1, [r6, #0]
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	b911      	cbnz	r1, 800d3ee <sbrk_aligned+0x12>
 800d3e8:	f000 fba6 	bl	800db38 <_sbrk_r>
 800d3ec:	6030      	str	r0, [r6, #0]
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	f000 fba1 	bl	800db38 <_sbrk_r>
 800d3f6:	1c43      	adds	r3, r0, #1
 800d3f8:	d00a      	beq.n	800d410 <sbrk_aligned+0x34>
 800d3fa:	1cc4      	adds	r4, r0, #3
 800d3fc:	f024 0403 	bic.w	r4, r4, #3
 800d400:	42a0      	cmp	r0, r4
 800d402:	d007      	beq.n	800d414 <sbrk_aligned+0x38>
 800d404:	1a21      	subs	r1, r4, r0
 800d406:	4628      	mov	r0, r5
 800d408:	f000 fb96 	bl	800db38 <_sbrk_r>
 800d40c:	3001      	adds	r0, #1
 800d40e:	d101      	bne.n	800d414 <sbrk_aligned+0x38>
 800d410:	f04f 34ff 	mov.w	r4, #4294967295
 800d414:	4620      	mov	r0, r4
 800d416:	bd70      	pop	{r4, r5, r6, pc}
 800d418:	240009a4 	.word	0x240009a4

0800d41c <_malloc_r>:
 800d41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d420:	1ccd      	adds	r5, r1, #3
 800d422:	f025 0503 	bic.w	r5, r5, #3
 800d426:	3508      	adds	r5, #8
 800d428:	2d0c      	cmp	r5, #12
 800d42a:	bf38      	it	cc
 800d42c:	250c      	movcc	r5, #12
 800d42e:	2d00      	cmp	r5, #0
 800d430:	4607      	mov	r7, r0
 800d432:	db01      	blt.n	800d438 <_malloc_r+0x1c>
 800d434:	42a9      	cmp	r1, r5
 800d436:	d905      	bls.n	800d444 <_malloc_r+0x28>
 800d438:	230c      	movs	r3, #12
 800d43a:	603b      	str	r3, [r7, #0]
 800d43c:	2600      	movs	r6, #0
 800d43e:	4630      	mov	r0, r6
 800d440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d444:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d518 <_malloc_r+0xfc>
 800d448:	f000 f868 	bl	800d51c <__malloc_lock>
 800d44c:	f8d8 3000 	ldr.w	r3, [r8]
 800d450:	461c      	mov	r4, r3
 800d452:	bb5c      	cbnz	r4, 800d4ac <_malloc_r+0x90>
 800d454:	4629      	mov	r1, r5
 800d456:	4638      	mov	r0, r7
 800d458:	f7ff ffc0 	bl	800d3dc <sbrk_aligned>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	4604      	mov	r4, r0
 800d460:	d155      	bne.n	800d50e <_malloc_r+0xf2>
 800d462:	f8d8 4000 	ldr.w	r4, [r8]
 800d466:	4626      	mov	r6, r4
 800d468:	2e00      	cmp	r6, #0
 800d46a:	d145      	bne.n	800d4f8 <_malloc_r+0xdc>
 800d46c:	2c00      	cmp	r4, #0
 800d46e:	d048      	beq.n	800d502 <_malloc_r+0xe6>
 800d470:	6823      	ldr	r3, [r4, #0]
 800d472:	4631      	mov	r1, r6
 800d474:	4638      	mov	r0, r7
 800d476:	eb04 0903 	add.w	r9, r4, r3
 800d47a:	f000 fb5d 	bl	800db38 <_sbrk_r>
 800d47e:	4581      	cmp	r9, r0
 800d480:	d13f      	bne.n	800d502 <_malloc_r+0xe6>
 800d482:	6821      	ldr	r1, [r4, #0]
 800d484:	1a6d      	subs	r5, r5, r1
 800d486:	4629      	mov	r1, r5
 800d488:	4638      	mov	r0, r7
 800d48a:	f7ff ffa7 	bl	800d3dc <sbrk_aligned>
 800d48e:	3001      	adds	r0, #1
 800d490:	d037      	beq.n	800d502 <_malloc_r+0xe6>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	442b      	add	r3, r5
 800d496:	6023      	str	r3, [r4, #0]
 800d498:	f8d8 3000 	ldr.w	r3, [r8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d038      	beq.n	800d512 <_malloc_r+0xf6>
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	42a2      	cmp	r2, r4
 800d4a4:	d12b      	bne.n	800d4fe <_malloc_r+0xe2>
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	605a      	str	r2, [r3, #4]
 800d4aa:	e00f      	b.n	800d4cc <_malloc_r+0xb0>
 800d4ac:	6822      	ldr	r2, [r4, #0]
 800d4ae:	1b52      	subs	r2, r2, r5
 800d4b0:	d41f      	bmi.n	800d4f2 <_malloc_r+0xd6>
 800d4b2:	2a0b      	cmp	r2, #11
 800d4b4:	d917      	bls.n	800d4e6 <_malloc_r+0xca>
 800d4b6:	1961      	adds	r1, r4, r5
 800d4b8:	42a3      	cmp	r3, r4
 800d4ba:	6025      	str	r5, [r4, #0]
 800d4bc:	bf18      	it	ne
 800d4be:	6059      	strne	r1, [r3, #4]
 800d4c0:	6863      	ldr	r3, [r4, #4]
 800d4c2:	bf08      	it	eq
 800d4c4:	f8c8 1000 	streq.w	r1, [r8]
 800d4c8:	5162      	str	r2, [r4, r5]
 800d4ca:	604b      	str	r3, [r1, #4]
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	f104 060b 	add.w	r6, r4, #11
 800d4d2:	f000 f829 	bl	800d528 <__malloc_unlock>
 800d4d6:	f026 0607 	bic.w	r6, r6, #7
 800d4da:	1d23      	adds	r3, r4, #4
 800d4dc:	1af2      	subs	r2, r6, r3
 800d4de:	d0ae      	beq.n	800d43e <_malloc_r+0x22>
 800d4e0:	1b9b      	subs	r3, r3, r6
 800d4e2:	50a3      	str	r3, [r4, r2]
 800d4e4:	e7ab      	b.n	800d43e <_malloc_r+0x22>
 800d4e6:	42a3      	cmp	r3, r4
 800d4e8:	6862      	ldr	r2, [r4, #4]
 800d4ea:	d1dd      	bne.n	800d4a8 <_malloc_r+0x8c>
 800d4ec:	f8c8 2000 	str.w	r2, [r8]
 800d4f0:	e7ec      	b.n	800d4cc <_malloc_r+0xb0>
 800d4f2:	4623      	mov	r3, r4
 800d4f4:	6864      	ldr	r4, [r4, #4]
 800d4f6:	e7ac      	b.n	800d452 <_malloc_r+0x36>
 800d4f8:	4634      	mov	r4, r6
 800d4fa:	6876      	ldr	r6, [r6, #4]
 800d4fc:	e7b4      	b.n	800d468 <_malloc_r+0x4c>
 800d4fe:	4613      	mov	r3, r2
 800d500:	e7cc      	b.n	800d49c <_malloc_r+0x80>
 800d502:	230c      	movs	r3, #12
 800d504:	603b      	str	r3, [r7, #0]
 800d506:	4638      	mov	r0, r7
 800d508:	f000 f80e 	bl	800d528 <__malloc_unlock>
 800d50c:	e797      	b.n	800d43e <_malloc_r+0x22>
 800d50e:	6025      	str	r5, [r4, #0]
 800d510:	e7dc      	b.n	800d4cc <_malloc_r+0xb0>
 800d512:	605b      	str	r3, [r3, #4]
 800d514:	deff      	udf	#255	; 0xff
 800d516:	bf00      	nop
 800d518:	240009a0 	.word	0x240009a0

0800d51c <__malloc_lock>:
 800d51c:	4801      	ldr	r0, [pc, #4]	; (800d524 <__malloc_lock+0x8>)
 800d51e:	f7ff bf01 	b.w	800d324 <__retarget_lock_acquire_recursive>
 800d522:	bf00      	nop
 800d524:	2400099c 	.word	0x2400099c

0800d528 <__malloc_unlock>:
 800d528:	4801      	ldr	r0, [pc, #4]	; (800d530 <__malloc_unlock+0x8>)
 800d52a:	f7ff befc 	b.w	800d326 <__retarget_lock_release_recursive>
 800d52e:	bf00      	nop
 800d530:	2400099c 	.word	0x2400099c

0800d534 <__ssputs_r>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	688e      	ldr	r6, [r1, #8]
 800d53a:	461f      	mov	r7, r3
 800d53c:	42be      	cmp	r6, r7
 800d53e:	680b      	ldr	r3, [r1, #0]
 800d540:	4682      	mov	sl, r0
 800d542:	460c      	mov	r4, r1
 800d544:	4690      	mov	r8, r2
 800d546:	d82c      	bhi.n	800d5a2 <__ssputs_r+0x6e>
 800d548:	898a      	ldrh	r2, [r1, #12]
 800d54a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d54e:	d026      	beq.n	800d59e <__ssputs_r+0x6a>
 800d550:	6965      	ldr	r5, [r4, #20]
 800d552:	6909      	ldr	r1, [r1, #16]
 800d554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d558:	eba3 0901 	sub.w	r9, r3, r1
 800d55c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d560:	1c7b      	adds	r3, r7, #1
 800d562:	444b      	add	r3, r9
 800d564:	106d      	asrs	r5, r5, #1
 800d566:	429d      	cmp	r5, r3
 800d568:	bf38      	it	cc
 800d56a:	461d      	movcc	r5, r3
 800d56c:	0553      	lsls	r3, r2, #21
 800d56e:	d527      	bpl.n	800d5c0 <__ssputs_r+0x8c>
 800d570:	4629      	mov	r1, r5
 800d572:	f7ff ff53 	bl	800d41c <_malloc_r>
 800d576:	4606      	mov	r6, r0
 800d578:	b360      	cbz	r0, 800d5d4 <__ssputs_r+0xa0>
 800d57a:	6921      	ldr	r1, [r4, #16]
 800d57c:	464a      	mov	r2, r9
 800d57e:	f7ff fed3 	bl	800d328 <memcpy>
 800d582:	89a3      	ldrh	r3, [r4, #12]
 800d584:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d58c:	81a3      	strh	r3, [r4, #12]
 800d58e:	6126      	str	r6, [r4, #16]
 800d590:	6165      	str	r5, [r4, #20]
 800d592:	444e      	add	r6, r9
 800d594:	eba5 0509 	sub.w	r5, r5, r9
 800d598:	6026      	str	r6, [r4, #0]
 800d59a:	60a5      	str	r5, [r4, #8]
 800d59c:	463e      	mov	r6, r7
 800d59e:	42be      	cmp	r6, r7
 800d5a0:	d900      	bls.n	800d5a4 <__ssputs_r+0x70>
 800d5a2:	463e      	mov	r6, r7
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	4632      	mov	r2, r6
 800d5a8:	4641      	mov	r1, r8
 800d5aa:	f000 faab 	bl	800db04 <memmove>
 800d5ae:	68a3      	ldr	r3, [r4, #8]
 800d5b0:	1b9b      	subs	r3, r3, r6
 800d5b2:	60a3      	str	r3, [r4, #8]
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	4433      	add	r3, r6
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c0:	462a      	mov	r2, r5
 800d5c2:	f000 fac9 	bl	800db58 <_realloc_r>
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d1e0      	bne.n	800d58e <__ssputs_r+0x5a>
 800d5cc:	6921      	ldr	r1, [r4, #16]
 800d5ce:	4650      	mov	r0, sl
 800d5d0:	f7ff feb8 	bl	800d344 <_free_r>
 800d5d4:	230c      	movs	r3, #12
 800d5d6:	f8ca 3000 	str.w	r3, [sl]
 800d5da:	89a3      	ldrh	r3, [r4, #12]
 800d5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5e0:	81a3      	strh	r3, [r4, #12]
 800d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e6:	e7e9      	b.n	800d5bc <__ssputs_r+0x88>

0800d5e8 <_svfiprintf_r>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	4698      	mov	r8, r3
 800d5ee:	898b      	ldrh	r3, [r1, #12]
 800d5f0:	061b      	lsls	r3, r3, #24
 800d5f2:	b09d      	sub	sp, #116	; 0x74
 800d5f4:	4607      	mov	r7, r0
 800d5f6:	460d      	mov	r5, r1
 800d5f8:	4614      	mov	r4, r2
 800d5fa:	d50e      	bpl.n	800d61a <_svfiprintf_r+0x32>
 800d5fc:	690b      	ldr	r3, [r1, #16]
 800d5fe:	b963      	cbnz	r3, 800d61a <_svfiprintf_r+0x32>
 800d600:	2140      	movs	r1, #64	; 0x40
 800d602:	f7ff ff0b 	bl	800d41c <_malloc_r>
 800d606:	6028      	str	r0, [r5, #0]
 800d608:	6128      	str	r0, [r5, #16]
 800d60a:	b920      	cbnz	r0, 800d616 <_svfiprintf_r+0x2e>
 800d60c:	230c      	movs	r3, #12
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	f04f 30ff 	mov.w	r0, #4294967295
 800d614:	e0d0      	b.n	800d7b8 <_svfiprintf_r+0x1d0>
 800d616:	2340      	movs	r3, #64	; 0x40
 800d618:	616b      	str	r3, [r5, #20]
 800d61a:	2300      	movs	r3, #0
 800d61c:	9309      	str	r3, [sp, #36]	; 0x24
 800d61e:	2320      	movs	r3, #32
 800d620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d624:	f8cd 800c 	str.w	r8, [sp, #12]
 800d628:	2330      	movs	r3, #48	; 0x30
 800d62a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d7d0 <_svfiprintf_r+0x1e8>
 800d62e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d632:	f04f 0901 	mov.w	r9, #1
 800d636:	4623      	mov	r3, r4
 800d638:	469a      	mov	sl, r3
 800d63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d63e:	b10a      	cbz	r2, 800d644 <_svfiprintf_r+0x5c>
 800d640:	2a25      	cmp	r2, #37	; 0x25
 800d642:	d1f9      	bne.n	800d638 <_svfiprintf_r+0x50>
 800d644:	ebba 0b04 	subs.w	fp, sl, r4
 800d648:	d00b      	beq.n	800d662 <_svfiprintf_r+0x7a>
 800d64a:	465b      	mov	r3, fp
 800d64c:	4622      	mov	r2, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	4638      	mov	r0, r7
 800d652:	f7ff ff6f 	bl	800d534 <__ssputs_r>
 800d656:	3001      	adds	r0, #1
 800d658:	f000 80a9 	beq.w	800d7ae <_svfiprintf_r+0x1c6>
 800d65c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d65e:	445a      	add	r2, fp
 800d660:	9209      	str	r2, [sp, #36]	; 0x24
 800d662:	f89a 3000 	ldrb.w	r3, [sl]
 800d666:	2b00      	cmp	r3, #0
 800d668:	f000 80a1 	beq.w	800d7ae <_svfiprintf_r+0x1c6>
 800d66c:	2300      	movs	r3, #0
 800d66e:	f04f 32ff 	mov.w	r2, #4294967295
 800d672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d676:	f10a 0a01 	add.w	sl, sl, #1
 800d67a:	9304      	str	r3, [sp, #16]
 800d67c:	9307      	str	r3, [sp, #28]
 800d67e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d682:	931a      	str	r3, [sp, #104]	; 0x68
 800d684:	4654      	mov	r4, sl
 800d686:	2205      	movs	r2, #5
 800d688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d68c:	4850      	ldr	r0, [pc, #320]	; (800d7d0 <_svfiprintf_r+0x1e8>)
 800d68e:	f7f2 fe3f 	bl	8000310 <memchr>
 800d692:	9a04      	ldr	r2, [sp, #16]
 800d694:	b9d8      	cbnz	r0, 800d6ce <_svfiprintf_r+0xe6>
 800d696:	06d0      	lsls	r0, r2, #27
 800d698:	bf44      	itt	mi
 800d69a:	2320      	movmi	r3, #32
 800d69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6a0:	0711      	lsls	r1, r2, #28
 800d6a2:	bf44      	itt	mi
 800d6a4:	232b      	movmi	r3, #43	; 0x2b
 800d6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b0:	d015      	beq.n	800d6de <_svfiprintf_r+0xf6>
 800d6b2:	9a07      	ldr	r2, [sp, #28]
 800d6b4:	4654      	mov	r4, sl
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	f04f 0c0a 	mov.w	ip, #10
 800d6bc:	4621      	mov	r1, r4
 800d6be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6c2:	3b30      	subs	r3, #48	; 0x30
 800d6c4:	2b09      	cmp	r3, #9
 800d6c6:	d94d      	bls.n	800d764 <_svfiprintf_r+0x17c>
 800d6c8:	b1b0      	cbz	r0, 800d6f8 <_svfiprintf_r+0x110>
 800d6ca:	9207      	str	r2, [sp, #28]
 800d6cc:	e014      	b.n	800d6f8 <_svfiprintf_r+0x110>
 800d6ce:	eba0 0308 	sub.w	r3, r0, r8
 800d6d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	9304      	str	r3, [sp, #16]
 800d6da:	46a2      	mov	sl, r4
 800d6dc:	e7d2      	b.n	800d684 <_svfiprintf_r+0x9c>
 800d6de:	9b03      	ldr	r3, [sp, #12]
 800d6e0:	1d19      	adds	r1, r3, #4
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	9103      	str	r1, [sp, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	bfbb      	ittet	lt
 800d6ea:	425b      	neglt	r3, r3
 800d6ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d6f0:	9307      	strge	r3, [sp, #28]
 800d6f2:	9307      	strlt	r3, [sp, #28]
 800d6f4:	bfb8      	it	lt
 800d6f6:	9204      	strlt	r2, [sp, #16]
 800d6f8:	7823      	ldrb	r3, [r4, #0]
 800d6fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d6fc:	d10c      	bne.n	800d718 <_svfiprintf_r+0x130>
 800d6fe:	7863      	ldrb	r3, [r4, #1]
 800d700:	2b2a      	cmp	r3, #42	; 0x2a
 800d702:	d134      	bne.n	800d76e <_svfiprintf_r+0x186>
 800d704:	9b03      	ldr	r3, [sp, #12]
 800d706:	1d1a      	adds	r2, r3, #4
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	9203      	str	r2, [sp, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	bfb8      	it	lt
 800d710:	f04f 33ff 	movlt.w	r3, #4294967295
 800d714:	3402      	adds	r4, #2
 800d716:	9305      	str	r3, [sp, #20]
 800d718:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d7e0 <_svfiprintf_r+0x1f8>
 800d71c:	7821      	ldrb	r1, [r4, #0]
 800d71e:	2203      	movs	r2, #3
 800d720:	4650      	mov	r0, sl
 800d722:	f7f2 fdf5 	bl	8000310 <memchr>
 800d726:	b138      	cbz	r0, 800d738 <_svfiprintf_r+0x150>
 800d728:	9b04      	ldr	r3, [sp, #16]
 800d72a:	eba0 000a 	sub.w	r0, r0, sl
 800d72e:	2240      	movs	r2, #64	; 0x40
 800d730:	4082      	lsls	r2, r0
 800d732:	4313      	orrs	r3, r2
 800d734:	3401      	adds	r4, #1
 800d736:	9304      	str	r3, [sp, #16]
 800d738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73c:	4825      	ldr	r0, [pc, #148]	; (800d7d4 <_svfiprintf_r+0x1ec>)
 800d73e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d742:	2206      	movs	r2, #6
 800d744:	f7f2 fde4 	bl	8000310 <memchr>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d038      	beq.n	800d7be <_svfiprintf_r+0x1d6>
 800d74c:	4b22      	ldr	r3, [pc, #136]	; (800d7d8 <_svfiprintf_r+0x1f0>)
 800d74e:	bb1b      	cbnz	r3, 800d798 <_svfiprintf_r+0x1b0>
 800d750:	9b03      	ldr	r3, [sp, #12]
 800d752:	3307      	adds	r3, #7
 800d754:	f023 0307 	bic.w	r3, r3, #7
 800d758:	3308      	adds	r3, #8
 800d75a:	9303      	str	r3, [sp, #12]
 800d75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d75e:	4433      	add	r3, r6
 800d760:	9309      	str	r3, [sp, #36]	; 0x24
 800d762:	e768      	b.n	800d636 <_svfiprintf_r+0x4e>
 800d764:	fb0c 3202 	mla	r2, ip, r2, r3
 800d768:	460c      	mov	r4, r1
 800d76a:	2001      	movs	r0, #1
 800d76c:	e7a6      	b.n	800d6bc <_svfiprintf_r+0xd4>
 800d76e:	2300      	movs	r3, #0
 800d770:	3401      	adds	r4, #1
 800d772:	9305      	str	r3, [sp, #20]
 800d774:	4619      	mov	r1, r3
 800d776:	f04f 0c0a 	mov.w	ip, #10
 800d77a:	4620      	mov	r0, r4
 800d77c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d780:	3a30      	subs	r2, #48	; 0x30
 800d782:	2a09      	cmp	r2, #9
 800d784:	d903      	bls.n	800d78e <_svfiprintf_r+0x1a6>
 800d786:	2b00      	cmp	r3, #0
 800d788:	d0c6      	beq.n	800d718 <_svfiprintf_r+0x130>
 800d78a:	9105      	str	r1, [sp, #20]
 800d78c:	e7c4      	b.n	800d718 <_svfiprintf_r+0x130>
 800d78e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d792:	4604      	mov	r4, r0
 800d794:	2301      	movs	r3, #1
 800d796:	e7f0      	b.n	800d77a <_svfiprintf_r+0x192>
 800d798:	ab03      	add	r3, sp, #12
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	462a      	mov	r2, r5
 800d79e:	4b0f      	ldr	r3, [pc, #60]	; (800d7dc <_svfiprintf_r+0x1f4>)
 800d7a0:	a904      	add	r1, sp, #16
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f3af 8000 	nop.w
 800d7a8:	1c42      	adds	r2, r0, #1
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	d1d6      	bne.n	800d75c <_svfiprintf_r+0x174>
 800d7ae:	89ab      	ldrh	r3, [r5, #12]
 800d7b0:	065b      	lsls	r3, r3, #25
 800d7b2:	f53f af2d 	bmi.w	800d610 <_svfiprintf_r+0x28>
 800d7b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7b8:	b01d      	add	sp, #116	; 0x74
 800d7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7be:	ab03      	add	r3, sp, #12
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <_svfiprintf_r+0x1f4>)
 800d7c6:	a904      	add	r1, sp, #16
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f000 f879 	bl	800d8c0 <_printf_i>
 800d7ce:	e7eb      	b.n	800d7a8 <_svfiprintf_r+0x1c0>
 800d7d0:	0800dc84 	.word	0x0800dc84
 800d7d4:	0800dc8e 	.word	0x0800dc8e
 800d7d8:	00000000 	.word	0x00000000
 800d7dc:	0800d535 	.word	0x0800d535
 800d7e0:	0800dc8a 	.word	0x0800dc8a

0800d7e4 <_printf_common>:
 800d7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e8:	4616      	mov	r6, r2
 800d7ea:	4699      	mov	r9, r3
 800d7ec:	688a      	ldr	r2, [r1, #8]
 800d7ee:	690b      	ldr	r3, [r1, #16]
 800d7f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	bfb8      	it	lt
 800d7f8:	4613      	movlt	r3, r2
 800d7fa:	6033      	str	r3, [r6, #0]
 800d7fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d800:	4607      	mov	r7, r0
 800d802:	460c      	mov	r4, r1
 800d804:	b10a      	cbz	r2, 800d80a <_printf_common+0x26>
 800d806:	3301      	adds	r3, #1
 800d808:	6033      	str	r3, [r6, #0]
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	0699      	lsls	r1, r3, #26
 800d80e:	bf42      	ittt	mi
 800d810:	6833      	ldrmi	r3, [r6, #0]
 800d812:	3302      	addmi	r3, #2
 800d814:	6033      	strmi	r3, [r6, #0]
 800d816:	6825      	ldr	r5, [r4, #0]
 800d818:	f015 0506 	ands.w	r5, r5, #6
 800d81c:	d106      	bne.n	800d82c <_printf_common+0x48>
 800d81e:	f104 0a19 	add.w	sl, r4, #25
 800d822:	68e3      	ldr	r3, [r4, #12]
 800d824:	6832      	ldr	r2, [r6, #0]
 800d826:	1a9b      	subs	r3, r3, r2
 800d828:	42ab      	cmp	r3, r5
 800d82a:	dc26      	bgt.n	800d87a <_printf_common+0x96>
 800d82c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d830:	1e13      	subs	r3, r2, #0
 800d832:	6822      	ldr	r2, [r4, #0]
 800d834:	bf18      	it	ne
 800d836:	2301      	movne	r3, #1
 800d838:	0692      	lsls	r2, r2, #26
 800d83a:	d42b      	bmi.n	800d894 <_printf_common+0xb0>
 800d83c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d840:	4649      	mov	r1, r9
 800d842:	4638      	mov	r0, r7
 800d844:	47c0      	blx	r8
 800d846:	3001      	adds	r0, #1
 800d848:	d01e      	beq.n	800d888 <_printf_common+0xa4>
 800d84a:	6823      	ldr	r3, [r4, #0]
 800d84c:	6922      	ldr	r2, [r4, #16]
 800d84e:	f003 0306 	and.w	r3, r3, #6
 800d852:	2b04      	cmp	r3, #4
 800d854:	bf02      	ittt	eq
 800d856:	68e5      	ldreq	r5, [r4, #12]
 800d858:	6833      	ldreq	r3, [r6, #0]
 800d85a:	1aed      	subeq	r5, r5, r3
 800d85c:	68a3      	ldr	r3, [r4, #8]
 800d85e:	bf0c      	ite	eq
 800d860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d864:	2500      	movne	r5, #0
 800d866:	4293      	cmp	r3, r2
 800d868:	bfc4      	itt	gt
 800d86a:	1a9b      	subgt	r3, r3, r2
 800d86c:	18ed      	addgt	r5, r5, r3
 800d86e:	2600      	movs	r6, #0
 800d870:	341a      	adds	r4, #26
 800d872:	42b5      	cmp	r5, r6
 800d874:	d11a      	bne.n	800d8ac <_printf_common+0xc8>
 800d876:	2000      	movs	r0, #0
 800d878:	e008      	b.n	800d88c <_printf_common+0xa8>
 800d87a:	2301      	movs	r3, #1
 800d87c:	4652      	mov	r2, sl
 800d87e:	4649      	mov	r1, r9
 800d880:	4638      	mov	r0, r7
 800d882:	47c0      	blx	r8
 800d884:	3001      	adds	r0, #1
 800d886:	d103      	bne.n	800d890 <_printf_common+0xac>
 800d888:	f04f 30ff 	mov.w	r0, #4294967295
 800d88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d890:	3501      	adds	r5, #1
 800d892:	e7c6      	b.n	800d822 <_printf_common+0x3e>
 800d894:	18e1      	adds	r1, r4, r3
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	2030      	movs	r0, #48	; 0x30
 800d89a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d89e:	4422      	add	r2, r4
 800d8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8a8:	3302      	adds	r3, #2
 800d8aa:	e7c7      	b.n	800d83c <_printf_common+0x58>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	4622      	mov	r2, r4
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	4638      	mov	r0, r7
 800d8b4:	47c0      	blx	r8
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	d0e6      	beq.n	800d888 <_printf_common+0xa4>
 800d8ba:	3601      	adds	r6, #1
 800d8bc:	e7d9      	b.n	800d872 <_printf_common+0x8e>
	...

0800d8c0 <_printf_i>:
 800d8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c4:	7e0f      	ldrb	r7, [r1, #24]
 800d8c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8c8:	2f78      	cmp	r7, #120	; 0x78
 800d8ca:	4691      	mov	r9, r2
 800d8cc:	4680      	mov	r8, r0
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	469a      	mov	sl, r3
 800d8d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8d6:	d807      	bhi.n	800d8e8 <_printf_i+0x28>
 800d8d8:	2f62      	cmp	r7, #98	; 0x62
 800d8da:	d80a      	bhi.n	800d8f2 <_printf_i+0x32>
 800d8dc:	2f00      	cmp	r7, #0
 800d8de:	f000 80d4 	beq.w	800da8a <_printf_i+0x1ca>
 800d8e2:	2f58      	cmp	r7, #88	; 0x58
 800d8e4:	f000 80c0 	beq.w	800da68 <_printf_i+0x1a8>
 800d8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8f0:	e03a      	b.n	800d968 <_printf_i+0xa8>
 800d8f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8f6:	2b15      	cmp	r3, #21
 800d8f8:	d8f6      	bhi.n	800d8e8 <_printf_i+0x28>
 800d8fa:	a101      	add	r1, pc, #4	; (adr r1, 800d900 <_printf_i+0x40>)
 800d8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d900:	0800d959 	.word	0x0800d959
 800d904:	0800d96d 	.word	0x0800d96d
 800d908:	0800d8e9 	.word	0x0800d8e9
 800d90c:	0800d8e9 	.word	0x0800d8e9
 800d910:	0800d8e9 	.word	0x0800d8e9
 800d914:	0800d8e9 	.word	0x0800d8e9
 800d918:	0800d96d 	.word	0x0800d96d
 800d91c:	0800d8e9 	.word	0x0800d8e9
 800d920:	0800d8e9 	.word	0x0800d8e9
 800d924:	0800d8e9 	.word	0x0800d8e9
 800d928:	0800d8e9 	.word	0x0800d8e9
 800d92c:	0800da71 	.word	0x0800da71
 800d930:	0800d999 	.word	0x0800d999
 800d934:	0800da2b 	.word	0x0800da2b
 800d938:	0800d8e9 	.word	0x0800d8e9
 800d93c:	0800d8e9 	.word	0x0800d8e9
 800d940:	0800da93 	.word	0x0800da93
 800d944:	0800d8e9 	.word	0x0800d8e9
 800d948:	0800d999 	.word	0x0800d999
 800d94c:	0800d8e9 	.word	0x0800d8e9
 800d950:	0800d8e9 	.word	0x0800d8e9
 800d954:	0800da33 	.word	0x0800da33
 800d958:	682b      	ldr	r3, [r5, #0]
 800d95a:	1d1a      	adds	r2, r3, #4
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	602a      	str	r2, [r5, #0]
 800d960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d968:	2301      	movs	r3, #1
 800d96a:	e09f      	b.n	800daac <_printf_i+0x1ec>
 800d96c:	6820      	ldr	r0, [r4, #0]
 800d96e:	682b      	ldr	r3, [r5, #0]
 800d970:	0607      	lsls	r7, r0, #24
 800d972:	f103 0104 	add.w	r1, r3, #4
 800d976:	6029      	str	r1, [r5, #0]
 800d978:	d501      	bpl.n	800d97e <_printf_i+0xbe>
 800d97a:	681e      	ldr	r6, [r3, #0]
 800d97c:	e003      	b.n	800d986 <_printf_i+0xc6>
 800d97e:	0646      	lsls	r6, r0, #25
 800d980:	d5fb      	bpl.n	800d97a <_printf_i+0xba>
 800d982:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d986:	2e00      	cmp	r6, #0
 800d988:	da03      	bge.n	800d992 <_printf_i+0xd2>
 800d98a:	232d      	movs	r3, #45	; 0x2d
 800d98c:	4276      	negs	r6, r6
 800d98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d992:	485a      	ldr	r0, [pc, #360]	; (800dafc <_printf_i+0x23c>)
 800d994:	230a      	movs	r3, #10
 800d996:	e012      	b.n	800d9be <_printf_i+0xfe>
 800d998:	682b      	ldr	r3, [r5, #0]
 800d99a:	6820      	ldr	r0, [r4, #0]
 800d99c:	1d19      	adds	r1, r3, #4
 800d99e:	6029      	str	r1, [r5, #0]
 800d9a0:	0605      	lsls	r5, r0, #24
 800d9a2:	d501      	bpl.n	800d9a8 <_printf_i+0xe8>
 800d9a4:	681e      	ldr	r6, [r3, #0]
 800d9a6:	e002      	b.n	800d9ae <_printf_i+0xee>
 800d9a8:	0641      	lsls	r1, r0, #25
 800d9aa:	d5fb      	bpl.n	800d9a4 <_printf_i+0xe4>
 800d9ac:	881e      	ldrh	r6, [r3, #0]
 800d9ae:	4853      	ldr	r0, [pc, #332]	; (800dafc <_printf_i+0x23c>)
 800d9b0:	2f6f      	cmp	r7, #111	; 0x6f
 800d9b2:	bf0c      	ite	eq
 800d9b4:	2308      	moveq	r3, #8
 800d9b6:	230a      	movne	r3, #10
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9be:	6865      	ldr	r5, [r4, #4]
 800d9c0:	60a5      	str	r5, [r4, #8]
 800d9c2:	2d00      	cmp	r5, #0
 800d9c4:	bfa2      	ittt	ge
 800d9c6:	6821      	ldrge	r1, [r4, #0]
 800d9c8:	f021 0104 	bicge.w	r1, r1, #4
 800d9cc:	6021      	strge	r1, [r4, #0]
 800d9ce:	b90e      	cbnz	r6, 800d9d4 <_printf_i+0x114>
 800d9d0:	2d00      	cmp	r5, #0
 800d9d2:	d04b      	beq.n	800da6c <_printf_i+0x1ac>
 800d9d4:	4615      	mov	r5, r2
 800d9d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9da:	fb03 6711 	mls	r7, r3, r1, r6
 800d9de:	5dc7      	ldrb	r7, [r0, r7]
 800d9e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9e4:	4637      	mov	r7, r6
 800d9e6:	42bb      	cmp	r3, r7
 800d9e8:	460e      	mov	r6, r1
 800d9ea:	d9f4      	bls.n	800d9d6 <_printf_i+0x116>
 800d9ec:	2b08      	cmp	r3, #8
 800d9ee:	d10b      	bne.n	800da08 <_printf_i+0x148>
 800d9f0:	6823      	ldr	r3, [r4, #0]
 800d9f2:	07de      	lsls	r6, r3, #31
 800d9f4:	d508      	bpl.n	800da08 <_printf_i+0x148>
 800d9f6:	6923      	ldr	r3, [r4, #16]
 800d9f8:	6861      	ldr	r1, [r4, #4]
 800d9fa:	4299      	cmp	r1, r3
 800d9fc:	bfde      	ittt	le
 800d9fe:	2330      	movle	r3, #48	; 0x30
 800da00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da08:	1b52      	subs	r2, r2, r5
 800da0a:	6122      	str	r2, [r4, #16]
 800da0c:	f8cd a000 	str.w	sl, [sp]
 800da10:	464b      	mov	r3, r9
 800da12:	aa03      	add	r2, sp, #12
 800da14:	4621      	mov	r1, r4
 800da16:	4640      	mov	r0, r8
 800da18:	f7ff fee4 	bl	800d7e4 <_printf_common>
 800da1c:	3001      	adds	r0, #1
 800da1e:	d14a      	bne.n	800dab6 <_printf_i+0x1f6>
 800da20:	f04f 30ff 	mov.w	r0, #4294967295
 800da24:	b004      	add	sp, #16
 800da26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	f043 0320 	orr.w	r3, r3, #32
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	4833      	ldr	r0, [pc, #204]	; (800db00 <_printf_i+0x240>)
 800da34:	2778      	movs	r7, #120	; 0x78
 800da36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	6829      	ldr	r1, [r5, #0]
 800da3e:	061f      	lsls	r7, r3, #24
 800da40:	f851 6b04 	ldr.w	r6, [r1], #4
 800da44:	d402      	bmi.n	800da4c <_printf_i+0x18c>
 800da46:	065f      	lsls	r7, r3, #25
 800da48:	bf48      	it	mi
 800da4a:	b2b6      	uxthmi	r6, r6
 800da4c:	07df      	lsls	r7, r3, #31
 800da4e:	bf48      	it	mi
 800da50:	f043 0320 	orrmi.w	r3, r3, #32
 800da54:	6029      	str	r1, [r5, #0]
 800da56:	bf48      	it	mi
 800da58:	6023      	strmi	r3, [r4, #0]
 800da5a:	b91e      	cbnz	r6, 800da64 <_printf_i+0x1a4>
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	f023 0320 	bic.w	r3, r3, #32
 800da62:	6023      	str	r3, [r4, #0]
 800da64:	2310      	movs	r3, #16
 800da66:	e7a7      	b.n	800d9b8 <_printf_i+0xf8>
 800da68:	4824      	ldr	r0, [pc, #144]	; (800dafc <_printf_i+0x23c>)
 800da6a:	e7e4      	b.n	800da36 <_printf_i+0x176>
 800da6c:	4615      	mov	r5, r2
 800da6e:	e7bd      	b.n	800d9ec <_printf_i+0x12c>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	6826      	ldr	r6, [r4, #0]
 800da74:	6961      	ldr	r1, [r4, #20]
 800da76:	1d18      	adds	r0, r3, #4
 800da78:	6028      	str	r0, [r5, #0]
 800da7a:	0635      	lsls	r5, r6, #24
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	d501      	bpl.n	800da84 <_printf_i+0x1c4>
 800da80:	6019      	str	r1, [r3, #0]
 800da82:	e002      	b.n	800da8a <_printf_i+0x1ca>
 800da84:	0670      	lsls	r0, r6, #25
 800da86:	d5fb      	bpl.n	800da80 <_printf_i+0x1c0>
 800da88:	8019      	strh	r1, [r3, #0]
 800da8a:	2300      	movs	r3, #0
 800da8c:	6123      	str	r3, [r4, #16]
 800da8e:	4615      	mov	r5, r2
 800da90:	e7bc      	b.n	800da0c <_printf_i+0x14c>
 800da92:	682b      	ldr	r3, [r5, #0]
 800da94:	1d1a      	adds	r2, r3, #4
 800da96:	602a      	str	r2, [r5, #0]
 800da98:	681d      	ldr	r5, [r3, #0]
 800da9a:	6862      	ldr	r2, [r4, #4]
 800da9c:	2100      	movs	r1, #0
 800da9e:	4628      	mov	r0, r5
 800daa0:	f7f2 fc36 	bl	8000310 <memchr>
 800daa4:	b108      	cbz	r0, 800daaa <_printf_i+0x1ea>
 800daa6:	1b40      	subs	r0, r0, r5
 800daa8:	6060      	str	r0, [r4, #4]
 800daaa:	6863      	ldr	r3, [r4, #4]
 800daac:	6123      	str	r3, [r4, #16]
 800daae:	2300      	movs	r3, #0
 800dab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab4:	e7aa      	b.n	800da0c <_printf_i+0x14c>
 800dab6:	6923      	ldr	r3, [r4, #16]
 800dab8:	462a      	mov	r2, r5
 800daba:	4649      	mov	r1, r9
 800dabc:	4640      	mov	r0, r8
 800dabe:	47d0      	blx	sl
 800dac0:	3001      	adds	r0, #1
 800dac2:	d0ad      	beq.n	800da20 <_printf_i+0x160>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	079b      	lsls	r3, r3, #30
 800dac8:	d413      	bmi.n	800daf2 <_printf_i+0x232>
 800daca:	68e0      	ldr	r0, [r4, #12]
 800dacc:	9b03      	ldr	r3, [sp, #12]
 800dace:	4298      	cmp	r0, r3
 800dad0:	bfb8      	it	lt
 800dad2:	4618      	movlt	r0, r3
 800dad4:	e7a6      	b.n	800da24 <_printf_i+0x164>
 800dad6:	2301      	movs	r3, #1
 800dad8:	4632      	mov	r2, r6
 800dada:	4649      	mov	r1, r9
 800dadc:	4640      	mov	r0, r8
 800dade:	47d0      	blx	sl
 800dae0:	3001      	adds	r0, #1
 800dae2:	d09d      	beq.n	800da20 <_printf_i+0x160>
 800dae4:	3501      	adds	r5, #1
 800dae6:	68e3      	ldr	r3, [r4, #12]
 800dae8:	9903      	ldr	r1, [sp, #12]
 800daea:	1a5b      	subs	r3, r3, r1
 800daec:	42ab      	cmp	r3, r5
 800daee:	dcf2      	bgt.n	800dad6 <_printf_i+0x216>
 800daf0:	e7eb      	b.n	800daca <_printf_i+0x20a>
 800daf2:	2500      	movs	r5, #0
 800daf4:	f104 0619 	add.w	r6, r4, #25
 800daf8:	e7f5      	b.n	800dae6 <_printf_i+0x226>
 800dafa:	bf00      	nop
 800dafc:	0800dc95 	.word	0x0800dc95
 800db00:	0800dca6 	.word	0x0800dca6

0800db04 <memmove>:
 800db04:	4288      	cmp	r0, r1
 800db06:	b510      	push	{r4, lr}
 800db08:	eb01 0402 	add.w	r4, r1, r2
 800db0c:	d902      	bls.n	800db14 <memmove+0x10>
 800db0e:	4284      	cmp	r4, r0
 800db10:	4623      	mov	r3, r4
 800db12:	d807      	bhi.n	800db24 <memmove+0x20>
 800db14:	1e43      	subs	r3, r0, #1
 800db16:	42a1      	cmp	r1, r4
 800db18:	d008      	beq.n	800db2c <memmove+0x28>
 800db1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db22:	e7f8      	b.n	800db16 <memmove+0x12>
 800db24:	4402      	add	r2, r0
 800db26:	4601      	mov	r1, r0
 800db28:	428a      	cmp	r2, r1
 800db2a:	d100      	bne.n	800db2e <memmove+0x2a>
 800db2c:	bd10      	pop	{r4, pc}
 800db2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db36:	e7f7      	b.n	800db28 <memmove+0x24>

0800db38 <_sbrk_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	4d06      	ldr	r5, [pc, #24]	; (800db54 <_sbrk_r+0x1c>)
 800db3c:	2300      	movs	r3, #0
 800db3e:	4604      	mov	r4, r0
 800db40:	4608      	mov	r0, r1
 800db42:	602b      	str	r3, [r5, #0]
 800db44:	f7f4 f96a 	bl	8001e1c <_sbrk>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	d102      	bne.n	800db52 <_sbrk_r+0x1a>
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	b103      	cbz	r3, 800db52 <_sbrk_r+0x1a>
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	bd38      	pop	{r3, r4, r5, pc}
 800db54:	24000998 	.word	0x24000998

0800db58 <_realloc_r>:
 800db58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db5c:	4680      	mov	r8, r0
 800db5e:	4614      	mov	r4, r2
 800db60:	460e      	mov	r6, r1
 800db62:	b921      	cbnz	r1, 800db6e <_realloc_r+0x16>
 800db64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db68:	4611      	mov	r1, r2
 800db6a:	f7ff bc57 	b.w	800d41c <_malloc_r>
 800db6e:	b92a      	cbnz	r2, 800db7c <_realloc_r+0x24>
 800db70:	f7ff fbe8 	bl	800d344 <_free_r>
 800db74:	4625      	mov	r5, r4
 800db76:	4628      	mov	r0, r5
 800db78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db7c:	f000 f81b 	bl	800dbb6 <_malloc_usable_size_r>
 800db80:	4284      	cmp	r4, r0
 800db82:	4607      	mov	r7, r0
 800db84:	d802      	bhi.n	800db8c <_realloc_r+0x34>
 800db86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db8a:	d812      	bhi.n	800dbb2 <_realloc_r+0x5a>
 800db8c:	4621      	mov	r1, r4
 800db8e:	4640      	mov	r0, r8
 800db90:	f7ff fc44 	bl	800d41c <_malloc_r>
 800db94:	4605      	mov	r5, r0
 800db96:	2800      	cmp	r0, #0
 800db98:	d0ed      	beq.n	800db76 <_realloc_r+0x1e>
 800db9a:	42bc      	cmp	r4, r7
 800db9c:	4622      	mov	r2, r4
 800db9e:	4631      	mov	r1, r6
 800dba0:	bf28      	it	cs
 800dba2:	463a      	movcs	r2, r7
 800dba4:	f7ff fbc0 	bl	800d328 <memcpy>
 800dba8:	4631      	mov	r1, r6
 800dbaa:	4640      	mov	r0, r8
 800dbac:	f7ff fbca 	bl	800d344 <_free_r>
 800dbb0:	e7e1      	b.n	800db76 <_realloc_r+0x1e>
 800dbb2:	4635      	mov	r5, r6
 800dbb4:	e7df      	b.n	800db76 <_realloc_r+0x1e>

0800dbb6 <_malloc_usable_size_r>:
 800dbb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbba:	1f18      	subs	r0, r3, #4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	bfbc      	itt	lt
 800dbc0:	580b      	ldrlt	r3, [r1, r0]
 800dbc2:	18c0      	addlt	r0, r0, r3
 800dbc4:	4770      	bx	lr
	...

0800dbc8 <_init>:
 800dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbca:	bf00      	nop
 800dbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbce:	bc08      	pop	{r3}
 800dbd0:	469e      	mov	lr, r3
 800dbd2:	4770      	bx	lr

0800dbd4 <_fini>:
 800dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd6:	bf00      	nop
 800dbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbda:	bc08      	pop	{r3}
 800dbdc:	469e      	mov	lr, r3
 800dbde:	4770      	bx	lr
