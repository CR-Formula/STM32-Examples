
CR-28.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8f0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800dbc0  0800dbc0  0001dbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc98  0800dc98  0001dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dca0  0800dca0  0001dca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dca4  0800dca4  0001dca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800dca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000944  24000064  0800dd0c  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009a8  0800dd0c  000209a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ed86  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000030cd  00000000  00000000  0003ee5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017a0  00000000  00000000  00041f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001276  00000000  00000000  000436c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035f5f  00000000  00000000  0004493e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f6a2  00000000  00000000  0007a89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001659d3  00000000  00000000  00099f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006d04  00000000  00000000  001ff914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00206618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dba8 	.word	0x0800dba8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800dba8 	.word	0x0800dba8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f001 fc7c 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f896 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 fd82 	bl	80011c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006bc:	f000 fd60 	bl	8001180 <MX_DMA_Init>
  MX_ADC1_Init();
 80006c0:	f000 f900 	bl	80008c4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80006c4:	f000 fc78 	bl	8000fb8 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 80006c8:	f000 fa6c 	bl	8000ba4 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 80006cc:	f000 face 	bl	8000c6c <MX_FDCAN3_Init>
  MX_I2C1_Init();
 80006d0:	f000 fb30 	bl	8000d34 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006d4:	f000 fb6e 	bl	8000db4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 fcba 	bl	8001050 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006dc:	f000 fd04 	bl	80010e8 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 80006e0:	f000 fbbe 	bl	8000e60 <MX_SPI3_Init>
  MX_SPI4_Init();
 80006e4:	f000 fc12 	bl	8000f0c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  /* Start ADC 1 with DMA Transfers while checking for errors */
  if (HAL_ADC_Start_DMA(&hadc1, (uint16_t)adcBuffer, ADC_BUFFER_SIZE) != HAL_OK) {
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <main+0x110>)
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	4619      	mov	r1, r3
 80006f0:	4833      	ldr	r0, [pc, #204]	; (80007c0 <main+0x114>)
 80006f2:	f002 f9c1 	bl	8002a78 <HAL_ADC_Start_DMA>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <main+0x54>
	  Error_Handler();
 80006fc:	f000 fe50 	bl	80013a0 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // TODO: Add CAN data read in

	  if (adcConvFlag == 1) {
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <main+0x118>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d146      	bne.n	8000796 <main+0xea>
		  // Update Variables
		  telemetry.FRPot = adcBuffer[0];
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <main+0x110>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	ee07 3a90 	vmov	s15, r3
 8000710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000714:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <main+0x11c>)
 8000716:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		  telemetry.FLPot = adcBuffer[1];
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <main+0x110>)
 800071c:	885b      	ldrh	r3, [r3, #2]
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000726:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <main+0x11c>)
 8000728:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		  telemetry.RRPot = adcBuffer[2];
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <main+0x110>)
 800072e:	889b      	ldrh	r3, [r3, #4]
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <main+0x11c>)
 800073a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		  telemetry.RLPot = adcBuffer[3];
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <main+0x110>)
 8000740:	88db      	ldrh	r3, [r3, #6]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <main+0x11c>)
 800074c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		  // TODO: Convert ADC values to sensor values
		  // Need sensor range

		  telemetry.BrakeFront = adcBuffer[4];
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <main+0x110>)
 8000752:	891b      	ldrh	r3, [r3, #8]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <main+0x11c>)
 800075e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		  telemetry.BrakeRear = adcBuffer[5];
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <main+0x110>)
 8000764:	895b      	ldrh	r3, [r3, #10]
 8000766:	ee07 3a90 	vmov	s15, r3
 800076a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <main+0x11c>)
 8000770:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

		  // TODO: Convert ADC values to sensor values
		  // Need sensor range

		  sprintf(debug, "%d - %d", adcBuffer[4], adcBuffer[5]);
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <main+0x110>)
 8000776:	891b      	ldrh	r3, [r3, #8]
 8000778:	461a      	mov	r2, r3
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <main+0x110>)
 800077c:	895b      	ldrh	r3, [r3, #10]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <main+0x120>)
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <main+0x124>)
 8000782:	f00c fd6d 	bl	800d260 <siprintf>
		  HAL_UART_Transmit_IT(&huart3, debug, sizeof(debug));
 8000786:	2240      	movs	r2, #64	; 0x40
 8000788:	4911      	ldr	r1, [pc, #68]	; (80007d0 <main+0x124>)
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <main+0x128>)
 800078c:	f00a fd70 	bl	800b270 <HAL_UART_Transmit_IT>

		  adcConvFlag = 0;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <main+0x118>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
	  }

	  sprintf(message, "rpm.txt=\"%d\"", telemetry.RPM);
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <main+0x11c>)
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a0:	ec53 2b17 	vmov	r2, r3, d7
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <main+0x12c>)
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <main+0x130>)
 80007a8:	f00c fd5a 	bl	800d260 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, message, sizeof(message));
 80007ac:	2240      	movs	r2, #64	; 0x40
 80007ae:	490b      	ldr	r1, [pc, #44]	; (80007dc <main+0x130>)
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <main+0x134>)
 80007b2:	f00a fd5d 	bl	800b270 <HAL_UART_Transmit_IT>
	  HMICMD();
 80007b6:	f000 fdd9 	bl	800136c <HMICMD>
  {
 80007ba:	e7a1      	b.n	8000700 <main+0x54>
 80007bc:	24000650 	.word	0x24000650
 80007c0:	24000080 	.word	0x24000080
 80007c4:	24000750 	.word	0x24000750
 80007c8:	240007d4 	.word	0x240007d4
 80007cc:	0800dbc0 	.word	0x0800dbc0
 80007d0:	24000754 	.word	0x24000754
 80007d4:	240005bc 	.word	0x240005bc
 80007d8:	0800dbc8 	.word	0x0800dbc8
 80007dc:	24000794 	.word	0x24000794
 80007e0:	24000494 	.word	0x24000494

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	224c      	movs	r2, #76	; 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00c fd54 	bl	800d2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00c fd4e 	bl	800d2a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000804:	2004      	movs	r0, #4
 8000806:	f006 fffd 	bl	8007804 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <SystemClock_Config+0xdc>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000816:	4a2a      	ldr	r2, [pc, #168]	; (80008c0 <SystemClock_Config+0xdc>)
 8000818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <SystemClock_Config+0xdc>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800082a:	bf00      	nop
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <SystemClock_Config+0xdc>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000838:	d1f8      	bne.n	800082c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083a:	2302      	movs	r3, #2
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083e:	2301      	movs	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084a:	2300      	movs	r3, #0
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084e:	2304      	movs	r3, #4
 8000850:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000852:	230c      	movs	r3, #12
 8000854:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800085a:	2303      	movs	r3, #3
 800085c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000862:	230c      	movs	r3, #12
 8000864:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000866:	2300      	movs	r3, #0
 8000868:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4618      	mov	r0, r3
 8000874:	f007 f820 	bl	80078b8 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087e:	f000 fd8f 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	233f      	movs	r3, #63	; 0x3f
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2303      	movs	r3, #3
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800088e:	2308      	movs	r3, #8
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f007 fbdf 	bl	800806c <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008b4:	f000 fd74 	bl	80013a0 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	3770      	adds	r7, #112	; 0x70
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	58024800 	.word	0x58024800

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2224      	movs	r2, #36	; 0x24
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f00c fcdf 	bl	800d2a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008e2:	4b9f      	ldr	r3, [pc, #636]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008e4:	4a9f      	ldr	r2, [pc, #636]	; (8000b64 <MX_ADC1_Init+0x2a0>)
 80008e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008e8:	4b9d      	ldr	r3, [pc, #628]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008ee:	4b9c      	ldr	r3, [pc, #624]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008f4:	4b9a      	ldr	r3, [pc, #616]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fa:	4b99      	ldr	r3, [pc, #612]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80008fc:	2204      	movs	r2, #4
 80008fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000900:	4b97      	ldr	r3, [pc, #604]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000902:	2200      	movs	r2, #0
 8000904:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000906:	4b96      	ldr	r3, [pc, #600]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000908:	2201      	movs	r2, #1
 800090a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 16;
 800090c:	4b94      	ldr	r3, [pc, #592]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800090e:	2210      	movs	r2, #16
 8000910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000912:	4b93      	ldr	r3, [pc, #588]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091a:	4b91      	ldr	r3, [pc, #580]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000920:	4b8f      	ldr	r3, [pc, #572]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000922:	2200      	movs	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000926:	4b8e      	ldr	r3, [pc, #568]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000928:	2203      	movs	r2, #3
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092c:	4b8c      	ldr	r3, [pc, #560]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800092e:	2200      	movs	r2, #0
 8000930:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000932:	4b8b      	ldr	r3, [pc, #556]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000934:	2200      	movs	r2, #0
 8000936:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000938:	4b89      	ldr	r3, [pc, #548]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000940:	4887      	ldr	r0, [pc, #540]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000942:	f001 fe91 	bl	8002668 <HAL_ADC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800094c:	f000 fd28 	bl	80013a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4881      	ldr	r0, [pc, #516]	; (8000b60 <MX_ADC1_Init+0x29c>)
 800095c:	f003 f8da 	bl	8003b14 <HAL_ADCEx_MultiModeConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000966:	f000 fd1b 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800096a:	4b7f      	ldr	r3, [pc, #508]	; (8000b68 <MX_ADC1_Init+0x2a4>)
 800096c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800096e:	2306      	movs	r3, #6
 8000970:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000976:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800097a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800097c:	2304      	movs	r3, #4
 800097e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4874      	ldr	r0, [pc, #464]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000990:	f002 f962 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800099a:	f000 fd01 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800099e:	4b73      	ldr	r3, [pc, #460]	; (8000b6c <MX_ADC1_Init+0x2a8>)
 80009a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009a2:	230c      	movs	r3, #12
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	486d      	ldr	r0, [pc, #436]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80009ac:	f002 f954 	bl	8002c58 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80009b6:	f000 fcf3 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ba:	4b6d      	ldr	r3, [pc, #436]	; (8000b70 <MX_ADC1_Init+0x2ac>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009be:	2312      	movs	r3, #18
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4866      	ldr	r0, [pc, #408]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80009c8:	f002 f946 	bl	8002c58 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80009d2:	f000 fce5 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009d6:	4b67      	ldr	r3, [pc, #412]	; (8000b74 <MX_ADC1_Init+0x2b0>)
 80009d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009da:	2318      	movs	r3, #24
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	485f      	ldr	r0, [pc, #380]	; (8000b60 <MX_ADC1_Init+0x29c>)
 80009e4:	f002 f938 	bl	8002c58 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 80009ee:	f000 fcd7 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009f2:	4b61      	ldr	r3, [pc, #388]	; (8000b78 <MX_ADC1_Init+0x2b4>)
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4857      	ldr	r0, [pc, #348]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a02:	f002 f929 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8000a0c:	f000 fcc8 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a10:	4b5a      	ldr	r3, [pc, #360]	; (8000b7c <MX_ADC1_Init+0x2b8>)
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a14:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000a18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4850      	ldr	r0, [pc, #320]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a20:	f002 f91a 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000a2a:	f000 fcb9 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a2e:	4b54      	ldr	r3, [pc, #336]	; (8000b80 <MX_ADC1_Init+0x2bc>)
 8000a30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a32:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4848      	ldr	r0, [pc, #288]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a3e:	f002 f90b 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 8000a48:	f000 fcaa 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a4c:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <MX_ADC1_Init+0x2c0>)
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a50:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000a54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4841      	ldr	r0, [pc, #260]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a5c:	f002 f8fc 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 8000a66:	f000 fc9b 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <MX_ADC1_Init+0x2c4>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a6e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4839      	ldr	r0, [pc, #228]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a7a:	f002 f8ed 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8000a84:	f000 fc8c 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000a88:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <MX_ADC1_Init+0x2c8>)
 8000a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4832      	ldr	r0, [pc, #200]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000a98:	f002 f8de 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8000aa2:	f000 fc7d 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aa6:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <MX_ADC1_Init+0x2cc>)
 8000aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000aaa:	f240 2306 	movw	r3, #518	; 0x206
 8000aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482a      	ldr	r0, [pc, #168]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000ab6:	f002 f8cf 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x200>
  {
    Error_Handler();
 8000ac0:	f000 fc6e 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000ac4:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <MX_ADC1_Init+0x2d0>)
 8000ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000ac8:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000acc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4823      	ldr	r0, [pc, #140]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000ad4:	f002 f8c0 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0x21e>
  {
    Error_Handler();
 8000ade:	f000 fc5f 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_ADC1_Init+0x2d4>)
 8000ae4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000ae6:	f240 2312 	movw	r3, #530	; 0x212
 8000aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	481b      	ldr	r0, [pc, #108]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000af2:	f002 f8b1 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0x23c>
  {
    Error_Handler();
 8000afc:	f000 fc50 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_ADC1_Init+0x2d8>)
 8000b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000b04:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000b08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000b10:	f002 f8a2 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x25a>
  {
    Error_Handler();
 8000b1a:	f000 fc41 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_ADC1_Init+0x2dc>)
 8000b20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000b2e:	f002 f893 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0x278>
  {
    Error_Handler();
 8000b38:	f000 fc32 	bl	80013a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000b3c:	f240 3306 	movw	r3, #774	; 0x306
 8000b40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_ADC1_Init+0x29c>)
 8000b48:	f002 f886 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0x292>
  {
    Error_Handler();
 8000b52:	f000 fc25 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	24000080 	.word	0x24000080
 8000b64:	40022000 	.word	0x40022000
 8000b68:	08600004 	.word	0x08600004
 8000b6c:	0c900008 	.word	0x0c900008
 8000b70:	10c00010 	.word	0x10c00010
 8000b74:	14f00020 	.word	0x14f00020
 8000b78:	1d500080 	.word	0x1d500080
 8000b7c:	21800100 	.word	0x21800100
 8000b80:	25b00200 	.word	0x25b00200
 8000b84:	2a000400 	.word	0x2a000400
 8000b88:	2e300800 	.word	0x2e300800
 8000b8c:	3ac04000 	.word	0x3ac04000
 8000b90:	3ef08000 	.word	0x3ef08000
 8000b94:	43210000 	.word	0x43210000
 8000b98:	47520000 	.word	0x47520000
 8000b9c:	4b840000 	.word	0x4b840000
 8000ba0:	4fb80000 	.word	0x4fb80000

08000ba4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <MX_FDCAN2_Init+0xc4>)
 8000bac:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bce:	2210      	movs	r2, #16
 8000bd0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_FDCAN2_Init+0xc0>)
 8000c52:	f005 ff89 	bl	8006b68 <HAL_FDCAN_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c5c:	f000 fba0 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24000168 	.word	0x24000168
 8000c68:	4000a400 	.word	0x4000a400

08000c6c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c72:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <MX_FDCAN3_Init+0xc4>)
 8000c74:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c96:	2210      	movs	r2, #16
 8000c98:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d14:	2204      	movs	r2, #4
 8000d16:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_FDCAN3_Init+0xc0>)
 8000d1a:	f005 ff25 	bl	8006b68 <HAL_FDCAN_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000d24:	f000 fb3c 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000208 	.word	0x24000208
 8000d30:	4000d400 	.word	0x4000d400

08000d34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <MX_I2C1_Init+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <MX_I2C1_Init+0x7c>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d70:	f006 fc20 	bl	80075b4 <HAL_I2C_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d7a:	f000 fb11 	bl	80013a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d82:	f006 fca7 	bl	80076d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d8c:	f000 fb08 	bl	80013a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_I2C1_Init+0x74>)
 8000d94:	f006 fce9 	bl	800776a <HAL_I2CEx_ConfigDigitalFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 faff 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	240002a8 	.word	0x240002a8
 8000dac:	40005400 	.word	0x40005400
 8000db0:	20303e5d 	.word	0x20303e5d

08000db4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dba:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <MX_SPI1_Init+0xa8>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000de0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000de4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_SPI1_Init+0xa4>)
 8000e44:	f00a f884 	bl	800af50 <HAL_SPI_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e4e:	f000 faa7 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	240002fc 	.word	0x240002fc
 8000e5c:	40013000 	.word	0x40013000

08000e60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e66:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <MX_SPI3_Init+0xa8>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_SPI3_Init+0xa4>)
 8000ef0:	f00a f82e 	bl	800af50 <HAL_SPI_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000efa:	f000 fa51 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24000384 	.word	0x24000384
 8000f08:	40003c00 	.word	0x40003c00

08000f0c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f12:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <MX_SPI4_Init+0xa8>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f3c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_SPI4_Init+0xa4>)
 8000f9c:	f009 ffd8 	bl	800af50 <HAL_SPI_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000fa6:	f000 f9fb 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2400040c 	.word	0x2400040c
 8000fb4:	40013400 	.word	0x40013400

08000fb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <MX_USART1_UART_Init+0x94>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001000:	4811      	ldr	r0, [pc, #68]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8001002:	f00a f8e4 	bl	800b1ce <HAL_UART_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800100c:	f000 f9c8 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8001014:	f00c f85a 	bl	800d0cc <HAL_UARTEx_SetTxFifoThreshold>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800101e:	f000 f9bf 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8001026:	f00c f88f 	bl	800d148 <HAL_UARTEx_SetRxFifoThreshold>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001030:	f000 f9b6 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_USART1_UART_Init+0x90>)
 8001036:	f00c f810 	bl	800d05a <HAL_UARTEx_DisableFifoMode>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001040:	f000 f9ae 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24000494 	.word	0x24000494
 800104c:	40011000 	.word	0x40011000

08001050 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <MX_USART2_UART_Init+0x94>)
 8001058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 800109a:	f00a f898 	bl	800b1ce <HAL_UART_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010a4:	f000 f97c 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 80010ac:	f00c f80e 	bl	800d0cc <HAL_UARTEx_SetTxFifoThreshold>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010b6:	f000 f973 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 80010be:	f00c f843 	bl	800d148 <HAL_UARTEx_SetRxFifoThreshold>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010c8:	f000 f96a 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_USART2_UART_Init+0x90>)
 80010ce:	f00b ffc4 	bl	800d05a <HAL_UARTEx_DisableFifoMode>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010d8:	f000 f962 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24000528 	.word	0x24000528
 80010e4:	40004400 	.word	0x40004400

080010e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <MX_USART3_UART_Init+0x94>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001132:	f00a f84c 	bl	800b1ce <HAL_UART_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800113c:	f000 f930 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001140:	2100      	movs	r1, #0
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001144:	f00b ffc2 	bl	800d0cc <HAL_UARTEx_SetTxFifoThreshold>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800114e:	f000 f927 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001156:	f00b fff7 	bl	800d148 <HAL_UARTEx_SetRxFifoThreshold>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001160:	f000 f91e 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001166:	f00b ff78 	bl	800d05a <HAL_UARTEx_DisableFifoMode>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001170:	f000 f916 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	240005bc 	.word	0x240005bc
 800117c:	40004800 	.word	0x40004800

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MX_DMA_Init+0x3c>)
 8001188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <MX_DMA_Init+0x3c>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_DMA_Init+0x3c>)
 8001198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	200b      	movs	r0, #11
 80011aa:	f002 fe70 	bl	8003e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011ae:	200b      	movs	r0, #11
 80011b0:	f002 fe87 	bl	8003ec2 <HAL_NVIC_EnableIRQ>

}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	58024400 	.word	0x58024400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <MX_GPIO_Init+0x178>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	4a56      	ldr	r2, [pc, #344]	; (8001338 <MX_GPIO_Init+0x178>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e6:	4b54      	ldr	r3, [pc, #336]	; (8001338 <MX_GPIO_Init+0x178>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f4:	4b50      	ldr	r3, [pc, #320]	; (8001338 <MX_GPIO_Init+0x178>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <MX_GPIO_Init+0x178>)
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001204:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <MX_GPIO_Init+0x178>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b49      	ldr	r3, [pc, #292]	; (8001338 <MX_GPIO_Init+0x178>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a47      	ldr	r2, [pc, #284]	; (8001338 <MX_GPIO_Init+0x178>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <MX_GPIO_Init+0x178>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b41      	ldr	r3, [pc, #260]	; (8001338 <MX_GPIO_Init+0x178>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a40      	ldr	r2, [pc, #256]	; (8001338 <MX_GPIO_Init+0x178>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <MX_GPIO_Init+0x178>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <MX_GPIO_Init+0x178>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	4a38      	ldr	r2, [pc, #224]	; (8001338 <MX_GPIO_Init+0x178>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <MX_GPIO_Init+0x178>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <MX_GPIO_Init+0x178>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a31      	ldr	r2, [pc, #196]	; (8001338 <MX_GPIO_Init+0x178>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <MX_GPIO_Init+0x178>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <MX_GPIO_Init+0x178>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	4a29      	ldr	r2, [pc, #164]	; (8001338 <MX_GPIO_Init+0x178>)
 8001292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <MX_GPIO_Init+0x178>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRESET_LoRa_GPIO_Port, NRESET_LoRa_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ae:	4823      	ldr	r0, [pc, #140]	; (800133c <MX_GPIO_Init+0x17c>)
 80012b0:	f006 f966 	bl	8007580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ba:	4821      	ldr	r0, [pc, #132]	; (8001340 <MX_GPIO_Init+0x180>)
 80012bc:	f006 f960 	bl	8007580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_PE10_Pin GPIO_PE11_Pin GPIO_PE12_Pin GPIO_PE13_Pin
                           GPIO_PE14_Pin */
  GPIO_InitStruct.Pin = GPIO_PE10_Pin|GPIO_PE11_Pin|GPIO_PE12_Pin|GPIO_PE13_Pin
 80012c0:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80012c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PE14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	481b      	ldr	r0, [pc, #108]	; (8001344 <MX_GPIO_Init+0x184>)
 80012d6:	f005 ffab 	bl	8007230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA_11_Pin PA_12_Pin */
  GPIO_InitStruct.Pin = PA_11_Pin|PA_12_Pin;
 80012da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4816      	ldr	r0, [pc, #88]	; (8001348 <MX_GPIO_Init+0x188>)
 80012f0:	f005 ff9e 	bl	8007230 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRESET_LoRa_Pin */
  GPIO_InitStruct.Pin = NRESET_LoRa_Pin;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRESET_LoRa_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <MX_GPIO_Init+0x17c>)
 800130e:	f005 ff8f 	bl	8007230 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_GPIO_Init+0x180>)
 800132c:	f005 ff80 	bl	8007230 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	58024400 	.word	0x58024400
 800133c:	58020800 	.word	0x58020800
 8001340:	58021800 	.word	0x58021800
 8001344:	58021000 	.word	0x58021000
 8001348:	58020000 	.word	0x58020000

0800134c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	adcConvFlag = 1;
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	24000750 	.word	0x24000750

0800136c <HMICMD>:

void HMICMD() {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	e007      	b.n	8001388 <HMICMD+0x1c>
		HAL_UART_Transmit_IT(&huart1, HMIEnd, sizeof(HMIEnd));
 8001378:	2204      	movs	r2, #4
 800137a:	4907      	ldr	r1, [pc, #28]	; (8001398 <HMICMD+0x2c>)
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <HMICMD+0x30>)
 800137e:	f009 ff77 	bl	800b270 <HAL_UART_Transmit_IT>
	for (int i = 0; i < 3; i++) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3301      	adds	r3, #1
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b02      	cmp	r3, #2
 800138c:	ddf4      	ble.n	8001378 <HMICMD+0xc>
	}
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	24000000 	.word	0x24000000
 800139c:	24000494 	.word	0x24000494

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_MspInit+0x30>)
 80013b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b8:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x30>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x30>)
 80013c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	58024400 	.word	0x58024400

080013e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0bc      	sub	sp, #240	; 0xf0
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	22b8      	movs	r2, #184	; 0xb8
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00b ff4d 	bl	800d2a0 <memset>
  if(hadc->Instance==ADC1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <HAL_ADC_MspInit+0x1f0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	f040 80db 	bne.w	80015c8 <HAL_ADC_MspInit+0x1e8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001412:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800141e:	2304      	movs	r3, #4
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001422:	230c      	movs	r3, #12
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001426:	2304      	movs	r3, #4
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800142e:	2302      	movs	r3, #2
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001432:	23c0      	movs	r3, #192	; 0xc0
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001436:	2300      	movs	r3, #0
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800143a:	2300      	movs	r3, #0
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	4618      	mov	r0, r3
 800144a:	f007 f99b 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001454:	f7ff ffa4 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001458:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 800145a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800145e:	4a5d      	ldr	r2, [pc, #372]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001468:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 800146a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	4b57      	ldr	r3, [pc, #348]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a55      	ldr	r2, [pc, #340]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a4e      	ldr	r2, [pc, #312]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b4b      	ldr	r3, [pc, #300]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a3f      	ldr	r2, [pc, #252]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 80014d8:	f043 0320 	orr.w	r3, r3, #32
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <HAL_ADC_MspInit+0x1f4>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = ADC_10B_Pin|ADC_11B_Pin|ADC_4B_Pin|ADC_8B_Pin;
 80014ee:	2333      	movs	r3, #51	; 0x33
 80014f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001504:	4619      	mov	r1, r3
 8001506:	4834      	ldr	r0, [pc, #208]	; (80015d8 <HAL_ADC_MspInit+0x1f8>)
 8001508:	f005 fe92 	bl	8007230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16B_Pin|ADC_17B_Pin|ADC_14B_Pin|ADC_15B_Pin
 800150c:	23ff      	movs	r3, #255	; 0xff
 800150e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |ADC_18B_Pin|ADC_19B_Pin|ADC_3B_Pin|ADC_7B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001522:	4619      	mov	r1, r3
 8001524:	482d      	ldr	r0, [pc, #180]	; (80015dc <HAL_ADC_MspInit+0x1fc>)
 8001526:	f005 fe83 	bl	8007230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_9B_Pin|ADC_5B_Pin;
 800152a:	2303      	movs	r3, #3
 800152c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001530:	2303      	movs	r3, #3
 8001532:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001540:	4619      	mov	r1, r3
 8001542:	4827      	ldr	r0, [pc, #156]	; (80015e0 <HAL_ADC_MspInit+0x200>)
 8001544:	f005 fe74 	bl	8007230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_2B_Pin;
 8001548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800154c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(ADC_2B_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001560:	4619      	mov	r1, r3
 8001562:	4820      	ldr	r0, [pc, #128]	; (80015e4 <HAL_ADC_MspInit+0x204>)
 8001564:	f005 fe64 	bl	8007230 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 800156a:	4a20      	ldr	r2, [pc, #128]	; (80015ec <HAL_ADC_MspInit+0x20c>)
 800156c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 8001570:	2209      	movs	r2, #9
 8001572:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 8001582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001586:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 800158a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 8001592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001596:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 800159a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015ac:	480e      	ldr	r0, [pc, #56]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 80015ae:	f002 fca3 	bl	8003ef8 <HAL_DMA_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_ADC_MspInit+0x1dc>
    {
      Error_Handler();
 80015b8:	f7ff fef2 	bl	80013a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 80015c0:	659a      	str	r2, [r3, #88]	; 0x58
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_ADC_MspInit+0x208>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	37f0      	adds	r7, #240	; 0xf0
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40022000 	.word	0x40022000
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020800 	.word	0x58020800
 80015dc:	58020000 	.word	0x58020000
 80015e0:	58020400 	.word	0x58020400
 80015e4:	58021400 	.word	0x58021400
 80015e8:	240000f0 	.word	0x240000f0
 80015ec:	40020010 	.word	0x40020010

080015f0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0ba      	sub	sp, #232	; 0xe8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	22b8      	movs	r2, #184	; 0xb8
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f00b fe45 	bl	800d2a0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_FDCAN_MspInit+0x188>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d151      	bne.n	80016c4 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001620:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800162c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4618      	mov	r0, r3
 800163a:	f007 f8a3 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001644:	f7ff feac 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001648:	4b4c      	ldr	r3, [pc, #304]	; (800177c <HAL_FDCAN_MspInit+0x18c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_FDCAN_MspInit+0x18c>)
 8001650:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_FDCAN_MspInit+0x18c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10e      	bne.n	8001678 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 800165c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001660:	4a47      	ldr	r2, [pc, #284]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800166a:	4b45      	ldr	r3, [pc, #276]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 800166c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	4a40      	ldr	r2, [pc, #256]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001688:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 8001696:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800169a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80016b0:	2309      	movs	r3, #9
 80016b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4831      	ldr	r0, [pc, #196]	; (8001784 <HAL_FDCAN_MspInit+0x194>)
 80016be:	f005 fdb7 	bl	8007230 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80016c2:	e054      	b.n	800176e <HAL_FDCAN_MspInit+0x17e>
  else if(hfdcan->Instance==FDCAN3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <HAL_FDCAN_MspInit+0x198>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d14f      	bne.n	800176e <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e2:	f107 0318 	add.w	r3, r7, #24
 80016e6:	4618      	mov	r0, r3
 80016e8:	f007 f84c 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 80016f2:	f7ff fe55 	bl	80013a0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_FDCAN_MspInit+0x18c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_FDCAN_MspInit+0x18c>)
 80016fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_FDCAN_MspInit+0x18c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10e      	bne.n	8001726 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 800170a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 800171a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_FDCAN_MspInit+0x190>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 8001744:	23c0      	movs	r3, #192	; 0xc0
 8001746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800175c:	2302      	movs	r3, #2
 800175e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001762:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001766:	4619      	mov	r1, r3
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <HAL_FDCAN_MspInit+0x19c>)
 800176a:	f005 fd61 	bl	8007230 <HAL_GPIO_Init>
}
 800176e:	bf00      	nop
 8001770:	37e8      	adds	r7, #232	; 0xe8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	4000a400 	.word	0x4000a400
 800177c:	24000854 	.word	0x24000854
 8001780:	58024400 	.word	0x58024400
 8001784:	58020400 	.word	0x58020400
 8001788:	4000d400 	.word	0x4000d400
 800178c:	58021400 	.word	0x58021400

08001790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0b8      	sub	sp, #224	; 0xe0
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	22b8      	movs	r2, #184	; 0xb8
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00b fd75 	bl	800d2a0 <memset>
  if(hi2c->Instance==I2C1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a26      	ldr	r2, [pc, #152]	; (8001854 <HAL_I2C_MspInit+0xc4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d145      	bne.n	800184c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017c0:	f04f 0208 	mov.w	r2, #8
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 ffd4 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80017e2:	f7ff fddd 	bl	80013a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_I2C_MspInit+0xc8>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <HAL_I2C_MspInit+0xc8>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_I2C_MspInit+0xc8>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001804:	23c0      	movs	r3, #192	; 0xc0
 8001806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180a:	2312      	movs	r3, #18
 800180c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181c:	2304      	movs	r3, #4
 800181e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <HAL_I2C_MspInit+0xcc>)
 800182a:	f005 fd01 	bl	8007230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_I2C_MspInit+0xc8>)
 8001830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001834:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_I2C_MspInit+0xc8>)
 8001836:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_I2C_MspInit+0xc8>)
 8001840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	37e0      	adds	r7, #224	; 0xe0
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40005400 	.word	0x40005400
 8001858:	58024400 	.word	0x58024400
 800185c:	58020400 	.word	0x58020400

08001860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0c0      	sub	sp, #256	; 0x100
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187c:	22b8      	movs	r2, #184	; 0xb8
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f00b fd0d 	bl	800d2a0 <memset>
  if(hspi->Instance==SPI1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4aab      	ldr	r2, [pc, #684]	; (8001b38 <HAL_SPI_MspInit+0x2d8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d16b      	bne.n	8001968 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 ff6c 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80018b2:	f7ff fd75 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b6:	4ba1      	ldr	r3, [pc, #644]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80018b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018bc:	4a9f      	ldr	r2, [pc, #636]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80018be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018c6:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80018c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d4:	4b99      	ldr	r3, [pc, #612]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	4a98      	ldr	r2, [pc, #608]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e4:	4b95      	ldr	r3, [pc, #596]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018f2:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80018f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f8:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80018fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001902:	4b8e      	ldr	r3, [pc, #568]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001928:	2305      	movs	r3, #5
 800192a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001932:	4619      	mov	r1, r3
 8001934:	4882      	ldr	r0, [pc, #520]	; (8001b40 <HAL_SPI_MspInit+0x2e0>)
 8001936:	f005 fc7b 	bl	8007230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800193a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800193e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001954:	2305      	movs	r3, #5
 8001956:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800195a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800195e:	4619      	mov	r1, r3
 8001960:	4878      	ldr	r0, [pc, #480]	; (8001b44 <HAL_SPI_MspInit+0x2e4>)
 8001962:	f005 fc65 	bl	8007230 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001966:	e0e1      	b.n	8001b2c <HAL_SPI_MspInit+0x2cc>
  else if(hspi->Instance==SPI3)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a76      	ldr	r2, [pc, #472]	; (8001b48 <HAL_SPI_MspInit+0x2e8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	f040 8091 	bne.w	8001a96 <HAL_SPI_MspInit+0x236>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001986:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198a:	4618      	mov	r0, r3
 800198c:	f006 fefa 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8001996:	f7ff fd03 	bl	80013a0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800199a:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 800199c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a0:	4a66      	ldr	r2, [pc, #408]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019aa:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	4b60      	ldr	r3, [pc, #384]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019be:	4a5f      	ldr	r2, [pc, #380]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c8:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	4a57      	ldr	r2, [pc, #348]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e6:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	4a50      	ldr	r2, [pc, #320]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a04:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a12:	2304      	movs	r3, #4
 8001a14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a34:	4619      	mov	r1, r3
 8001a36:	4845      	ldr	r0, [pc, #276]	; (8001b4c <HAL_SPI_MspInit+0x2ec>)
 8001a38:	f005 fbfa 	bl	8007230 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a56:	2306      	movs	r3, #6
 8001a58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a60:	4619      	mov	r1, r3
 8001a62:	483b      	ldr	r0, [pc, #236]	; (8001b50 <HAL_SPI_MspInit+0x2f0>)
 8001a64:	f005 fbe4 	bl	8007230 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a82:	2306      	movs	r3, #6
 8001a84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4831      	ldr	r0, [pc, #196]	; (8001b54 <HAL_SPI_MspInit+0x2f4>)
 8001a90:	f005 fbce 	bl	8007230 <HAL_GPIO_Init>
}
 8001a94:	e04a      	b.n	8001b2c <HAL_SPI_MspInit+0x2cc>
  else if(hspi->Instance==SPI4)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <HAL_SPI_MspInit+0x2f8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d145      	bne.n	8001b2c <HAL_SPI_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001aa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f006 fe64 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_SPI_MspInit+0x266>
      Error_Handler();
 8001ac2:	f7ff fc6d 	bl	80013a0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 8001ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 8001ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 8001ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_SPI_MspInit+0x2dc>)
 8001af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b02:	2374      	movs	r3, #116	; 0x74
 8001b04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <HAL_SPI_MspInit+0x2fc>)
 8001b28:	f005 fb82 	bl	8007230 <HAL_GPIO_Init>
}
 8001b2c:	bf00      	nop
 8001b2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40013000 	.word	0x40013000
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	58020c00 	.word	0x58020c00
 8001b44:	58021800 	.word	0x58021800
 8001b48:	40003c00 	.word	0x40003c00
 8001b4c:	58020400 	.word	0x58020400
 8001b50:	58020000 	.word	0x58020000
 8001b54:	58020800 	.word	0x58020800
 8001b58:	40013400 	.word	0x40013400
 8001b5c:	58021000 	.word	0x58021000

08001b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0bc      	sub	sp, #240	; 0xf0
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	22b8      	movs	r2, #184	; 0xb8
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00b fb8d 	bl	800d2a0 <memset>
  if(huart->Instance==USART1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a77      	ldr	r2, [pc, #476]	; (8001d68 <HAL_UART_MspInit+0x208>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d14f      	bne.n	8001c30 <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b90:	f04f 0201 	mov.w	r2, #1
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba2:	f107 0320 	add.w	r3, r7, #32
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f006 fdec 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bb2:	f7ff fbf5 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bbc:	4a6b      	ldr	r2, [pc, #428]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bc6:	4b69      	ldr	r3, [pc, #420]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	4b65      	ldr	r3, [pc, #404]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a64      	ldr	r2, [pc, #400]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bf2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c16:	4619      	mov	r1, r3
 8001c18:	4855      	ldr	r0, [pc, #340]	; (8001d70 <HAL_UART_MspInit+0x210>)
 8001c1a:	f005 fb09 	bl	8007230 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2025      	movs	r0, #37	; 0x25
 8001c24:	f002 f933 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c28:	2025      	movs	r0, #37	; 0x25
 8001c2a:	f002 f94a 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c2e:	e097      	b.n	8001d60 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_UART_MspInit+0x214>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d146      	bne.n	8001cc8 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c3a:	f04f 0202 	mov.w	r2, #2
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4c:	f107 0320 	add.w	r3, r7, #32
 8001c50:	4618      	mov	r0, r3
 8001c52:	f006 fd97 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001c5c:	f7ff fba0 	bl	80013a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c60:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c66:	4a41      	ldr	r2, [pc, #260]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c70:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	4a39      	ldr	r2, [pc, #228]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c9c:	2360      	movs	r3, #96	; 0x60
 8001c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482d      	ldr	r0, [pc, #180]	; (8001d78 <HAL_UART_MspInit+0x218>)
 8001cc2:	f005 fab5 	bl	8007230 <HAL_GPIO_Init>
}
 8001cc6:	e04b      	b.n	8001d60 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <HAL_UART_MspInit+0x21c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d146      	bne.n	8001d60 <HAL_UART_MspInit+0x200>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cd2:	f04f 0202 	mov.w	r2, #2
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f006 fd4b 	bl	8008784 <HAL_RCCEx_PeriphCLKConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8001cf4:	f7ff fb54 	bl	80013a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0x20c>)
 8001d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_UART_MspInit+0x210>)
 8001d5c:	f005 fa68 	bl	8007230 <HAL_GPIO_Init>
}
 8001d60:	bf00      	nop
 8001d62:	37f0      	adds	r7, #240	; 0xf0
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40011000 	.word	0x40011000
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58020400 	.word	0x58020400
 8001d74:	40004400 	.word	0x40004400
 8001d78:	58020c00 	.word	0x58020c00
 8001d7c:	40004800 	.word	0x40004800

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <NMI_Handler+0x4>

08001d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <HardFault_Handler+0x4>

08001d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <MemManage_Handler+0x4>

08001d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <BusFault_Handler+0x4>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <UsageFault_Handler+0x4>

08001d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dcc:	f000 f960 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <DMA1_Stream0_IRQHandler+0x10>)
 8001dda:	f003 fbb3 	bl	8005544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	240000f0 	.word	0x240000f0

08001de8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <USART1_IRQHandler+0x10>)
 8001dee:	f009 fad3 	bl	800b398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24000494 	.word	0x24000494

08001dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <_sbrk+0x5c>)
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <_sbrk+0x60>)
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <_sbrk+0x64>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <_sbrk+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d207      	bcs.n	8001e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e2c:	f00b fa40 	bl	800d2b0 <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	24050000 	.word	0x24050000
 8001e5c:	00000400 	.word	0x00000400
 8001e60:	24000858 	.word	0x24000858
 8001e64:	240009a8 	.word	0x240009a8

08001e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <SystemInit+0xd0>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <SystemInit+0xd0>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <SystemInit+0xd4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	2b06      	cmp	r3, #6
 8001e86:	d807      	bhi.n	8001e98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <SystemInit+0xd4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 030f 	bic.w	r3, r3, #15
 8001e90:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <SystemInit+0xd4>)
 8001e92:	f043 0307 	orr.w	r3, r3, #7
 8001e96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <SystemInit+0xd8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <SystemInit+0xd8>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <SystemInit+0xd8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <SystemInit+0xd8>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4924      	ldr	r1, [pc, #144]	; (8001f40 <SystemInit+0xd8>)
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <SystemInit+0xdc>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <SystemInit+0xd4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <SystemInit+0xd4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 030f 	bic.w	r3, r3, #15
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <SystemInit+0xd4>)
 8001ecc:	f043 0307 	orr.w	r3, r3, #7
 8001ed0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <SystemInit+0xd8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <SystemInit+0xd8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <SystemInit+0xd8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <SystemInit+0xd8>)
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <SystemInit+0xe0>)
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <SystemInit+0xd8>)
 8001eec:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <SystemInit+0xe4>)
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <SystemInit+0xd8>)
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <SystemInit+0xe8>)
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <SystemInit+0xd8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <SystemInit+0xd8>)
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <SystemInit+0xe8>)
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <SystemInit+0xd8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <SystemInit+0xd8>)
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <SystemInit+0xe8>)
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <SystemInit+0xd8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <SystemInit+0xd8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <SystemInit+0xd8>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <SystemInit+0xd8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <SystemInit+0xec>)
 8001f28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	52002000 	.word	0x52002000
 8001f40:	58024400 	.word	0x58024400
 8001f44:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f48:	02020200 	.word	0x02020200
 8001f4c:	01ff0000 	.word	0x01ff0000
 8001f50:	01010280 	.word	0x01010280
 8001f54:	52004000 	.word	0x52004000

08001f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f5c:	f7ff ff84 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f62:	490d      	ldr	r1, [pc, #52]	; (8001f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f78:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f00b f999 	bl	800d2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8a:	f7fe fb8f 	bl	80006ac <main>
  bx  lr
 8001f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f98:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001f9c:	0800dca8 	.word	0x0800dca8
  ldr r2, =_sbss
 8001fa0:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001fa4:	240009a8 	.word	0x240009a8

08001fa8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC3_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb2:	2003      	movs	r0, #3
 8001fb4:	f001 ff60 	bl	8003e78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fb8:	f006 fa0e 	bl	80083d8 <HAL_RCC_GetSysClockFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_Init+0x68>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	4913      	ldr	r1, [pc, #76]	; (8002018 <HAL_Init+0x6c>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_Init+0x68>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_Init+0x6c>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_Init+0x70>)
 8001fee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ff0:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <HAL_Init+0x74>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f814 	bl	8002024 <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e002      	b.n	800200c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002006:	f7ff f9d1 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	58024400 	.word	0x58024400
 8002018:	0800dc24 	.word	0x0800dc24
 800201c:	24000008 	.word	0x24000008
 8002020:	24000004 	.word	0x24000004

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_InitTick+0x60>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e021      	b.n	800207c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_InitTick+0x64>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_InitTick+0x60>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f001 ff45 	bl	8003ede <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f001 ff0f 	bl	8003e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_InitTick+0x68>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	24000010 	.word	0x24000010
 8002088:	24000004 	.word	0x24000004
 800208c:	2400000c 	.word	0x2400000c

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	24000010 	.word	0x24000010
 80020b4:	2400085c 	.word	0x2400085c

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2400085c 	.word	0x2400085c

080020d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3360      	adds	r3, #96	; 0x60
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <LL_ADC_SetOffset+0x60>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d10b      	bne.n	8002174 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	4313      	orrs	r3, r2
 800216a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002172:	e00b      	b.n	800218c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	431a      	orrs	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	601a      	str	r2, [r3, #0]
}
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	58026000 	.word	0x58026000

0800219c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3360      	adds	r3, #96	; 0x60
 80021aa:	461a      	mov	r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	611a      	str	r2, [r3, #16]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00e      	beq.n	800222e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3360      	adds	r3, #96	; 0x60
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	431a      	orrs	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	601a      	str	r2, [r3, #0]
  }
}
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	58026000 	.word	0x58026000

08002240 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <LL_ADC_SetOffsetSaturation+0x40>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d10e      	bne.n	8002272 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3360      	adds	r3, #96	; 0x60
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	431a      	orrs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	58026000 	.word	0x58026000

08002284 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <LL_ADC_SetOffsetSign+0x40>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d10e      	bne.n	80022b6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3360      	adds	r3, #96	; 0x60
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	58026000 	.word	0x58026000

080022c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3360      	adds	r3, #96	; 0x60
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <LL_ADC_SetOffsetState+0x50>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d108      	bne.n	80022fc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80022fa:	e007      	b.n	800230c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	431a      	orrs	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	58026000 	.word	0x58026000

0800231c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002342:	b480      	push	{r7}
 8002344:	b087      	sub	sp, #28
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3330      	adds	r3, #48	; 0x30
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	4413      	add	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	211f      	movs	r1, #31
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0e9b      	lsrs	r3, r3, #26
 800237a:	f003 011f 	and.w	r1, r3, #31
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f023 0203 	bic.w	r2, r3, #3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	60da      	str	r2, [r3, #12]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a08      	ldr	r2, [pc, #32]	; (8002410 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d107      	bne.n	8002402 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60da      	str	r2, [r3, #12]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	58026000 	.word	0x58026000

08002414 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3314      	adds	r3, #20
 8002424:	461a      	mov	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0e5b      	lsrs	r3, r3, #25
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	0d1b      	lsrs	r3, r3, #20
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2107      	movs	r1, #7
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	401a      	ands	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	0d1b      	lsrs	r3, r3, #20
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	431a      	orrs	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d115      	bne.n	80024ac <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0318 	and.w	r3, r3, #24
 8002496:	4914      	ldr	r1, [pc, #80]	; (80024e8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002498:	40d9      	lsrs	r1, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	400b      	ands	r3, r1
 800249e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a2:	431a      	orrs	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80024aa:	e014      	b.n	80024d6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0318 	and.w	r3, r3, #24
 80024c2:	4909      	ldr	r1, [pc, #36]	; (80024e8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80024c4:	40d9      	lsrs	r1, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	400b      	ands	r3, r1
 80024ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ce:	431a      	orrs	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	58026000 	.word	0x58026000
 80024e8:	000fffff 	.word	0x000fffff

080024ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 031f 	and.w	r3, r3, #31
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002516:	4013      	ands	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6093      	str	r3, [r2, #8]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	5fffffc0 	.word	0x5fffffc0

0800252c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800253c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002540:	d101      	bne.n	8002546 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <LL_ADC_EnableInternalRegulator+0x24>)
 8002562:	4013      	ands	r3, r2
 8002564:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	6fffffc0 	.word	0x6fffffc0

0800257c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002590:	d101      	bne.n	8002596 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <LL_ADC_Enable+0x24>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	7fffffc0 	.word	0x7fffffc0

080025cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <LL_ADC_IsEnabled+0x18>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <LL_ADC_IsEnabled+0x1a>
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <LL_ADC_REG_StartConversion+0x24>)
 8002602:	4013      	ands	r3, r2
 8002604:	f043 0204 	orr.w	r2, r3, #4
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	7fffffc0 	.word	0x7fffffc0

0800261c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b04      	cmp	r3, #4
 800262e:	d101      	bne.n	8002634 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b08      	cmp	r3, #8
 8002654:	d101      	bne.n	800265a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e1ee      	b.n	8002a60 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7fe fea5 	bl	80013e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff3f 	bl	800252c <LL_ADC_IsDeepPowerDownEnabled>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff25 	bl	8002508 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff5a 	bl	800257c <LL_ADC_IsInternalRegulatorEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d114      	bne.n	80026f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff3e 	bl	8002554 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d8:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_ADC_Init+0x2ac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	4a8e      	ldr	r2, [pc, #568]	; (8002918 <HAL_ADC_Init+0x2b0>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	3301      	adds	r3, #1
 80026e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff3d 	bl	800257c <LL_ADC_IsInternalRegulatorEnabled>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10d      	bne.n	8002724 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	f043 0210 	orr.w	r2, r3, #16
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff77 	bl	800261c <LL_ADC_REG_IsConversionOngoing>
 800272e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 8188 	bne.w	8002a4e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 8184 	bne.w	8002a4e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800274e:	f043 0202 	orr.w	r2, r3, #2
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff36 	bl	80025cc <LL_ADC_IsEnabled>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d136      	bne.n	80027d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6c      	ldr	r2, [pc, #432]	; (800291c <HAL_ADC_Init+0x2b4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_ADC_Init+0x112>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6a      	ldr	r2, [pc, #424]	; (8002920 <HAL_ADC_Init+0x2b8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10e      	bne.n	8002798 <HAL_ADC_Init+0x130>
 800277a:	4868      	ldr	r0, [pc, #416]	; (800291c <HAL_ADC_Init+0x2b4>)
 800277c:	f7ff ff26 	bl	80025cc <LL_ADC_IsEnabled>
 8002780:	4604      	mov	r4, r0
 8002782:	4867      	ldr	r0, [pc, #412]	; (8002920 <HAL_ADC_Init+0x2b8>)
 8002784:	f7ff ff22 	bl	80025cc <LL_ADC_IsEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	4323      	orrs	r3, r4
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e008      	b.n	80027aa <HAL_ADC_Init+0x142>
 8002798:	4862      	ldr	r0, [pc, #392]	; (8002924 <HAL_ADC_Init+0x2bc>)
 800279a:	f7ff ff17 	bl	80025cc <LL_ADC_IsEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5a      	ldr	r2, [pc, #360]	; (800291c <HAL_ADC_Init+0x2b4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_ADC_Init+0x15a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_ADC_Init+0x2b8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Init+0x15e>
 80027c2:	4a59      	ldr	r2, [pc, #356]	; (8002928 <HAL_ADC_Init+0x2c0>)
 80027c4:	e000      	b.n	80027c8 <HAL_ADC_Init+0x160>
 80027c6:	4a59      	ldr	r2, [pc, #356]	; (800292c <HAL_ADC_Init+0x2c4>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f7ff fc7e 	bl	80020d0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_ADC_Init+0x2bc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d129      	bne.n	8002832 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7e5b      	ldrb	r3, [r3, #25]
 80027e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027e8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80027ee:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d013      	beq.n	8002820 <HAL_ADC_Init+0x1b8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d00d      	beq.n	800281c <HAL_ADC_Init+0x1b4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b1c      	cmp	r3, #28
 8002806:	d007      	beq.n	8002818 <HAL_ADC_Init+0x1b0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b18      	cmp	r3, #24
 800280e:	d101      	bne.n	8002814 <HAL_ADC_Init+0x1ac>
 8002810:	2318      	movs	r3, #24
 8002812:	e006      	b.n	8002822 <HAL_ADC_Init+0x1ba>
 8002814:	2300      	movs	r3, #0
 8002816:	e004      	b.n	8002822 <HAL_ADC_Init+0x1ba>
 8002818:	2310      	movs	r3, #16
 800281a:	e002      	b.n	8002822 <HAL_ADC_Init+0x1ba>
 800281c:	2308      	movs	r3, #8
 800281e:	e000      	b.n	8002822 <HAL_ADC_Init+0x1ba>
 8002820:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002822:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	e00e      	b.n	8002850 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7e5b      	ldrb	r3, [r3, #25]
 8002836:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800283c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002842:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d106      	bne.n	8002868 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	3b01      	subs	r3, #1
 8002860:	045b      	lsls	r3, r3, #17
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	d009      	beq.n	8002884 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a26      	ldr	r2, [pc, #152]	; (8002924 <HAL_ADC_Init+0x2bc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d115      	bne.n	80028ba <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_ADC_Init+0x2c8>)
 8002896:	4013      	ands	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	69b9      	ldr	r1, [r7, #24]
 800289e:	430b      	orrs	r3, r1
 80028a0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	611a      	str	r2, [r3, #16]
 80028b8:	e009      	b.n	80028ce <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_ADC_Init+0x2cc>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	69b9      	ldr	r1, [r7, #24]
 80028ca:	430b      	orrs	r3, r1
 80028cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fea2 	bl	800261c <LL_ADC_REG_IsConversionOngoing>
 80028d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff feaf 	bl	8002642 <LL_ADC_INJ_IsConversionOngoing>
 80028e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 808e 	bne.w	8002a0a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 808a 	bne.w	8002a0a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_ADC_Init+0x2bc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d11b      	bne.n	8002938 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e1b      	ldrb	r3, [r3, #24]
 8002904:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800290c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e018      	b.n	8002946 <HAL_ADC_Init+0x2de>
 8002914:	24000004 	.word	0x24000004
 8002918:	053e2d63 	.word	0x053e2d63
 800291c:	40022000 	.word	0x40022000
 8002920:	40022100 	.word	0x40022100
 8002924:	58026000 	.word	0x58026000
 8002928:	40022300 	.word	0x40022300
 800292c:	58026300 	.word	0x58026300
 8002930:	fff04007 	.word	0xfff04007
 8002934:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7e1b      	ldrb	r3, [r3, #24]
 800293c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <HAL_ADC_Init+0x400>)
 800294e:	4013      	ands	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	69b9      	ldr	r1, [r7, #24]
 8002956:	430b      	orrs	r3, r1
 8002958:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002960:	2b01      	cmp	r3, #1
 8002962:	d137      	bne.n	80029d4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3f      	ldr	r2, [pc, #252]	; (8002a6c <HAL_ADC_Init+0x404>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d116      	bne.n	80029a2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_ADC_Init+0x408>)
 800297c:	4013      	ands	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800298c:	4311      	orrs	r1, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002992:	430a      	orrs	r2, r1
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	611a      	str	r2, [r3, #16]
 80029a0:	e020      	b.n	80029e4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <HAL_ADC_Init+0x40c>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029b0:	3a01      	subs	r2, #1
 80029b2:	0411      	lsls	r1, r2, #16
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029b8:	4311      	orrs	r1, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80029c4:	430a      	orrs	r2, r1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	e007      	b.n	80029e4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_ADC_Init+0x404>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d002      	beq.n	8002a0a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 ff71 	bl	80038ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10c      	bne.n	8002a2c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	f023 010f 	bic.w	r1, r3, #15
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	e007      	b.n	8002a3c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 020f 	bic.w	r2, r2, #15
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	f023 0303 	bic.w	r3, r3, #3
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	661a      	str	r2, [r3, #96]	; 0x60
 8002a4c:	e007      	b.n	8002a5e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a52:	f043 0210 	orr.w	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3724      	adds	r7, #36	; 0x24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}
 8002a68:	ffffbffc 	.word	0xffffbffc
 8002a6c:	58026000 	.word	0x58026000
 8002a70:	fc00f81f 	.word	0xfc00f81f
 8002a74:	fc00f81e 	.word	0xfc00f81e

08002a78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a60      	ldr	r2, [pc, #384]	; (8002c0c <HAL_ADC_Start_DMA+0x194>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_ADC_Start_DMA+0x20>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5f      	ldr	r2, [pc, #380]	; (8002c10 <HAL_ADC_Start_DMA+0x198>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_Start_DMA+0x24>
 8002a98:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_ADC_Start_DMA+0x19c>)
 8002a9a:	e000      	b.n	8002a9e <HAL_ADC_Start_DMA+0x26>
 8002a9c:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <HAL_ADC_Start_DMA+0x1a0>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fd24 	bl	80024ec <LL_ADC_GetMultimode>
 8002aa4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fdb6 	bl	800261c <LL_ADC_REG_IsConversionOngoing>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 80a2 	bne.w	8002bfc <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_Start_DMA+0x4e>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e09d      	b.n	8002c02 <HAL_ADC_Start_DMA+0x18a>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d003      	beq.n	8002ae2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b09      	cmp	r3, #9
 8002ade:	f040 8086 	bne.w	8002bee <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fde4 	bl	80036b0 <ADC_Enable>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d178      	bne.n	8002be4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002af6:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <HAL_ADC_Start_DMA+0x1a4>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a42      	ldr	r2, [pc, #264]	; (8002c10 <HAL_ADC_Start_DMA+0x198>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d002      	beq.n	8002b12 <HAL_ADC_Start_DMA+0x9a>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	e000      	b.n	8002b14 <HAL_ADC_Start_DMA+0x9c>
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_ADC_Start_DMA+0x194>)
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d002      	beq.n	8002b22 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3e:	f023 0206 	bic.w	r2, r3, #6
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	665a      	str	r2, [r3, #100]	; 0x64
 8002b46:	e002      	b.n	8002b4e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	4a33      	ldr	r2, [pc, #204]	; (8002c20 <HAL_ADC_Start_DMA+0x1a8>)
 8002b54:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	4a32      	ldr	r2, [pc, #200]	; (8002c24 <HAL_ADC_Start_DMA+0x1ac>)
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	4a31      	ldr	r2, [pc, #196]	; (8002c28 <HAL_ADC_Start_DMA+0x1b0>)
 8002b64:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	221c      	movs	r2, #28
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0210 	orr.w	r2, r2, #16
 8002b84:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <HAL_ADC_Start_DMA+0x1b4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d10f      	bne.n	8002bb0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7ff fc1e 	bl	80023e0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fc09 	bl	80023c0 <LL_ADC_EnableDMAReq>
 8002bae:	e007      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f7ff fbed 	bl	800239a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3340      	adds	r3, #64	; 0x40
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f001 fcea 	bl	80045a8 <HAL_DMA_Start_IT>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fd09 	bl	80025f4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002be2:	e00d      	b.n	8002c00 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8002bec:	e008      	b.n	8002c00 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002bfa:	e001      	b.n	8002c00 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40022100 	.word	0x40022100
 8002c14:	40022300 	.word	0x40022300
 8002c18:	58026300 	.word	0x58026300
 8002c1c:	fffff0fe 	.word	0xfffff0fe
 8002c20:	080037c5 	.word	0x080037c5
 8002c24:	0800389d 	.word	0x0800389d
 8002c28:	080038b9 	.word	0x080038b9
 8002c2c:	58026000 	.word	0x58026000

08002c30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b0b9      	sub	sp, #228	; 0xe4
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c72:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4aa9      	ldr	r2, [pc, #676]	; (8002f20 <HAL_ADC_ConfigChannel+0x2c8>)
 8002c7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x34>
 8002c86:	2302      	movs	r3, #2
 8002c88:	f000 bcfa 	b.w	8003680 <HAL_ADC_ConfigChannel+0xa28>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fcbf 	bl	800261c <LL_ADC_REG_IsConversionOngoing>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 84de 	bne.w	8003662 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a9e      	ldr	r2, [pc, #632]	; (8002f24 <HAL_ADC_ConfigChannel+0x2cc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d033      	beq.n	8002d18 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d108      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x76>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	e01d      	b.n	8002d0a <HAL_ADC_ConfigChannel+0xb2>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e004      	b.n	8002d00 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2201      	movs	r2, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	69d1      	ldr	r1, [r2, #28]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f7ff fb0c 	bl	8002342 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fc74 	bl	800261c <LL_ADC_REG_IsConversionOngoing>
 8002d34:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fc80 	bl	8002642 <LL_ADC_INJ_IsConversionOngoing>
 8002d42:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 8270 	bne.w	8003230 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 826b 	bne.w	8003230 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f7ff fb54 	bl	8002414 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6c      	ldr	r2, [pc, #432]	; (8002f24 <HAL_ADC_ConfigChannel+0x2cc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10d      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d90:	e032      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d92:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <HAL_ADC_ConfigChannel+0x2d0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x160>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	e01d      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x19c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x186>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	e00a      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x19c>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d048      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6919      	ldr	r1, [r3, #16]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e10:	f7ff f992 	bl	8002138 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a42      	ldr	r2, [pc, #264]	; (8002f24 <HAL_ADC_ConfigChannel+0x2cc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d119      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f7ff fa2a 	bl	8002284 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6919      	ldr	r1, [r3, #16]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x1f0>
 8002e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e46:	e000      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x1f2>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f7ff f9f8 	bl	8002240 <LL_ADC_SetOffsetSaturation>
 8002e50:	e1ee      	b.n	8003230 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6919      	ldr	r1, [r3, #16]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d102      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x212>
 8002e64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e68:	e000      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x214>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f7ff f9c5 	bl	80021fc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6919      	ldr	r1, [r3, #16]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	7e1b      	ldrb	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x230>
 8002e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e86:	e000      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x232>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7ff f99c 	bl	80021c8 <LL_ADC_SetDataRightShift>
 8002e90:	e1ce      	b.n	8003230 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <HAL_ADC_ConfigChannel+0x2cc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	f040 8181 	bne.w	80031a0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff f979 	bl	800219c <LL_ADC_GetOffsetChannel>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x272>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f96e 	bl	800219c <LL_ADC_GetOffsetChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	f003 021f 	and.w	r2, r3, #31
 8002ec8:	e01e      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x2b0>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f963 	bl	800219c <LL_ADC_GetOffsetChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002ee8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002ef0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e004      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x2d4>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	e01e      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x306>
 8002f20:	47ff0000 	.word	0x47ff0000
 8002f24:	58026000 	.word	0x58026000
 8002f28:	5c001000 	.word	0x5c001000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002f40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e004      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d106      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f9ac 	bl	80022c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f910 	bl	800219c <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x344>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff f905 	bl	800219c <LL_ADC_GetOffsetChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	e01e      	b.n	8002fda <HAL_ADC_ConfigChannel+0x382>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f8fa 	bl	800219c <LL_ADC_GetOffsetChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002fc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e004      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x39a>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	e018      	b.n	8003024 <HAL_ADC_ConfigChannel+0x3cc>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003006:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800300a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800300e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003016:	2320      	movs	r3, #32
 8003018:	e004      	b.n	8003024 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800301a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	429a      	cmp	r2, r3
 8003026:	d106      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2200      	movs	r2, #0
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f949 	bl	80022c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2102      	movs	r1, #2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff f8ad 	bl	800219c <LL_ADC_GetOffsetChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x40a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2102      	movs	r1, #2
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f8a2 	bl	800219c <LL_ADC_GetOffsetChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	e01e      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x448>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f897 	bl	800219c <LL_ADC_GetOffsetChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003090:	2320      	movs	r3, #32
 8003092:	e004      	b.n	800309e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x460>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	e014      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x48a>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80030c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80030cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80030d4:	2320      	movs	r3, #32
 80030d6:	e004      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80030d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d106      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff f8ea 	bl	80022c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2103      	movs	r1, #3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff f84e 	bl	800219c <LL_ADC_GetOffsetChannel>
 8003100:	4603      	mov	r3, r0
 8003102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x4c8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2103      	movs	r1, #3
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f843 	bl	800219c <LL_ADC_GetOffsetChannel>
 8003116:	4603      	mov	r3, r0
 8003118:	0e9b      	lsrs	r3, r3, #26
 800311a:	f003 021f 	and.w	r2, r3, #31
 800311e:	e017      	b.n	8003150 <HAL_ADC_ConfigChannel+0x4f8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2103      	movs	r1, #3
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f838 	bl	800219c <LL_ADC_GetOffsetChannel>
 800312c:	4603      	mov	r3, r0
 800312e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800313c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e003      	b.n	800314e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x510>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0e9b      	lsrs	r3, r3, #26
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	e011      	b.n	800318c <HAL_ADC_ConfigChannel+0x534>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003178:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800317a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	e003      	b.n	800318c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	429a      	cmp	r2, r3
 800318e:	d14f      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	2103      	movs	r1, #3
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff f895 	bl	80022c8 <LL_ADC_SetOffsetState>
 800319e:	e047      	b.n	8003230 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	069b      	lsls	r3, r3, #26
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	069b      	lsls	r3, r3, #26
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031e6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	069b      	lsls	r3, r3, #26
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d107      	bne.n	800320c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800320a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	069b      	lsls	r3, r3, #26
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800322e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f9c9 	bl	80025cc <LL_ADC_IsEnabled>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8219 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	461a      	mov	r2, r3
 8003250:	f7ff f90c 	bl	800246c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4aa1      	ldr	r2, [pc, #644]	; (80034e0 <HAL_ADC_ConfigChannel+0x888>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f040 812e 	bne.w	80034bc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x630>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	3301      	adds	r3, #1
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2b09      	cmp	r3, #9
 800327e:	bf94      	ite	ls
 8003280:	2301      	movls	r3, #1
 8003282:	2300      	movhi	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e019      	b.n	80032bc <HAL_ADC_ConfigChannel+0x664>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003298:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800329a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e003      	b.n	80032ac <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80032a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	bf94      	ite	ls
 80032b6:	2301      	movls	r3, #1
 80032b8:	2300      	movhi	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d079      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x684>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	3301      	adds	r3, #1
 80032d4:	069b      	lsls	r3, r3, #26
 80032d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032da:	e015      	b.n	8003308 <HAL_ADC_ConfigChannel+0x6b0>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80032f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	069b      	lsls	r3, r3, #26
 8003304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x6d0>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0e9b      	lsrs	r3, r3, #26
 800331a:	3301      	adds	r3, #1
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	e017      	b.n	8003358 <HAL_ADC_ConfigChannel+0x700>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003338:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800333a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003340:	2320      	movs	r3, #32
 8003342:	e003      	b.n	800334c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	ea42 0103 	orr.w	r1, r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <HAL_ADC_ConfigChannel+0x726>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	3301      	adds	r3, #1
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	051b      	lsls	r3, r3, #20
 800337c:	e018      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x758>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e003      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b0:	430b      	orrs	r3, r1
 80033b2:	e07e      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d107      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x778>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e9b      	lsrs	r3, r3, #26
 80033c6:	3301      	adds	r3, #1
 80033c8:	069b      	lsls	r3, r3, #26
 80033ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ce:	e015      	b.n	80033fc <HAL_ADC_ConfigChannel+0x7a4>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80033e8:	2320      	movs	r3, #32
 80033ea:	e003      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	069b      	lsls	r3, r3, #26
 80033f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_ADC_ConfigChannel+0x7c4>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	3301      	adds	r3, #1
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	e017      	b.n	800344c <HAL_ADC_ConfigChannel+0x7f4>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	61bb      	str	r3, [r7, #24]
  return result;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003434:	2320      	movs	r3, #32
 8003436:	e003      	b.n	8003440 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3301      	adds	r3, #1
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	ea42 0103 	orr.w	r1, r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x820>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	3301      	adds	r3, #1
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	3b1e      	subs	r3, #30
 8003470:	051b      	lsls	r3, r3, #20
 8003472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003476:	e01b      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x858>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	60fb      	str	r3, [r7, #12]
  return result;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	3b1e      	subs	r3, #30
 80034aa:	051b      	lsls	r3, r3, #20
 80034ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b0:	430b      	orrs	r3, r1
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7fe ffac 	bl	8002414 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f280 80d7 	bge.w	8003674 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a06      	ldr	r2, [pc, #24]	; (80034e4 <HAL_ADC_ConfigChannel+0x88c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_ADC_ConfigChannel+0x882>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_ADC_ConfigChannel+0x890>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10a      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x898>
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_ADC_ConfigChannel+0x894>)
 80034dc:	e009      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x89a>
 80034de:	bf00      	nop
 80034e0:	47ff0000 	.word	0x47ff0000
 80034e4:	40022000 	.word	0x40022000
 80034e8:	40022100 	.word	0x40022100
 80034ec:	40022300 	.word	0x40022300
 80034f0:	4b65      	ldr	r3, [pc, #404]	; (8003688 <HAL_ADC_ConfigChannel+0xa30>)
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe fe12 	bl	800211c <LL_ADC_GetCommonPathInternalCh>
 80034f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a62      	ldr	r2, [pc, #392]	; (800368c <HAL_ADC_ConfigChannel+0xa34>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_ADC_ConfigChannel+0x8b8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a61      	ldr	r2, [pc, #388]	; (8003690 <HAL_ADC_ConfigChannel+0xa38>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d10e      	bne.n	800352e <HAL_ADC_ConfigChannel+0x8d6>
 8003510:	485e      	ldr	r0, [pc, #376]	; (800368c <HAL_ADC_ConfigChannel+0xa34>)
 8003512:	f7ff f85b 	bl	80025cc <LL_ADC_IsEnabled>
 8003516:	4604      	mov	r4, r0
 8003518:	485d      	ldr	r0, [pc, #372]	; (8003690 <HAL_ADC_ConfigChannel+0xa38>)
 800351a:	f7ff f857 	bl	80025cc <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	4323      	orrs	r3, r4
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf0c      	ite	eq
 8003526:	2301      	moveq	r3, #1
 8003528:	2300      	movne	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e008      	b.n	8003540 <HAL_ADC_ConfigChannel+0x8e8>
 800352e:	4859      	ldr	r0, [pc, #356]	; (8003694 <HAL_ADC_ConfigChannel+0xa3c>)
 8003530:	f7ff f84c 	bl	80025cc <LL_ADC_IsEnabled>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf0c      	ite	eq
 800353a:	2301      	moveq	r3, #1
 800353c:	2300      	movne	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8084 	beq.w	800364e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a53      	ldr	r2, [pc, #332]	; (8003698 <HAL_ADC_ConfigChannel+0xa40>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d132      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x95e>
 8003550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d12c      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a4c      	ldr	r2, [pc, #304]	; (8003694 <HAL_ADC_ConfigChannel+0xa3c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	f040 8086 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a47      	ldr	r2, [pc, #284]	; (800368c <HAL_ADC_ConfigChannel+0xa34>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_ADC_ConfigChannel+0x924>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a46      	ldr	r2, [pc, #280]	; (8003690 <HAL_ADC_ConfigChannel+0xa38>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x928>
 800357c:	4a47      	ldr	r2, [pc, #284]	; (800369c <HAL_ADC_ConfigChannel+0xa44>)
 800357e:	e000      	b.n	8003582 <HAL_ADC_ConfigChannel+0x92a>
 8003580:	4a41      	ldr	r2, [pc, #260]	; (8003688 <HAL_ADC_ConfigChannel+0xa30>)
 8003582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f7fe fdb2 	bl	80020f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003592:	4b43      	ldr	r3, [pc, #268]	; (80036a0 <HAL_ADC_ConfigChannel+0xa48>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	4a42      	ldr	r2, [pc, #264]	; (80036a4 <HAL_ADC_ConfigChannel+0xa4c>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	3301      	adds	r3, #1
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035a6:	e002      	b.n	80035ae <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f9      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b4:	e05e      	b.n	8003674 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <HAL_ADC_ConfigChannel+0xa50>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d120      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x9aa>
 80035c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11a      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a30      	ldr	r2, [pc, #192]	; (8003694 <HAL_ADC_ConfigChannel+0xa3c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d14e      	bne.n	8003674 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2c      	ldr	r2, [pc, #176]	; (800368c <HAL_ADC_ConfigChannel+0xa34>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x992>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <HAL_ADC_ConfigChannel+0xa38>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x996>
 80035ea:	4a2c      	ldr	r2, [pc, #176]	; (800369c <HAL_ADC_ConfigChannel+0xa44>)
 80035ec:	e000      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x998>
 80035ee:	4a26      	ldr	r2, [pc, #152]	; (8003688 <HAL_ADC_ConfigChannel+0xa30>)
 80035f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f7fe fd7b 	bl	80020f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003600:	e038      	b.n	8003674 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a29      	ldr	r2, [pc, #164]	; (80036ac <HAL_ADC_ConfigChannel+0xa54>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d133      	bne.n	8003674 <HAL_ADC_ConfigChannel+0xa1c>
 800360c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d12d      	bne.n	8003674 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <HAL_ADC_ConfigChannel+0xa3c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d128      	bne.n	8003674 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <HAL_ADC_ConfigChannel+0xa34>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x9de>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <HAL_ADC_ConfigChannel+0xa38>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x9e2>
 8003636:	4a19      	ldr	r2, [pc, #100]	; (800369c <HAL_ADC_ConfigChannel+0xa44>)
 8003638:	e000      	b.n	800363c <HAL_ADC_ConfigChannel+0x9e4>
 800363a:	4a13      	ldr	r2, [pc, #76]	; (8003688 <HAL_ADC_ConfigChannel+0xa30>)
 800363c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f7fe fd55 	bl	80020f6 <LL_ADC_SetCommonPathInternalCh>
 800364c:	e012      	b.n	8003674 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003660:	e008      	b.n	8003674 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800367c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003680:	4618      	mov	r0, r3
 8003682:	37e4      	adds	r7, #228	; 0xe4
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}
 8003688:	58026300 	.word	0x58026300
 800368c:	40022000 	.word	0x40022000
 8003690:	40022100 	.word	0x40022100
 8003694:	58026000 	.word	0x58026000
 8003698:	c7520000 	.word	0xc7520000
 800369c:	40022300 	.word	0x40022300
 80036a0:	24000004 	.word	0x24000004
 80036a4:	053e2d63 	.word	0x053e2d63
 80036a8:	c3210000 	.word	0xc3210000
 80036ac:	cb840000 	.word	0xcb840000

080036b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe ff85 	bl	80025cc <LL_ADC_IsEnabled>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d16e      	bne.n	80037a6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <ADC_Enable+0x100>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036da:	f043 0210 	orr.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e05a      	b.n	80037a8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe ff54 	bl	80025a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036fc:	f7fe fcdc 	bl	80020b8 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <ADC_Enable+0x104>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <ADC_Enable+0x66>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a29      	ldr	r2, [pc, #164]	; (80037b8 <ADC_Enable+0x108>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <ADC_Enable+0x6a>
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <ADC_Enable+0x10c>)
 8003718:	e000      	b.n	800371c <ADC_Enable+0x6c>
 800371a:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <ADC_Enable+0x110>)
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe fee5 	bl	80024ec <LL_ADC_GetMultimode>
 8003722:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a23      	ldr	r2, [pc, #140]	; (80037b8 <ADC_Enable+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d002      	beq.n	8003734 <ADC_Enable+0x84>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	e000      	b.n	8003736 <ADC_Enable+0x86>
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <ADC_Enable+0x104>)
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	4293      	cmp	r3, r2
 800373c:	d02c      	beq.n	8003798 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d130      	bne.n	80037a6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003744:	e028      	b.n	8003798 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe ff3e 	bl	80025cc <LL_ADC_IsEnabled>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d104      	bne.n	8003760 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe ff22 	bl	80025a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003760:	f7fe fcaa 	bl	80020b8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d914      	bls.n	8003798 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d00d      	beq.n	8003798 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	f043 0210 	orr.w	r2, r3, #16
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e007      	b.n	80037a8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d1cf      	bne.n	8003746 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	8000003f 	.word	0x8000003f
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40022100 	.word	0x40022100
 80037bc:	40022300 	.word	0x40022300
 80037c0:	58026300 	.word	0x58026300

080037c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d14b      	bne.n	8003876 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d021      	beq.n	800383c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe fd8d 	bl	800231c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d032      	beq.n	800386e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d12b      	bne.n	800386e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11f      	bne.n	800386e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	661a      	str	r2, [r3, #96]	; 0x60
 800383a:	e018      	b.n	800386e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d111      	bne.n	800386e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7fd fd6c 	bl	800134c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003874:	e00e      	b.n	8003894 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff f9de 	bl	8002c44 <HAL_ADC_ErrorCallback>
}
 8003888:	e004      	b.n	8003894 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7ff f9c0 	bl	8002c30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d6:	f043 0204 	orr.w	r2, r3, #4
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff f9b0 	bl	8002c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6c      	ldr	r2, [pc, #432]	; (8003aac <ADC_ConfigureBoostMode+0x1c0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <ADC_ConfigureBoostMode+0x1c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a6b      	ldr	r2, [pc, #428]	; (8003ab0 <ADC_ConfigureBoostMode+0x1c4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d109      	bne.n	800391c <ADC_ConfigureBoostMode+0x30>
 8003908:	4b6a      	ldr	r3, [pc, #424]	; (8003ab4 <ADC_ConfigureBoostMode+0x1c8>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e008      	b.n	800392e <ADC_ConfigureBoostMode+0x42>
 800391c:	4b66      	ldr	r3, [pc, #408]	; (8003ab8 <ADC_ConfigureBoostMode+0x1cc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d01c      	beq.n	800396c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003932:	f004 fecb 	bl	80086cc <HAL_RCC_GetHCLKFreq>
 8003936:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003940:	d010      	beq.n	8003964 <ADC_ConfigureBoostMode+0x78>
 8003942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003946:	d873      	bhi.n	8003a30 <ADC_ConfigureBoostMode+0x144>
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d002      	beq.n	8003954 <ADC_ConfigureBoostMode+0x68>
 800394e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003952:	d16d      	bne.n	8003a30 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	60fb      	str	r3, [r7, #12]
        break;
 8003962:	e068      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	60fb      	str	r3, [r7, #12]
        break;
 800396a:	e064      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800396c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	f006 f8a6 	bl	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003978:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003982:	d051      	beq.n	8003a28 <ADC_ConfigureBoostMode+0x13c>
 8003984:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003988:	d854      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 800398a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800398e:	d047      	beq.n	8003a20 <ADC_ConfigureBoostMode+0x134>
 8003990:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003994:	d84e      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 8003996:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800399a:	d03d      	beq.n	8003a18 <ADC_ConfigureBoostMode+0x12c>
 800399c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039a0:	d848      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 80039a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a6:	d033      	beq.n	8003a10 <ADC_ConfigureBoostMode+0x124>
 80039a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ac:	d842      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 80039ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039b2:	d029      	beq.n	8003a08 <ADC_ConfigureBoostMode+0x11c>
 80039b4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039b8:	d83c      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 80039ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039be:	d01a      	beq.n	80039f6 <ADC_ConfigureBoostMode+0x10a>
 80039c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039c4:	d836      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 80039c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039ca:	d014      	beq.n	80039f6 <ADC_ConfigureBoostMode+0x10a>
 80039cc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039d0:	d830      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 80039d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d6:	d00e      	beq.n	80039f6 <ADC_ConfigureBoostMode+0x10a>
 80039d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039dc:	d82a      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 80039de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039e2:	d008      	beq.n	80039f6 <ADC_ConfigureBoostMode+0x10a>
 80039e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039e8:	d824      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x148>
 80039ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ee:	d002      	beq.n	80039f6 <ADC_ConfigureBoostMode+0x10a>
 80039f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039f4:	d11e      	bne.n	8003a34 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0c9b      	lsrs	r3, r3, #18
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	60fb      	str	r3, [r7, #12]
        break;
 8003a06:	e016      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
        break;
 8003a0e:	e012      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	60fb      	str	r3, [r7, #12]
        break;
 8003a16:	e00e      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	099b      	lsrs	r3, r3, #6
 8003a1c:	60fb      	str	r3, [r7, #12]
        break;
 8003a1e:	e00a      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	09db      	lsrs	r3, r3, #7
 8003a24:	60fb      	str	r3, [r7, #12]
        break;
 8003a26:	e006      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	60fb      	str	r3, [r7, #12]
        break;
 8003a2e:	e002      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a34:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <ADC_ConfigureBoostMode+0x1d0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d808      	bhi.n	8003a56 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a54:	e025      	b.n	8003aa2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <ADC_ConfigureBoostMode+0x1d4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d80a      	bhi.n	8003a74 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a70:	609a      	str	r2, [r3, #8]
}
 8003a72:	e016      	b.n	8003aa2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <ADC_ConfigureBoostMode+0x1d8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d80a      	bhi.n	8003a92 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	e007      	b.n	8003aa2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003aa0:	609a      	str	r2, [r3, #8]
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40022100 	.word	0x40022100
 8003ab4:	40022300 	.word	0x40022300
 8003ab8:	58026300 	.word	0x58026300
 8003abc:	005f5e10 	.word	0x005f5e10
 8003ac0:	00bebc20 	.word	0x00bebc20
 8003ac4:	017d7840 	.word	0x017d7840

08003ac8 <LL_ADC_IsEnabled>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <LL_ADC_IsEnabled+0x18>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <LL_ADC_IsEnabled+0x1a>
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_ADC_REG_IsConversionOngoing>:
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b0a3      	sub	sp, #140	; 0x8c
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e0c1      	b.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5e      	ldr	r2, [pc, #376]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d102      	bne.n	8003b52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b4c:	4b5d      	ldr	r3, [pc, #372]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e001      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0a0      	b.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ffb9 	bl	8003aee <LL_ADC_REG_IsConversionOngoing>
 8003b7c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ffb2 	bl	8003aee <LL_ADC_REG_IsConversionOngoing>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f040 8081 	bne.w	8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d17c      	bne.n	8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a48      	ldr	r2, [pc, #288]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a46      	ldr	r2, [pc, #280]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003bae:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003bb0:	e000      	b.n	8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003bb2:	4b46      	ldr	r3, [pc, #280]	; (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003bb4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d039      	beq.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3a      	ldr	r2, [pc, #232]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10e      	bne.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003be4:	4836      	ldr	r0, [pc, #216]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003be6:	f7ff ff6f 	bl	8003ac8 <LL_ADC_IsEnabled>
 8003bea:	4604      	mov	r4, r0
 8003bec:	4835      	ldr	r0, [pc, #212]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bee:	f7ff ff6b 	bl	8003ac8 <LL_ADC_IsEnabled>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4323      	orrs	r3, r4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	e008      	b.n	8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003c02:	4833      	ldr	r0, [pc, #204]	; (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c04:	f7ff ff60 	bl	8003ac8 <LL_ADC_IsEnabled>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d047      	beq.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	6811      	ldr	r1, [r2, #0]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	6892      	ldr	r2, [r2, #8]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c2e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c30:	e03a      	b.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d10e      	bne.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003c52:	481b      	ldr	r0, [pc, #108]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c54:	f7ff ff38 	bl	8003ac8 <LL_ADC_IsEnabled>
 8003c58:	4604      	mov	r4, r0
 8003c5a:	481a      	ldr	r0, [pc, #104]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c5c:	f7ff ff34 	bl	8003ac8 <LL_ADC_IsEnabled>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4323      	orrs	r3, r4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e008      	b.n	8003c82 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003c70:	4817      	ldr	r0, [pc, #92]	; (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c72:	f7ff ff29 	bl	8003ac8 <LL_ADC_IsEnabled>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c92:	e009      	b.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003ca6:	e000      	b.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ca8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003cb2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	378c      	adds	r7, #140	; 0x8c
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd90      	pop	{r4, r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40022100 	.word	0x40022100
 8003cc8:	40022300 	.word	0x40022300
 8003ccc:	58026300 	.word	0x58026300
 8003cd0:	58026000 	.word	0x58026000
 8003cd4:	fffff0e0 	.word	0xfffff0e0

08003cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <__NVIC_SetPriorityGrouping+0x40>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <__NVIC_SetPriorityGrouping+0x40>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	60d3      	str	r3, [r2, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00
 8003d1c:	05fa0000 	.word	0x05fa0000

08003d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <__NVIC_GetPriorityGrouping+0x18>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 0307 	and.w	r3, r3, #7
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db0b      	blt.n	8003d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	4907      	ldr	r1, [pc, #28]	; (8003d74 <__NVIC_EnableIRQ+0x38>)
 8003d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
         );
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e44:	d301      	bcc.n	8003e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00f      	b.n	8003e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <SysTick_Config+0x40>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e52:	210f      	movs	r1, #15
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	f7ff ff8e 	bl	8003d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <SysTick_Config+0x40>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <SysTick_Config+0x40>)
 8003e64:	2207      	movs	r2, #7
 8003e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	e000e010 	.word	0xe000e010

08003e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff29 	bl	8003cd8 <__NVIC_SetPriorityGrouping>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9c:	f7ff ff40 	bl	8003d20 <__NVIC_GetPriorityGrouping>
 8003ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7ff ff90 	bl	8003dcc <NVIC_EncodePriority>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff5f 	bl	8003d78 <__NVIC_SetPriority>
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff33 	bl	8003d3c <__NVIC_EnableIRQ>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ffa4 	bl	8003e34 <SysTick_Config>
 8003eec:	4603      	mov	r3, r0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f00:	f7fe f8da 	bl	80020b8 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e312      	b.n	8004536 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a66      	ldr	r2, [pc, #408]	; (80040b0 <HAL_DMA_Init+0x1b8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d04a      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a65      	ldr	r2, [pc, #404]	; (80040b4 <HAL_DMA_Init+0x1bc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d045      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a63      	ldr	r2, [pc, #396]	; (80040b8 <HAL_DMA_Init+0x1c0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d040      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a62      	ldr	r2, [pc, #392]	; (80040bc <HAL_DMA_Init+0x1c4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d03b      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a60      	ldr	r2, [pc, #384]	; (80040c0 <HAL_DMA_Init+0x1c8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d036      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a5f      	ldr	r2, [pc, #380]	; (80040c4 <HAL_DMA_Init+0x1cc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d031      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <HAL_DMA_Init+0x1d0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d02c      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5c      	ldr	r2, [pc, #368]	; (80040cc <HAL_DMA_Init+0x1d4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d027      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5a      	ldr	r2, [pc, #360]	; (80040d0 <HAL_DMA_Init+0x1d8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a59      	ldr	r2, [pc, #356]	; (80040d4 <HAL_DMA_Init+0x1dc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01d      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a57      	ldr	r2, [pc, #348]	; (80040d8 <HAL_DMA_Init+0x1e0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a56      	ldr	r2, [pc, #344]	; (80040dc <HAL_DMA_Init+0x1e4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a54      	ldr	r2, [pc, #336]	; (80040e0 <HAL_DMA_Init+0x1e8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <HAL_DMA_Init+0x1ec>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a51      	ldr	r2, [pc, #324]	; (80040e8 <HAL_DMA_Init+0x1f0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_DMA_Init+0xb8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a50      	ldr	r2, [pc, #320]	; (80040ec <HAL_DMA_Init+0x1f4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_DMA_Init+0xbc>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_DMA_Init+0xbe>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 813c 	beq.w	8004234 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a37      	ldr	r2, [pc, #220]	; (80040b0 <HAL_DMA_Init+0x1b8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d04a      	beq.n	800406c <HAL_DMA_Init+0x174>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a36      	ldr	r2, [pc, #216]	; (80040b4 <HAL_DMA_Init+0x1bc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d045      	beq.n	800406c <HAL_DMA_Init+0x174>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a34      	ldr	r2, [pc, #208]	; (80040b8 <HAL_DMA_Init+0x1c0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d040      	beq.n	800406c <HAL_DMA_Init+0x174>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a33      	ldr	r2, [pc, #204]	; (80040bc <HAL_DMA_Init+0x1c4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d03b      	beq.n	800406c <HAL_DMA_Init+0x174>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a31      	ldr	r2, [pc, #196]	; (80040c0 <HAL_DMA_Init+0x1c8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d036      	beq.n	800406c <HAL_DMA_Init+0x174>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <HAL_DMA_Init+0x1cc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d031      	beq.n	800406c <HAL_DMA_Init+0x174>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2e      	ldr	r2, [pc, #184]	; (80040c8 <HAL_DMA_Init+0x1d0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02c      	beq.n	800406c <HAL_DMA_Init+0x174>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2d      	ldr	r2, [pc, #180]	; (80040cc <HAL_DMA_Init+0x1d4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d027      	beq.n	800406c <HAL_DMA_Init+0x174>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <HAL_DMA_Init+0x1d8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d022      	beq.n	800406c <HAL_DMA_Init+0x174>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <HAL_DMA_Init+0x1dc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d01d      	beq.n	800406c <HAL_DMA_Init+0x174>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <HAL_DMA_Init+0x1e0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d018      	beq.n	800406c <HAL_DMA_Init+0x174>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <HAL_DMA_Init+0x1e4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <HAL_DMA_Init+0x174>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a25      	ldr	r2, [pc, #148]	; (80040e0 <HAL_DMA_Init+0x1e8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00e      	beq.n	800406c <HAL_DMA_Init+0x174>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <HAL_DMA_Init+0x1ec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <HAL_DMA_Init+0x174>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_DMA_Init+0x1f0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_DMA_Init+0x174>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a21      	ldr	r2, [pc, #132]	; (80040ec <HAL_DMA_Init+0x1f4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <HAL_DMA_Init+0x186>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e007      	b.n	800408e <HAL_DMA_Init+0x196>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800408e:	e02f      	b.n	80040f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004090:	f7fe f812 	bl	80020b8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b05      	cmp	r3, #5
 800409c:	d928      	bls.n	80040f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2203      	movs	r2, #3
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e242      	b.n	8004536 <HAL_DMA_Init+0x63e>
 80040b0:	40020010 	.word	0x40020010
 80040b4:	40020028 	.word	0x40020028
 80040b8:	40020040 	.word	0x40020040
 80040bc:	40020058 	.word	0x40020058
 80040c0:	40020070 	.word	0x40020070
 80040c4:	40020088 	.word	0x40020088
 80040c8:	400200a0 	.word	0x400200a0
 80040cc:	400200b8 	.word	0x400200b8
 80040d0:	40020410 	.word	0x40020410
 80040d4:	40020428 	.word	0x40020428
 80040d8:	40020440 	.word	0x40020440
 80040dc:	40020458 	.word	0x40020458
 80040e0:	40020470 	.word	0x40020470
 80040e4:	40020488 	.word	0x40020488
 80040e8:	400204a0 	.word	0x400204a0
 80040ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1c8      	bne.n	8004090 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4b83      	ldr	r3, [pc, #524]	; (8004318 <HAL_DMA_Init+0x420>)
 800410a:	4013      	ands	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004116:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004122:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	2b04      	cmp	r3, #4
 8004142:	d107      	bne.n	8004154 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	4313      	orrs	r3, r2
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b28      	cmp	r3, #40	; 0x28
 800415a:	d903      	bls.n	8004164 <HAL_DMA_Init+0x26c>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b2e      	cmp	r3, #46	; 0x2e
 8004162:	d91f      	bls.n	80041a4 <HAL_DMA_Init+0x2ac>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b3e      	cmp	r3, #62	; 0x3e
 800416a:	d903      	bls.n	8004174 <HAL_DMA_Init+0x27c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b42      	cmp	r3, #66	; 0x42
 8004172:	d917      	bls.n	80041a4 <HAL_DMA_Init+0x2ac>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b46      	cmp	r3, #70	; 0x46
 800417a:	d903      	bls.n	8004184 <HAL_DMA_Init+0x28c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b48      	cmp	r3, #72	; 0x48
 8004182:	d90f      	bls.n	80041a4 <HAL_DMA_Init+0x2ac>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b4e      	cmp	r3, #78	; 0x4e
 800418a:	d903      	bls.n	8004194 <HAL_DMA_Init+0x29c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b52      	cmp	r3, #82	; 0x52
 8004192:	d907      	bls.n	80041a4 <HAL_DMA_Init+0x2ac>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b73      	cmp	r3, #115	; 0x73
 800419a:	d905      	bls.n	80041a8 <HAL_DMA_Init+0x2b0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b77      	cmp	r3, #119	; 0x77
 80041a2:	d801      	bhi.n	80041a8 <HAL_DMA_Init+0x2b0>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_DMA_Init+0x2b2>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 0307 	bic.w	r3, r3, #7
 80041cc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d117      	bne.n	8004210 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00e      	beq.n	8004210 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f002 fb2e 	bl	8006854 <DMA_CheckFifoParam>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2240      	movs	r2, #64	; 0x40
 8004202:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e192      	b.n	8004536 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f002 fa69 	bl	80066f0 <DMA_CalcBaseAndBitshift>
 800421e:	4603      	mov	r3, r0
 8004220:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	223f      	movs	r2, #63	; 0x3f
 800422c:	409a      	lsls	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	e0c8      	b.n	80043c6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a38      	ldr	r2, [pc, #224]	; (800431c <HAL_DMA_Init+0x424>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_Init+0x38c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a37      	ldr	r2, [pc, #220]	; (8004320 <HAL_DMA_Init+0x428>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_Init+0x38c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a35      	ldr	r2, [pc, #212]	; (8004324 <HAL_DMA_Init+0x42c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_Init+0x38c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a34      	ldr	r2, [pc, #208]	; (8004328 <HAL_DMA_Init+0x430>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_Init+0x38c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a32      	ldr	r2, [pc, #200]	; (800432c <HAL_DMA_Init+0x434>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_Init+0x38c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a31      	ldr	r2, [pc, #196]	; (8004330 <HAL_DMA_Init+0x438>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_Init+0x38c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2f      	ldr	r2, [pc, #188]	; (8004334 <HAL_DMA_Init+0x43c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_Init+0x38c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2e      	ldr	r2, [pc, #184]	; (8004338 <HAL_DMA_Init+0x440>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_DMA_Init+0x390>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_DMA_Init+0x392>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8092 	beq.w	80043b4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a21      	ldr	r2, [pc, #132]	; (800431c <HAL_DMA_Init+0x424>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d021      	beq.n	80042de <HAL_DMA_Init+0x3e6>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a20      	ldr	r2, [pc, #128]	; (8004320 <HAL_DMA_Init+0x428>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d01c      	beq.n	80042de <HAL_DMA_Init+0x3e6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <HAL_DMA_Init+0x42c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d017      	beq.n	80042de <HAL_DMA_Init+0x3e6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <HAL_DMA_Init+0x430>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d012      	beq.n	80042de <HAL_DMA_Init+0x3e6>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_DMA_Init+0x434>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00d      	beq.n	80042de <HAL_DMA_Init+0x3e6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <HAL_DMA_Init+0x438>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d008      	beq.n	80042de <HAL_DMA_Init+0x3e6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_DMA_Init+0x43c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <HAL_DMA_Init+0x3e6>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <HAL_DMA_Init+0x440>)
 80042dc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4b10      	ldr	r3, [pc, #64]	; (800433c <HAL_DMA_Init+0x444>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d01c      	beq.n	8004340 <HAL_DMA_Init+0x448>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d102      	bne.n	8004314 <HAL_DMA_Init+0x41c>
 800430e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004312:	e016      	b.n	8004342 <HAL_DMA_Init+0x44a>
 8004314:	2300      	movs	r3, #0
 8004316:	e014      	b.n	8004342 <HAL_DMA_Init+0x44a>
 8004318:	fe10803f 	.word	0xfe10803f
 800431c:	58025408 	.word	0x58025408
 8004320:	5802541c 	.word	0x5802541c
 8004324:	58025430 	.word	0x58025430
 8004328:	58025444 	.word	0x58025444
 800432c:	58025458 	.word	0x58025458
 8004330:	5802546c 	.word	0x5802546c
 8004334:	58025480 	.word	0x58025480
 8004338:	58025494 	.word	0x58025494
 800433c:	fffe000f 	.word	0xfffe000f
 8004340:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68d2      	ldr	r2, [r2, #12]
 8004346:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004370:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	4b6e      	ldr	r3, [pc, #440]	; (8004540 <HAL_DMA_Init+0x648>)
 8004388:	4413      	add	r3, r2
 800438a:	4a6e      	ldr	r2, [pc, #440]	; (8004544 <HAL_DMA_Init+0x64c>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f002 f9a9 	bl	80066f0 <DMA_CalcBaseAndBitshift>
 800439e:	4603      	mov	r3, r0
 80043a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2201      	movs	r2, #1
 80043ac:	409a      	lsls	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	e008      	b.n	80043c6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2240      	movs	r2, #64	; 0x40
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0b7      	b.n	8004536 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a5f      	ldr	r2, [pc, #380]	; (8004548 <HAL_DMA_Init+0x650>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d072      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a5d      	ldr	r2, [pc, #372]	; (800454c <HAL_DMA_Init+0x654>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d06d      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a5c      	ldr	r2, [pc, #368]	; (8004550 <HAL_DMA_Init+0x658>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d068      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5a      	ldr	r2, [pc, #360]	; (8004554 <HAL_DMA_Init+0x65c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d063      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a59      	ldr	r2, [pc, #356]	; (8004558 <HAL_DMA_Init+0x660>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d05e      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a57      	ldr	r2, [pc, #348]	; (800455c <HAL_DMA_Init+0x664>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d059      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a56      	ldr	r2, [pc, #344]	; (8004560 <HAL_DMA_Init+0x668>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d054      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a54      	ldr	r2, [pc, #336]	; (8004564 <HAL_DMA_Init+0x66c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d04f      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a53      	ldr	r2, [pc, #332]	; (8004568 <HAL_DMA_Init+0x670>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d04a      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a51      	ldr	r2, [pc, #324]	; (800456c <HAL_DMA_Init+0x674>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d045      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a50      	ldr	r2, [pc, #320]	; (8004570 <HAL_DMA_Init+0x678>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d040      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a4e      	ldr	r2, [pc, #312]	; (8004574 <HAL_DMA_Init+0x67c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d03b      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a4d      	ldr	r2, [pc, #308]	; (8004578 <HAL_DMA_Init+0x680>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d036      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a4b      	ldr	r2, [pc, #300]	; (800457c <HAL_DMA_Init+0x684>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d031      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a4a      	ldr	r2, [pc, #296]	; (8004580 <HAL_DMA_Init+0x688>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d02c      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a48      	ldr	r2, [pc, #288]	; (8004584 <HAL_DMA_Init+0x68c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d027      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a47      	ldr	r2, [pc, #284]	; (8004588 <HAL_DMA_Init+0x690>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d022      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a45      	ldr	r2, [pc, #276]	; (800458c <HAL_DMA_Init+0x694>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01d      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a44      	ldr	r2, [pc, #272]	; (8004590 <HAL_DMA_Init+0x698>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d018      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a42      	ldr	r2, [pc, #264]	; (8004594 <HAL_DMA_Init+0x69c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a41      	ldr	r2, [pc, #260]	; (8004598 <HAL_DMA_Init+0x6a0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00e      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a3f      	ldr	r2, [pc, #252]	; (800459c <HAL_DMA_Init+0x6a4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3e      	ldr	r2, [pc, #248]	; (80045a0 <HAL_DMA_Init+0x6a8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_DMA_Init+0x5be>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3c      	ldr	r2, [pc, #240]	; (80045a4 <HAL_DMA_Init+0x6ac>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d101      	bne.n	80044ba <HAL_DMA_Init+0x5c2>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <HAL_DMA_Init+0x5c4>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d032      	beq.n	8004526 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f002 fa43 	bl	800694c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d102      	bne.n	80044d4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d010      	beq.n	8004514 <HAL_DMA_Init+0x61c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d80c      	bhi.n	8004514 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f002 fac0 	bl	8006a80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	e008      	b.n	8004526 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	a7fdabf8 	.word	0xa7fdabf8
 8004544:	cccccccd 	.word	0xcccccccd
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
 8004588:	58025408 	.word	0x58025408
 800458c:	5802541c 	.word	0x5802541c
 8004590:	58025430 	.word	0x58025430
 8004594:	58025444 	.word	0x58025444
 8004598:	58025458 	.word	0x58025458
 800459c:	5802546c 	.word	0x5802546c
 80045a0:	58025480 	.word	0x58025480
 80045a4:	58025494 	.word	0x58025494

080045a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e226      	b.n	8004a12 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_DMA_Start_IT+0x2a>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e21f      	b.n	8004a12 <HAL_DMA_Start_IT+0x46a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	f040 820a 	bne.w	80049fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a68      	ldr	r2, [pc, #416]	; (800479c <HAL_DMA_Start_IT+0x1f4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d04a      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a66      	ldr	r2, [pc, #408]	; (80047a0 <HAL_DMA_Start_IT+0x1f8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d045      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a65      	ldr	r2, [pc, #404]	; (80047a4 <HAL_DMA_Start_IT+0x1fc>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d040      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a63      	ldr	r2, [pc, #396]	; (80047a8 <HAL_DMA_Start_IT+0x200>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d03b      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a62      	ldr	r2, [pc, #392]	; (80047ac <HAL_DMA_Start_IT+0x204>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d036      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a60      	ldr	r2, [pc, #384]	; (80047b0 <HAL_DMA_Start_IT+0x208>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d031      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a5f      	ldr	r2, [pc, #380]	; (80047b4 <HAL_DMA_Start_IT+0x20c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d02c      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a5d      	ldr	r2, [pc, #372]	; (80047b8 <HAL_DMA_Start_IT+0x210>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d027      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a5c      	ldr	r2, [pc, #368]	; (80047bc <HAL_DMA_Start_IT+0x214>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d022      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a5a      	ldr	r2, [pc, #360]	; (80047c0 <HAL_DMA_Start_IT+0x218>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01d      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a59      	ldr	r2, [pc, #356]	; (80047c4 <HAL_DMA_Start_IT+0x21c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_DMA_Start_IT+0x220>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a56      	ldr	r2, [pc, #344]	; (80047cc <HAL_DMA_Start_IT+0x224>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a54      	ldr	r2, [pc, #336]	; (80047d0 <HAL_DMA_Start_IT+0x228>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a53      	ldr	r2, [pc, #332]	; (80047d4 <HAL_DMA_Start_IT+0x22c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_DMA_Start_IT+0xee>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_DMA_Start_IT+0x230>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d108      	bne.n	80046a8 <HAL_DMA_Start_IT+0x100>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e007      	b.n	80046b8 <HAL_DMA_Start_IT+0x110>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f001 fe6a 	bl	8006398 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a34      	ldr	r2, [pc, #208]	; (800479c <HAL_DMA_Start_IT+0x1f4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a33      	ldr	r2, [pc, #204]	; (80047a0 <HAL_DMA_Start_IT+0x1f8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d045      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a31      	ldr	r2, [pc, #196]	; (80047a4 <HAL_DMA_Start_IT+0x1fc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d040      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a30      	ldr	r2, [pc, #192]	; (80047a8 <HAL_DMA_Start_IT+0x200>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d03b      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2e      	ldr	r2, [pc, #184]	; (80047ac <HAL_DMA_Start_IT+0x204>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d036      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2d      	ldr	r2, [pc, #180]	; (80047b0 <HAL_DMA_Start_IT+0x208>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <HAL_DMA_Start_IT+0x20c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <HAL_DMA_Start_IT+0x210>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d027      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a28      	ldr	r2, [pc, #160]	; (80047bc <HAL_DMA_Start_IT+0x214>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a27      	ldr	r2, [pc, #156]	; (80047c0 <HAL_DMA_Start_IT+0x218>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <HAL_DMA_Start_IT+0x21c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a24      	ldr	r2, [pc, #144]	; (80047c8 <HAL_DMA_Start_IT+0x220>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a22      	ldr	r2, [pc, #136]	; (80047cc <HAL_DMA_Start_IT+0x224>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <HAL_DMA_Start_IT+0x228>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <HAL_DMA_Start_IT+0x22c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_Start_IT+0x1bc>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <HAL_DMA_Start_IT+0x230>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d101      	bne.n	8004768 <HAL_DMA_Start_IT+0x1c0>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_DMA_Start_IT+0x1c2>
 8004768:	2300      	movs	r3, #0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d036      	beq.n	80047dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 021e 	bic.w	r2, r3, #30
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0216 	orr.w	r2, r2, #22
 8004780:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03e      	beq.n	8004808 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0208 	orr.w	r2, r2, #8
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e035      	b.n	8004808 <HAL_DMA_Start_IT+0x260>
 800479c:	40020010 	.word	0x40020010
 80047a0:	40020028 	.word	0x40020028
 80047a4:	40020040 	.word	0x40020040
 80047a8:	40020058 	.word	0x40020058
 80047ac:	40020070 	.word	0x40020070
 80047b0:	40020088 	.word	0x40020088
 80047b4:	400200a0 	.word	0x400200a0
 80047b8:	400200b8 	.word	0x400200b8
 80047bc:	40020410 	.word	0x40020410
 80047c0:	40020428 	.word	0x40020428
 80047c4:	40020440 	.word	0x40020440
 80047c8:	40020458 	.word	0x40020458
 80047cc:	40020470 	.word	0x40020470
 80047d0:	40020488 	.word	0x40020488
 80047d4:	400204a0 	.word	0x400204a0
 80047d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 020e 	bic.w	r2, r3, #14
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 020a 	orr.w	r2, r2, #10
 80047ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0204 	orr.w	r2, r2, #4
 8004806:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a83      	ldr	r2, [pc, #524]	; (8004a1c <HAL_DMA_Start_IT+0x474>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d072      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a82      	ldr	r2, [pc, #520]	; (8004a20 <HAL_DMA_Start_IT+0x478>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d06d      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a80      	ldr	r2, [pc, #512]	; (8004a24 <HAL_DMA_Start_IT+0x47c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d068      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7f      	ldr	r2, [pc, #508]	; (8004a28 <HAL_DMA_Start_IT+0x480>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d063      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a7d      	ldr	r2, [pc, #500]	; (8004a2c <HAL_DMA_Start_IT+0x484>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d05e      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a7c      	ldr	r2, [pc, #496]	; (8004a30 <HAL_DMA_Start_IT+0x488>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d059      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a7a      	ldr	r2, [pc, #488]	; (8004a34 <HAL_DMA_Start_IT+0x48c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d054      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a79      	ldr	r2, [pc, #484]	; (8004a38 <HAL_DMA_Start_IT+0x490>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04f      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a77      	ldr	r2, [pc, #476]	; (8004a3c <HAL_DMA_Start_IT+0x494>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d04a      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a76      	ldr	r2, [pc, #472]	; (8004a40 <HAL_DMA_Start_IT+0x498>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d045      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a74      	ldr	r2, [pc, #464]	; (8004a44 <HAL_DMA_Start_IT+0x49c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d040      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a73      	ldr	r2, [pc, #460]	; (8004a48 <HAL_DMA_Start_IT+0x4a0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d03b      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a71      	ldr	r2, [pc, #452]	; (8004a4c <HAL_DMA_Start_IT+0x4a4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d036      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a70      	ldr	r2, [pc, #448]	; (8004a50 <HAL_DMA_Start_IT+0x4a8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d031      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a6e      	ldr	r2, [pc, #440]	; (8004a54 <HAL_DMA_Start_IT+0x4ac>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02c      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a6d      	ldr	r2, [pc, #436]	; (8004a58 <HAL_DMA_Start_IT+0x4b0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d027      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a6b      	ldr	r2, [pc, #428]	; (8004a5c <HAL_DMA_Start_IT+0x4b4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a6a      	ldr	r2, [pc, #424]	; (8004a60 <HAL_DMA_Start_IT+0x4b8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d01d      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a68      	ldr	r2, [pc, #416]	; (8004a64 <HAL_DMA_Start_IT+0x4bc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a67      	ldr	r2, [pc, #412]	; (8004a68 <HAL_DMA_Start_IT+0x4c0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a65      	ldr	r2, [pc, #404]	; (8004a6c <HAL_DMA_Start_IT+0x4c4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a64      	ldr	r2, [pc, #400]	; (8004a70 <HAL_DMA_Start_IT+0x4c8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a62      	ldr	r2, [pc, #392]	; (8004a74 <HAL_DMA_Start_IT+0x4cc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_DMA_Start_IT+0x350>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a61      	ldr	r2, [pc, #388]	; (8004a78 <HAL_DMA_Start_IT+0x4d0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d101      	bne.n	80048fc <HAL_DMA_Start_IT+0x354>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_DMA_Start_IT+0x356>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01a      	beq.n	8004938 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004936:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a37      	ldr	r2, [pc, #220]	; (8004a1c <HAL_DMA_Start_IT+0x474>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d04a      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a36      	ldr	r2, [pc, #216]	; (8004a20 <HAL_DMA_Start_IT+0x478>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d045      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a34      	ldr	r2, [pc, #208]	; (8004a24 <HAL_DMA_Start_IT+0x47c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d040      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a33      	ldr	r2, [pc, #204]	; (8004a28 <HAL_DMA_Start_IT+0x480>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d03b      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a31      	ldr	r2, [pc, #196]	; (8004a2c <HAL_DMA_Start_IT+0x484>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d036      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <HAL_DMA_Start_IT+0x488>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d031      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2e      	ldr	r2, [pc, #184]	; (8004a34 <HAL_DMA_Start_IT+0x48c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d02c      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a2d      	ldr	r2, [pc, #180]	; (8004a38 <HAL_DMA_Start_IT+0x490>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d027      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <HAL_DMA_Start_IT+0x494>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d022      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a2a      	ldr	r2, [pc, #168]	; (8004a40 <HAL_DMA_Start_IT+0x498>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d01d      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a28      	ldr	r2, [pc, #160]	; (8004a44 <HAL_DMA_Start_IT+0x49c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d018      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a27      	ldr	r2, [pc, #156]	; (8004a48 <HAL_DMA_Start_IT+0x4a0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a25      	ldr	r2, [pc, #148]	; (8004a4c <HAL_DMA_Start_IT+0x4a4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00e      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <HAL_DMA_Start_IT+0x4a8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a22      	ldr	r2, [pc, #136]	; (8004a54 <HAL_DMA_Start_IT+0x4ac>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_DMA_Start_IT+0x430>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a21      	ldr	r2, [pc, #132]	; (8004a58 <HAL_DMA_Start_IT+0x4b0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d108      	bne.n	80049ea <HAL_DMA_Start_IT+0x442>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e012      	b.n	8004a10 <HAL_DMA_Start_IT+0x468>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e009      	b.n	8004a10 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40020010 	.word	0x40020010
 8004a20:	40020028 	.word	0x40020028
 8004a24:	40020040 	.word	0x40020040
 8004a28:	40020058 	.word	0x40020058
 8004a2c:	40020070 	.word	0x40020070
 8004a30:	40020088 	.word	0x40020088
 8004a34:	400200a0 	.word	0x400200a0
 8004a38:	400200b8 	.word	0x400200b8
 8004a3c:	40020410 	.word	0x40020410
 8004a40:	40020428 	.word	0x40020428
 8004a44:	40020440 	.word	0x40020440
 8004a48:	40020458 	.word	0x40020458
 8004a4c:	40020470 	.word	0x40020470
 8004a50:	40020488 	.word	0x40020488
 8004a54:	400204a0 	.word	0x400204a0
 8004a58:	400204b8 	.word	0x400204b8
 8004a5c:	58025408 	.word	0x58025408
 8004a60:	5802541c 	.word	0x5802541c
 8004a64:	58025430 	.word	0x58025430
 8004a68:	58025444 	.word	0x58025444
 8004a6c:	58025458 	.word	0x58025458
 8004a70:	5802546c 	.word	0x5802546c
 8004a74:	58025480 	.word	0x58025480
 8004a78:	58025494 	.word	0x58025494

08004a7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004a84:	f7fd fb18 	bl	80020b8 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e2dc      	b.n	800504e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d008      	beq.n	8004ab2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2280      	movs	r2, #128	; 0x80
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e2cd      	b.n	800504e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a76      	ldr	r2, [pc, #472]	; (8004c90 <HAL_DMA_Abort+0x214>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04a      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a74      	ldr	r2, [pc, #464]	; (8004c94 <HAL_DMA_Abort+0x218>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d045      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a73      	ldr	r2, [pc, #460]	; (8004c98 <HAL_DMA_Abort+0x21c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d040      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a71      	ldr	r2, [pc, #452]	; (8004c9c <HAL_DMA_Abort+0x220>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d03b      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a70      	ldr	r2, [pc, #448]	; (8004ca0 <HAL_DMA_Abort+0x224>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d036      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a6e      	ldr	r2, [pc, #440]	; (8004ca4 <HAL_DMA_Abort+0x228>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d031      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6d      	ldr	r2, [pc, #436]	; (8004ca8 <HAL_DMA_Abort+0x22c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d02c      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a6b      	ldr	r2, [pc, #428]	; (8004cac <HAL_DMA_Abort+0x230>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d027      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6a      	ldr	r2, [pc, #424]	; (8004cb0 <HAL_DMA_Abort+0x234>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a68      	ldr	r2, [pc, #416]	; (8004cb4 <HAL_DMA_Abort+0x238>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01d      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a67      	ldr	r2, [pc, #412]	; (8004cb8 <HAL_DMA_Abort+0x23c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a65      	ldr	r2, [pc, #404]	; (8004cbc <HAL_DMA_Abort+0x240>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a64      	ldr	r2, [pc, #400]	; (8004cc0 <HAL_DMA_Abort+0x244>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a62      	ldr	r2, [pc, #392]	; (8004cc4 <HAL_DMA_Abort+0x248>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a61      	ldr	r2, [pc, #388]	; (8004cc8 <HAL_DMA_Abort+0x24c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_DMA_Abort+0xd6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a5f      	ldr	r2, [pc, #380]	; (8004ccc <HAL_DMA_Abort+0x250>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d101      	bne.n	8004b56 <HAL_DMA_Abort+0xda>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_DMA_Abort+0xdc>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d013      	beq.n	8004b84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 021e 	bic.w	r2, r2, #30
 8004b6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e00a      	b.n	8004b9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 020e 	bic.w	r2, r2, #14
 8004b92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a3c      	ldr	r2, [pc, #240]	; (8004c90 <HAL_DMA_Abort+0x214>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d072      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <HAL_DMA_Abort+0x218>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d06d      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a39      	ldr	r2, [pc, #228]	; (8004c98 <HAL_DMA_Abort+0x21c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d068      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a37      	ldr	r2, [pc, #220]	; (8004c9c <HAL_DMA_Abort+0x220>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d063      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a36      	ldr	r2, [pc, #216]	; (8004ca0 <HAL_DMA_Abort+0x224>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d05e      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_DMA_Abort+0x228>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d059      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <HAL_DMA_Abort+0x22c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d054      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a31      	ldr	r2, [pc, #196]	; (8004cac <HAL_DMA_Abort+0x230>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d04f      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a30      	ldr	r2, [pc, #192]	; (8004cb0 <HAL_DMA_Abort+0x234>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d04a      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a2e      	ldr	r2, [pc, #184]	; (8004cb4 <HAL_DMA_Abort+0x238>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d045      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a2d      	ldr	r2, [pc, #180]	; (8004cb8 <HAL_DMA_Abort+0x23c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d040      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2b      	ldr	r2, [pc, #172]	; (8004cbc <HAL_DMA_Abort+0x240>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d03b      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2a      	ldr	r2, [pc, #168]	; (8004cc0 <HAL_DMA_Abort+0x244>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d036      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <HAL_DMA_Abort+0x248>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d031      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a27      	ldr	r2, [pc, #156]	; (8004cc8 <HAL_DMA_Abort+0x24c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d02c      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a25      	ldr	r2, [pc, #148]	; (8004ccc <HAL_DMA_Abort+0x250>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d027      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a24      	ldr	r2, [pc, #144]	; (8004cd0 <HAL_DMA_Abort+0x254>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <HAL_DMA_Abort+0x258>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01d      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <HAL_DMA_Abort+0x25c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_DMA_Abort+0x260>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <HAL_DMA_Abort+0x264>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_DMA_Abort+0x268>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_DMA_Abort+0x26c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_Abort+0x20e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_DMA_Abort+0x270>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d132      	bne.n	8004cf0 <HAL_DMA_Abort+0x274>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e031      	b.n	8004cf2 <HAL_DMA_Abort+0x276>
 8004c8e:	bf00      	nop
 8004c90:	40020010 	.word	0x40020010
 8004c94:	40020028 	.word	0x40020028
 8004c98:	40020040 	.word	0x40020040
 8004c9c:	40020058 	.word	0x40020058
 8004ca0:	40020070 	.word	0x40020070
 8004ca4:	40020088 	.word	0x40020088
 8004ca8:	400200a0 	.word	0x400200a0
 8004cac:	400200b8 	.word	0x400200b8
 8004cb0:	40020410 	.word	0x40020410
 8004cb4:	40020428 	.word	0x40020428
 8004cb8:	40020440 	.word	0x40020440
 8004cbc:	40020458 	.word	0x40020458
 8004cc0:	40020470 	.word	0x40020470
 8004cc4:	40020488 	.word	0x40020488
 8004cc8:	400204a0 	.word	0x400204a0
 8004ccc:	400204b8 	.word	0x400204b8
 8004cd0:	58025408 	.word	0x58025408
 8004cd4:	5802541c 	.word	0x5802541c
 8004cd8:	58025430 	.word	0x58025430
 8004cdc:	58025444 	.word	0x58025444
 8004ce0:	58025458 	.word	0x58025458
 8004ce4:	5802546c 	.word	0x5802546c
 8004ce8:	58025480 	.word	0x58025480
 8004cec:	58025494 	.word	0x58025494
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6d      	ldr	r2, [pc, #436]	; (8004ec0 <HAL_DMA_Abort+0x444>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d04a      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a6b      	ldr	r2, [pc, #428]	; (8004ec4 <HAL_DMA_Abort+0x448>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d045      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a6a      	ldr	r2, [pc, #424]	; (8004ec8 <HAL_DMA_Abort+0x44c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d040      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	; (8004ecc <HAL_DMA_Abort+0x450>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d03b      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a67      	ldr	r2, [pc, #412]	; (8004ed0 <HAL_DMA_Abort+0x454>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d036      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a65      	ldr	r2, [pc, #404]	; (8004ed4 <HAL_DMA_Abort+0x458>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d031      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a64      	ldr	r2, [pc, #400]	; (8004ed8 <HAL_DMA_Abort+0x45c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d02c      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a62      	ldr	r2, [pc, #392]	; (8004edc <HAL_DMA_Abort+0x460>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d027      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a61      	ldr	r2, [pc, #388]	; (8004ee0 <HAL_DMA_Abort+0x464>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d022      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a5f      	ldr	r2, [pc, #380]	; (8004ee4 <HAL_DMA_Abort+0x468>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01d      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a5e      	ldr	r2, [pc, #376]	; (8004ee8 <HAL_DMA_Abort+0x46c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d018      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a5c      	ldr	r2, [pc, #368]	; (8004eec <HAL_DMA_Abort+0x470>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a5b      	ldr	r2, [pc, #364]	; (8004ef0 <HAL_DMA_Abort+0x474>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a59      	ldr	r2, [pc, #356]	; (8004ef4 <HAL_DMA_Abort+0x478>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a58      	ldr	r2, [pc, #352]	; (8004ef8 <HAL_DMA_Abort+0x47c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_DMA_Abort+0x32a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a56      	ldr	r2, [pc, #344]	; (8004efc <HAL_DMA_Abort+0x480>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <HAL_DMA_Abort+0x33c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e007      	b.n	8004dc8 <HAL_DMA_Abort+0x34c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004dc8:	e013      	b.n	8004df2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dca:	f7fd f975 	bl	80020b8 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	d90c      	bls.n	8004df2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2203      	movs	r2, #3
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e12d      	b.n	800504e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2f      	ldr	r2, [pc, #188]	; (8004ec0 <HAL_DMA_Abort+0x444>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d04a      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2d      	ldr	r2, [pc, #180]	; (8004ec4 <HAL_DMA_Abort+0x448>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d045      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2c      	ldr	r2, [pc, #176]	; (8004ec8 <HAL_DMA_Abort+0x44c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d040      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <HAL_DMA_Abort+0x450>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d03b      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <HAL_DMA_Abort+0x454>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d036      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <HAL_DMA_Abort+0x458>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d031      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <HAL_DMA_Abort+0x45c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d02c      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a24      	ldr	r2, [pc, #144]	; (8004edc <HAL_DMA_Abort+0x460>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d027      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a23      	ldr	r2, [pc, #140]	; (8004ee0 <HAL_DMA_Abort+0x464>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d022      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <HAL_DMA_Abort+0x468>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01d      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <HAL_DMA_Abort+0x46c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_DMA_Abort+0x470>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ef0 <HAL_DMA_Abort+0x474>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <HAL_DMA_Abort+0x478>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ef8 <HAL_DMA_Abort+0x47c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_DMA_Abort+0x422>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a18      	ldr	r2, [pc, #96]	; (8004efc <HAL_DMA_Abort+0x480>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <HAL_DMA_Abort+0x426>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <HAL_DMA_Abort+0x428>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02b      	beq.n	8004f00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	223f      	movs	r2, #63	; 0x3f
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	e02a      	b.n	8004f16 <HAL_DMA_Abort+0x49a>
 8004ec0:	40020010 	.word	0x40020010
 8004ec4:	40020028 	.word	0x40020028
 8004ec8:	40020040 	.word	0x40020040
 8004ecc:	40020058 	.word	0x40020058
 8004ed0:	40020070 	.word	0x40020070
 8004ed4:	40020088 	.word	0x40020088
 8004ed8:	400200a0 	.word	0x400200a0
 8004edc:	400200b8 	.word	0x400200b8
 8004ee0:	40020410 	.word	0x40020410
 8004ee4:	40020428 	.word	0x40020428
 8004ee8:	40020440 	.word	0x40020440
 8004eec:	40020458 	.word	0x40020458
 8004ef0:	40020470 	.word	0x40020470
 8004ef4:	40020488 	.word	0x40020488
 8004ef8:	400204a0 	.word	0x400204a0
 8004efc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	2201      	movs	r2, #1
 8004f10:	409a      	lsls	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a4f      	ldr	r2, [pc, #316]	; (8005058 <HAL_DMA_Abort+0x5dc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d072      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a4d      	ldr	r2, [pc, #308]	; (800505c <HAL_DMA_Abort+0x5e0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d06d      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a4c      	ldr	r2, [pc, #304]	; (8005060 <HAL_DMA_Abort+0x5e4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d068      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a4a      	ldr	r2, [pc, #296]	; (8005064 <HAL_DMA_Abort+0x5e8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d063      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a49      	ldr	r2, [pc, #292]	; (8005068 <HAL_DMA_Abort+0x5ec>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d05e      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a47      	ldr	r2, [pc, #284]	; (800506c <HAL_DMA_Abort+0x5f0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d059      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a46      	ldr	r2, [pc, #280]	; (8005070 <HAL_DMA_Abort+0x5f4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d054      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a44      	ldr	r2, [pc, #272]	; (8005074 <HAL_DMA_Abort+0x5f8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d04f      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a43      	ldr	r2, [pc, #268]	; (8005078 <HAL_DMA_Abort+0x5fc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d04a      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a41      	ldr	r2, [pc, #260]	; (800507c <HAL_DMA_Abort+0x600>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d045      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a40      	ldr	r2, [pc, #256]	; (8005080 <HAL_DMA_Abort+0x604>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d040      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a3e      	ldr	r2, [pc, #248]	; (8005084 <HAL_DMA_Abort+0x608>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d03b      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a3d      	ldr	r2, [pc, #244]	; (8005088 <HAL_DMA_Abort+0x60c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d036      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a3b      	ldr	r2, [pc, #236]	; (800508c <HAL_DMA_Abort+0x610>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d031      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a3a      	ldr	r2, [pc, #232]	; (8005090 <HAL_DMA_Abort+0x614>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d02c      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a38      	ldr	r2, [pc, #224]	; (8005094 <HAL_DMA_Abort+0x618>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d027      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a37      	ldr	r2, [pc, #220]	; (8005098 <HAL_DMA_Abort+0x61c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d022      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a35      	ldr	r2, [pc, #212]	; (800509c <HAL_DMA_Abort+0x620>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01d      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a34      	ldr	r2, [pc, #208]	; (80050a0 <HAL_DMA_Abort+0x624>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d018      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <HAL_DMA_Abort+0x628>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a31      	ldr	r2, [pc, #196]	; (80050a8 <HAL_DMA_Abort+0x62c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00e      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a2f      	ldr	r2, [pc, #188]	; (80050ac <HAL_DMA_Abort+0x630>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2e      	ldr	r2, [pc, #184]	; (80050b0 <HAL_DMA_Abort+0x634>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_DMA_Abort+0x58a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a2c      	ldr	r2, [pc, #176]	; (80050b4 <HAL_DMA_Abort+0x638>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d101      	bne.n	800500a <HAL_DMA_Abort+0x58e>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_DMA_Abort+0x590>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005018:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005030:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800503a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40020010 	.word	0x40020010
 800505c:	40020028 	.word	0x40020028
 8005060:	40020040 	.word	0x40020040
 8005064:	40020058 	.word	0x40020058
 8005068:	40020070 	.word	0x40020070
 800506c:	40020088 	.word	0x40020088
 8005070:	400200a0 	.word	0x400200a0
 8005074:	400200b8 	.word	0x400200b8
 8005078:	40020410 	.word	0x40020410
 800507c:	40020428 	.word	0x40020428
 8005080:	40020440 	.word	0x40020440
 8005084:	40020458 	.word	0x40020458
 8005088:	40020470 	.word	0x40020470
 800508c:	40020488 	.word	0x40020488
 8005090:	400204a0 	.word	0x400204a0
 8005094:	400204b8 	.word	0x400204b8
 8005098:	58025408 	.word	0x58025408
 800509c:	5802541c 	.word	0x5802541c
 80050a0:	58025430 	.word	0x58025430
 80050a4:	58025444 	.word	0x58025444
 80050a8:	58025458 	.word	0x58025458
 80050ac:	5802546c 	.word	0x5802546c
 80050b0:	58025480 	.word	0x58025480
 80050b4:	58025494 	.word	0x58025494

080050b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e237      	b.n	800553a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d004      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e22c      	b.n	800553a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a5c      	ldr	r2, [pc, #368]	; (8005258 <HAL_DMA_Abort_IT+0x1a0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04a      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a5b      	ldr	r2, [pc, #364]	; (800525c <HAL_DMA_Abort_IT+0x1a4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d045      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a59      	ldr	r2, [pc, #356]	; (8005260 <HAL_DMA_Abort_IT+0x1a8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d040      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a58      	ldr	r2, [pc, #352]	; (8005264 <HAL_DMA_Abort_IT+0x1ac>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d03b      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a56      	ldr	r2, [pc, #344]	; (8005268 <HAL_DMA_Abort_IT+0x1b0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d036      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a55      	ldr	r2, [pc, #340]	; (800526c <HAL_DMA_Abort_IT+0x1b4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d031      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a53      	ldr	r2, [pc, #332]	; (8005270 <HAL_DMA_Abort_IT+0x1b8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02c      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a52      	ldr	r2, [pc, #328]	; (8005274 <HAL_DMA_Abort_IT+0x1bc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d027      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a50      	ldr	r2, [pc, #320]	; (8005278 <HAL_DMA_Abort_IT+0x1c0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a4f      	ldr	r2, [pc, #316]	; (800527c <HAL_DMA_Abort_IT+0x1c4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d01d      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a4d      	ldr	r2, [pc, #308]	; (8005280 <HAL_DMA_Abort_IT+0x1c8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a4c      	ldr	r2, [pc, #304]	; (8005284 <HAL_DMA_Abort_IT+0x1cc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a4a      	ldr	r2, [pc, #296]	; (8005288 <HAL_DMA_Abort_IT+0x1d0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a49      	ldr	r2, [pc, #292]	; (800528c <HAL_DMA_Abort_IT+0x1d4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a47      	ldr	r2, [pc, #284]	; (8005290 <HAL_DMA_Abort_IT+0x1d8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_DMA_Abort_IT+0xc8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a46      	ldr	r2, [pc, #280]	; (8005294 <HAL_DMA_Abort_IT+0x1dc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d101      	bne.n	8005184 <HAL_DMA_Abort_IT+0xcc>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_DMA_Abort_IT+0xce>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8086 	beq.w	8005298 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2204      	movs	r2, #4
 8005190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2f      	ldr	r2, [pc, #188]	; (8005258 <HAL_DMA_Abort_IT+0x1a0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d04a      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2e      	ldr	r2, [pc, #184]	; (800525c <HAL_DMA_Abort_IT+0x1a4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d045      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <HAL_DMA_Abort_IT+0x1a8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d040      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2b      	ldr	r2, [pc, #172]	; (8005264 <HAL_DMA_Abort_IT+0x1ac>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d03b      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a29      	ldr	r2, [pc, #164]	; (8005268 <HAL_DMA_Abort_IT+0x1b0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d036      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a28      	ldr	r2, [pc, #160]	; (800526c <HAL_DMA_Abort_IT+0x1b4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d031      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a26      	ldr	r2, [pc, #152]	; (8005270 <HAL_DMA_Abort_IT+0x1b8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d02c      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a25      	ldr	r2, [pc, #148]	; (8005274 <HAL_DMA_Abort_IT+0x1bc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d027      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a23      	ldr	r2, [pc, #140]	; (8005278 <HAL_DMA_Abort_IT+0x1c0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d022      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a22      	ldr	r2, [pc, #136]	; (800527c <HAL_DMA_Abort_IT+0x1c4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d01d      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a20      	ldr	r2, [pc, #128]	; (8005280 <HAL_DMA_Abort_IT+0x1c8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d018      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1f      	ldr	r2, [pc, #124]	; (8005284 <HAL_DMA_Abort_IT+0x1cc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d013      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <HAL_DMA_Abort_IT+0x1d0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00e      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1c      	ldr	r2, [pc, #112]	; (800528c <HAL_DMA_Abort_IT+0x1d4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d009      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <HAL_DMA_Abort_IT+0x1d8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_DMA_Abort_IT+0x17c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a19      	ldr	r2, [pc, #100]	; (8005294 <HAL_DMA_Abort_IT+0x1dc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <HAL_DMA_Abort_IT+0x18e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e178      	b.n	8005538 <HAL_DMA_Abort_IT+0x480>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e16f      	b.n	8005538 <HAL_DMA_Abort_IT+0x480>
 8005258:	40020010 	.word	0x40020010
 800525c:	40020028 	.word	0x40020028
 8005260:	40020040 	.word	0x40020040
 8005264:	40020058 	.word	0x40020058
 8005268:	40020070 	.word	0x40020070
 800526c:	40020088 	.word	0x40020088
 8005270:	400200a0 	.word	0x400200a0
 8005274:	400200b8 	.word	0x400200b8
 8005278:	40020410 	.word	0x40020410
 800527c:	40020428 	.word	0x40020428
 8005280:	40020440 	.word	0x40020440
 8005284:	40020458 	.word	0x40020458
 8005288:	40020470 	.word	0x40020470
 800528c:	40020488 	.word	0x40020488
 8005290:	400204a0 	.word	0x400204a0
 8005294:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 020e 	bic.w	r2, r2, #14
 80052a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a6c      	ldr	r2, [pc, #432]	; (8005460 <HAL_DMA_Abort_IT+0x3a8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d04a      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a6b      	ldr	r2, [pc, #428]	; (8005464 <HAL_DMA_Abort_IT+0x3ac>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d045      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a69      	ldr	r2, [pc, #420]	; (8005468 <HAL_DMA_Abort_IT+0x3b0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d040      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a68      	ldr	r2, [pc, #416]	; (800546c <HAL_DMA_Abort_IT+0x3b4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d03b      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a66      	ldr	r2, [pc, #408]	; (8005470 <HAL_DMA_Abort_IT+0x3b8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d036      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a65      	ldr	r2, [pc, #404]	; (8005474 <HAL_DMA_Abort_IT+0x3bc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d031      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a63      	ldr	r2, [pc, #396]	; (8005478 <HAL_DMA_Abort_IT+0x3c0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d02c      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a62      	ldr	r2, [pc, #392]	; (800547c <HAL_DMA_Abort_IT+0x3c4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d027      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a60      	ldr	r2, [pc, #384]	; (8005480 <HAL_DMA_Abort_IT+0x3c8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d022      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a5f      	ldr	r2, [pc, #380]	; (8005484 <HAL_DMA_Abort_IT+0x3cc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d01d      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a5d      	ldr	r2, [pc, #372]	; (8005488 <HAL_DMA_Abort_IT+0x3d0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d018      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5c      	ldr	r2, [pc, #368]	; (800548c <HAL_DMA_Abort_IT+0x3d4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5a      	ldr	r2, [pc, #360]	; (8005490 <HAL_DMA_Abort_IT+0x3d8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00e      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a59      	ldr	r2, [pc, #356]	; (8005494 <HAL_DMA_Abort_IT+0x3dc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a57      	ldr	r2, [pc, #348]	; (8005498 <HAL_DMA_Abort_IT+0x3e0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_DMA_Abort_IT+0x290>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a56      	ldr	r2, [pc, #344]	; (800549c <HAL_DMA_Abort_IT+0x3e4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <HAL_DMA_Abort_IT+0x2a2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e007      	b.n	800536a <HAL_DMA_Abort_IT+0x2b2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3c      	ldr	r2, [pc, #240]	; (8005460 <HAL_DMA_Abort_IT+0x3a8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d072      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <HAL_DMA_Abort_IT+0x3ac>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d06d      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a39      	ldr	r2, [pc, #228]	; (8005468 <HAL_DMA_Abort_IT+0x3b0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d068      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a37      	ldr	r2, [pc, #220]	; (800546c <HAL_DMA_Abort_IT+0x3b4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d063      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a36      	ldr	r2, [pc, #216]	; (8005470 <HAL_DMA_Abort_IT+0x3b8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d05e      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a34      	ldr	r2, [pc, #208]	; (8005474 <HAL_DMA_Abort_IT+0x3bc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d059      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a33      	ldr	r2, [pc, #204]	; (8005478 <HAL_DMA_Abort_IT+0x3c0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d054      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a31      	ldr	r2, [pc, #196]	; (800547c <HAL_DMA_Abort_IT+0x3c4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d04f      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a30      	ldr	r2, [pc, #192]	; (8005480 <HAL_DMA_Abort_IT+0x3c8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d04a      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <HAL_DMA_Abort_IT+0x3cc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d045      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2d      	ldr	r2, [pc, #180]	; (8005488 <HAL_DMA_Abort_IT+0x3d0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d040      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2b      	ldr	r2, [pc, #172]	; (800548c <HAL_DMA_Abort_IT+0x3d4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d03b      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2a      	ldr	r2, [pc, #168]	; (8005490 <HAL_DMA_Abort_IT+0x3d8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d036      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <HAL_DMA_Abort_IT+0x3dc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d031      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a27      	ldr	r2, [pc, #156]	; (8005498 <HAL_DMA_Abort_IT+0x3e0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d02c      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a25      	ldr	r2, [pc, #148]	; (800549c <HAL_DMA_Abort_IT+0x3e4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d027      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <HAL_DMA_Abort_IT+0x3e8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d022      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <HAL_DMA_Abort_IT+0x3ec>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01d      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <HAL_DMA_Abort_IT+0x3f0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <HAL_DMA_Abort_IT+0x3f4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <HAL_DMA_Abort_IT+0x3f8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <HAL_DMA_Abort_IT+0x3fc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <HAL_DMA_Abort_IT+0x400>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_DMA_Abort_IT+0x3a2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a19      	ldr	r2, [pc, #100]	; (80054bc <HAL_DMA_Abort_IT+0x404>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d132      	bne.n	80054c0 <HAL_DMA_Abort_IT+0x408>
 800545a:	2301      	movs	r3, #1
 800545c:	e031      	b.n	80054c2 <HAL_DMA_Abort_IT+0x40a>
 800545e:	bf00      	nop
 8005460:	40020010 	.word	0x40020010
 8005464:	40020028 	.word	0x40020028
 8005468:	40020040 	.word	0x40020040
 800546c:	40020058 	.word	0x40020058
 8005470:	40020070 	.word	0x40020070
 8005474:	40020088 	.word	0x40020088
 8005478:	400200a0 	.word	0x400200a0
 800547c:	400200b8 	.word	0x400200b8
 8005480:	40020410 	.word	0x40020410
 8005484:	40020428 	.word	0x40020428
 8005488:	40020440 	.word	0x40020440
 800548c:	40020458 	.word	0x40020458
 8005490:	40020470 	.word	0x40020470
 8005494:	40020488 	.word	0x40020488
 8005498:	400204a0 	.word	0x400204a0
 800549c:	400204b8 	.word	0x400204b8
 80054a0:	58025408 	.word	0x58025408
 80054a4:	5802541c 	.word	0x5802541c
 80054a8:	58025430 	.word	0x58025430
 80054ac:	58025444 	.word	0x58025444
 80054b0:	58025458 	.word	0x58025458
 80054b4:	5802546c 	.word	0x5802546c
 80054b8:	58025480 	.word	0x58025480
 80054bc:	58025494 	.word	0x58025494
 80054c0:	2300      	movs	r3, #0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d028      	beq.n	8005518 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	2201      	movs	r2, #1
 80054e6:	409a      	lsls	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800550c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005516:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop

08005544 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005550:	4b67      	ldr	r3, [pc, #412]	; (80056f0 <HAL_DMA_IRQHandler+0x1ac>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a67      	ldr	r2, [pc, #412]	; (80056f4 <HAL_DMA_IRQHandler+0x1b0>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0a9b      	lsrs	r3, r3, #10
 800555c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5f      	ldr	r2, [pc, #380]	; (80056f8 <HAL_DMA_IRQHandler+0x1b4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d04a      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a5d      	ldr	r2, [pc, #372]	; (80056fc <HAL_DMA_IRQHandler+0x1b8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d045      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a5c      	ldr	r2, [pc, #368]	; (8005700 <HAL_DMA_IRQHandler+0x1bc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d040      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a5a      	ldr	r2, [pc, #360]	; (8005704 <HAL_DMA_IRQHandler+0x1c0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d03b      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a59      	ldr	r2, [pc, #356]	; (8005708 <HAL_DMA_IRQHandler+0x1c4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d036      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a57      	ldr	r2, [pc, #348]	; (800570c <HAL_DMA_IRQHandler+0x1c8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d031      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a56      	ldr	r2, [pc, #344]	; (8005710 <HAL_DMA_IRQHandler+0x1cc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d02c      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a54      	ldr	r2, [pc, #336]	; (8005714 <HAL_DMA_IRQHandler+0x1d0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d027      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a53      	ldr	r2, [pc, #332]	; (8005718 <HAL_DMA_IRQHandler+0x1d4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d022      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a51      	ldr	r2, [pc, #324]	; (800571c <HAL_DMA_IRQHandler+0x1d8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01d      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a50      	ldr	r2, [pc, #320]	; (8005720 <HAL_DMA_IRQHandler+0x1dc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d018      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a4e      	ldr	r2, [pc, #312]	; (8005724 <HAL_DMA_IRQHandler+0x1e0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a4d      	ldr	r2, [pc, #308]	; (8005728 <HAL_DMA_IRQHandler+0x1e4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a4b      	ldr	r2, [pc, #300]	; (800572c <HAL_DMA_IRQHandler+0x1e8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a4a      	ldr	r2, [pc, #296]	; (8005730 <HAL_DMA_IRQHandler+0x1ec>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_DMA_IRQHandler+0xd2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a48      	ldr	r2, [pc, #288]	; (8005734 <HAL_DMA_IRQHandler+0x1f0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_DMA_IRQHandler+0xd6>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <HAL_DMA_IRQHandler+0xd8>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 842b 	beq.w	8005e78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2208      	movs	r2, #8
 800562c:	409a      	lsls	r2, r3
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80a2 	beq.w	800577c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2e      	ldr	r2, [pc, #184]	; (80056f8 <HAL_DMA_IRQHandler+0x1b4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d04a      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2d      	ldr	r2, [pc, #180]	; (80056fc <HAL_DMA_IRQHandler+0x1b8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d045      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <HAL_DMA_IRQHandler+0x1bc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d040      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <HAL_DMA_IRQHandler+0x1c0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d03b      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a28      	ldr	r2, [pc, #160]	; (8005708 <HAL_DMA_IRQHandler+0x1c4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d036      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a27      	ldr	r2, [pc, #156]	; (800570c <HAL_DMA_IRQHandler+0x1c8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d031      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a25      	ldr	r2, [pc, #148]	; (8005710 <HAL_DMA_IRQHandler+0x1cc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d02c      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a24      	ldr	r2, [pc, #144]	; (8005714 <HAL_DMA_IRQHandler+0x1d0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d027      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a22      	ldr	r2, [pc, #136]	; (8005718 <HAL_DMA_IRQHandler+0x1d4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d022      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a21      	ldr	r2, [pc, #132]	; (800571c <HAL_DMA_IRQHandler+0x1d8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d01d      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1f      	ldr	r2, [pc, #124]	; (8005720 <HAL_DMA_IRQHandler+0x1dc>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d018      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1e      	ldr	r2, [pc, #120]	; (8005724 <HAL_DMA_IRQHandler+0x1e0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <HAL_DMA_IRQHandler+0x1e4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00e      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1b      	ldr	r2, [pc, #108]	; (800572c <HAL_DMA_IRQHandler+0x1e8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a19      	ldr	r2, [pc, #100]	; (8005730 <HAL_DMA_IRQHandler+0x1ec>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x194>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <HAL_DMA_IRQHandler+0x1f0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d12f      	bne.n	8005738 <HAL_DMA_IRQHandler+0x1f4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bf14      	ite	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	2300      	moveq	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	e02e      	b.n	800574c <HAL_DMA_IRQHandler+0x208>
 80056ee:	bf00      	nop
 80056f0:	24000004 	.word	0x24000004
 80056f4:	1b4e81b5 	.word	0x1b4e81b5
 80056f8:	40020010 	.word	0x40020010
 80056fc:	40020028 	.word	0x40020028
 8005700:	40020040 	.word	0x40020040
 8005704:	40020058 	.word	0x40020058
 8005708:	40020070 	.word	0x40020070
 800570c:	40020088 	.word	0x40020088
 8005710:	400200a0 	.word	0x400200a0
 8005714:	400200b8 	.word	0x400200b8
 8005718:	40020410 	.word	0x40020410
 800571c:	40020428 	.word	0x40020428
 8005720:	40020440 	.word	0x40020440
 8005724:	40020458 	.word	0x40020458
 8005728:	40020470 	.word	0x40020470
 800572c:	40020488 	.word	0x40020488
 8005730:	400204a0 	.word	0x400204a0
 8005734:	400204b8 	.word	0x400204b8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0204 	bic.w	r2, r2, #4
 800575e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2208      	movs	r2, #8
 800576a:	409a      	lsls	r2, r3
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005774:	f043 0201 	orr.w	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d06e      	beq.n	8005870 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a69      	ldr	r2, [pc, #420]	; (800593c <HAL_DMA_IRQHandler+0x3f8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d04a      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a67      	ldr	r2, [pc, #412]	; (8005940 <HAL_DMA_IRQHandler+0x3fc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d045      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a66      	ldr	r2, [pc, #408]	; (8005944 <HAL_DMA_IRQHandler+0x400>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d040      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a64      	ldr	r2, [pc, #400]	; (8005948 <HAL_DMA_IRQHandler+0x404>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d03b      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a63      	ldr	r2, [pc, #396]	; (800594c <HAL_DMA_IRQHandler+0x408>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d036      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a61      	ldr	r2, [pc, #388]	; (8005950 <HAL_DMA_IRQHandler+0x40c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d031      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a60      	ldr	r2, [pc, #384]	; (8005954 <HAL_DMA_IRQHandler+0x410>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d02c      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a5e      	ldr	r2, [pc, #376]	; (8005958 <HAL_DMA_IRQHandler+0x414>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d027      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a5d      	ldr	r2, [pc, #372]	; (800595c <HAL_DMA_IRQHandler+0x418>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d022      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a5b      	ldr	r2, [pc, #364]	; (8005960 <HAL_DMA_IRQHandler+0x41c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01d      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a5a      	ldr	r2, [pc, #360]	; (8005964 <HAL_DMA_IRQHandler+0x420>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d018      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a58      	ldr	r2, [pc, #352]	; (8005968 <HAL_DMA_IRQHandler+0x424>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a57      	ldr	r2, [pc, #348]	; (800596c <HAL_DMA_IRQHandler+0x428>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a55      	ldr	r2, [pc, #340]	; (8005970 <HAL_DMA_IRQHandler+0x42c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a54      	ldr	r2, [pc, #336]	; (8005974 <HAL_DMA_IRQHandler+0x430>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2ee>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a52      	ldr	r2, [pc, #328]	; (8005978 <HAL_DMA_IRQHandler+0x434>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d10a      	bne.n	8005848 <HAL_DMA_IRQHandler+0x304>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e003      	b.n	8005850 <HAL_DMA_IRQHandler+0x30c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2201      	movs	r2, #1
 800585e:	409a      	lsls	r2, r3
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005868:	f043 0202 	orr.w	r2, r3, #2
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	2204      	movs	r2, #4
 800587a:	409a      	lsls	r2, r3
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 808f 	beq.w	80059a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <HAL_DMA_IRQHandler+0x3f8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04a      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <HAL_DMA_IRQHandler+0x3fc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d045      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a29      	ldr	r2, [pc, #164]	; (8005944 <HAL_DMA_IRQHandler+0x400>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d040      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a27      	ldr	r2, [pc, #156]	; (8005948 <HAL_DMA_IRQHandler+0x404>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a26      	ldr	r2, [pc, #152]	; (800594c <HAL_DMA_IRQHandler+0x408>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d036      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a24      	ldr	r2, [pc, #144]	; (8005950 <HAL_DMA_IRQHandler+0x40c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d031      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a23      	ldr	r2, [pc, #140]	; (8005954 <HAL_DMA_IRQHandler+0x410>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d02c      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a21      	ldr	r2, [pc, #132]	; (8005958 <HAL_DMA_IRQHandler+0x414>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d027      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a20      	ldr	r2, [pc, #128]	; (800595c <HAL_DMA_IRQHandler+0x418>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <HAL_DMA_IRQHandler+0x41c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01d      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <HAL_DMA_IRQHandler+0x420>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <HAL_DMA_IRQHandler+0x424>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1a      	ldr	r2, [pc, #104]	; (800596c <HAL_DMA_IRQHandler+0x428>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a18      	ldr	r2, [pc, #96]	; (8005970 <HAL_DMA_IRQHandler+0x42c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a17      	ldr	r2, [pc, #92]	; (8005974 <HAL_DMA_IRQHandler+0x430>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_DMA_IRQHandler+0x3e2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a15      	ldr	r2, [pc, #84]	; (8005978 <HAL_DMA_IRQHandler+0x434>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d12a      	bne.n	800597c <HAL_DMA_IRQHandler+0x438>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf14      	ite	ne
 8005934:	2301      	movne	r3, #1
 8005936:	2300      	moveq	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e023      	b.n	8005984 <HAL_DMA_IRQHandler+0x440>
 800593c:	40020010 	.word	0x40020010
 8005940:	40020028 	.word	0x40020028
 8005944:	40020040 	.word	0x40020040
 8005948:	40020058 	.word	0x40020058
 800594c:	40020070 	.word	0x40020070
 8005950:	40020088 	.word	0x40020088
 8005954:	400200a0 	.word	0x400200a0
 8005958:	400200b8 	.word	0x400200b8
 800595c:	40020410 	.word	0x40020410
 8005960:	40020428 	.word	0x40020428
 8005964:	40020440 	.word	0x40020440
 8005968:	40020458 	.word	0x40020458
 800596c:	40020470 	.word	0x40020470
 8005970:	40020488 	.word	0x40020488
 8005974:	400204a0 	.word	0x400204a0
 8005978:	400204b8 	.word	0x400204b8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00d      	beq.n	80059a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	2204      	movs	r2, #4
 8005992:	409a      	lsls	r2, r3
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599c:	f043 0204 	orr.w	r2, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	2210      	movs	r2, #16
 80059ae:	409a      	lsls	r2, r3
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a6 	beq.w	8005b06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a85      	ldr	r2, [pc, #532]	; (8005bd4 <HAL_DMA_IRQHandler+0x690>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d04a      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a83      	ldr	r2, [pc, #524]	; (8005bd8 <HAL_DMA_IRQHandler+0x694>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d045      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a82      	ldr	r2, [pc, #520]	; (8005bdc <HAL_DMA_IRQHandler+0x698>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d040      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a80      	ldr	r2, [pc, #512]	; (8005be0 <HAL_DMA_IRQHandler+0x69c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d03b      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7f      	ldr	r2, [pc, #508]	; (8005be4 <HAL_DMA_IRQHandler+0x6a0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d036      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a7d      	ldr	r2, [pc, #500]	; (8005be8 <HAL_DMA_IRQHandler+0x6a4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d031      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7c      	ldr	r2, [pc, #496]	; (8005bec <HAL_DMA_IRQHandler+0x6a8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d02c      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a7a      	ldr	r2, [pc, #488]	; (8005bf0 <HAL_DMA_IRQHandler+0x6ac>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d027      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a79      	ldr	r2, [pc, #484]	; (8005bf4 <HAL_DMA_IRQHandler+0x6b0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d022      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a77      	ldr	r2, [pc, #476]	; (8005bf8 <HAL_DMA_IRQHandler+0x6b4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01d      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a76      	ldr	r2, [pc, #472]	; (8005bfc <HAL_DMA_IRQHandler+0x6b8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d018      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a74      	ldr	r2, [pc, #464]	; (8005c00 <HAL_DMA_IRQHandler+0x6bc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a73      	ldr	r2, [pc, #460]	; (8005c04 <HAL_DMA_IRQHandler+0x6c0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00e      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a71      	ldr	r2, [pc, #452]	; (8005c08 <HAL_DMA_IRQHandler+0x6c4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a70      	ldr	r2, [pc, #448]	; (8005c0c <HAL_DMA_IRQHandler+0x6c8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x516>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a6e      	ldr	r2, [pc, #440]	; (8005c10 <HAL_DMA_IRQHandler+0x6cc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d10a      	bne.n	8005a70 <HAL_DMA_IRQHandler+0x52c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e009      	b.n	8005a84 <HAL_DMA_IRQHandler+0x540>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bf14      	ite	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	2300      	moveq	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03e      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2210      	movs	r2, #16
 8005a92:	409a      	lsls	r2, r3
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d018      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d108      	bne.n	8005ac6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d024      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
 8005ac4:	e01f      	b.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01b      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
 8005ad6:	e016      	b.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0208 	bic.w	r2, r2, #8
 8005af4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2220      	movs	r2, #32
 8005b10:	409a      	lsls	r2, r3
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8110 	beq.w	8005d3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a2c      	ldr	r2, [pc, #176]	; (8005bd4 <HAL_DMA_IRQHandler+0x690>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d04a      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2b      	ldr	r2, [pc, #172]	; (8005bd8 <HAL_DMA_IRQHandler+0x694>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d045      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <HAL_DMA_IRQHandler+0x698>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d040      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <HAL_DMA_IRQHandler+0x69c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d03b      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a26      	ldr	r2, [pc, #152]	; (8005be4 <HAL_DMA_IRQHandler+0x6a0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d036      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a25      	ldr	r2, [pc, #148]	; (8005be8 <HAL_DMA_IRQHandler+0x6a4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d031      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a23      	ldr	r2, [pc, #140]	; (8005bec <HAL_DMA_IRQHandler+0x6a8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02c      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <HAL_DMA_IRQHandler+0x6ac>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d027      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <HAL_DMA_IRQHandler+0x6b0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d022      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1f      	ldr	r2, [pc, #124]	; (8005bf8 <HAL_DMA_IRQHandler+0x6b4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d01d      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1d      	ldr	r2, [pc, #116]	; (8005bfc <HAL_DMA_IRQHandler+0x6b8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d018      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a1c      	ldr	r2, [pc, #112]	; (8005c00 <HAL_DMA_IRQHandler+0x6bc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <HAL_DMA_IRQHandler+0x6c0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <HAL_DMA_IRQHandler+0x6c4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <HAL_DMA_IRQHandler+0x6c8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x678>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <HAL_DMA_IRQHandler+0x6cc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d12b      	bne.n	8005c14 <HAL_DMA_IRQHandler+0x6d0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	e02a      	b.n	8005c28 <HAL_DMA_IRQHandler+0x6e4>
 8005bd2:	bf00      	nop
 8005bd4:	40020010 	.word	0x40020010
 8005bd8:	40020028 	.word	0x40020028
 8005bdc:	40020040 	.word	0x40020040
 8005be0:	40020058 	.word	0x40020058
 8005be4:	40020070 	.word	0x40020070
 8005be8:	40020088 	.word	0x40020088
 8005bec:	400200a0 	.word	0x400200a0
 8005bf0:	400200b8 	.word	0x400200b8
 8005bf4:	40020410 	.word	0x40020410
 8005bf8:	40020428 	.word	0x40020428
 8005bfc:	40020440 	.word	0x40020440
 8005c00:	40020458 	.word	0x40020458
 8005c04:	40020470 	.word	0x40020470
 8005c08:	40020488 	.word	0x40020488
 8005c0c:	400204a0 	.word	0x400204a0
 8005c10:	400204b8 	.word	0x400204b8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bf14      	ite	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	2300      	moveq	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8087 	beq.w	8005d3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2220      	movs	r2, #32
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d139      	bne.n	8005cbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0216 	bic.w	r2, r2, #22
 8005c58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <HAL_DMA_IRQHandler+0x736>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0208 	bic.w	r2, r2, #8
 8005c88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	223f      	movs	r2, #63	; 0x3f
 8005c94:	409a      	lsls	r2, r3
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 834a 	beq.w	8006348 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
          }
          return;
 8005cbc:	e344      	b.n	8006348 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d018      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d108      	bne.n	8005cec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d02c      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
 8005cea:	e027      	b.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d023      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
 8005cfc:	e01e      	b.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10f      	bne.n	8005d2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0210 	bic.w	r2, r2, #16
 8005d1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8306 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8088 	beq.w	8005e64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2204      	movs	r2, #4
 8005d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a7a      	ldr	r2, [pc, #488]	; (8005f4c <HAL_DMA_IRQHandler+0xa08>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04a      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a79      	ldr	r2, [pc, #484]	; (8005f50 <HAL_DMA_IRQHandler+0xa0c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d045      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a77      	ldr	r2, [pc, #476]	; (8005f54 <HAL_DMA_IRQHandler+0xa10>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d040      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a76      	ldr	r2, [pc, #472]	; (8005f58 <HAL_DMA_IRQHandler+0xa14>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d03b      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a74      	ldr	r2, [pc, #464]	; (8005f5c <HAL_DMA_IRQHandler+0xa18>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d036      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a73      	ldr	r2, [pc, #460]	; (8005f60 <HAL_DMA_IRQHandler+0xa1c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d031      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a71      	ldr	r2, [pc, #452]	; (8005f64 <HAL_DMA_IRQHandler+0xa20>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a70      	ldr	r2, [pc, #448]	; (8005f68 <HAL_DMA_IRQHandler+0xa24>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d027      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6e      	ldr	r2, [pc, #440]	; (8005f6c <HAL_DMA_IRQHandler+0xa28>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a6d      	ldr	r2, [pc, #436]	; (8005f70 <HAL_DMA_IRQHandler+0xa2c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6b      	ldr	r2, [pc, #428]	; (8005f74 <HAL_DMA_IRQHandler+0xa30>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6a      	ldr	r2, [pc, #424]	; (8005f78 <HAL_DMA_IRQHandler+0xa34>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a68      	ldr	r2, [pc, #416]	; (8005f7c <HAL_DMA_IRQHandler+0xa38>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a67      	ldr	r2, [pc, #412]	; (8005f80 <HAL_DMA_IRQHandler+0xa3c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a65      	ldr	r2, [pc, #404]	; (8005f84 <HAL_DMA_IRQHandler+0xa40>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x8b8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a64      	ldr	r2, [pc, #400]	; (8005f88 <HAL_DMA_IRQHandler+0xa44>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d108      	bne.n	8005e0e <HAL_DMA_IRQHandler+0x8ca>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e007      	b.n	8005e1e <HAL_DMA_IRQHandler+0x8da>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d307      	bcc.n	8005e3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f2      	bne.n	8005e1e <HAL_DMA_IRQHandler+0x8da>
 8005e38:	e000      	b.n	8005e3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005e52:	e003      	b.n	8005e5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8272 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
 8005e76:	e26c      	b.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a43      	ldr	r2, [pc, #268]	; (8005f8c <HAL_DMA_IRQHandler+0xa48>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d022      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a42      	ldr	r2, [pc, #264]	; (8005f90 <HAL_DMA_IRQHandler+0xa4c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d01d      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a40      	ldr	r2, [pc, #256]	; (8005f94 <HAL_DMA_IRQHandler+0xa50>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d018      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3f      	ldr	r2, [pc, #252]	; (8005f98 <HAL_DMA_IRQHandler+0xa54>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d013      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a3d      	ldr	r2, [pc, #244]	; (8005f9c <HAL_DMA_IRQHandler+0xa58>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00e      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3c      	ldr	r2, [pc, #240]	; (8005fa0 <HAL_DMA_IRQHandler+0xa5c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d009      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3a      	ldr	r2, [pc, #232]	; (8005fa4 <HAL_DMA_IRQHandler+0xa60>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d004      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x984>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a39      	ldr	r2, [pc, #228]	; (8005fa8 <HAL_DMA_IRQHandler+0xa64>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d101      	bne.n	8005ecc <HAL_DMA_IRQHandler+0x988>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_DMA_IRQHandler+0x98a>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 823f 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80cd 	beq.w	800608c <HAL_DMA_IRQHandler+0xb48>
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80c7 	beq.w	800608c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2204      	movs	r2, #4
 8005f08:	409a      	lsls	r2, r3
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d049      	beq.n	8005fac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 8210 	beq.w	800634c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f34:	e20a      	b.n	800634c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8206 	beq.w	800634c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f48:	e200      	b.n	800634c <HAL_DMA_IRQHandler+0xe08>
 8005f4a:	bf00      	nop
 8005f4c:	40020010 	.word	0x40020010
 8005f50:	40020028 	.word	0x40020028
 8005f54:	40020040 	.word	0x40020040
 8005f58:	40020058 	.word	0x40020058
 8005f5c:	40020070 	.word	0x40020070
 8005f60:	40020088 	.word	0x40020088
 8005f64:	400200a0 	.word	0x400200a0
 8005f68:	400200b8 	.word	0x400200b8
 8005f6c:	40020410 	.word	0x40020410
 8005f70:	40020428 	.word	0x40020428
 8005f74:	40020440 	.word	0x40020440
 8005f78:	40020458 	.word	0x40020458
 8005f7c:	40020470 	.word	0x40020470
 8005f80:	40020488 	.word	0x40020488
 8005f84:	400204a0 	.word	0x400204a0
 8005f88:	400204b8 	.word	0x400204b8
 8005f8c:	58025408 	.word	0x58025408
 8005f90:	5802541c 	.word	0x5802541c
 8005f94:	58025430 	.word	0x58025430
 8005f98:	58025444 	.word	0x58025444
 8005f9c:	58025458 	.word	0x58025458
 8005fa0:	5802546c 	.word	0x5802546c
 8005fa4:	58025480 	.word	0x58025480
 8005fa8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d160      	bne.n	8006078 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a7f      	ldr	r2, [pc, #508]	; (80061b8 <HAL_DMA_IRQHandler+0xc74>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d04a      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a7d      	ldr	r2, [pc, #500]	; (80061bc <HAL_DMA_IRQHandler+0xc78>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d045      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7c      	ldr	r2, [pc, #496]	; (80061c0 <HAL_DMA_IRQHandler+0xc7c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d040      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a7a      	ldr	r2, [pc, #488]	; (80061c4 <HAL_DMA_IRQHandler+0xc80>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d03b      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a79      	ldr	r2, [pc, #484]	; (80061c8 <HAL_DMA_IRQHandler+0xc84>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d036      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a77      	ldr	r2, [pc, #476]	; (80061cc <HAL_DMA_IRQHandler+0xc88>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d031      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a76      	ldr	r2, [pc, #472]	; (80061d0 <HAL_DMA_IRQHandler+0xc8c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d02c      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a74      	ldr	r2, [pc, #464]	; (80061d4 <HAL_DMA_IRQHandler+0xc90>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d027      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a73      	ldr	r2, [pc, #460]	; (80061d8 <HAL_DMA_IRQHandler+0xc94>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d022      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a71      	ldr	r2, [pc, #452]	; (80061dc <HAL_DMA_IRQHandler+0xc98>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01d      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a70      	ldr	r2, [pc, #448]	; (80061e0 <HAL_DMA_IRQHandler+0xc9c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d018      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a6e      	ldr	r2, [pc, #440]	; (80061e4 <HAL_DMA_IRQHandler+0xca0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a6d      	ldr	r2, [pc, #436]	; (80061e8 <HAL_DMA_IRQHandler+0xca4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a6b      	ldr	r2, [pc, #428]	; (80061ec <HAL_DMA_IRQHandler+0xca8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a6a      	ldr	r2, [pc, #424]	; (80061f0 <HAL_DMA_IRQHandler+0xcac>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_DMA_IRQHandler+0xb12>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a68      	ldr	r2, [pc, #416]	; (80061f4 <HAL_DMA_IRQHandler+0xcb0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <HAL_DMA_IRQHandler+0xb24>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0208 	bic.w	r2, r2, #8
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e007      	b.n	8006078 <HAL_DMA_IRQHandler+0xb34>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0204 	bic.w	r2, r2, #4
 8006076:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8165 	beq.w	800634c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800608a:	e15f      	b.n	800634c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	2202      	movs	r2, #2
 8006096:	409a      	lsls	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80c5 	beq.w	800622c <HAL_DMA_IRQHandler+0xce8>
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80bf 	beq.w	800622c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	2202      	movs	r2, #2
 80060b8:	409a      	lsls	r2, r3
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 813a 	beq.w	8006350 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e4:	e134      	b.n	8006350 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8130 	beq.w	8006350 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060f8:	e12a      	b.n	8006350 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 8089 	bne.w	8006218 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2b      	ldr	r2, [pc, #172]	; (80061b8 <HAL_DMA_IRQHandler+0xc74>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d04a      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a29      	ldr	r2, [pc, #164]	; (80061bc <HAL_DMA_IRQHandler+0xc78>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d045      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a28      	ldr	r2, [pc, #160]	; (80061c0 <HAL_DMA_IRQHandler+0xc7c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d040      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a26      	ldr	r2, [pc, #152]	; (80061c4 <HAL_DMA_IRQHandler+0xc80>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d03b      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a25      	ldr	r2, [pc, #148]	; (80061c8 <HAL_DMA_IRQHandler+0xc84>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d036      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a23      	ldr	r2, [pc, #140]	; (80061cc <HAL_DMA_IRQHandler+0xc88>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d031      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <HAL_DMA_IRQHandler+0xc8c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d02c      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <HAL_DMA_IRQHandler+0xc90>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d027      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1f      	ldr	r2, [pc, #124]	; (80061d8 <HAL_DMA_IRQHandler+0xc94>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <HAL_DMA_IRQHandler+0xc98>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01d      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1c      	ldr	r2, [pc, #112]	; (80061e0 <HAL_DMA_IRQHandler+0xc9c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <HAL_DMA_IRQHandler+0xca0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a19      	ldr	r2, [pc, #100]	; (80061e8 <HAL_DMA_IRQHandler+0xca4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a17      	ldr	r2, [pc, #92]	; (80061ec <HAL_DMA_IRQHandler+0xca8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <HAL_DMA_IRQHandler+0xcac>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xc62>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a14      	ldr	r2, [pc, #80]	; (80061f4 <HAL_DMA_IRQHandler+0xcb0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d128      	bne.n	80061f8 <HAL_DMA_IRQHandler+0xcb4>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0214 	bic.w	r2, r2, #20
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e027      	b.n	8006208 <HAL_DMA_IRQHandler+0xcc4>
 80061b8:	40020010 	.word	0x40020010
 80061bc:	40020028 	.word	0x40020028
 80061c0:	40020040 	.word	0x40020040
 80061c4:	40020058 	.word	0x40020058
 80061c8:	40020070 	.word	0x40020070
 80061cc:	40020088 	.word	0x40020088
 80061d0:	400200a0 	.word	0x400200a0
 80061d4:	400200b8 	.word	0x400200b8
 80061d8:	40020410 	.word	0x40020410
 80061dc:	40020428 	.word	0x40020428
 80061e0:	40020440 	.word	0x40020440
 80061e4:	40020458 	.word	0x40020458
 80061e8:	40020470 	.word	0x40020470
 80061ec:	40020488 	.word	0x40020488
 80061f0:	400204a0 	.word	0x400204a0
 80061f4:	400204b8 	.word	0x400204b8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 020a 	bic.w	r2, r2, #10
 8006206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8097 	beq.w	8006350 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800622a:	e091      	b.n	8006350 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2208      	movs	r2, #8
 8006236:	409a      	lsls	r2, r3
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8088 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8082 	beq.w	8006352 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a41      	ldr	r2, [pc, #260]	; (8006358 <HAL_DMA_IRQHandler+0xe14>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d04a      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3f      	ldr	r2, [pc, #252]	; (800635c <HAL_DMA_IRQHandler+0xe18>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d045      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a3e      	ldr	r2, [pc, #248]	; (8006360 <HAL_DMA_IRQHandler+0xe1c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d040      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3c      	ldr	r2, [pc, #240]	; (8006364 <HAL_DMA_IRQHandler+0xe20>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d03b      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3b      	ldr	r2, [pc, #236]	; (8006368 <HAL_DMA_IRQHandler+0xe24>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d036      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a39      	ldr	r2, [pc, #228]	; (800636c <HAL_DMA_IRQHandler+0xe28>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d031      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a38      	ldr	r2, [pc, #224]	; (8006370 <HAL_DMA_IRQHandler+0xe2c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d02c      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a36      	ldr	r2, [pc, #216]	; (8006374 <HAL_DMA_IRQHandler+0xe30>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d027      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a35      	ldr	r2, [pc, #212]	; (8006378 <HAL_DMA_IRQHandler+0xe34>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d022      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a33      	ldr	r2, [pc, #204]	; (800637c <HAL_DMA_IRQHandler+0xe38>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01d      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a32      	ldr	r2, [pc, #200]	; (8006380 <HAL_DMA_IRQHandler+0xe3c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d018      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a30      	ldr	r2, [pc, #192]	; (8006384 <HAL_DMA_IRQHandler+0xe40>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2f      	ldr	r2, [pc, #188]	; (8006388 <HAL_DMA_IRQHandler+0xe44>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2d      	ldr	r2, [pc, #180]	; (800638c <HAL_DMA_IRQHandler+0xe48>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2c      	ldr	r2, [pc, #176]	; (8006390 <HAL_DMA_IRQHandler+0xe4c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_DMA_IRQHandler+0xdaa>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <HAL_DMA_IRQHandler+0xe50>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d108      	bne.n	8006300 <HAL_DMA_IRQHandler+0xdbc>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 021c 	bic.w	r2, r2, #28
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e007      	b.n	8006310 <HAL_DMA_IRQHandler+0xdcc>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 020e 	bic.w	r2, r2, #14
 800630e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2201      	movs	r2, #1
 800631a:	409a      	lsls	r2, r3
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
 8006346:	e004      	b.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006348:	bf00      	nop
 800634a:	e002      	b.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006350:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006352:	3728      	adds	r7, #40	; 0x28
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40020010 	.word	0x40020010
 800635c:	40020028 	.word	0x40020028
 8006360:	40020040 	.word	0x40020040
 8006364:	40020058 	.word	0x40020058
 8006368:	40020070 	.word	0x40020070
 800636c:	40020088 	.word	0x40020088
 8006370:	400200a0 	.word	0x400200a0
 8006374:	400200b8 	.word	0x400200b8
 8006378:	40020410 	.word	0x40020410
 800637c:	40020428 	.word	0x40020428
 8006380:	40020440 	.word	0x40020440
 8006384:	40020458 	.word	0x40020458
 8006388:	40020470 	.word	0x40020470
 800638c:	40020488 	.word	0x40020488
 8006390:	400204a0 	.word	0x400204a0
 8006394:	400204b8 	.word	0x400204b8

08006398 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a7f      	ldr	r2, [pc, #508]	; (80065b4 <DMA_SetConfig+0x21c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d072      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a7d      	ldr	r2, [pc, #500]	; (80065b8 <DMA_SetConfig+0x220>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d06d      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a7c      	ldr	r2, [pc, #496]	; (80065bc <DMA_SetConfig+0x224>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d068      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a7a      	ldr	r2, [pc, #488]	; (80065c0 <DMA_SetConfig+0x228>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d063      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a79      	ldr	r2, [pc, #484]	; (80065c4 <DMA_SetConfig+0x22c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d05e      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a77      	ldr	r2, [pc, #476]	; (80065c8 <DMA_SetConfig+0x230>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d059      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a76      	ldr	r2, [pc, #472]	; (80065cc <DMA_SetConfig+0x234>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d054      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a74      	ldr	r2, [pc, #464]	; (80065d0 <DMA_SetConfig+0x238>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d04f      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a73      	ldr	r2, [pc, #460]	; (80065d4 <DMA_SetConfig+0x23c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d04a      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a71      	ldr	r2, [pc, #452]	; (80065d8 <DMA_SetConfig+0x240>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d045      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a70      	ldr	r2, [pc, #448]	; (80065dc <DMA_SetConfig+0x244>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d040      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a6e      	ldr	r2, [pc, #440]	; (80065e0 <DMA_SetConfig+0x248>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d03b      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6d      	ldr	r2, [pc, #436]	; (80065e4 <DMA_SetConfig+0x24c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d036      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a6b      	ldr	r2, [pc, #428]	; (80065e8 <DMA_SetConfig+0x250>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d031      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a6a      	ldr	r2, [pc, #424]	; (80065ec <DMA_SetConfig+0x254>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d02c      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a68      	ldr	r2, [pc, #416]	; (80065f0 <DMA_SetConfig+0x258>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d027      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a67      	ldr	r2, [pc, #412]	; (80065f4 <DMA_SetConfig+0x25c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d022      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a65      	ldr	r2, [pc, #404]	; (80065f8 <DMA_SetConfig+0x260>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a64      	ldr	r2, [pc, #400]	; (80065fc <DMA_SetConfig+0x264>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d018      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a62      	ldr	r2, [pc, #392]	; (8006600 <DMA_SetConfig+0x268>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a61      	ldr	r2, [pc, #388]	; (8006604 <DMA_SetConfig+0x26c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a5f      	ldr	r2, [pc, #380]	; (8006608 <DMA_SetConfig+0x270>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a5e      	ldr	r2, [pc, #376]	; (800660c <DMA_SetConfig+0x274>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <DMA_SetConfig+0x10a>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a5c      	ldr	r2, [pc, #368]	; (8006610 <DMA_SetConfig+0x278>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <DMA_SetConfig+0x10e>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <DMA_SetConfig+0x110>
 80064a6:	2300      	movs	r3, #0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00d      	beq.n	80064c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a39      	ldr	r2, [pc, #228]	; (80065b4 <DMA_SetConfig+0x21c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d04a      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a38      	ldr	r2, [pc, #224]	; (80065b8 <DMA_SetConfig+0x220>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d045      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a36      	ldr	r2, [pc, #216]	; (80065bc <DMA_SetConfig+0x224>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d040      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a35      	ldr	r2, [pc, #212]	; (80065c0 <DMA_SetConfig+0x228>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d03b      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a33      	ldr	r2, [pc, #204]	; (80065c4 <DMA_SetConfig+0x22c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d036      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a32      	ldr	r2, [pc, #200]	; (80065c8 <DMA_SetConfig+0x230>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d031      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a30      	ldr	r2, [pc, #192]	; (80065cc <DMA_SetConfig+0x234>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d02c      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a2f      	ldr	r2, [pc, #188]	; (80065d0 <DMA_SetConfig+0x238>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d027      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <DMA_SetConfig+0x23c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d022      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <DMA_SetConfig+0x240>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d01d      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2a      	ldr	r2, [pc, #168]	; (80065dc <DMA_SetConfig+0x244>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d018      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a29      	ldr	r2, [pc, #164]	; (80065e0 <DMA_SetConfig+0x248>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a27      	ldr	r2, [pc, #156]	; (80065e4 <DMA_SetConfig+0x24c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00e      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a26      	ldr	r2, [pc, #152]	; (80065e8 <DMA_SetConfig+0x250>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d009      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a24      	ldr	r2, [pc, #144]	; (80065ec <DMA_SetConfig+0x254>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <DMA_SetConfig+0x1d0>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <DMA_SetConfig+0x258>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d101      	bne.n	800656c <DMA_SetConfig+0x1d4>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <DMA_SetConfig+0x1d6>
 800656c:	2300      	movs	r3, #0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d059      	beq.n	8006626 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	223f      	movs	r2, #63	; 0x3f
 800657c:	409a      	lsls	r2, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006590:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d138      	bne.n	8006614 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065b2:	e086      	b.n	80066c2 <DMA_SetConfig+0x32a>
 80065b4:	40020010 	.word	0x40020010
 80065b8:	40020028 	.word	0x40020028
 80065bc:	40020040 	.word	0x40020040
 80065c0:	40020058 	.word	0x40020058
 80065c4:	40020070 	.word	0x40020070
 80065c8:	40020088 	.word	0x40020088
 80065cc:	400200a0 	.word	0x400200a0
 80065d0:	400200b8 	.word	0x400200b8
 80065d4:	40020410 	.word	0x40020410
 80065d8:	40020428 	.word	0x40020428
 80065dc:	40020440 	.word	0x40020440
 80065e0:	40020458 	.word	0x40020458
 80065e4:	40020470 	.word	0x40020470
 80065e8:	40020488 	.word	0x40020488
 80065ec:	400204a0 	.word	0x400204a0
 80065f0:	400204b8 	.word	0x400204b8
 80065f4:	58025408 	.word	0x58025408
 80065f8:	5802541c 	.word	0x5802541c
 80065fc:	58025430 	.word	0x58025430
 8006600:	58025444 	.word	0x58025444
 8006604:	58025458 	.word	0x58025458
 8006608:	5802546c 	.word	0x5802546c
 800660c:	58025480 	.word	0x58025480
 8006610:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]
}
 8006624:	e04d      	b.n	80066c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a29      	ldr	r2, [pc, #164]	; (80066d0 <DMA_SetConfig+0x338>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d022      	beq.n	8006676 <DMA_SetConfig+0x2de>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a27      	ldr	r2, [pc, #156]	; (80066d4 <DMA_SetConfig+0x33c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01d      	beq.n	8006676 <DMA_SetConfig+0x2de>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a26      	ldr	r2, [pc, #152]	; (80066d8 <DMA_SetConfig+0x340>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d018      	beq.n	8006676 <DMA_SetConfig+0x2de>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a24      	ldr	r2, [pc, #144]	; (80066dc <DMA_SetConfig+0x344>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <DMA_SetConfig+0x2de>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <DMA_SetConfig+0x348>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00e      	beq.n	8006676 <DMA_SetConfig+0x2de>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <DMA_SetConfig+0x34c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <DMA_SetConfig+0x2de>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a20      	ldr	r2, [pc, #128]	; (80066e8 <DMA_SetConfig+0x350>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d004      	beq.n	8006676 <DMA_SetConfig+0x2de>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1e      	ldr	r2, [pc, #120]	; (80066ec <DMA_SetConfig+0x354>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d101      	bne.n	800667a <DMA_SetConfig+0x2e2>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <DMA_SetConfig+0x2e4>
 800667a:	2300      	movs	r3, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d020      	beq.n	80066c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2201      	movs	r2, #1
 800668a:	409a      	lsls	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d108      	bne.n	80066b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	60da      	str	r2, [r3, #12]
}
 80066b0:	e007      	b.n	80066c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	60da      	str	r2, [r3, #12]
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	58025408 	.word	0x58025408
 80066d4:	5802541c 	.word	0x5802541c
 80066d8:	58025430 	.word	0x58025430
 80066dc:	58025444 	.word	0x58025444
 80066e0:	58025458 	.word	0x58025458
 80066e4:	5802546c 	.word	0x5802546c
 80066e8:	58025480 	.word	0x58025480
 80066ec:	58025494 	.word	0x58025494

080066f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a42      	ldr	r2, [pc, #264]	; (8006808 <DMA_CalcBaseAndBitshift+0x118>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d04a      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a41      	ldr	r2, [pc, #260]	; (800680c <DMA_CalcBaseAndBitshift+0x11c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d045      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a3f      	ldr	r2, [pc, #252]	; (8006810 <DMA_CalcBaseAndBitshift+0x120>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d040      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a3e      	ldr	r2, [pc, #248]	; (8006814 <DMA_CalcBaseAndBitshift+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d03b      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a3c      	ldr	r2, [pc, #240]	; (8006818 <DMA_CalcBaseAndBitshift+0x128>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d036      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a3b      	ldr	r2, [pc, #236]	; (800681c <DMA_CalcBaseAndBitshift+0x12c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d031      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a39      	ldr	r2, [pc, #228]	; (8006820 <DMA_CalcBaseAndBitshift+0x130>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d02c      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a38      	ldr	r2, [pc, #224]	; (8006824 <DMA_CalcBaseAndBitshift+0x134>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d027      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a36      	ldr	r2, [pc, #216]	; (8006828 <DMA_CalcBaseAndBitshift+0x138>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d022      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a35      	ldr	r2, [pc, #212]	; (800682c <DMA_CalcBaseAndBitshift+0x13c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d01d      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a33      	ldr	r2, [pc, #204]	; (8006830 <DMA_CalcBaseAndBitshift+0x140>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d018      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a32      	ldr	r2, [pc, #200]	; (8006834 <DMA_CalcBaseAndBitshift+0x144>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d013      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a30      	ldr	r2, [pc, #192]	; (8006838 <DMA_CalcBaseAndBitshift+0x148>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00e      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a2f      	ldr	r2, [pc, #188]	; (800683c <DMA_CalcBaseAndBitshift+0x14c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a2d      	ldr	r2, [pc, #180]	; (8006840 <DMA_CalcBaseAndBitshift+0x150>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <DMA_CalcBaseAndBitshift+0xa8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2c      	ldr	r2, [pc, #176]	; (8006844 <DMA_CalcBaseAndBitshift+0x154>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d101      	bne.n	800679c <DMA_CalcBaseAndBitshift+0xac>
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <DMA_CalcBaseAndBitshift+0xae>
 800679c:	2300      	movs	r3, #0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d024      	beq.n	80067ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	3b10      	subs	r3, #16
 80067aa:	4a27      	ldr	r2, [pc, #156]	; (8006848 <DMA_CalcBaseAndBitshift+0x158>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	091b      	lsrs	r3, r3, #4
 80067b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	4a24      	ldr	r2, [pc, #144]	; (800684c <DMA_CalcBaseAndBitshift+0x15c>)
 80067bc:	5cd3      	ldrb	r3, [r2, r3]
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d908      	bls.n	80067dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	4b1f      	ldr	r3, [pc, #124]	; (8006850 <DMA_CalcBaseAndBitshift+0x160>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	1d1a      	adds	r2, r3, #4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	659a      	str	r2, [r3, #88]	; 0x58
 80067da:	e00d      	b.n	80067f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <DMA_CalcBaseAndBitshift+0x160>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6593      	str	r3, [r2, #88]	; 0x58
 80067ea:	e005      	b.n	80067f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40020010 	.word	0x40020010
 800680c:	40020028 	.word	0x40020028
 8006810:	40020040 	.word	0x40020040
 8006814:	40020058 	.word	0x40020058
 8006818:	40020070 	.word	0x40020070
 800681c:	40020088 	.word	0x40020088
 8006820:	400200a0 	.word	0x400200a0
 8006824:	400200b8 	.word	0x400200b8
 8006828:	40020410 	.word	0x40020410
 800682c:	40020428 	.word	0x40020428
 8006830:	40020440 	.word	0x40020440
 8006834:	40020458 	.word	0x40020458
 8006838:	40020470 	.word	0x40020470
 800683c:	40020488 	.word	0x40020488
 8006840:	400204a0 	.word	0x400204a0
 8006844:	400204b8 	.word	0x400204b8
 8006848:	aaaaaaab 	.word	0xaaaaaaab
 800684c:	0800dc34 	.word	0x0800dc34
 8006850:	fffffc00 	.word	0xfffffc00

08006854 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d120      	bne.n	80068aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	2b03      	cmp	r3, #3
 800686e:	d858      	bhi.n	8006922 <DMA_CheckFifoParam+0xce>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <DMA_CheckFifoParam+0x24>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	08006889 	.word	0x08006889
 800687c:	0800689b 	.word	0x0800689b
 8006880:	08006889 	.word	0x08006889
 8006884:	08006923 	.word	0x08006923
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d048      	beq.n	8006926 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006898:	e045      	b.n	8006926 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068a2:	d142      	bne.n	800692a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068a8:	e03f      	b.n	800692a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b2:	d123      	bne.n	80068fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d838      	bhi.n	800692e <DMA_CheckFifoParam+0xda>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <DMA_CheckFifoParam+0x70>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068d5 	.word	0x080068d5
 80068c8:	080068db 	.word	0x080068db
 80068cc:	080068d5 	.word	0x080068d5
 80068d0:	080068ed 	.word	0x080068ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
        break;
 80068d8:	e030      	b.n	800693c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d025      	beq.n	8006932 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068ea:	e022      	b.n	8006932 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068f4:	d11f      	bne.n	8006936 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068fa:	e01c      	b.n	8006936 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	2b02      	cmp	r3, #2
 8006902:	d902      	bls.n	800690a <DMA_CheckFifoParam+0xb6>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d003      	beq.n	8006910 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006908:	e018      	b.n	800693c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	73fb      	strb	r3, [r7, #15]
        break;
 800690e:	e015      	b.n	800693c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00e      	beq.n	800693a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
    break;
 8006920:	e00b      	b.n	800693a <DMA_CheckFifoParam+0xe6>
        break;
 8006922:	bf00      	nop
 8006924:	e00a      	b.n	800693c <DMA_CheckFifoParam+0xe8>
        break;
 8006926:	bf00      	nop
 8006928:	e008      	b.n	800693c <DMA_CheckFifoParam+0xe8>
        break;
 800692a:	bf00      	nop
 800692c:	e006      	b.n	800693c <DMA_CheckFifoParam+0xe8>
        break;
 800692e:	bf00      	nop
 8006930:	e004      	b.n	800693c <DMA_CheckFifoParam+0xe8>
        break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <DMA_CheckFifoParam+0xe8>
        break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <DMA_CheckFifoParam+0xe8>
    break;
 800693a:	bf00      	nop
    }
  }

  return status;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop

0800694c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a38      	ldr	r2, [pc, #224]	; (8006a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d022      	beq.n	80069aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a36      	ldr	r2, [pc, #216]	; (8006a44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01d      	beq.n	80069aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a35      	ldr	r2, [pc, #212]	; (8006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d018      	beq.n	80069aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a33      	ldr	r2, [pc, #204]	; (8006a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a32      	ldr	r2, [pc, #200]	; (8006a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a30      	ldr	r2, [pc, #192]	; (8006a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a2d      	ldr	r2, [pc, #180]	; (8006a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d101      	bne.n	80069ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01a      	beq.n	80069ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	3b08      	subs	r3, #8
 80069bc:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	091b      	lsrs	r3, r3, #4
 80069c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a24      	ldr	r2, [pc, #144]	; (8006a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80069d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	2201      	movs	r2, #1
 80069e2:	409a      	lsls	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80069e8:	e024      	b.n	8006a34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	3b10      	subs	r3, #16
 80069f2:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80069f4:	fba2 2303 	umull	r2, r3, r2, r3
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d806      	bhi.n	8006a12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d902      	bls.n	8006a12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4b18      	ldr	r3, [pc, #96]	; (8006a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a16      	ldr	r2, [pc, #88]	; (8006a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006a24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	58025408 	.word	0x58025408
 8006a44:	5802541c 	.word	0x5802541c
 8006a48:	58025430 	.word	0x58025430
 8006a4c:	58025444 	.word	0x58025444
 8006a50:	58025458 	.word	0x58025458
 8006a54:	5802546c 	.word	0x5802546c
 8006a58:	58025480 	.word	0x58025480
 8006a5c:	58025494 	.word	0x58025494
 8006a60:	cccccccd 	.word	0xcccccccd
 8006a64:	16009600 	.word	0x16009600
 8006a68:	58025880 	.word	0x58025880
 8006a6c:	aaaaaaab 	.word	0xaaaaaaab
 8006a70:	400204b8 	.word	0x400204b8
 8006a74:	4002040f 	.word	0x4002040f
 8006a78:	10008200 	.word	0x10008200
 8006a7c:	40020880 	.word	0x40020880

08006a80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d04a      	beq.n	8006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d847      	bhi.n	8006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a25      	ldr	r2, [pc, #148]	; (8006b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d022      	beq.n	8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a24      	ldr	r2, [pc, #144]	; (8006b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d01d      	beq.n	8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a22      	ldr	r2, [pc, #136]	; (8006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d018      	beq.n	8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a21      	ldr	r2, [pc, #132]	; (8006b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d013      	beq.n	8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1f      	ldr	r2, [pc, #124]	; (8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00e      	beq.n	8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1e      	ldr	r2, [pc, #120]	; (8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d009      	beq.n	8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d004      	beq.n	8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d101      	bne.n	8006af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006af0:	2300      	movs	r3, #0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	461a      	mov	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a15      	ldr	r2, [pc, #84]	; (8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b08:	671a      	str	r2, [r3, #112]	; 0x70
 8006b0a:	e009      	b.n	8006b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	461a      	mov	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a11      	ldr	r2, [pc, #68]	; (8006b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006b1e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	2201      	movs	r2, #1
 8006b26:	409a      	lsls	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	58025408 	.word	0x58025408
 8006b3c:	5802541c 	.word	0x5802541c
 8006b40:	58025430 	.word	0x58025430
 8006b44:	58025444 	.word	0x58025444
 8006b48:	58025458 	.word	0x58025458
 8006b4c:	5802546c 	.word	0x5802546c
 8006b50:	58025480 	.word	0x58025480
 8006b54:	58025494 	.word	0x58025494
 8006b58:	1600963f 	.word	0x1600963f
 8006b5c:	58025940 	.word	0x58025940
 8006b60:	1000823f 	.word	0x1000823f
 8006b64:	40020940 	.word	0x40020940

08006b68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b098      	sub	sp, #96	; 0x60
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006b70:	4a84      	ldr	r2, [pc, #528]	; (8006d84 <HAL_FDCAN_Init+0x21c>)
 8006b72:	f107 030c 	add.w	r3, r7, #12
 8006b76:	4611      	mov	r1, r2
 8006b78:	224c      	movs	r2, #76	; 0x4c
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f006 fbc4 	bl	800d308 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e1c6      	b.n	8006f18 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a7e      	ldr	r2, [pc, #504]	; (8006d88 <HAL_FDCAN_Init+0x220>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d106      	bne.n	8006ba2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fa fd1a 	bl	80015f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0210 	bic.w	r2, r2, #16
 8006bca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bcc:	f7fb fa74 	bl	80020b8 <HAL_GetTick>
 8006bd0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006bd2:	e014      	b.n	8006bfe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006bd4:	f7fb fa70 	bl	80020b8 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b0a      	cmp	r3, #10
 8006be0:	d90d      	bls.n	8006bfe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be8:	f043 0201 	orr.w	r2, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e18c      	b.n	8006f18 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d0e3      	beq.n	8006bd4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c1c:	f7fb fa4c 	bl	80020b8 <HAL_GetTick>
 8006c20:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c22:	e014      	b.n	8006c4e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c24:	f7fb fa48 	bl	80020b8 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b0a      	cmp	r3, #10
 8006c30:	d90d      	bls.n	8006c4e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c38:	f043 0201 	orr.w	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2203      	movs	r2, #3
 8006c46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e164      	b.n	8006f18 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0e3      	beq.n	8006c24 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0202 	orr.w	r2, r2, #2
 8006c6a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	7c1b      	ldrb	r3, [r3, #16]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d108      	bne.n	8006c86 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c82:	619a      	str	r2, [r3, #24]
 8006c84:	e007      	b.n	8006c96 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699a      	ldr	r2, [r3, #24]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c94:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	7c5b      	ldrb	r3, [r3, #17]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d108      	bne.n	8006cb0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699a      	ldr	r2, [r3, #24]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cac:	619a      	str	r2, [r3, #24]
 8006cae:	e007      	b.n	8006cc0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cbe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	7c9b      	ldrb	r3, [r3, #18]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d108      	bne.n	8006cda <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cd6:	619a      	str	r2, [r3, #24]
 8006cd8:	e007      	b.n	8006cea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ce8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006d0e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0210 	bic.w	r2, r2, #16
 8006d1e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d108      	bne.n	8006d3a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0204 	orr.w	r2, r2, #4
 8006d36:	619a      	str	r2, [r3, #24]
 8006d38:	e030      	b.n	8006d9c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d02c      	beq.n	8006d9c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d020      	beq.n	8006d8c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d58:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0210 	orr.w	r2, r2, #16
 8006d68:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d114      	bne.n	8006d9c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699a      	ldr	r2, [r3, #24]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0220 	orr.w	r2, r2, #32
 8006d80:	619a      	str	r2, [r3, #24]
 8006d82:	e00b      	b.n	8006d9c <HAL_FDCAN_Init+0x234>
 8006d84:	0800dbd8 	.word	0x0800dbd8
 8006d88:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0220 	orr.w	r2, r2, #32
 8006d9a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006dac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006db4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006dc4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006dc6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dd0:	d115      	bne.n	8006dfe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006de0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	3b01      	subs	r3, #1
 8006de8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006dea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	3b01      	subs	r3, #1
 8006df4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006dfa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006dfc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e24:	4413      	add	r3, r2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d011      	beq.n	8006e4e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006e32:	f023 0107 	bic.w	r1, r3, #7
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	3360      	adds	r3, #96	; 0x60
 8006e3e:	443b      	add	r3, r7
 8006e40:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d011      	beq.n	8006e7a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e5e:	f023 0107 	bic.w	r1, r3, #7
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	3360      	adds	r3, #96	; 0x60
 8006e6a:	443b      	add	r3, r7
 8006e6c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d012      	beq.n	8006ea8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e8a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	3360      	adds	r3, #96	; 0x60
 8006e96:	443b      	add	r3, r7
 8006e98:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e9c:	011a      	lsls	r2, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d012      	beq.n	8006ed6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006eb8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	3360      	adds	r3, #96	; 0x60
 8006ec4:	443b      	add	r3, r7
 8006ec6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006eca:	021a      	lsls	r2, r3, #8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <HAL_FDCAN_Init+0x3b8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d107      	bne.n	8006ef0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f022 0203 	bic.w	r2, r2, #3
 8006eee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f80b 	bl	8006f24 <FDCAN_CalcultateRamBlockAddresses>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006f14:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3760      	adds	r7, #96	; 0x60
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	4000a000 	.word	0x4000a000

08006f24 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f3a:	4ba7      	ldr	r3, [pc, #668]	; (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	0091      	lsls	r1, r2, #2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	430b      	orrs	r3, r1
 8006f48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f54:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	041a      	lsls	r2, r3, #16
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	4413      	add	r3, r2
 8006f70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f7a:	4b97      	ldr	r3, [pc, #604]	; (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	0091      	lsls	r1, r2, #2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	430b      	orrs	r3, r1
 8006f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9c:	041a      	lsls	r2, r3, #16
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006fbc:	4b86      	ldr	r3, [pc, #536]	; (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	0091      	lsls	r1, r2, #2
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fd6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	041a      	lsls	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007004:	4b74      	ldr	r3, [pc, #464]	; (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007006:	4013      	ands	r3, r2
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	0091      	lsls	r1, r2, #2
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	430b      	orrs	r3, r1
 8007012:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800701e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007026:	041a      	lsls	r2, r3, #16
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800703a:	fb02 f303 	mul.w	r3, r2, r3
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	4413      	add	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800704c:	4b62      	ldr	r3, [pc, #392]	; (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800704e:	4013      	ands	r3, r2
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	0091      	lsls	r1, r2, #2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	430b      	orrs	r3, r1
 800705a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007066:	fb02 f303 	mul.w	r3, r2, r3
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007078:	4b57      	ldr	r3, [pc, #348]	; (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800707a:	4013      	ands	r3, r2
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	0091      	lsls	r1, r2, #2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	430b      	orrs	r3, r1
 8007086:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007092:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709a:	041a      	lsls	r2, r3, #16
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	4413      	add	r3, r2
 80070b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80070ba:	4b47      	ldr	r3, [pc, #284]	; (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070bc:	4013      	ands	r3, r2
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	0091      	lsls	r1, r2, #2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	430b      	orrs	r3, r1
 80070c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070d4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070dc:	041a      	lsls	r2, r3, #16
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070f0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f8:	061a      	lsls	r2, r3, #24
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007108:	4b34      	ldr	r3, [pc, #208]	; (80071dc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800710a:	4413      	add	r3, r2
 800710c:	009a      	lsls	r2, r3, #2
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	441a      	add	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	441a      	add	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	441a      	add	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	441a      	add	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	441a      	add	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	441a      	add	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800719e:	fb01 f303 	mul.w	r3, r1, r3
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	441a      	add	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80071ba:	fb01 f303 	mul.w	r3, r1, r3
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ce:	4a04      	ldr	r2, [pc, #16]	; (80071e0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d915      	bls.n	8007200 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80071d4:	e006      	b.n	80071e4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80071d6:	bf00      	nop
 80071d8:	ffff0003 	.word	0xffff0003
 80071dc:	10002b00 	.word	0x10002b00
 80071e0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071ea:	f043 0220 	orr.w	r2, r3, #32
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2203      	movs	r2, #3
 80071f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e010      	b.n	8007222 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	e005      	b.n	8007214 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3304      	adds	r3, #4
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	429a      	cmp	r2, r3
 800721e:	d3f3      	bcc.n	8007208 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop

08007230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007230:	b480      	push	{r7}
 8007232:	b089      	sub	sp, #36	; 0x24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800723a:	2300      	movs	r3, #0
 800723c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800723e:	4b86      	ldr	r3, [pc, #536]	; (8007458 <HAL_GPIO_Init+0x228>)
 8007240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007242:	e18c      	b.n	800755e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	2101      	movs	r1, #1
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	fa01 f303 	lsl.w	r3, r1, r3
 8007250:	4013      	ands	r3, r2
 8007252:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 817e 	beq.w	8007558 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f003 0303 	and.w	r3, r3, #3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d005      	beq.n	8007274 <HAL_GPIO_Init+0x44>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d130      	bne.n	80072d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	2203      	movs	r2, #3
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	43db      	mvns	r3, r3
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	4013      	ands	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	fa02 f303 	lsl.w	r3, r2, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4313      	orrs	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072aa:	2201      	movs	r2, #1
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	43db      	mvns	r3, r3
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	4013      	ands	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	091b      	lsrs	r3, r3, #4
 80072c0:	f003 0201 	and.w	r2, r3, #1
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d017      	beq.n	8007312 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	2203      	movs	r2, #3
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	43db      	mvns	r3, r3
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	4013      	ands	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	4313      	orrs	r3, r2
 800730a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d123      	bne.n	8007366 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	08da      	lsrs	r2, r3, #3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3208      	adds	r2, #8
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	220f      	movs	r2, #15
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43db      	mvns	r3, r3
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	4013      	ands	r3, r2
 8007340:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	691a      	ldr	r2, [r3, #16]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	fa02 f303 	lsl.w	r3, r2, r3
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	4313      	orrs	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	08da      	lsrs	r2, r3, #3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3208      	adds	r2, #8
 8007360:	69b9      	ldr	r1, [r7, #24]
 8007362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	2203      	movs	r2, #3
 8007372:	fa02 f303 	lsl.w	r3, r2, r3
 8007376:	43db      	mvns	r3, r3
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	4013      	ands	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f003 0203 	and.w	r2, r3, #3
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	4313      	orrs	r3, r2
 8007392:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 80d8 	beq.w	8007558 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073a8:	4b2c      	ldr	r3, [pc, #176]	; (800745c <HAL_GPIO_Init+0x22c>)
 80073aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073ae:	4a2b      	ldr	r2, [pc, #172]	; (800745c <HAL_GPIO_Init+0x22c>)
 80073b0:	f043 0302 	orr.w	r3, r3, #2
 80073b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80073b8:	4b28      	ldr	r3, [pc, #160]	; (800745c <HAL_GPIO_Init+0x22c>)
 80073ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073c6:	4a26      	ldr	r2, [pc, #152]	; (8007460 <HAL_GPIO_Init+0x230>)
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	089b      	lsrs	r3, r3, #2
 80073cc:	3302      	adds	r3, #2
 80073ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	220f      	movs	r2, #15
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	43db      	mvns	r3, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a1d      	ldr	r2, [pc, #116]	; (8007464 <HAL_GPIO_Init+0x234>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d04a      	beq.n	8007488 <HAL_GPIO_Init+0x258>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a1c      	ldr	r2, [pc, #112]	; (8007468 <HAL_GPIO_Init+0x238>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d02b      	beq.n	8007452 <HAL_GPIO_Init+0x222>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1b      	ldr	r2, [pc, #108]	; (800746c <HAL_GPIO_Init+0x23c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d025      	beq.n	800744e <HAL_GPIO_Init+0x21e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1a      	ldr	r2, [pc, #104]	; (8007470 <HAL_GPIO_Init+0x240>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d01f      	beq.n	800744a <HAL_GPIO_Init+0x21a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a19      	ldr	r2, [pc, #100]	; (8007474 <HAL_GPIO_Init+0x244>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d019      	beq.n	8007446 <HAL_GPIO_Init+0x216>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a18      	ldr	r2, [pc, #96]	; (8007478 <HAL_GPIO_Init+0x248>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <HAL_GPIO_Init+0x212>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a17      	ldr	r2, [pc, #92]	; (800747c <HAL_GPIO_Init+0x24c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00d      	beq.n	800743e <HAL_GPIO_Init+0x20e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a16      	ldr	r2, [pc, #88]	; (8007480 <HAL_GPIO_Init+0x250>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <HAL_GPIO_Init+0x20a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a15      	ldr	r2, [pc, #84]	; (8007484 <HAL_GPIO_Init+0x254>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <HAL_GPIO_Init+0x206>
 8007432:	2309      	movs	r3, #9
 8007434:	e029      	b.n	800748a <HAL_GPIO_Init+0x25a>
 8007436:	230a      	movs	r3, #10
 8007438:	e027      	b.n	800748a <HAL_GPIO_Init+0x25a>
 800743a:	2307      	movs	r3, #7
 800743c:	e025      	b.n	800748a <HAL_GPIO_Init+0x25a>
 800743e:	2306      	movs	r3, #6
 8007440:	e023      	b.n	800748a <HAL_GPIO_Init+0x25a>
 8007442:	2305      	movs	r3, #5
 8007444:	e021      	b.n	800748a <HAL_GPIO_Init+0x25a>
 8007446:	2304      	movs	r3, #4
 8007448:	e01f      	b.n	800748a <HAL_GPIO_Init+0x25a>
 800744a:	2303      	movs	r3, #3
 800744c:	e01d      	b.n	800748a <HAL_GPIO_Init+0x25a>
 800744e:	2302      	movs	r3, #2
 8007450:	e01b      	b.n	800748a <HAL_GPIO_Init+0x25a>
 8007452:	2301      	movs	r3, #1
 8007454:	e019      	b.n	800748a <HAL_GPIO_Init+0x25a>
 8007456:	bf00      	nop
 8007458:	58000080 	.word	0x58000080
 800745c:	58024400 	.word	0x58024400
 8007460:	58000400 	.word	0x58000400
 8007464:	58020000 	.word	0x58020000
 8007468:	58020400 	.word	0x58020400
 800746c:	58020800 	.word	0x58020800
 8007470:	58020c00 	.word	0x58020c00
 8007474:	58021000 	.word	0x58021000
 8007478:	58021400 	.word	0x58021400
 800747c:	58021800 	.word	0x58021800
 8007480:	58021c00 	.word	0x58021c00
 8007484:	58022400 	.word	0x58022400
 8007488:	2300      	movs	r3, #0
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	f002 0203 	and.w	r2, r2, #3
 8007490:	0092      	lsls	r2, r2, #2
 8007492:	4093      	lsls	r3, r2
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	4313      	orrs	r3, r2
 8007498:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800749a:	4938      	ldr	r1, [pc, #224]	; (800757c <HAL_GPIO_Init+0x34c>)
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	089b      	lsrs	r3, r3, #2
 80074a0:	3302      	adds	r3, #2
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	43db      	mvns	r3, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4013      	ands	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80074ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80074d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	43db      	mvns	r3, r3
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	4013      	ands	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80074fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	43db      	mvns	r3, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	43db      	mvns	r3, r3
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	4013      	ands	r3, r2
 800753c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	f47f ae6b 	bne.w	8007244 <HAL_GPIO_Init+0x14>
  }
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	3724      	adds	r7, #36	; 0x24
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	58000400 	.word	0x58000400

08007580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	807b      	strh	r3, [r7, #2]
 800758c:	4613      	mov	r3, r2
 800758e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007590:	787b      	ldrb	r3, [r7, #1]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007596:	887a      	ldrh	r2, [r7, #2]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800759c:	e003      	b.n	80075a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800759e:	887b      	ldrh	r3, [r7, #2]
 80075a0:	041a      	lsls	r2, r3, #16
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	619a      	str	r2, [r3, #24]
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e07f      	b.n	80076c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7fa f8d8 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2224      	movs	r2, #36	; 0x24
 80075e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007604:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007614:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d107      	bne.n	800762e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800762a:	609a      	str	r2, [r3, #8]
 800762c:	e006      	b.n	800763c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800763a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d104      	bne.n	800764e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800764c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6859      	ldr	r1, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <HAL_I2C_Init+0x11c>)
 800765a:	430b      	orrs	r3, r1
 800765c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800766c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69d9      	ldr	r1, [r3, #28]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1a      	ldr	r2, [r3, #32]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	02008000 	.word	0x02008000

080076d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d138      	bne.n	800775c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e032      	b.n	800775e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2224      	movs	r2, #36	; 0x24
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0201 	bic.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	e000      	b.n	800775e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800775c:	2302      	movs	r3, #2
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b20      	cmp	r3, #32
 800777e:	d139      	bne.n	80077f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800778a:	2302      	movs	r3, #2
 800778c:	e033      	b.n	80077f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2224      	movs	r2, #36	; 0x24
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0201 	bic.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	e000      	b.n	80077f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077f4:	2302      	movs	r3, #2
  }
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800780c:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	2b06      	cmp	r3, #6
 8007816:	d00a      	beq.n	800782e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007818:	4b26      	ldr	r3, [pc, #152]	; (80078b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	429a      	cmp	r2, r3
 8007824:	d001      	beq.n	800782a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e03f      	b.n	80078aa <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	e03d      	b.n	80078aa <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800782e:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007836:	491f      	ldr	r1, [pc, #124]	; (80078b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4313      	orrs	r3, r2
 800783c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800783e:	f7fa fc3b 	bl	80020b8 <HAL_GetTick>
 8007842:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007844:	e009      	b.n	800785a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007846:	f7fa fc37 	bl	80020b8 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007854:	d901      	bls.n	800785a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e027      	b.n	80078aa <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007866:	d1ee      	bne.n	8007846 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b1e      	cmp	r3, #30
 800786c:	d008      	beq.n	8007880 <HAL_PWREx_ConfigSupply+0x7c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b2e      	cmp	r3, #46	; 0x2e
 8007872:	d005      	beq.n	8007880 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b1d      	cmp	r3, #29
 8007878:	d002      	beq.n	8007880 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b2d      	cmp	r3, #45	; 0x2d
 800787e:	d113      	bne.n	80078a8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007880:	f7fa fc1a 	bl	80020b8 <HAL_GetTick>
 8007884:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007886:	e009      	b.n	800789c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007888:	f7fa fc16 	bl	80020b8 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007896:	d901      	bls.n	800789c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e006      	b.n	80078aa <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0311 	and.w	r3, r3, #17
 80078a4:	2b11      	cmp	r3, #17
 80078a6:	d1ef      	bne.n	8007888 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	58024800 	.word	0x58024800

080078b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08c      	sub	sp, #48	; 0x30
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e3c8      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 8087 	beq.w	80079e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078d8:	4b88      	ldr	r3, [pc, #544]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078e2:	4b86      	ldr	r3, [pc, #536]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	d007      	beq.n	80078fe <HAL_RCC_OscConfig+0x46>
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	2b18      	cmp	r3, #24
 80078f2:	d110      	bne.n	8007916 <HAL_RCC_OscConfig+0x5e>
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d10b      	bne.n	8007916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078fe:	4b7f      	ldr	r3, [pc, #508]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d06c      	beq.n	80079e4 <HAL_RCC_OscConfig+0x12c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d168      	bne.n	80079e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e3a2      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791e:	d106      	bne.n	800792e <HAL_RCC_OscConfig+0x76>
 8007920:	4b76      	ldr	r3, [pc, #472]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a75      	ldr	r2, [pc, #468]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	e02e      	b.n	800798c <HAL_RCC_OscConfig+0xd4>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10c      	bne.n	8007950 <HAL_RCC_OscConfig+0x98>
 8007936:	4b71      	ldr	r3, [pc, #452]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a70      	ldr	r2, [pc, #448]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 800793c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	4b6e      	ldr	r3, [pc, #440]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a6d      	ldr	r2, [pc, #436]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	e01d      	b.n	800798c <HAL_RCC_OscConfig+0xd4>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007958:	d10c      	bne.n	8007974 <HAL_RCC_OscConfig+0xbc>
 800795a:	4b68      	ldr	r3, [pc, #416]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a67      	ldr	r2, [pc, #412]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	4b65      	ldr	r3, [pc, #404]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a64      	ldr	r2, [pc, #400]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 800796c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	e00b      	b.n	800798c <HAL_RCC_OscConfig+0xd4>
 8007974:	4b61      	ldr	r3, [pc, #388]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a60      	ldr	r2, [pc, #384]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 800797a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	4b5e      	ldr	r3, [pc, #376]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a5d      	ldr	r2, [pc, #372]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800798a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d013      	beq.n	80079bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007994:	f7fa fb90 	bl	80020b8 <HAL_GetTick>
 8007998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800799a:	e008      	b.n	80079ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800799c:	f7fa fb8c 	bl	80020b8 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b64      	cmp	r3, #100	; 0x64
 80079a8:	d901      	bls.n	80079ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e356      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079ae:	4b53      	ldr	r3, [pc, #332]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f0      	beq.n	800799c <HAL_RCC_OscConfig+0xe4>
 80079ba:	e014      	b.n	80079e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079bc:	f7fa fb7c 	bl	80020b8 <HAL_GetTick>
 80079c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079c4:	f7fa fb78 	bl	80020b8 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b64      	cmp	r3, #100	; 0x64
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e342      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079d6:	4b49      	ldr	r3, [pc, #292]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f0      	bne.n	80079c4 <HAL_RCC_OscConfig+0x10c>
 80079e2:	e000      	b.n	80079e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 808c 	beq.w	8007b0c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079f4:	4b41      	ldr	r3, [pc, #260]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079fe:	4b3f      	ldr	r3, [pc, #252]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d007      	beq.n	8007a1a <HAL_RCC_OscConfig+0x162>
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	2b18      	cmp	r3, #24
 8007a0e:	d137      	bne.n	8007a80 <HAL_RCC_OscConfig+0x1c8>
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d132      	bne.n	8007a80 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a1a:	4b38      	ldr	r3, [pc, #224]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <HAL_RCC_OscConfig+0x17a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e314      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a32:	4b32      	ldr	r3, [pc, #200]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f023 0219 	bic.w	r2, r3, #25
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	492f      	ldr	r1, [pc, #188]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a44:	f7fa fb38 	bl	80020b8 <HAL_GetTick>
 8007a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a4c:	f7fa fb34 	bl	80020b8 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e2fe      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a5e:	4b27      	ldr	r3, [pc, #156]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0f0      	beq.n	8007a4c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6a:	4b24      	ldr	r3, [pc, #144]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	4920      	ldr	r1, [pc, #128]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a7e:	e045      	b.n	8007b0c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d026      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a88:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f023 0219 	bic.w	r2, r3, #25
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	4919      	ldr	r1, [pc, #100]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9a:	f7fa fb0d 	bl	80020b8 <HAL_GetTick>
 8007a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aa2:	f7fa fb09 	bl	80020b8 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e2d3      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ab4:	4b11      	ldr	r3, [pc, #68]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0f0      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	490b      	ldr	r1, [pc, #44]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	604b      	str	r3, [r1, #4]
 8007ad4:	e01a      	b.n	8007b0c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ad6:	4b09      	ldr	r3, [pc, #36]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a08      	ldr	r2, [pc, #32]	; (8007afc <HAL_RCC_OscConfig+0x244>)
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae2:	f7fa fae9 	bl	80020b8 <HAL_GetTick>
 8007ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ae8:	e00a      	b.n	8007b00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aea:	f7fa fae5 	bl	80020b8 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d903      	bls.n	8007b00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e2af      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
 8007afc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b00:	4b96      	ldr	r3, [pc, #600]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0304 	and.w	r3, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1ee      	bne.n	8007aea <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0310 	and.w	r3, r3, #16
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d06a      	beq.n	8007bee <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b18:	4b90      	ldr	r3, [pc, #576]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b20:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b22:	4b8e      	ldr	r3, [pc, #568]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	d007      	beq.n	8007b3e <HAL_RCC_OscConfig+0x286>
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b18      	cmp	r3, #24
 8007b32:	d11b      	bne.n	8007b6c <HAL_RCC_OscConfig+0x2b4>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d116      	bne.n	8007b6c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b3e:	4b87      	ldr	r3, [pc, #540]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <HAL_RCC_OscConfig+0x29e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	2b80      	cmp	r3, #128	; 0x80
 8007b50:	d001      	beq.n	8007b56 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e282      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b56:	4b81      	ldr	r3, [pc, #516]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	061b      	lsls	r3, r3, #24
 8007b64:	497d      	ldr	r1, [pc, #500]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b6a:	e040      	b.n	8007bee <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d023      	beq.n	8007bbc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b74:	4b79      	ldr	r3, [pc, #484]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a78      	ldr	r2, [pc, #480]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b80:	f7fa fa9a 	bl	80020b8 <HAL_GetTick>
 8007b84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b88:	f7fa fa96 	bl	80020b8 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e260      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b9a:	4b70      	ldr	r3, [pc, #448]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ba6:	4b6d      	ldr	r3, [pc, #436]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	061b      	lsls	r3, r3, #24
 8007bb4:	4969      	ldr	r1, [pc, #420]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60cb      	str	r3, [r1, #12]
 8007bba:	e018      	b.n	8007bee <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007bbc:	4b67      	ldr	r3, [pc, #412]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a66      	ldr	r2, [pc, #408]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc8:	f7fa fa76 	bl	80020b8 <HAL_GetTick>
 8007bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bce:	e008      	b.n	8007be2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bd0:	f7fa fa72 	bl	80020b8 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e23c      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007be2:	4b5e      	ldr	r3, [pc, #376]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1f0      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d036      	beq.n	8007c68 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d019      	beq.n	8007c36 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c02:	4b56      	ldr	r3, [pc, #344]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c06:	4a55      	ldr	r2, [pc, #340]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007c08:	f043 0301 	orr.w	r3, r3, #1
 8007c0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0e:	f7fa fa53 	bl	80020b8 <HAL_GetTick>
 8007c12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c16:	f7fa fa4f 	bl	80020b8 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e219      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c28:	4b4c      	ldr	r3, [pc, #304]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0f0      	beq.n	8007c16 <HAL_RCC_OscConfig+0x35e>
 8007c34:	e018      	b.n	8007c68 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c36:	4b49      	ldr	r3, [pc, #292]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3a:	4a48      	ldr	r2, [pc, #288]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c42:	f7fa fa39 	bl	80020b8 <HAL_GetTick>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c4a:	f7fa fa35 	bl	80020b8 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e1ff      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c5c:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f0      	bne.n	8007c4a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d036      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d019      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c7c:	4b37      	ldr	r3, [pc, #220]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a36      	ldr	r2, [pc, #216]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007c82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c88:	f7fa fa16 	bl	80020b8 <HAL_GetTick>
 8007c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c90:	f7fa fa12 	bl	80020b8 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e1dc      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ca2:	4b2e      	ldr	r3, [pc, #184]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <HAL_RCC_OscConfig+0x3d8>
 8007cae:	e018      	b.n	8007ce2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cb0:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a29      	ldr	r2, [pc, #164]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cbc:	f7fa f9fc 	bl	80020b8 <HAL_GetTick>
 8007cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cc4:	f7fa f9f8 	bl	80020b8 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e1c2      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f0      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8086 	beq.w	8007dfc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cf0:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <HAL_RCC_OscConfig+0x4a8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1a      	ldr	r2, [pc, #104]	; (8007d60 <HAL_RCC_OscConfig+0x4a8>)
 8007cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cfc:	f7fa f9dc 	bl	80020b8 <HAL_GetTick>
 8007d00:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d04:	f7fa f9d8 	bl	80020b8 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b64      	cmp	r3, #100	; 0x64
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e1a2      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d16:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <HAL_RCC_OscConfig+0x4a8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d106      	bne.n	8007d38 <HAL_RCC_OscConfig+0x480>
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2e:	4a0b      	ldr	r2, [pc, #44]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	6713      	str	r3, [r2, #112]	; 0x70
 8007d36:	e032      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e6>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d111      	bne.n	8007d64 <HAL_RCC_OscConfig+0x4ac>
 8007d40:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	4a05      	ldr	r2, [pc, #20]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007d46:	f023 0301 	bic.w	r3, r3, #1
 8007d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d4c:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d50:	4a02      	ldr	r2, [pc, #8]	; (8007d5c <HAL_RCC_OscConfig+0x4a4>)
 8007d52:	f023 0304 	bic.w	r3, r3, #4
 8007d56:	6713      	str	r3, [r2, #112]	; 0x70
 8007d58:	e021      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e6>
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	58024800 	.word	0x58024800
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b05      	cmp	r3, #5
 8007d6a:	d10c      	bne.n	8007d86 <HAL_RCC_OscConfig+0x4ce>
 8007d6c:	4b83      	ldr	r3, [pc, #524]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	4a82      	ldr	r2, [pc, #520]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007d72:	f043 0304 	orr.w	r3, r3, #4
 8007d76:	6713      	str	r3, [r2, #112]	; 0x70
 8007d78:	4b80      	ldr	r3, [pc, #512]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7c:	4a7f      	ldr	r2, [pc, #508]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	6713      	str	r3, [r2, #112]	; 0x70
 8007d84:	e00b      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e6>
 8007d86:	4b7d      	ldr	r3, [pc, #500]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8a:	4a7c      	ldr	r2, [pc, #496]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	6713      	str	r3, [r2, #112]	; 0x70
 8007d92:	4b7a      	ldr	r3, [pc, #488]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d96:	4a79      	ldr	r2, [pc, #484]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007d98:	f023 0304 	bic.w	r3, r3, #4
 8007d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d015      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da6:	f7fa f987 	bl	80020b8 <HAL_GetTick>
 8007daa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dac:	e00a      	b.n	8007dc4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dae:	f7fa f983 	bl	80020b8 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e14b      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dc4:	4b6d      	ldr	r3, [pc, #436]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0ee      	beq.n	8007dae <HAL_RCC_OscConfig+0x4f6>
 8007dd0:	e014      	b.n	8007dfc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd2:	f7fa f971 	bl	80020b8 <HAL_GetTick>
 8007dd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dd8:	e00a      	b.n	8007df0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dda:	f7fa f96d 	bl	80020b8 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e135      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007df0:	4b62      	ldr	r3, [pc, #392]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1ee      	bne.n	8007dda <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 812a 	beq.w	800805a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e06:	4b5d      	ldr	r3, [pc, #372]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e0e:	2b18      	cmp	r3, #24
 8007e10:	f000 80ba 	beq.w	8007f88 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	f040 8095 	bne.w	8007f48 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e1e:	4b57      	ldr	r3, [pc, #348]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a56      	ldr	r2, [pc, #344]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2a:	f7fa f945 	bl	80020b8 <HAL_GetTick>
 8007e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e30:	e008      	b.n	8007e44 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e32:	f7fa f941 	bl	80020b8 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e10b      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e44:	4b4d      	ldr	r3, [pc, #308]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1f0      	bne.n	8007e32 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e50:	4b4a      	ldr	r3, [pc, #296]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e54:	4b4a      	ldr	r3, [pc, #296]	; (8007f80 <HAL_RCC_OscConfig+0x6c8>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e60:	0112      	lsls	r2, r2, #4
 8007e62:	430a      	orrs	r2, r1
 8007e64:	4945      	ldr	r1, [pc, #276]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	628b      	str	r3, [r1, #40]	; 0x28
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	025b      	lsls	r3, r3, #9
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	3b01      	subs	r3, #1
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e92:	3b01      	subs	r3, #1
 8007e94:	061b      	lsls	r3, r3, #24
 8007e96:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e9a:	4938      	ldr	r1, [pc, #224]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007ea0:	4b36      	ldr	r3, [pc, #216]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	4a35      	ldr	r2, [pc, #212]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007eac:	4b33      	ldr	r3, [pc, #204]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb0:	4b34      	ldr	r3, [pc, #208]	; (8007f84 <HAL_RCC_OscConfig+0x6cc>)
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007eb8:	00d2      	lsls	r2, r2, #3
 8007eba:	4930      	ldr	r1, [pc, #192]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ec0:	4b2e      	ldr	r3, [pc, #184]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	f023 020c 	bic.w	r2, r3, #12
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	492b      	ldr	r1, [pc, #172]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ed2:	4b2a      	ldr	r3, [pc, #168]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	f023 0202 	bic.w	r2, r3, #2
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ede:	4927      	ldr	r1, [pc, #156]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ee4:	4b25      	ldr	r3, [pc, #148]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	4a24      	ldr	r2, [pc, #144]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef0:	4b22      	ldr	r3, [pc, #136]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef4:	4a21      	ldr	r2, [pc, #132]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007efc:	4b1f      	ldr	r3, [pc, #124]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	4a1e      	ldr	r2, [pc, #120]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007f08:	4b1c      	ldr	r3, [pc, #112]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	4a1b      	ldr	r2, [pc, #108]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f14:	4b19      	ldr	r3, [pc, #100]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fa f8ca 	bl	80020b8 <HAL_GetTick>
 8007f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f28:	f7fa f8c6 	bl	80020b8 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e090      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f3a:	4b10      	ldr	r3, [pc, #64]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0x670>
 8007f46:	e088      	b.n	800805a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f48:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a0b      	ldr	r2, [pc, #44]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f54:	f7fa f8b0 	bl	80020b8 <HAL_GetTick>
 8007f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f5c:	f7fa f8ac 	bl	80020b8 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e076      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f6e:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <HAL_RCC_OscConfig+0x6c4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1f0      	bne.n	8007f5c <HAL_RCC_OscConfig+0x6a4>
 8007f7a:	e06e      	b.n	800805a <HAL_RCC_OscConfig+0x7a2>
 8007f7c:	58024400 	.word	0x58024400
 8007f80:	fffffc0c 	.word	0xfffffc0c
 8007f84:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f88:	4b36      	ldr	r3, [pc, #216]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f8e:	4b35      	ldr	r3, [pc, #212]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 8007f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d031      	beq.n	8008000 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f003 0203 	and.w	r2, r3, #3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d12a      	bne.n	8008000 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	091b      	lsrs	r3, r3, #4
 8007fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d122      	bne.n	8008000 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d11a      	bne.n	8008000 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	0a5b      	lsrs	r3, r3, #9
 8007fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d111      	bne.n	8008000 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	0c1b      	lsrs	r3, r3, #16
 8007fe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d108      	bne.n	8008000 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	0e1b      	lsrs	r3, r3, #24
 8007ff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d001      	beq.n	8008004 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e02b      	b.n	800805c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008004:	4b17      	ldr	r3, [pc, #92]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 8008006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008008:	08db      	lsrs	r3, r3, #3
 800800a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800800e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	429a      	cmp	r2, r3
 8008018:	d01f      	beq.n	800805a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a11      	ldr	r2, [pc, #68]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 8008020:	f023 0301 	bic.w	r3, r3, #1
 8008024:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008026:	f7fa f847 	bl	80020b8 <HAL_GetTick>
 800802a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800802c:	bf00      	nop
 800802e:	f7fa f843 	bl	80020b8 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	4293      	cmp	r3, r2
 8008038:	d0f9      	beq.n	800802e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800803a:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 800803c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800803e:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <HAL_RCC_OscConfig+0x7b0>)
 8008040:	4013      	ands	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008046:	00d2      	lsls	r2, r2, #3
 8008048:	4906      	ldr	r1, [pc, #24]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 800804a:	4313      	orrs	r3, r2
 800804c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	4a04      	ldr	r2, [pc, #16]	; (8008064 <HAL_RCC_OscConfig+0x7ac>)
 8008054:	f043 0301 	orr.w	r3, r3, #1
 8008058:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3730      	adds	r7, #48	; 0x30
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	58024400 	.word	0x58024400
 8008068:	ffff0007 	.word	0xffff0007

0800806c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e19c      	b.n	80083ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008080:	4b8a      	ldr	r3, [pc, #552]	; (80082ac <HAL_RCC_ClockConfig+0x240>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 030f 	and.w	r3, r3, #15
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d910      	bls.n	80080b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800808e:	4b87      	ldr	r3, [pc, #540]	; (80082ac <HAL_RCC_ClockConfig+0x240>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f023 020f 	bic.w	r2, r3, #15
 8008096:	4985      	ldr	r1, [pc, #532]	; (80082ac <HAL_RCC_ClockConfig+0x240>)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	4313      	orrs	r3, r2
 800809c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800809e:	4b83      	ldr	r3, [pc, #524]	; (80082ac <HAL_RCC_ClockConfig+0x240>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d001      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e184      	b.n	80083ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d010      	beq.n	80080de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	4b7b      	ldr	r3, [pc, #492]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d908      	bls.n	80080de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080cc:	4b78      	ldr	r3, [pc, #480]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	4975      	ldr	r1, [pc, #468]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d010      	beq.n	800810c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	695a      	ldr	r2, [r3, #20]
 80080ee:	4b70      	ldr	r3, [pc, #448]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d908      	bls.n	800810c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080fa:	4b6d      	ldr	r3, [pc, #436]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	496a      	ldr	r1, [pc, #424]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 8008108:	4313      	orrs	r3, r2
 800810a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b00      	cmp	r3, #0
 8008116:	d010      	beq.n	800813a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	4b64      	ldr	r3, [pc, #400]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008124:	429a      	cmp	r2, r3
 8008126:	d908      	bls.n	800813a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008128:	4b61      	ldr	r3, [pc, #388]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	495e      	ldr	r1, [pc, #376]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 8008136:	4313      	orrs	r3, r2
 8008138:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b00      	cmp	r3, #0
 8008144:	d010      	beq.n	8008168 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69da      	ldr	r2, [r3, #28]
 800814a:	4b59      	ldr	r3, [pc, #356]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008152:	429a      	cmp	r2, r3
 8008154:	d908      	bls.n	8008168 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008156:	4b56      	ldr	r3, [pc, #344]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	4953      	ldr	r1, [pc, #332]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 8008164:	4313      	orrs	r3, r2
 8008166:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d010      	beq.n	8008196 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	4b4d      	ldr	r3, [pc, #308]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	429a      	cmp	r2, r3
 8008182:	d908      	bls.n	8008196 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008184:	4b4a      	ldr	r3, [pc, #296]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f023 020f 	bic.w	r2, r3, #15
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	4947      	ldr	r1, [pc, #284]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 8008192:	4313      	orrs	r3, r2
 8008194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d055      	beq.n	800824e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80081a2:	4b43      	ldr	r3, [pc, #268]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	4940      	ldr	r1, [pc, #256]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d107      	bne.n	80081cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081bc:	4b3c      	ldr	r3, [pc, #240]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d121      	bne.n	800820c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e0f6      	b.n	80083ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d107      	bne.n	80081e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081d4:	4b36      	ldr	r3, [pc, #216]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d115      	bne.n	800820c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0ea      	b.n	80083ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d107      	bne.n	80081fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081ec:	4b30      	ldr	r3, [pc, #192]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d109      	bne.n	800820c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e0de      	b.n	80083ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081fc:	4b2c      	ldr	r3, [pc, #176]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e0d6      	b.n	80083ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800820c:	4b28      	ldr	r3, [pc, #160]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	f023 0207 	bic.w	r2, r3, #7
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4925      	ldr	r1, [pc, #148]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 800821a:	4313      	orrs	r3, r2
 800821c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800821e:	f7f9 ff4b 	bl	80020b8 <HAL_GetTick>
 8008222:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008224:	e00a      	b.n	800823c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008226:	f7f9 ff47 	bl	80020b8 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	f241 3288 	movw	r2, #5000	; 0x1388
 8008234:	4293      	cmp	r3, r2
 8008236:	d901      	bls.n	800823c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e0be      	b.n	80083ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800823c:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	429a      	cmp	r2, r3
 800824c:	d1eb      	bne.n	8008226 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d010      	beq.n	800827c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	4b14      	ldr	r3, [pc, #80]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f003 030f 	and.w	r3, r3, #15
 8008266:	429a      	cmp	r2, r3
 8008268:	d208      	bcs.n	800827c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800826a:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	f023 020f 	bic.w	r2, r3, #15
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	490e      	ldr	r1, [pc, #56]	; (80082b0 <HAL_RCC_ClockConfig+0x244>)
 8008278:	4313      	orrs	r3, r2
 800827a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <HAL_RCC_ClockConfig+0x240>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 030f 	and.w	r3, r3, #15
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	429a      	cmp	r2, r3
 8008288:	d214      	bcs.n	80082b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800828a:	4b08      	ldr	r3, [pc, #32]	; (80082ac <HAL_RCC_ClockConfig+0x240>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f023 020f 	bic.w	r2, r3, #15
 8008292:	4906      	ldr	r1, [pc, #24]	; (80082ac <HAL_RCC_ClockConfig+0x240>)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	4313      	orrs	r3, r2
 8008298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800829a:	4b04      	ldr	r3, [pc, #16]	; (80082ac <HAL_RCC_ClockConfig+0x240>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 030f 	and.w	r3, r3, #15
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d005      	beq.n	80082b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e086      	b.n	80083ba <HAL_RCC_ClockConfig+0x34e>
 80082ac:	52002000 	.word	0x52002000
 80082b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d010      	beq.n	80082e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	4b3f      	ldr	r3, [pc, #252]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d208      	bcs.n	80082e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082d0:	4b3c      	ldr	r3, [pc, #240]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	4939      	ldr	r1, [pc, #228]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d010      	beq.n	8008310 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695a      	ldr	r2, [r3, #20]
 80082f2:	4b34      	ldr	r3, [pc, #208]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d208      	bcs.n	8008310 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082fe:	4b31      	ldr	r3, [pc, #196]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	492e      	ldr	r1, [pc, #184]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 800830c:	4313      	orrs	r3, r2
 800830e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d010      	beq.n	800833e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	4b28      	ldr	r3, [pc, #160]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008328:	429a      	cmp	r2, r3
 800832a:	d208      	bcs.n	800833e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800832c:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	4922      	ldr	r1, [pc, #136]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 800833a:	4313      	orrs	r3, r2
 800833c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b00      	cmp	r3, #0
 8008348:	d010      	beq.n	800836c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69da      	ldr	r2, [r3, #28]
 800834e:	4b1d      	ldr	r3, [pc, #116]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008356:	429a      	cmp	r2, r3
 8008358:	d208      	bcs.n	800836c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800835a:	4b1a      	ldr	r3, [pc, #104]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	4917      	ldr	r1, [pc, #92]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 8008368:	4313      	orrs	r3, r2
 800836a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800836c:	f000 f834 	bl	80083d8 <HAL_RCC_GetSysClockFreq>
 8008370:	4602      	mov	r2, r0
 8008372:	4b14      	ldr	r3, [pc, #80]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	0a1b      	lsrs	r3, r3, #8
 8008378:	f003 030f 	and.w	r3, r3, #15
 800837c:	4912      	ldr	r1, [pc, #72]	; (80083c8 <HAL_RCC_ClockConfig+0x35c>)
 800837e:	5ccb      	ldrb	r3, [r1, r3]
 8008380:	f003 031f 	and.w	r3, r3, #31
 8008384:	fa22 f303 	lsr.w	r3, r2, r3
 8008388:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800838a:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <HAL_RCC_ClockConfig+0x358>)
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <HAL_RCC_ClockConfig+0x35c>)
 8008394:	5cd3      	ldrb	r3, [r2, r3]
 8008396:	f003 031f 	and.w	r3, r3, #31
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	fa22 f303 	lsr.w	r3, r2, r3
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <HAL_RCC_ClockConfig+0x360>)
 80083a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083a4:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <HAL_RCC_ClockConfig+0x364>)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <HAL_RCC_ClockConfig+0x368>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7f9 fe38 	bl	8002024 <HAL_InitTick>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	58024400 	.word	0x58024400
 80083c8:	0800dc24 	.word	0x0800dc24
 80083cc:	24000008 	.word	0x24000008
 80083d0:	24000004 	.word	0x24000004
 80083d4:	2400000c 	.word	0x2400000c

080083d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083d8:	b480      	push	{r7}
 80083da:	b089      	sub	sp, #36	; 0x24
 80083dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083de:	4bb3      	ldr	r3, [pc, #716]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083e6:	2b18      	cmp	r3, #24
 80083e8:	f200 8155 	bhi.w	8008696 <HAL_RCC_GetSysClockFreq+0x2be>
 80083ec:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	08008459 	.word	0x08008459
 80083f8:	08008697 	.word	0x08008697
 80083fc:	08008697 	.word	0x08008697
 8008400:	08008697 	.word	0x08008697
 8008404:	08008697 	.word	0x08008697
 8008408:	08008697 	.word	0x08008697
 800840c:	08008697 	.word	0x08008697
 8008410:	08008697 	.word	0x08008697
 8008414:	0800847f 	.word	0x0800847f
 8008418:	08008697 	.word	0x08008697
 800841c:	08008697 	.word	0x08008697
 8008420:	08008697 	.word	0x08008697
 8008424:	08008697 	.word	0x08008697
 8008428:	08008697 	.word	0x08008697
 800842c:	08008697 	.word	0x08008697
 8008430:	08008697 	.word	0x08008697
 8008434:	08008485 	.word	0x08008485
 8008438:	08008697 	.word	0x08008697
 800843c:	08008697 	.word	0x08008697
 8008440:	08008697 	.word	0x08008697
 8008444:	08008697 	.word	0x08008697
 8008448:	08008697 	.word	0x08008697
 800844c:	08008697 	.word	0x08008697
 8008450:	08008697 	.word	0x08008697
 8008454:	0800848b 	.word	0x0800848b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008458:	4b94      	ldr	r3, [pc, #592]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0320 	and.w	r3, r3, #32
 8008460:	2b00      	cmp	r3, #0
 8008462:	d009      	beq.n	8008478 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008464:	4b91      	ldr	r3, [pc, #580]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	08db      	lsrs	r3, r3, #3
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	4a90      	ldr	r2, [pc, #576]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008470:	fa22 f303 	lsr.w	r3, r2, r3
 8008474:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008476:	e111      	b.n	800869c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008478:	4b8d      	ldr	r3, [pc, #564]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800847a:	61bb      	str	r3, [r7, #24]
      break;
 800847c:	e10e      	b.n	800869c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800847e:	4b8d      	ldr	r3, [pc, #564]	; (80086b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008480:	61bb      	str	r3, [r7, #24]
      break;
 8008482:	e10b      	b.n	800869c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008484:	4b8c      	ldr	r3, [pc, #560]	; (80086b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008486:	61bb      	str	r3, [r7, #24]
      break;
 8008488:	e108      	b.n	800869c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800848a:	4b88      	ldr	r3, [pc, #544]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008494:	4b85      	ldr	r3, [pc, #532]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	091b      	lsrs	r3, r3, #4
 800849a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800849e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80084a0:	4b82      	ldr	r3, [pc, #520]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084aa:	4b80      	ldr	r3, [pc, #512]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ae:	08db      	lsrs	r3, r3, #3
 80084b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	fb02 f303 	mul.w	r3, r2, r3
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 80e1 	beq.w	8008690 <HAL_RCC_GetSysClockFreq+0x2b8>
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	f000 8083 	beq.w	80085dc <HAL_RCC_GetSysClockFreq+0x204>
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	f200 80a1 	bhi.w	8008620 <HAL_RCC_GetSysClockFreq+0x248>
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_RCC_GetSysClockFreq+0x114>
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d056      	beq.n	8008598 <HAL_RCC_GetSysClockFreq+0x1c0>
 80084ea:	e099      	b.n	8008620 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ec:	4b6f      	ldr	r3, [pc, #444]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d02d      	beq.n	8008554 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084f8:	4b6c      	ldr	r3, [pc, #432]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	08db      	lsrs	r3, r3, #3
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	4a6b      	ldr	r2, [pc, #428]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008504:	fa22 f303 	lsr.w	r3, r2, r3
 8008508:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008522:	4b62      	ldr	r3, [pc, #392]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008532:	ed97 6a02 	vldr	s12, [r7, #8]
 8008536:	eddf 5a61 	vldr	s11, [pc, #388]	; 80086bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800853a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008552:	e087      	b.n	8008664 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80086c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008566:	4b51      	ldr	r3, [pc, #324]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008576:	ed97 6a02 	vldr	s12, [r7, #8]
 800857a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80086bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800857e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800858a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008596:	e065      	b.n	8008664 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80086c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80085a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085aa:	4b40      	ldr	r3, [pc, #256]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80085be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80086bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80085c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085da:	e043      	b.n	8008664 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80086c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80085ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ee:	4b2f      	ldr	r3, [pc, #188]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008602:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80086bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800861e:	e021      	b.n	8008664 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80086c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800862e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008632:	4b1e      	ldr	r3, [pc, #120]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863a:	ee07 3a90 	vmov	s15, r3
 800863e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008642:	ed97 6a02 	vldr	s12, [r7, #8]
 8008646:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80086bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800864a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008662:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008664:	4b11      	ldr	r3, [pc, #68]	; (80086ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	0a5b      	lsrs	r3, r3, #9
 800866a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866e:	3301      	adds	r3, #1
 8008670:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800867c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008688:	ee17 3a90 	vmov	r3, s15
 800868c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800868e:	e005      	b.n	800869c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	61bb      	str	r3, [r7, #24]
      break;
 8008694:	e002      	b.n	800869c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008698:	61bb      	str	r3, [r7, #24]
      break;
 800869a:	bf00      	nop
  }

  return sysclockfreq;
 800869c:	69bb      	ldr	r3, [r7, #24]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3724      	adds	r7, #36	; 0x24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	58024400 	.word	0x58024400
 80086b0:	03d09000 	.word	0x03d09000
 80086b4:	003d0900 	.word	0x003d0900
 80086b8:	017d7840 	.word	0x017d7840
 80086bc:	46000000 	.word	0x46000000
 80086c0:	4c742400 	.word	0x4c742400
 80086c4:	4a742400 	.word	0x4a742400
 80086c8:	4bbebc20 	.word	0x4bbebc20

080086cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80086d2:	f7ff fe81 	bl	80083d8 <HAL_RCC_GetSysClockFreq>
 80086d6:	4602      	mov	r2, r0
 80086d8:	4b10      	ldr	r3, [pc, #64]	; (800871c <HAL_RCC_GetHCLKFreq+0x50>)
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	490f      	ldr	r1, [pc, #60]	; (8008720 <HAL_RCC_GetHCLKFreq+0x54>)
 80086e4:	5ccb      	ldrb	r3, [r1, r3]
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	fa22 f303 	lsr.w	r3, r2, r3
 80086ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086f0:	4b0a      	ldr	r3, [pc, #40]	; (800871c <HAL_RCC_GetHCLKFreq+0x50>)
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	4a09      	ldr	r2, [pc, #36]	; (8008720 <HAL_RCC_GetHCLKFreq+0x54>)
 80086fa:	5cd3      	ldrb	r3, [r2, r3]
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	fa22 f303 	lsr.w	r3, r2, r3
 8008706:	4a07      	ldr	r2, [pc, #28]	; (8008724 <HAL_RCC_GetHCLKFreq+0x58>)
 8008708:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800870a:	4a07      	ldr	r2, [pc, #28]	; (8008728 <HAL_RCC_GetHCLKFreq+0x5c>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008710:	4b04      	ldr	r3, [pc, #16]	; (8008724 <HAL_RCC_GetHCLKFreq+0x58>)
 8008712:	681b      	ldr	r3, [r3, #0]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	58024400 	.word	0x58024400
 8008720:	0800dc24 	.word	0x0800dc24
 8008724:	24000008 	.word	0x24000008
 8008728:	24000004 	.word	0x24000004

0800872c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008730:	f7ff ffcc 	bl	80086cc <HAL_RCC_GetHCLKFreq>
 8008734:	4602      	mov	r2, r0
 8008736:	4b06      	ldr	r3, [pc, #24]	; (8008750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	091b      	lsrs	r3, r3, #4
 800873c:	f003 0307 	and.w	r3, r3, #7
 8008740:	4904      	ldr	r1, [pc, #16]	; (8008754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008742:	5ccb      	ldrb	r3, [r1, r3]
 8008744:	f003 031f 	and.w	r3, r3, #31
 8008748:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800874c:	4618      	mov	r0, r3
 800874e:	bd80      	pop	{r7, pc}
 8008750:	58024400 	.word	0x58024400
 8008754:	0800dc24 	.word	0x0800dc24

08008758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800875c:	f7ff ffb6 	bl	80086cc <HAL_RCC_GetHCLKFreq>
 8008760:	4602      	mov	r2, r0
 8008762:	4b06      	ldr	r3, [pc, #24]	; (800877c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	0a1b      	lsrs	r3, r3, #8
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	4904      	ldr	r1, [pc, #16]	; (8008780 <HAL_RCC_GetPCLK2Freq+0x28>)
 800876e:	5ccb      	ldrb	r3, [r1, r3]
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008778:	4618      	mov	r0, r3
 800877a:	bd80      	pop	{r7, pc}
 800877c:	58024400 	.word	0x58024400
 8008780:	0800dc24 	.word	0x0800dc24

08008784 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008788:	b0c6      	sub	sp, #280	; 0x118
 800878a:	af00      	add	r7, sp, #0
 800878c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008790:	2300      	movs	r3, #0
 8008792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008796:	2300      	movs	r3, #0
 8008798:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80087a8:	2500      	movs	r5, #0
 80087aa:	ea54 0305 	orrs.w	r3, r4, r5
 80087ae:	d049      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087ba:	d02f      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80087bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087c0:	d828      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087c6:	d01a      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80087c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087cc:	d822      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087d6:	d007      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80087d8:	e01c      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087da:	4bab      	ldr	r3, [pc, #684]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	4aaa      	ldr	r2, [pc, #680]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087e6:	e01a      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ec:	3308      	adds	r3, #8
 80087ee:	2102      	movs	r1, #2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f002 fa49 	bl	800ac88 <RCCEx_PLL2_Config>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087fc:	e00f      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008802:	3328      	adds	r3, #40	; 0x28
 8008804:	2102      	movs	r1, #2
 8008806:	4618      	mov	r0, r3
 8008808:	f002 faf0 	bl	800adec <RCCEx_PLL3_Config>
 800880c:	4603      	mov	r3, r0
 800880e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008812:	e004      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800881a:	e000      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800881c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800881e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008826:	4b98      	ldr	r3, [pc, #608]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800882e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008834:	4a94      	ldr	r2, [pc, #592]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008836:	430b      	orrs	r3, r1
 8008838:	6513      	str	r3, [r2, #80]	; 0x50
 800883a:	e003      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008850:	f04f 0900 	mov.w	r9, #0
 8008854:	ea58 0309 	orrs.w	r3, r8, r9
 8008858:	d047      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800885a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008860:	2b04      	cmp	r3, #4
 8008862:	d82a      	bhi.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008864:	a201      	add	r2, pc, #4	; (adr r2, 800886c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886a:	bf00      	nop
 800886c:	08008881 	.word	0x08008881
 8008870:	0800888f 	.word	0x0800888f
 8008874:	080088a5 	.word	0x080088a5
 8008878:	080088c3 	.word	0x080088c3
 800887c:	080088c3 	.word	0x080088c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008880:	4b81      	ldr	r3, [pc, #516]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a80      	ldr	r2, [pc, #512]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800888c:	e01a      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800888e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008892:	3308      	adds	r3, #8
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f002 f9f6 	bl	800ac88 <RCCEx_PLL2_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088a2:	e00f      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a8:	3328      	adds	r3, #40	; 0x28
 80088aa:	2100      	movs	r1, #0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f002 fa9d 	bl	800adec <RCCEx_PLL3_Config>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088b8:	e004      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80088c0:	e000      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80088c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088cc:	4b6e      	ldr	r3, [pc, #440]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d0:	f023 0107 	bic.w	r1, r3, #7
 80088d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088da:	4a6b      	ldr	r2, [pc, #428]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088dc:	430b      	orrs	r3, r1
 80088de:	6513      	str	r3, [r2, #80]	; 0x50
 80088e0:	e003      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80088f6:	f04f 0b00 	mov.w	fp, #0
 80088fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80088fe:	d05b      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008908:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800890c:	d03b      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800890e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008912:	d834      	bhi.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008918:	d037      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800891a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800891e:	d82e      	bhi.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008920:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008924:	d033      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008926:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800892a:	d828      	bhi.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800892c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008930:	d01a      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008936:	d822      	bhi.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800893c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008940:	d007      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008942:	e01c      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008944:	4b50      	ldr	r3, [pc, #320]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	4a4f      	ldr	r2, [pc, #316]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800894a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800894e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008950:	e01e      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008956:	3308      	adds	r3, #8
 8008958:	2100      	movs	r1, #0
 800895a:	4618      	mov	r0, r3
 800895c:	f002 f994 	bl	800ac88 <RCCEx_PLL2_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008966:	e013      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896c:	3328      	adds	r3, #40	; 0x28
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fa3b 	bl	800adec <RCCEx_PLL3_Config>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800897c:	e008      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008984:	e004      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008986:	bf00      	nop
 8008988:	e002      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800898a:	bf00      	nop
 800898c:	e000      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800898e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10b      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008998:	4b3b      	ldr	r3, [pc, #236]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800899a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80089a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089a8:	4a37      	ldr	r2, [pc, #220]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089aa:	430b      	orrs	r3, r1
 80089ac:	6593      	str	r3, [r2, #88]	; 0x58
 80089ae:	e003      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80089c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089c8:	2300      	movs	r3, #0
 80089ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80089d2:	460b      	mov	r3, r1
 80089d4:	4313      	orrs	r3, r2
 80089d6:	d05d      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80089d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089e0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80089e4:	d03b      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80089e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80089ea:	d834      	bhi.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80089ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089f0:	d037      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80089f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089f6:	d82e      	bhi.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80089f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089fc:	d033      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80089fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a02:	d828      	bhi.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a08:	d01a      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a0e:	d822      	bhi.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a18:	d007      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008a1a:	e01c      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a1c:	4b1a      	ldr	r3, [pc, #104]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	4a19      	ldr	r2, [pc, #100]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a28:	e01e      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a2e:	3308      	adds	r3, #8
 8008a30:	2100      	movs	r1, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f002 f928 	bl	800ac88 <RCCEx_PLL2_Config>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a3e:	e013      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a44:	3328      	adds	r3, #40	; 0x28
 8008a46:	2100      	movs	r1, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f002 f9cf 	bl	800adec <RCCEx_PLL3_Config>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a54:	e008      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a5c:	e004      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a5e:	bf00      	nop
 8008a60:	e002      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a62:	bf00      	nop
 8008a64:	e000      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10d      	bne.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a80:	4a01      	ldr	r2, [pc, #4]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a82:	430b      	orrs	r3, r1
 8008a84:	6593      	str	r3, [r2, #88]	; 0x58
 8008a86:	e005      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008aa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008aaa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	d03a      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aba:	2b30      	cmp	r3, #48	; 0x30
 8008abc:	d01f      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008abe:	2b30      	cmp	r3, #48	; 0x30
 8008ac0:	d819      	bhi.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	d00c      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d815      	bhi.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d019      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d111      	bne.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad2:	4baa      	ldr	r3, [pc, #680]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	4aa9      	ldr	r2, [pc, #676]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ade:	e011      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	2102      	movs	r1, #2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f002 f8cd 	bl	800ac88 <RCCEx_PLL2_Config>
 8008aee:	4603      	mov	r3, r0
 8008af0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008af4:	e006      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008afc:	e002      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008afe:	bf00      	nop
 8008b00:	e000      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008b0c:	4b9b      	ldr	r3, [pc, #620]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b10:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	4a98      	ldr	r2, [pc, #608]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b20:	e003      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008b36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008b44:	460b      	mov	r3, r1
 8008b46:	4313      	orrs	r3, r2
 8008b48:	d051      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b54:	d035      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b5a:	d82e      	bhi.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b60:	d031      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008b62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b66:	d828      	bhi.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b6c:	d01a      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b72:	d822      	bhi.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7c:	d007      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008b7e:	e01c      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b80:	4b7e      	ldr	r3, [pc, #504]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	4a7d      	ldr	r2, [pc, #500]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b8c:	e01c      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b92:	3308      	adds	r3, #8
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f002 f876 	bl	800ac88 <RCCEx_PLL2_Config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ba2:	e011      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba8:	3328      	adds	r3, #40	; 0x28
 8008baa:	2100      	movs	r1, #0
 8008bac:	4618      	mov	r0, r3
 8008bae:	f002 f91d 	bl	800adec <RCCEx_PLL3_Config>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bb8:	e006      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008bc0:	e002      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008bc2:	bf00      	nop
 8008bc4:	e000      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10a      	bne.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008bd0:	4b6a      	ldr	r3, [pc, #424]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bde:	4a67      	ldr	r2, [pc, #412]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008be0:	430b      	orrs	r3, r1
 8008be2:	6513      	str	r3, [r2, #80]	; 0x50
 8008be4:	e003      	b.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	d053      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c18:	d033      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c1e:	d82c      	bhi.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c24:	d02f      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c2a:	d826      	bhi.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c30:	d02b      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008c32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c36:	d820      	bhi.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c3c:	d012      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c42:	d81a      	bhi.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d022      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c4c:	d115      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c52:	3308      	adds	r3, #8
 8008c54:	2101      	movs	r1, #1
 8008c56:	4618      	mov	r0, r3
 8008c58:	f002 f816 	bl	800ac88 <RCCEx_PLL2_Config>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c62:	e015      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c68:	3328      	adds	r3, #40	; 0x28
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f002 f8bd 	bl	800adec <RCCEx_PLL3_Config>
 8008c72:	4603      	mov	r3, r0
 8008c74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c78:	e00a      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008c80:	e006      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008c82:	bf00      	nop
 8008c84:	e004      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008c86:	bf00      	nop
 8008c88:	e002      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008c8a:	bf00      	nop
 8008c8c:	e000      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c98:	4b38      	ldr	r3, [pc, #224]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca6:	4a35      	ldr	r2, [pc, #212]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	6513      	str	r3, [r2, #80]	; 0x50
 8008cac:	e003      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ccc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	d058      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ce2:	d033      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ce8:	d82c      	bhi.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cee:	d02f      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf4:	d826      	bhi.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008cf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cfa:	d02b      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008cfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d00:	d820      	bhi.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d06:	d012      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d0c:	d81a      	bhi.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d022      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d16:	d115      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	2101      	movs	r1, #1
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 ffb1 	bl	800ac88 <RCCEx_PLL2_Config>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d2c:	e015      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d32:	3328      	adds	r3, #40	; 0x28
 8008d34:	2101      	movs	r1, #1
 8008d36:	4618      	mov	r0, r3
 8008d38:	f002 f858 	bl	800adec <RCCEx_PLL3_Config>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d42:	e00a      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d4a:	e006      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d4c:	bf00      	nop
 8008d4e:	e004      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d50:	bf00      	nop
 8008d52:	e002      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d54:	bf00      	nop
 8008d56:	e000      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10e      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d72:	4a02      	ldr	r2, [pc, #8]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d74:	430b      	orrs	r3, r1
 8008d76:	6593      	str	r3, [r2, #88]	; 0x58
 8008d78:	e006      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008d7a:	bf00      	nop
 8008d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4313      	orrs	r3, r2
 8008da6:	d037      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db2:	d00e      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db8:	d816      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d018      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dc2:	d111      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dc4:	4bc4      	ldr	r3, [pc, #784]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	4ac3      	ldr	r2, [pc, #780]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008dd0:	e00f      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	2101      	movs	r1, #1
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 ff54 	bl	800ac88 <RCCEx_PLL2_Config>
 8008de0:	4603      	mov	r3, r0
 8008de2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008de6:	e004      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008dee:	e000      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008df2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dfa:	4bb7      	ldr	r3, [pc, #732]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e08:	4ab3      	ldr	r2, [pc, #716]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	6513      	str	r3, [r2, #80]	; 0x50
 8008e0e:	e003      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008e32:	460b      	mov	r3, r1
 8008e34:	4313      	orrs	r3, r2
 8008e36:	d039      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d81c      	bhi.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008e42:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e85 	.word	0x08008e85
 8008e4c:	08008e59 	.word	0x08008e59
 8008e50:	08008e67 	.word	0x08008e67
 8008e54:	08008e85 	.word	0x08008e85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e58:	4b9f      	ldr	r3, [pc, #636]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	4a9e      	ldr	r2, [pc, #632]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e64:	e00f      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 ff0a 	bl	800ac88 <RCCEx_PLL2_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e7a:	e004      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e82:	e000      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10a      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e8e:	4b92      	ldr	r3, [pc, #584]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e92:	f023 0103 	bic.w	r1, r3, #3
 8008e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9c:	4a8e      	ldr	r2, [pc, #568]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ea2:	e003      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ea8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ec2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f000 8099 	beq.w	8009000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ece:	4b83      	ldr	r3, [pc, #524]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a82      	ldr	r2, [pc, #520]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008eda:	f7f9 f8ed 	bl	80020b8 <HAL_GetTick>
 8008ede:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ee2:	e00b      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ee4:	f7f9 f8e8 	bl	80020b8 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	2b64      	cmp	r3, #100	; 0x64
 8008ef2:	d903      	bls.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008efa:	e005      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008efc:	4b77      	ldr	r3, [pc, #476]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0ed      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008f08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d173      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f10:	4b71      	ldr	r3, [pc, #452]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f1c:	4053      	eors	r3, r2
 8008f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d015      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f26:	4b6c      	ldr	r3, [pc, #432]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f32:	4b69      	ldr	r3, [pc, #420]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f36:	4a68      	ldr	r2, [pc, #416]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f3e:	4b66      	ldr	r3, [pc, #408]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f42:	4a65      	ldr	r2, [pc, #404]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f4a:	4a63      	ldr	r2, [pc, #396]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5e:	d118      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f60:	f7f9 f8aa 	bl	80020b8 <HAL_GetTick>
 8008f64:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f68:	e00d      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f6a:	f7f9 f8a5 	bl	80020b8 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f74:	1ad2      	subs	r2, r2, r3
 8008f76:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d903      	bls.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008f84:	e005      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f86:	4b54      	ldr	r3, [pc, #336]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0eb      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008f92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d129      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008faa:	d10e      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008fac:	4b4a      	ldr	r3, [pc, #296]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fbc:	091a      	lsrs	r2, r3, #4
 8008fbe:	4b48      	ldr	r3, [pc, #288]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	4a45      	ldr	r2, [pc, #276]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6113      	str	r3, [r2, #16]
 8008fc8:	e005      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008fca:	4b43      	ldr	r3, [pc, #268]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	4a42      	ldr	r2, [pc, #264]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fd4:	6113      	str	r3, [r2, #16]
 8008fd6:	4b40      	ldr	r3, [pc, #256]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fe6:	4a3c      	ldr	r2, [pc, #240]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	6713      	str	r3, [r2, #112]	; 0x70
 8008fec:	e008      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ff2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8008ff6:	e003      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ffc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f002 0301 	and.w	r3, r2, #1
 800900c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009010:	2300      	movs	r3, #0
 8009012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009016:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800901a:	460b      	mov	r3, r1
 800901c:	4313      	orrs	r3, r2
 800901e:	f000 808f 	beq.w	8009140 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009028:	2b28      	cmp	r3, #40	; 0x28
 800902a:	d871      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800902c:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800902e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009032:	bf00      	nop
 8009034:	08009119 	.word	0x08009119
 8009038:	08009111 	.word	0x08009111
 800903c:	08009111 	.word	0x08009111
 8009040:	08009111 	.word	0x08009111
 8009044:	08009111 	.word	0x08009111
 8009048:	08009111 	.word	0x08009111
 800904c:	08009111 	.word	0x08009111
 8009050:	08009111 	.word	0x08009111
 8009054:	080090e5 	.word	0x080090e5
 8009058:	08009111 	.word	0x08009111
 800905c:	08009111 	.word	0x08009111
 8009060:	08009111 	.word	0x08009111
 8009064:	08009111 	.word	0x08009111
 8009068:	08009111 	.word	0x08009111
 800906c:	08009111 	.word	0x08009111
 8009070:	08009111 	.word	0x08009111
 8009074:	080090fb 	.word	0x080090fb
 8009078:	08009111 	.word	0x08009111
 800907c:	08009111 	.word	0x08009111
 8009080:	08009111 	.word	0x08009111
 8009084:	08009111 	.word	0x08009111
 8009088:	08009111 	.word	0x08009111
 800908c:	08009111 	.word	0x08009111
 8009090:	08009111 	.word	0x08009111
 8009094:	08009119 	.word	0x08009119
 8009098:	08009111 	.word	0x08009111
 800909c:	08009111 	.word	0x08009111
 80090a0:	08009111 	.word	0x08009111
 80090a4:	08009111 	.word	0x08009111
 80090a8:	08009111 	.word	0x08009111
 80090ac:	08009111 	.word	0x08009111
 80090b0:	08009111 	.word	0x08009111
 80090b4:	08009119 	.word	0x08009119
 80090b8:	08009111 	.word	0x08009111
 80090bc:	08009111 	.word	0x08009111
 80090c0:	08009111 	.word	0x08009111
 80090c4:	08009111 	.word	0x08009111
 80090c8:	08009111 	.word	0x08009111
 80090cc:	08009111 	.word	0x08009111
 80090d0:	08009111 	.word	0x08009111
 80090d4:	08009119 	.word	0x08009119
 80090d8:	58024400 	.word	0x58024400
 80090dc:	58024800 	.word	0x58024800
 80090e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e8:	3308      	adds	r3, #8
 80090ea:	2101      	movs	r1, #1
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 fdcb 	bl	800ac88 <RCCEx_PLL2_Config>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090f8:	e00f      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090fe:	3328      	adds	r3, #40	; 0x28
 8009100:	2101      	movs	r1, #1
 8009102:	4618      	mov	r0, r3
 8009104:	f001 fe72 	bl	800adec <RCCEx_PLL3_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800910e:	e004      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009116:	e000      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009122:	4bbf      	ldr	r3, [pc, #764]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009126:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009130:	4abb      	ldr	r2, [pc, #748]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009132:	430b      	orrs	r3, r1
 8009134:	6553      	str	r3, [r2, #84]	; 0x54
 8009136:	e003      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800913c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f002 0302 	and.w	r3, r2, #2
 800914c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009150:	2300      	movs	r3, #0
 8009152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009156:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800915a:	460b      	mov	r3, r1
 800915c:	4313      	orrs	r3, r2
 800915e:	d041      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009166:	2b05      	cmp	r3, #5
 8009168:	d824      	bhi.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800916a:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091bd 	.word	0x080091bd
 8009174:	08009189 	.word	0x08009189
 8009178:	0800919f 	.word	0x0800919f
 800917c:	080091bd 	.word	0x080091bd
 8009180:	080091bd 	.word	0x080091bd
 8009184:	080091bd 	.word	0x080091bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918c:	3308      	adds	r3, #8
 800918e:	2101      	movs	r1, #1
 8009190:	4618      	mov	r0, r3
 8009192:	f001 fd79 	bl	800ac88 <RCCEx_PLL2_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800919c:	e00f      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800919e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a2:	3328      	adds	r3, #40	; 0x28
 80091a4:	2101      	movs	r1, #1
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 fe20 	bl	800adec <RCCEx_PLL3_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091b2:	e004      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091ba:	e000      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80091bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80091c6:	4b96      	ldr	r3, [pc, #600]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ca:	f023 0107 	bic.w	r1, r3, #7
 80091ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d4:	4a92      	ldr	r2, [pc, #584]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091d6:	430b      	orrs	r3, r1
 80091d8:	6553      	str	r3, [r2, #84]	; 0x54
 80091da:	e003      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f002 0304 	and.w	r3, r2, #4
 80091f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80091f4:	2300      	movs	r3, #0
 80091f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80091fe:	460b      	mov	r3, r1
 8009200:	4313      	orrs	r3, r2
 8009202:	d044      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920c:	2b05      	cmp	r3, #5
 800920e:	d825      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009210:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009216:	bf00      	nop
 8009218:	08009265 	.word	0x08009265
 800921c:	08009231 	.word	0x08009231
 8009220:	08009247 	.word	0x08009247
 8009224:	08009265 	.word	0x08009265
 8009228:	08009265 	.word	0x08009265
 800922c:	08009265 	.word	0x08009265
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009234:	3308      	adds	r3, #8
 8009236:	2101      	movs	r1, #1
 8009238:	4618      	mov	r0, r3
 800923a:	f001 fd25 	bl	800ac88 <RCCEx_PLL2_Config>
 800923e:	4603      	mov	r3, r0
 8009240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009244:	e00f      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800924a:	3328      	adds	r3, #40	; 0x28
 800924c:	2101      	movs	r1, #1
 800924e:	4618      	mov	r0, r3
 8009250:	f001 fdcc 	bl	800adec <RCCEx_PLL3_Config>
 8009254:	4603      	mov	r3, r0
 8009256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800925a:	e004      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009262:	e000      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009266:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10b      	bne.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800926e:	4b6c      	ldr	r3, [pc, #432]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009272:	f023 0107 	bic.w	r1, r3, #7
 8009276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800927e:	4a68      	ldr	r2, [pc, #416]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009280:	430b      	orrs	r3, r1
 8009282:	6593      	str	r3, [r2, #88]	; 0x58
 8009284:	e003      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009286:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800928a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800928e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f002 0320 	and.w	r3, r2, #32
 800929a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800929e:	2300      	movs	r3, #0
 80092a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80092a8:	460b      	mov	r3, r1
 80092aa:	4313      	orrs	r3, r2
 80092ac:	d055      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80092ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ba:	d033      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80092bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092c0:	d82c      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c6:	d02f      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80092c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092cc:	d826      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092d2:	d02b      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80092d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092d8:	d820      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092de:	d012      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80092e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e4:	d81a      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d022      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80092ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092ee:	d115      	bne.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f4:	3308      	adds	r3, #8
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 fcc5 	bl	800ac88 <RCCEx_PLL2_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009304:	e015      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930a:	3328      	adds	r3, #40	; 0x28
 800930c:	2102      	movs	r1, #2
 800930e:	4618      	mov	r0, r3
 8009310:	f001 fd6c 	bl	800adec <RCCEx_PLL3_Config>
 8009314:	4603      	mov	r3, r0
 8009316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800931a:	e00a      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009322:	e006      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009324:	bf00      	nop
 8009326:	e004      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009328:	bf00      	nop
 800932a:	e002      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800932c:	bf00      	nop
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10b      	bne.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800933a:	4b39      	ldr	r3, [pc, #228]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800933c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800934a:	4a35      	ldr	r2, [pc, #212]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800934c:	430b      	orrs	r3, r1
 800934e:	6553      	str	r3, [r2, #84]	; 0x54
 8009350:	e003      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009356:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800935a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800936a:	2300      	movs	r3, #0
 800936c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009370:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009374:	460b      	mov	r3, r1
 8009376:	4313      	orrs	r3, r2
 8009378:	d058      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800937a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800937e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009386:	d033      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800938c:	d82c      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800938e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009392:	d02f      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009398:	d826      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800939a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800939e:	d02b      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80093a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093a4:	d820      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093aa:	d012      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80093ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093b0:	d81a      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d022      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80093b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ba:	d115      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093c0:	3308      	adds	r3, #8
 80093c2:	2100      	movs	r1, #0
 80093c4:	4618      	mov	r0, r3
 80093c6:	f001 fc5f 	bl	800ac88 <RCCEx_PLL2_Config>
 80093ca:	4603      	mov	r3, r0
 80093cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093d0:	e015      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d6:	3328      	adds	r3, #40	; 0x28
 80093d8:	2102      	movs	r1, #2
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fd06 	bl	800adec <RCCEx_PLL3_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093e6:	e00a      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80093ee:	e006      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093f0:	bf00      	nop
 80093f2:	e004      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093f4:	bf00      	nop
 80093f6:	e002      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093f8:	bf00      	nop
 80093fa:	e000      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10e      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009406:	4b06      	ldr	r3, [pc, #24]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800940e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009416:	4a02      	ldr	r2, [pc, #8]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009418:	430b      	orrs	r3, r1
 800941a:	6593      	str	r3, [r2, #88]	; 0x58
 800941c:	e006      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009428:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800942c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800943c:	2300      	movs	r3, #0
 800943e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009442:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009446:	460b      	mov	r3, r1
 8009448:	4313      	orrs	r3, r2
 800944a:	d055      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009454:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009458:	d033      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800945a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800945e:	d82c      	bhi.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009464:	d02f      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800946a:	d826      	bhi.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800946c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009470:	d02b      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009472:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009476:	d820      	bhi.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800947c:	d012      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800947e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009482:	d81a      	bhi.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d022      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800948c:	d115      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009492:	3308      	adds	r3, #8
 8009494:	2100      	movs	r1, #0
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fbf6 	bl	800ac88 <RCCEx_PLL2_Config>
 800949c:	4603      	mov	r3, r0
 800949e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094a2:	e015      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a8:	3328      	adds	r3, #40	; 0x28
 80094aa:	2102      	movs	r1, #2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f001 fc9d 	bl	800adec <RCCEx_PLL3_Config>
 80094b2:	4603      	mov	r3, r0
 80094b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094b8:	e00a      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80094c0:	e006      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094c2:	bf00      	nop
 80094c4:	e004      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094c6:	bf00      	nop
 80094c8:	e002      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094ca:	bf00      	nop
 80094cc:	e000      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10b      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80094d8:	4ba0      	ldr	r3, [pc, #640]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80094e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094e8:	4a9c      	ldr	r2, [pc, #624]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094ea:	430b      	orrs	r3, r1
 80094ec:	6593      	str	r3, [r2, #88]	; 0x58
 80094ee:	e003      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f002 0308 	and.w	r3, r2, #8
 8009504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009508:	2300      	movs	r3, #0
 800950a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800950e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009512:	460b      	mov	r3, r1
 8009514:	4313      	orrs	r3, r2
 8009516:	d01e      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009524:	d10c      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800952a:	3328      	adds	r3, #40	; 0x28
 800952c:	2102      	movs	r1, #2
 800952e:	4618      	mov	r0, r3
 8009530:	f001 fc5c 	bl	800adec <RCCEx_PLL3_Config>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009540:	4b86      	ldr	r3, [pc, #536]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009550:	4a82      	ldr	r2, [pc, #520]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009552:	430b      	orrs	r3, r1
 8009554:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f002 0310 	and.w	r3, r2, #16
 8009562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009566:	2300      	movs	r3, #0
 8009568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800956c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009570:	460b      	mov	r3, r1
 8009572:	4313      	orrs	r3, r2
 8009574:	d01e      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800957e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009582:	d10c      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009588:	3328      	adds	r3, #40	; 0x28
 800958a:	2102      	movs	r1, #2
 800958c:	4618      	mov	r0, r3
 800958e:	f001 fc2d 	bl	800adec <RCCEx_PLL3_Config>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800959e:	4b6f      	ldr	r3, [pc, #444]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ae:	4a6b      	ldr	r2, [pc, #428]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095b0:	430b      	orrs	r3, r1
 80095b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80095c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80095c2:	2300      	movs	r3, #0
 80095c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80095ca:	460b      	mov	r3, r1
 80095cc:	4313      	orrs	r3, r2
 80095ce:	d03e      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80095d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095dc:	d022      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80095de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e2:	d81b      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ec:	d00b      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80095ee:	e015      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f4:	3308      	adds	r3, #8
 80095f6:	2100      	movs	r1, #0
 80095f8:	4618      	mov	r0, r3
 80095fa:	f001 fb45 	bl	800ac88 <RCCEx_PLL2_Config>
 80095fe:	4603      	mov	r3, r0
 8009600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009604:	e00f      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960a:	3328      	adds	r3, #40	; 0x28
 800960c:	2102      	movs	r1, #2
 800960e:	4618      	mov	r0, r3
 8009610:	f001 fbec 	bl	800adec <RCCEx_PLL3_Config>
 8009614:	4603      	mov	r3, r0
 8009616:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800961a:	e004      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009622:	e000      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009626:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10b      	bne.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800962e:	4b4b      	ldr	r3, [pc, #300]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009632:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800963e:	4a47      	ldr	r2, [pc, #284]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009640:	430b      	orrs	r3, r1
 8009642:	6593      	str	r3, [r2, #88]	; 0x58
 8009644:	e003      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009646:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800964a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800964e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800965a:	673b      	str	r3, [r7, #112]	; 0x70
 800965c:	2300      	movs	r3, #0
 800965e:	677b      	str	r3, [r7, #116]	; 0x74
 8009660:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009664:	460b      	mov	r3, r1
 8009666:	4313      	orrs	r3, r2
 8009668:	d03b      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800966a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009676:	d01f      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800967c:	d818      	bhi.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800967e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009682:	d003      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009688:	d007      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800968a:	e011      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800968c:	4b33      	ldr	r3, [pc, #204]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	4a32      	ldr	r2, [pc, #200]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009698:	e00f      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800969a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969e:	3328      	adds	r3, #40	; 0x28
 80096a0:	2101      	movs	r1, #1
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 fba2 	bl	800adec <RCCEx_PLL3_Config>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80096ae:	e004      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096b6:	e000      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80096b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10b      	bne.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096c2:	4b26      	ldr	r3, [pc, #152]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d2:	4a22      	ldr	r2, [pc, #136]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096d4:	430b      	orrs	r3, r1
 80096d6:	6553      	str	r3, [r2, #84]	; 0x54
 80096d8:	e003      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80096ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80096f0:	2300      	movs	r3, #0
 80096f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80096f8:	460b      	mov	r3, r1
 80096fa:	4313      	orrs	r3, r2
 80096fc:	d034      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80096fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800970c:	d007      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800970e:	e011      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009710:	4b12      	ldr	r3, [pc, #72]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009714:	4a11      	ldr	r2, [pc, #68]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800971a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800971c:	e00e      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800971e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009722:	3308      	adds	r3, #8
 8009724:	2102      	movs	r1, #2
 8009726:	4618      	mov	r0, r3
 8009728:	f001 faae 	bl	800ac88 <RCCEx_PLL2_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009732:	e003      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800973a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800973c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10d      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009744:	4b05      	ldr	r3, [pc, #20]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800974c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009752:	4a02      	ldr	r2, [pc, #8]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009754:	430b      	orrs	r3, r1
 8009756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009758:	e006      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800975a:	bf00      	nop
 800975c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009760:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009764:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009774:	663b      	str	r3, [r7, #96]	; 0x60
 8009776:	2300      	movs	r3, #0
 8009778:	667b      	str	r3, [r7, #100]	; 0x64
 800977a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800977e:	460b      	mov	r3, r1
 8009780:	4313      	orrs	r3, r2
 8009782:	d00c      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009788:	3328      	adds	r3, #40	; 0x28
 800978a:	2102      	movs	r1, #2
 800978c:	4618      	mov	r0, r3
 800978e:	f001 fb2d 	bl	800adec <RCCEx_PLL3_Config>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80097aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80097ac:	2300      	movs	r3, #0
 80097ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80097b4:	460b      	mov	r3, r1
 80097b6:	4313      	orrs	r3, r2
 80097b8:	d036      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80097ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097c4:	d018      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80097c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ca:	d811      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80097cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d0:	d014      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80097d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d6:	d80b      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d011      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80097dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e0:	d106      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097e2:	4bb7      	ldr	r3, [pc, #732]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	4ab6      	ldr	r2, [pc, #728]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80097e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80097ee:	e008      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80097f6:	e004      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80097f8:	bf00      	nop
 80097fa:	e002      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80097fc:	bf00      	nop
 80097fe:	e000      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009802:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10a      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800980a:	4bad      	ldr	r3, [pc, #692]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800980c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009818:	4aa9      	ldr	r2, [pc, #676]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800981a:	430b      	orrs	r3, r1
 800981c:	6553      	str	r3, [r2, #84]	; 0x54
 800981e:	e003      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009824:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009834:	653b      	str	r3, [r7, #80]	; 0x50
 8009836:	2300      	movs	r3, #0
 8009838:	657b      	str	r3, [r7, #84]	; 0x54
 800983a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800983e:	460b      	mov	r3, r1
 8009840:	4313      	orrs	r3, r2
 8009842:	d009      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009844:	4b9e      	ldr	r3, [pc, #632]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800984c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009852:	4a9b      	ldr	r2, [pc, #620]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009854:	430b      	orrs	r3, r1
 8009856:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009864:	64bb      	str	r3, [r7, #72]	; 0x48
 8009866:	2300      	movs	r3, #0
 8009868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800986a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800986e:	460b      	mov	r3, r1
 8009870:	4313      	orrs	r3, r2
 8009872:	d009      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009874:	4b92      	ldr	r3, [pc, #584]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009878:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800987c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009882:	4a8f      	ldr	r2, [pc, #572]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009884:	430b      	orrs	r3, r1
 8009886:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009894:	643b      	str	r3, [r7, #64]	; 0x40
 8009896:	2300      	movs	r3, #0
 8009898:	647b      	str	r3, [r7, #68]	; 0x44
 800989a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800989e:	460b      	mov	r3, r1
 80098a0:	4313      	orrs	r3, r2
 80098a2:	d00e      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098a4:	4b86      	ldr	r3, [pc, #536]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	4a85      	ldr	r2, [pc, #532]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098ae:	6113      	str	r3, [r2, #16]
 80098b0:	4b83      	ldr	r3, [pc, #524]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098b2:	6919      	ldr	r1, [r3, #16]
 80098b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098bc:	4a80      	ldr	r2, [pc, #512]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098be:	430b      	orrs	r3, r1
 80098c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80098ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80098d0:	2300      	movs	r3, #0
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80098d8:	460b      	mov	r3, r1
 80098da:	4313      	orrs	r3, r2
 80098dc:	d009      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098de:	4b78      	ldr	r3, [pc, #480]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ec:	4a74      	ldr	r2, [pc, #464]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098ee:	430b      	orrs	r3, r1
 80098f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80098fe:	633b      	str	r3, [r7, #48]	; 0x30
 8009900:	2300      	movs	r3, #0
 8009902:	637b      	str	r3, [r7, #52]	; 0x34
 8009904:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009908:	460b      	mov	r3, r1
 800990a:	4313      	orrs	r3, r2
 800990c:	d00a      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800990e:	4b6c      	ldr	r3, [pc, #432]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009912:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991e:	4a68      	ldr	r2, [pc, #416]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009920:	430b      	orrs	r3, r1
 8009922:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	2100      	movs	r1, #0
 800992e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009936:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800993a:	460b      	mov	r3, r1
 800993c:	4313      	orrs	r3, r2
 800993e:	d011      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009944:	3308      	adds	r3, #8
 8009946:	2100      	movs	r1, #0
 8009948:	4618      	mov	r0, r3
 800994a:	f001 f99d 	bl	800ac88 <RCCEx_PLL2_Config>
 800994e:	4603      	mov	r3, r0
 8009950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	2100      	movs	r1, #0
 800996e:	6239      	str	r1, [r7, #32]
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
 8009976:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800997a:	460b      	mov	r3, r1
 800997c:	4313      	orrs	r3, r2
 800997e:	d011      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009984:	3308      	adds	r3, #8
 8009986:	2101      	movs	r1, #1
 8009988:	4618      	mov	r0, r3
 800998a:	f001 f97d 	bl	800ac88 <RCCEx_PLL2_Config>
 800998e:	4603      	mov	r3, r0
 8009990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80099a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	2100      	movs	r1, #0
 80099ae:	61b9      	str	r1, [r7, #24]
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	61fb      	str	r3, [r7, #28]
 80099b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80099ba:	460b      	mov	r3, r1
 80099bc:	4313      	orrs	r3, r2
 80099be:	d011      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c4:	3308      	adds	r3, #8
 80099c6:	2102      	movs	r1, #2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 f95d 	bl	800ac88 <RCCEx_PLL2_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80099d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80099e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	2100      	movs	r1, #0
 80099ee:	6139      	str	r1, [r7, #16]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	617b      	str	r3, [r7, #20]
 80099f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099fa:	460b      	mov	r3, r1
 80099fc:	4313      	orrs	r3, r2
 80099fe:	d011      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a04:	3328      	adds	r3, #40	; 0x28
 8009a06:	2100      	movs	r1, #0
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f001 f9ef 	bl	800adec <RCCEx_PLL3_Config>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009a14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	f003 0310 	and.w	r3, r3, #16
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	d011      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a44:	3328      	adds	r3, #40	; 0x28
 8009a46:	2101      	movs	r1, #1
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f001 f9cf 	bl	800adec <RCCEx_PLL3_Config>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009a54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6039      	str	r1, [r7, #0]
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	607b      	str	r3, [r7, #4]
 8009a76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	d011      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a84:	3328      	adds	r3, #40	; 0x28
 8009a86:	2102      	movs	r1, #2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f001 f9af 	bl	800adec <RCCEx_PLL3_Config>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009a94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009aa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009aa4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d101      	bne.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	e000      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009abe:	bf00      	nop
 8009ac0:	58024400 	.word	0x58024400

08009ac4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b090      	sub	sp, #64	; 0x40
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ad2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	f040 8094 	bne.w	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009adc:	4b9b      	ldr	r3, [pc, #620]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	f200 8087 	bhi.w	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009aee:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b09 	.word	0x08009b09
 8009af8:	08009b31 	.word	0x08009b31
 8009afc:	08009b59 	.word	0x08009b59
 8009b00:	08009bf5 	.word	0x08009bf5
 8009b04:	08009b81 	.word	0x08009b81
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b08:	4b90      	ldr	r3, [pc, #576]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b14:	d108      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 ff62 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b24:	f000 bc93 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b2c:	f000 bc8f 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b30:	4b86      	ldr	r3, [pc, #536]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b3c:	d108      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b3e:	f107 0318 	add.w	r3, r7, #24
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 fca6 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b4c:	f000 bc7f 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b54:	f000 bc7b 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b58:	4b7c      	ldr	r3, [pc, #496]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b64:	d108      	bne.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b66:	f107 030c 	add.w	r3, r7, #12
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 fde6 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b74:	f000 bc6b 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b7c:	f000 bc67 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b80:	4b72      	ldr	r3, [pc, #456]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b88:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b8a:	4b70      	ldr	r3, [pc, #448]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0304 	and.w	r3, r3, #4
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	d10c      	bne.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b9c:	4b6b      	ldr	r3, [pc, #428]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	08db      	lsrs	r3, r3, #3
 8009ba2:	f003 0303 	and.w	r3, r3, #3
 8009ba6:	4a6a      	ldr	r2, [pc, #424]	; (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bae:	e01f      	b.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bb0:	4b66      	ldr	r3, [pc, #408]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bbc:	d106      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc4:	d102      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bc6:	4b63      	ldr	r3, [pc, #396]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bca:	e011      	b.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bcc:	4b5f      	ldr	r3, [pc, #380]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bd8:	d106      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009be0:	d102      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009be2:	4b5d      	ldr	r3, [pc, #372]	; (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009be6:	e003      	b.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009bec:	f000 bc2f 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009bf0:	f000 bc2d 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bf4:	4b59      	ldr	r3, [pc, #356]	; (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf8:	f000 bc29 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c00:	f000 bc25 	b.w	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c08:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	f040 80a7 	bne.w	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009c12:	4b4e      	ldr	r3, [pc, #312]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c16:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009c1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c22:	d054      	beq.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c2a:	f200 808b 	bhi.w	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c34:	f000 8083 	beq.w	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c3e:	f200 8081 	bhi.w	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c48:	d02f      	beq.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c50:	d878      	bhi.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d004      	beq.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c5e:	d012      	beq.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009c60:	e070      	b.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c62:	4b3a      	ldr	r3, [pc, #232]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c6e:	d107      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 feb5 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c7e:	e3e6      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c84:	e3e3      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c86:	4b31      	ldr	r3, [pc, #196]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c92:	d107      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c94:	f107 0318 	add.w	r3, r7, #24
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fbfb 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca2:	e3d4      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca8:	e3d1      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009caa:	4b28      	ldr	r3, [pc, #160]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cb6:	d107      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb8:	f107 030c 	add.w	r3, r7, #12
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fd3d 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc6:	e3c2      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ccc:	e3bf      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cce:	4b1f      	ldr	r3, [pc, #124]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cd8:	4b1c      	ldr	r3, [pc, #112]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d10c      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cea:	4b18      	ldr	r3, [pc, #96]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	08db      	lsrs	r3, r3, #3
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	4a16      	ldr	r2, [pc, #88]	; (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cfc:	e01e      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cfe:	4b13      	ldr	r3, [pc, #76]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0a:	d106      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d12:	d102      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d14:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d18:	e010      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d1a:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d26:	d106      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d2e:	d102      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d30:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d34:	e002      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009d3a:	e388      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d3c:	e387      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d3e:	4b07      	ldr	r3, [pc, #28]	; (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d42:	e384      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d48:	e381      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d4a:	bf00      	nop
 8009d4c:	58024400 	.word	0x58024400
 8009d50:	03d09000 	.word	0x03d09000
 8009d54:	003d0900 	.word	0x003d0900
 8009d58:	017d7840 	.word	0x017d7840
 8009d5c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d64:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009d68:	430b      	orrs	r3, r1
 8009d6a:	f040 809c 	bne.w	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009d6e:	4b9e      	ldr	r3, [pc, #632]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009d76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d7e:	d054      	beq.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d86:	f200 808b 	bhi.w	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d90:	f000 8083 	beq.w	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d9a:	f200 8081 	bhi.w	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009da4:	d02f      	beq.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dac:	d878      	bhi.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d004      	beq.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009dba:	d012      	beq.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009dbc:	e070      	b.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009dbe:	4b8a      	ldr	r3, [pc, #552]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dca:	d107      	bne.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fe07 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dda:	e338      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de0:	e335      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009de2:	4b81      	ldr	r3, [pc, #516]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dee:	d107      	bne.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009df0:	f107 0318 	add.w	r3, r7, #24
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fb4d 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dfe:	e326      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e04:	e323      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e06:	4b78      	ldr	r3, [pc, #480]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e12:	d107      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e14:	f107 030c 	add.w	r3, r7, #12
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fc8f 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e22:	e314      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e28:	e311      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e2a:	4b6f      	ldr	r3, [pc, #444]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e34:	4b6c      	ldr	r3, [pc, #432]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d10c      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e46:	4b68      	ldr	r3, [pc, #416]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	08db      	lsrs	r3, r3, #3
 8009e4c:	f003 0303 	and.w	r3, r3, #3
 8009e50:	4a66      	ldr	r2, [pc, #408]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009e52:	fa22 f303 	lsr.w	r3, r2, r3
 8009e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e58:	e01e      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e5a:	4b63      	ldr	r3, [pc, #396]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e66:	d106      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e6e:	d102      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e70:	4b5f      	ldr	r3, [pc, #380]	; (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e74:	e010      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e76:	4b5c      	ldr	r3, [pc, #368]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e82:	d106      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e8a:	d102      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e8c:	4b59      	ldr	r3, [pc, #356]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e90:	e002      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e96:	e2da      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009e98:	e2d9      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e9a:	4b57      	ldr	r3, [pc, #348]	; (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e9e:	e2d6      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ea4:	e2d3      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eaa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009eae:	430b      	orrs	r3, r1
 8009eb0:	f040 80a7 	bne.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009eb4:	4b4c      	ldr	r3, [pc, #304]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009ebc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ec4:	d055      	beq.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ecc:	f200 8096 	bhi.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ed6:	f000 8084 	beq.w	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009edc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ee0:	f200 808c 	bhi.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eea:	d030      	beq.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ef2:	f200 8083 	bhi.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f02:	d012      	beq.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009f04:	e07a      	b.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f06:	4b38      	ldr	r3, [pc, #224]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f12:	d107      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fd63 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f22:	e294      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f28:	e291      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f2a:	4b2f      	ldr	r3, [pc, #188]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f36:	d107      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f38:	f107 0318 	add.w	r3, r7, #24
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 faa9 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f46:	e282      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f4c:	e27f      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f4e:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f5a:	d107      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f5c:	f107 030c 	add.w	r3, r7, #12
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 fbeb 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f6a:	e270      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f70:	e26d      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f7c:	4b1a      	ldr	r3, [pc, #104]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d10c      	bne.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d109      	bne.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f8e:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	08db      	lsrs	r3, r3, #3
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	4a14      	ldr	r2, [pc, #80]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa0:	e01e      	b.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fa2:	4b11      	ldr	r3, [pc, #68]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fae:	d106      	bne.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fb6:	d102      	bne.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fbc:	e010      	b.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fbe:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fca:	d106      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fd2:	d102      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fd4:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fd8:	e002      	b.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009fde:	e236      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009fe0:	e235      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fe2:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe6:	e232      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009fe8:	58024400 	.word	0x58024400
 8009fec:	03d09000 	.word	0x03d09000
 8009ff0:	003d0900 	.word	0x003d0900
 8009ff4:	017d7840 	.word	0x017d7840
 8009ff8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a000:	e225      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a002:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a006:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a00a:	430b      	orrs	r3, r1
 800a00c:	f040 8085 	bne.w	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a010:	4b9c      	ldr	r3, [pc, #624]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a014:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a018:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a020:	d06b      	beq.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a028:	d874      	bhi.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a030:	d056      	beq.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a038:	d86c      	bhi.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a040:	d03b      	beq.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a048:	d864      	bhi.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a050:	d021      	beq.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a058:	d85c      	bhi.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a066:	d004      	beq.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a068:	e054      	b.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a06a:	f7fe fb5f 	bl	800872c <HAL_RCC_GetPCLK1Freq>
 800a06e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a070:	e1ed      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a072:	4b84      	ldr	r3, [pc, #528]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a07a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a07e:	d107      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a080:	f107 0318 	add.w	r3, r7, #24
 800a084:	4618      	mov	r0, r3
 800a086:	f000 fa05 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a08e:	e1de      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a094:	e1db      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a096:	4b7b      	ldr	r3, [pc, #492]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a09e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0a2:	d107      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0a4:	f107 030c 	add.w	r3, r7, #12
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 fb47 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b2:	e1cc      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0b8:	e1c9      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0ba:	4b72      	ldr	r3, [pc, #456]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0304 	and.w	r3, r3, #4
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d109      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0c6:	4b6f      	ldr	r3, [pc, #444]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	08db      	lsrs	r3, r3, #3
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	4a6d      	ldr	r2, [pc, #436]	; (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d8:	e1b9      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0de:	e1b6      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0e0:	4b68      	ldr	r3, [pc, #416]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ec:	d102      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a0ee:	4b67      	ldr	r3, [pc, #412]	; (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0f2:	e1ac      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f8:	e1a9      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0fa:	4b62      	ldr	r3, [pc, #392]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a106:	d102      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a108:	4b61      	ldr	r3, [pc, #388]	; (800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a10c:	e19f      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a112:	e19c      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a118:	e199      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a11e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a122:	430b      	orrs	r3, r1
 800a124:	d173      	bne.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a126:	4b57      	ldr	r3, [pc, #348]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a12e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a136:	d02f      	beq.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a13e:	d863      	bhi.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a14c:	d012      	beq.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a14e:	e05b      	b.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a150:	4b4c      	ldr	r3, [pc, #304]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a15c:	d107      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a15e:	f107 0318 	add.w	r3, r7, #24
 800a162:	4618      	mov	r0, r3
 800a164:	f000 f996 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a16c:	e16f      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a172:	e16c      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a174:	4b43      	ldr	r3, [pc, #268]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a17c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a180:	d107      	bne.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a182:	f107 030c 	add.w	r3, r7, #12
 800a186:	4618      	mov	r0, r3
 800a188:	f000 fad8 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a190:	e15d      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a196:	e15a      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a198:	4b3a      	ldr	r3, [pc, #232]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a19a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a19c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1a2:	4b38      	ldr	r3, [pc, #224]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d10c      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d109      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1b4:	4b33      	ldr	r3, [pc, #204]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	08db      	lsrs	r3, r3, #3
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	4a32      	ldr	r2, [pc, #200]	; (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1c6:	e01e      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1c8:	4b2e      	ldr	r3, [pc, #184]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d4:	d106      	bne.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1dc:	d102      	bne.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1de:	4b2b      	ldr	r3, [pc, #172]	; (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e2:	e010      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1e4:	4b27      	ldr	r3, [pc, #156]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1f0:	d106      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1f8:	d102      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1fa:	4b25      	ldr	r3, [pc, #148]	; (800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1fe:	e002      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a204:	e123      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a206:	e122      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a20c:	e11f      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a20e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a212:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a216:	430b      	orrs	r3, r1
 800a218:	d13c      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a21a:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a222:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a230:	d012      	beq.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a232:	e023      	b.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a234:	4b13      	ldr	r3, [pc, #76]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a240:	d107      	bne.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fbcc 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a250:	e0fd      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a256:	e0fa      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a258:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a264:	d107      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a266:	f107 0318 	add.w	r3, r7, #24
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f912 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a274:	e0eb      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a27a:	e0e8      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a280:	e0e5      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a282:	bf00      	nop
 800a284:	58024400 	.word	0x58024400
 800a288:	03d09000 	.word	0x03d09000
 800a28c:	003d0900 	.word	0x003d0900
 800a290:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a298:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a29c:	430b      	orrs	r3, r1
 800a29e:	f040 8085 	bne.w	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a2a2:	4b6d      	ldr	r3, [pc, #436]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a2aa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2b2:	d06b      	beq.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2ba:	d874      	bhi.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c2:	d056      	beq.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ca:	d86c      	bhi.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2d2:	d03b      	beq.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2da:	d864      	bhi.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2e2:	d021      	beq.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ea:	d85c      	bhi.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d004      	beq.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2f8:	d004      	beq.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a2fa:	e054      	b.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a2fc:	f000 f8b4 	bl	800a468 <HAL_RCCEx_GetD3PCLK1Freq>
 800a300:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a302:	e0a4      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a304:	4b54      	ldr	r3, [pc, #336]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a30c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a310:	d107      	bne.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a312:	f107 0318 	add.w	r3, r7, #24
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f8bc 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a320:	e095      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a326:	e092      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a328:	4b4b      	ldr	r3, [pc, #300]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a334:	d107      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a336:	f107 030c 	add.w	r3, r7, #12
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 f9fe 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a344:	e083      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a34a:	e080      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a34c:	4b42      	ldr	r3, [pc, #264]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b04      	cmp	r3, #4
 800a356:	d109      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a358:	4b3f      	ldr	r3, [pc, #252]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	08db      	lsrs	r3, r3, #3
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	4a3e      	ldr	r2, [pc, #248]	; (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a364:	fa22 f303 	lsr.w	r3, r2, r3
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36a:	e070      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a370:	e06d      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a372:	4b39      	ldr	r3, [pc, #228]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a37e:	d102      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a380:	4b37      	ldr	r3, [pc, #220]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a384:	e063      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38a:	e060      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a38c:	4b32      	ldr	r3, [pc, #200]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a398:	d102      	bne.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a39a:	4b32      	ldr	r3, [pc, #200]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a39e:	e056      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3a4:	e053      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3aa:	e050      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a3ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	d148      	bne.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a3b8:	4b27      	ldr	r3, [pc, #156]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3c8:	d02a      	beq.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3d0:	d838      	bhi.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d004      	beq.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3de:	d00d      	beq.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a3e0:	e030      	b.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3e2:	4b1d      	ldr	r3, [pc, #116]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ee:	d102      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a3f0:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f4:	e02b      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3fa:	e028      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3fc:	4b16      	ldr	r3, [pc, #88]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a408:	d107      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a40a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fae8 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a418:	e019      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a41e:	e016      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a420:	4b0d      	ldr	r3, [pc, #52]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a42c:	d107      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a42e:	f107 0318 	add.w	r3, r7, #24
 800a432:	4618      	mov	r0, r3
 800a434:	f000 f82e 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a43c:	e007      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a442:	e004      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a448:	e001      	b.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a450:	4618      	mov	r0, r3
 800a452:	3740      	adds	r7, #64	; 0x40
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	58024400 	.word	0x58024400
 800a45c:	03d09000 	.word	0x03d09000
 800a460:	003d0900 	.word	0x003d0900
 800a464:	017d7840 	.word	0x017d7840

0800a468 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a46c:	f7fe f92e 	bl	80086cc <HAL_RCC_GetHCLKFreq>
 800a470:	4602      	mov	r2, r0
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	091b      	lsrs	r3, r3, #4
 800a478:	f003 0307 	and.w	r3, r3, #7
 800a47c:	4904      	ldr	r1, [pc, #16]	; (800a490 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a47e:	5ccb      	ldrb	r3, [r1, r3]
 800a480:	f003 031f 	and.w	r3, r3, #31
 800a484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a488:	4618      	mov	r0, r3
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	58024400 	.word	0x58024400
 800a490:	0800dc24 	.word	0x0800dc24

0800a494 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a494:	b480      	push	{r7}
 800a496:	b089      	sub	sp, #36	; 0x24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a49c:	4ba1      	ldr	r3, [pc, #644]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a0:	f003 0303 	and.w	r3, r3, #3
 800a4a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a4a6:	4b9f      	ldr	r3, [pc, #636]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4aa:	0b1b      	lsrs	r3, r3, #12
 800a4ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a4b2:	4b9c      	ldr	r3, [pc, #624]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	091b      	lsrs	r3, r3, #4
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a4be:	4b99      	ldr	r3, [pc, #612]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c2:	08db      	lsrs	r3, r3, #3
 800a4c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	fb02 f303 	mul.w	r3, r2, r3
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8111 	beq.w	800a704 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	f000 8083 	beq.w	800a5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	f200 80a1 	bhi.w	800a634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d056      	beq.n	800a5ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a4fe:	e099      	b.n	800a634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a500:	4b88      	ldr	r3, [pc, #544]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d02d      	beq.n	800a568 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a50c:	4b85      	ldr	r3, [pc, #532]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	08db      	lsrs	r3, r3, #3
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	4a84      	ldr	r2, [pc, #528]	; (800a728 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a518:	fa22 f303 	lsr.w	r3, r2, r3
 800a51c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	ee07 3a90 	vmov	s15, r3
 800a524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a536:	4b7b      	ldr	r3, [pc, #492]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a546:	ed97 6a03 	vldr	s12, [r7, #12]
 800a54a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a566:	e087      	b.n	800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a572:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a730 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a57a:	4b6a      	ldr	r3, [pc, #424]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a58a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a58e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a59a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5aa:	e065      	b.n	800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5be:	4b59      	ldr	r3, [pc, #356]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ee:	e043      	b.n	800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a602:	4b48      	ldr	r3, [pc, #288]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a612:	ed97 6a03 	vldr	s12, [r7, #12]
 800a616:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a632:	e021      	b.n	800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a646:	4b37      	ldr	r3, [pc, #220]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a656:	ed97 6a03 	vldr	s12, [r7, #12]
 800a65a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a676:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a678:	4b2a      	ldr	r3, [pc, #168]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67c:	0a5b      	lsrs	r3, r3, #9
 800a67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a692:	edd7 6a07 	vldr	s13, [r7, #28]
 800a696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69e:	ee17 2a90 	vmov	r2, s15
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a6a6:	4b1f      	ldr	r3, [pc, #124]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	0c1b      	lsrs	r3, r3, #16
 800a6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b0:	ee07 3a90 	vmov	s15, r3
 800a6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6cc:	ee17 2a90 	vmov	r2, s15
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a6d4:	4b13      	ldr	r3, [pc, #76]	; (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d8:	0e1b      	lsrs	r3, r3, #24
 800a6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6fa:	ee17 2a90 	vmov	r2, s15
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a702:	e008      	b.n	800a716 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	609a      	str	r2, [r3, #8]
}
 800a716:	bf00      	nop
 800a718:	3724      	adds	r7, #36	; 0x24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	58024400 	.word	0x58024400
 800a728:	03d09000 	.word	0x03d09000
 800a72c:	46000000 	.word	0x46000000
 800a730:	4c742400 	.word	0x4c742400
 800a734:	4a742400 	.word	0x4a742400
 800a738:	4bbebc20 	.word	0x4bbebc20

0800a73c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b089      	sub	sp, #36	; 0x24
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a744:	4ba1      	ldr	r3, [pc, #644]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a74e:	4b9f      	ldr	r3, [pc, #636]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a752:	0d1b      	lsrs	r3, r3, #20
 800a754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a758:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a75a:	4b9c      	ldr	r3, [pc, #624]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75e:	0a1b      	lsrs	r3, r3, #8
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a766:	4b99      	ldr	r3, [pc, #612]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76a:	08db      	lsrs	r3, r3, #3
 800a76c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	fb02 f303 	mul.w	r3, r2, r3
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 8111 	beq.w	800a9ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	f000 8083 	beq.w	800a898 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b02      	cmp	r3, #2
 800a796:	f200 80a1 	bhi.w	800a8dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d056      	beq.n	800a854 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a7a6:	e099      	b.n	800a8dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7a8:	4b88      	ldr	r3, [pc, #544]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0320 	and.w	r3, r3, #32
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d02d      	beq.n	800a810 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7b4:	4b85      	ldr	r3, [pc, #532]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	08db      	lsrs	r3, r3, #3
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	4a84      	ldr	r2, [pc, #528]	; (800a9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	ee07 3a90 	vmov	s15, r3
 800a7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7de:	4b7b      	ldr	r3, [pc, #492]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e6:	ee07 3a90 	vmov	s15, r3
 800a7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a80a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a80e:	e087      	b.n	800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a822:	4b6a      	ldr	r3, [pc, #424]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a832:	ed97 6a03 	vldr	s12, [r7, #12]
 800a836:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a852:	e065      	b.n	800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a866:	4b59      	ldr	r3, [pc, #356]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a876:	ed97 6a03 	vldr	s12, [r7, #12]
 800a87a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a896:	e043      	b.n	800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8aa:	4b48      	ldr	r3, [pc, #288]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8da:	e021      	b.n	800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	ee07 3a90 	vmov	s15, r3
 800a8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ee:	4b37      	ldr	r3, [pc, #220]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a902:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a91e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a920:	4b2a      	ldr	r3, [pc, #168]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	0a5b      	lsrs	r3, r3, #9
 800a926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a946:	ee17 2a90 	vmov	r2, s15
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a94e:	4b1f      	ldr	r3, [pc, #124]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a952:	0c1b      	lsrs	r3, r3, #16
 800a954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a958:	ee07 3a90 	vmov	s15, r3
 800a95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a964:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a968:	edd7 6a07 	vldr	s13, [r7, #28]
 800a96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a974:	ee17 2a90 	vmov	r2, s15
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a97c:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a980:	0e1b      	lsrs	r3, r3, #24
 800a982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a992:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a996:	edd7 6a07 	vldr	s13, [r7, #28]
 800a99a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9a2:	ee17 2a90 	vmov	r2, s15
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a9aa:	e008      	b.n	800a9be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	609a      	str	r2, [r3, #8]
}
 800a9be:	bf00      	nop
 800a9c0:	3724      	adds	r7, #36	; 0x24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	03d09000 	.word	0x03d09000
 800a9d4:	46000000 	.word	0x46000000
 800a9d8:	4c742400 	.word	0x4c742400
 800a9dc:	4a742400 	.word	0x4a742400
 800a9e0:	4bbebc20 	.word	0x4bbebc20

0800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b089      	sub	sp, #36	; 0x24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9ec:	4ba0      	ldr	r3, [pc, #640]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a9f6:	4b9e      	ldr	r3, [pc, #632]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fa:	091b      	lsrs	r3, r3, #4
 800a9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aa02:	4b9b      	ldr	r3, [pc, #620]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aa0c:	4b98      	ldr	r3, [pc, #608]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa10:	08db      	lsrs	r3, r3, #3
 800aa12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	fb02 f303 	mul.w	r3, r2, r3
 800aa1c:	ee07 3a90 	vmov	s15, r3
 800aa20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 8111 	beq.w	800ac52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	f000 8083 	beq.w	800ab3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	f200 80a1 	bhi.w	800ab82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d056      	beq.n	800aafa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aa4c:	e099      	b.n	800ab82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa4e:	4b88      	ldr	r3, [pc, #544]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d02d      	beq.n	800aab6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa5a:	4b85      	ldr	r3, [pc, #532]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	08db      	lsrs	r3, r3, #3
 800aa60:	f003 0303 	and.w	r3, r3, #3
 800aa64:	4a83      	ldr	r2, [pc, #524]	; (800ac74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aa66:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	ee07 3a90 	vmov	s15, r3
 800aa7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa84:	4b7a      	ldr	r3, [pc, #488]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8c:	ee07 3a90 	vmov	s15, r3
 800aa90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa94:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa98:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aab4:	e087      	b.n	800abc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	ee07 3a90 	vmov	s15, r3
 800aabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ac7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac8:	4b69      	ldr	r3, [pc, #420]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad0:	ee07 3a90 	vmov	s15, r3
 800aad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aadc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaf8:	e065      	b.n	800abc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	ee07 3a90 	vmov	s15, r3
 800ab00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ac80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ab08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0c:	4b58      	ldr	r3, [pc, #352]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab14:	ee07 3a90 	vmov	s15, r3
 800ab18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab20:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab3c:	e043      	b.n	800abc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ac84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ab4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab50:	4b47      	ldr	r3, [pc, #284]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab58:	ee07 3a90 	vmov	s15, r3
 800ab5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab60:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab64:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab80:	e021      	b.n	800abc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	ee07 3a90 	vmov	s15, r3
 800ab88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ac7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab94:	4b36      	ldr	r3, [pc, #216]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9c:	ee07 3a90 	vmov	s15, r3
 800aba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aba8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800abac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800abc6:	4b2a      	ldr	r3, [pc, #168]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	0a5b      	lsrs	r3, r3, #9
 800abcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800abe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abec:	ee17 2a90 	vmov	r2, s15
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800abf4:	4b1e      	ldr	r3, [pc, #120]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf8:	0c1b      	lsrs	r3, r3, #16
 800abfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1a:	ee17 2a90 	vmov	r2, s15
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac26:	0e1b      	lsrs	r3, r3, #24
 800ac28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac2c:	ee07 3a90 	vmov	s15, r3
 800ac30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac48:	ee17 2a90 	vmov	r2, s15
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ac50:	e008      	b.n	800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	609a      	str	r2, [r3, #8]
}
 800ac64:	bf00      	nop
 800ac66:	3724      	adds	r7, #36	; 0x24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	58024400 	.word	0x58024400
 800ac74:	03d09000 	.word	0x03d09000
 800ac78:	46000000 	.word	0x46000000
 800ac7c:	4c742400 	.word	0x4c742400
 800ac80:	4a742400 	.word	0x4a742400
 800ac84:	4bbebc20 	.word	0x4bbebc20

0800ac88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac96:	4b53      	ldr	r3, [pc, #332]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ac98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	2b03      	cmp	r3, #3
 800aca0:	d101      	bne.n	800aca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e099      	b.n	800adda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aca6:	4b4f      	ldr	r3, [pc, #316]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a4e      	ldr	r2, [pc, #312]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800acb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acb2:	f7f7 fa01 	bl	80020b8 <HAL_GetTick>
 800acb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acb8:	e008      	b.n	800accc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acba:	f7f7 f9fd 	bl	80020b8 <HAL_GetTick>
 800acbe:	4602      	mov	r2, r0
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d901      	bls.n	800accc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e086      	b.n	800adda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800accc:	4b45      	ldr	r3, [pc, #276]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1f0      	bne.n	800acba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acd8:	4b42      	ldr	r3, [pc, #264]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	031b      	lsls	r3, r3, #12
 800ace6:	493f      	ldr	r1, [pc, #252]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ace8:	4313      	orrs	r3, r2
 800acea:	628b      	str	r3, [r1, #40]	; 0x28
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	025b      	lsls	r3, r3, #9
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	431a      	orrs	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	041b      	lsls	r3, r3, #16
 800ad0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad0e:	431a      	orrs	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	061b      	lsls	r3, r3, #24
 800ad18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad1c:	4931      	ldr	r1, [pc, #196]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad22:	4b30      	ldr	r3, [pc, #192]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	492d      	ldr	r1, [pc, #180]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad34:	4b2b      	ldr	r3, [pc, #172]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	f023 0220 	bic.w	r2, r3, #32
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	4928      	ldr	r1, [pc, #160]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad42:	4313      	orrs	r3, r2
 800ad44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad46:	4b27      	ldr	r3, [pc, #156]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4a:	4a26      	ldr	r2, [pc, #152]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad4c:	f023 0310 	bic.w	r3, r3, #16
 800ad50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad52:	4b24      	ldr	r3, [pc, #144]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad56:	4b24      	ldr	r3, [pc, #144]	; (800ade8 <RCCEx_PLL2_Config+0x160>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	69d2      	ldr	r2, [r2, #28]
 800ad5e:	00d2      	lsls	r2, r2, #3
 800ad60:	4920      	ldr	r1, [pc, #128]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad66:	4b1f      	ldr	r3, [pc, #124]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	4a1e      	ldr	r2, [pc, #120]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad6c:	f043 0310 	orr.w	r3, r3, #16
 800ad70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d106      	bne.n	800ad86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad78:	4b1a      	ldr	r3, [pc, #104]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	4a19      	ldr	r2, [pc, #100]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad84:	e00f      	b.n	800ada6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d106      	bne.n	800ad9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad8c:	4b15      	ldr	r3, [pc, #84]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	4a14      	ldr	r2, [pc, #80]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad98:	e005      	b.n	800ada6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad9a:	4b12      	ldr	r3, [pc, #72]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	4a11      	ldr	r2, [pc, #68]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ada0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ada4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ada6:	4b0f      	ldr	r3, [pc, #60]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a0e      	ldr	r2, [pc, #56]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800adac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800adb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adb2:	f7f7 f981 	bl	80020b8 <HAL_GetTick>
 800adb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adb8:	e008      	b.n	800adcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800adba:	f7f7 f97d 	bl	80020b8 <HAL_GetTick>
 800adbe:	4602      	mov	r2, r0
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d901      	bls.n	800adcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e006      	b.n	800adda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0f0      	beq.n	800adba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	58024400 	.word	0x58024400
 800ade8:	ffff0007 	.word	0xffff0007

0800adec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adfa:	4b53      	ldr	r3, [pc, #332]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800adfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfe:	f003 0303 	and.w	r3, r3, #3
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d101      	bne.n	800ae0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e099      	b.n	800af3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ae0a:	4b4f      	ldr	r3, [pc, #316]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a4e      	ldr	r2, [pc, #312]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae16:	f7f7 f94f 	bl	80020b8 <HAL_GetTick>
 800ae1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae1c:	e008      	b.n	800ae30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae1e:	f7f7 f94b 	bl	80020b8 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d901      	bls.n	800ae30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e086      	b.n	800af3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae30:	4b45      	ldr	r3, [pc, #276]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1f0      	bne.n	800ae1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae3c:	4b42      	ldr	r3, [pc, #264]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	051b      	lsls	r3, r3, #20
 800ae4a:	493f      	ldr	r1, [pc, #252]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	628b      	str	r3, [r1, #40]	; 0x28
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	025b      	lsls	r3, r3, #9
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	041b      	lsls	r3, r3, #16
 800ae6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae72:	431a      	orrs	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	061b      	lsls	r3, r3, #24
 800ae7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae80:	4931      	ldr	r1, [pc, #196]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae86:	4b30      	ldr	r3, [pc, #192]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	492d      	ldr	r1, [pc, #180]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae98:	4b2b      	ldr	r3, [pc, #172]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	4928      	ldr	r1, [pc, #160]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aeaa:	4b27      	ldr	r3, [pc, #156]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeae:	4a26      	ldr	r2, [pc, #152]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aeb6:	4b24      	ldr	r3, [pc, #144]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeba:	4b24      	ldr	r3, [pc, #144]	; (800af4c <RCCEx_PLL3_Config+0x160>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	69d2      	ldr	r2, [r2, #28]
 800aec2:	00d2      	lsls	r2, r2, #3
 800aec4:	4920      	ldr	r1, [pc, #128]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aeca:	4b1f      	ldr	r3, [pc, #124]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aece:	4a1e      	ldr	r2, [pc, #120]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aedc:	4b1a      	ldr	r3, [pc, #104]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a19      	ldr	r2, [pc, #100]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aee8:	e00f      	b.n	800af0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d106      	bne.n	800aefe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aef0:	4b15      	ldr	r3, [pc, #84]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	4a14      	ldr	r2, [pc, #80]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aefa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aefc:	e005      	b.n	800af0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aefe:	4b12      	ldr	r3, [pc, #72]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	4a11      	ldr	r2, [pc, #68]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800af0a:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a0e      	ldr	r2, [pc, #56]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af16:	f7f7 f8cf 	bl	80020b8 <HAL_GetTick>
 800af1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af1c:	e008      	b.n	800af30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af1e:	f7f7 f8cb 	bl	80020b8 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e006      	b.n	800af3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af30:	4b05      	ldr	r3, [pc, #20]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0f0      	beq.n	800af1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400
 800af4c:	ffff0007 	.word	0xffff0007

0800af50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e10f      	b.n	800b182 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a87      	ldr	r2, [pc, #540]	; (800b18c <HAL_SPI_Init+0x23c>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d00f      	beq.n	800af92 <HAL_SPI_Init+0x42>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a86      	ldr	r2, [pc, #536]	; (800b190 <HAL_SPI_Init+0x240>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d00a      	beq.n	800af92 <HAL_SPI_Init+0x42>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a84      	ldr	r2, [pc, #528]	; (800b194 <HAL_SPI_Init+0x244>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d005      	beq.n	800af92 <HAL_SPI_Init+0x42>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	2b0f      	cmp	r3, #15
 800af8c:	d901      	bls.n	800af92 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e0f7      	b.n	800b182 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f900 	bl	800b198 <SPI_GetPacketSize>
 800af98:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a7b      	ldr	r2, [pc, #492]	; (800b18c <HAL_SPI_Init+0x23c>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d00c      	beq.n	800afbe <HAL_SPI_Init+0x6e>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a79      	ldr	r2, [pc, #484]	; (800b190 <HAL_SPI_Init+0x240>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d007      	beq.n	800afbe <HAL_SPI_Init+0x6e>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a78      	ldr	r2, [pc, #480]	; (800b194 <HAL_SPI_Init+0x244>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d002      	beq.n	800afbe <HAL_SPI_Init+0x6e>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b08      	cmp	r3, #8
 800afbc:	d811      	bhi.n	800afe2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afc2:	4a72      	ldr	r2, [pc, #456]	; (800b18c <HAL_SPI_Init+0x23c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d009      	beq.n	800afdc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a70      	ldr	r2, [pc, #448]	; (800b190 <HAL_SPI_Init+0x240>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d004      	beq.n	800afdc <HAL_SPI_Init+0x8c>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a6f      	ldr	r2, [pc, #444]	; (800b194 <HAL_SPI_Init+0x244>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d104      	bne.n	800afe6 <HAL_SPI_Init+0x96>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b10      	cmp	r3, #16
 800afe0:	d901      	bls.n	800afe6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e0cd      	b.n	800b182 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7f6 fc30 	bl	8001860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2202      	movs	r2, #2
 800b004:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f022 0201 	bic.w	r2, r2, #1
 800b016:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b022:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b02c:	d119      	bne.n	800b062 <HAL_SPI_Init+0x112>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b036:	d103      	bne.n	800b040 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d008      	beq.n	800b052 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10c      	bne.n	800b062 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b04c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b050:	d107      	bne.n	800b062 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b060:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00f      	beq.n	800b08e <HAL_SPI_Init+0x13e>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	2b06      	cmp	r3, #6
 800b074:	d90b      	bls.n	800b08e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	e007      	b.n	800b09e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b09c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	69da      	ldr	r2, [r3, #28]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b0:	ea42 0103 	orr.w	r1, r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	431a      	orrs	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0fe:	ea42 0103 	orr.w	r1, r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d113      	bne.n	800b13e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b128:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b13c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f022 0201 	bic.w	r2, r2, #1
 800b14c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	40013000 	.word	0x40013000
 800b190:	40003800 	.word	0x40003800
 800b194:	40003c00 	.word	0x40003c00

0800b198 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a4:	095b      	lsrs	r3, r3, #5
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	3307      	adds	r3, #7
 800b1b6:	08db      	lsrs	r3, r3, #3
 800b1b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	fb02 f303 	mul.w	r3, r2, r3
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e042      	b.n	800b266 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d106      	bne.n	800b1f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7f6 fcb4 	bl	8001b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2224      	movs	r2, #36	; 0x24
 800b1fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f022 0201 	bic.w	r2, r2, #1
 800b20e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fc9b 	bl	800bb4c <UART_SetConfig>
 800b216:	4603      	mov	r3, r0
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d101      	bne.n	800b220 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e022      	b.n	800b266 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f001 fafb 	bl	800c824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b23c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689a      	ldr	r2, [r3, #8]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b24c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f042 0201 	orr.w	r2, r2, #1
 800b25c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f001 fb82 	bl	800c968 <UART_CheckIdleState>
 800b264:	4603      	mov	r3, r0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b270:	b480      	push	{r7}
 800b272:	b091      	sub	sp, #68	; 0x44
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	4613      	mov	r3, r2
 800b27c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b284:	2b20      	cmp	r3, #32
 800b286:	d178      	bne.n	800b37a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <HAL_UART_Transmit_IT+0x24>
 800b28e:	88fb      	ldrh	r3, [r7, #6]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e071      	b.n	800b37c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	88fa      	ldrh	r2, [r7, #6]
 800b2a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	88fa      	ldrh	r2, [r7, #6]
 800b2aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2221      	movs	r2, #33	; 0x21
 800b2c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2cc:	d12a      	bne.n	800b324 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2d6:	d107      	bne.n	800b2e8 <HAL_UART_Transmit_IT+0x78>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d103      	bne.n	800b2e8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4a29      	ldr	r2, [pc, #164]	; (800b388 <HAL_UART_Transmit_IT+0x118>)
 800b2e4:	679a      	str	r2, [r3, #120]	; 0x78
 800b2e6:	e002      	b.n	800b2ee <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4a28      	ldr	r2, [pc, #160]	; (800b38c <HAL_UART_Transmit_IT+0x11c>)
 800b2ec:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	e853 3f00 	ldrex	r3, [r3]
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b304:	63bb      	str	r3, [r7, #56]	; 0x38
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3308      	adds	r3, #8
 800b30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b30e:	637a      	str	r2, [r7, #52]	; 0x34
 800b310:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b316:	e841 2300 	strex	r3, r2, [r1]
 800b31a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1e5      	bne.n	800b2ee <HAL_UART_Transmit_IT+0x7e>
 800b322:	e028      	b.n	800b376 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b32c:	d107      	bne.n	800b33e <HAL_UART_Transmit_IT+0xce>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d103      	bne.n	800b33e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	4a15      	ldr	r2, [pc, #84]	; (800b390 <HAL_UART_Transmit_IT+0x120>)
 800b33a:	679a      	str	r2, [r3, #120]	; 0x78
 800b33c:	e002      	b.n	800b344 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	4a14      	ldr	r2, [pc, #80]	; (800b394 <HAL_UART_Transmit_IT+0x124>)
 800b342:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	613b      	str	r3, [r7, #16]
   return(result);
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b362:	623b      	str	r3, [r7, #32]
 800b364:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b366:	69f9      	ldr	r1, [r7, #28]
 800b368:	6a3a      	ldr	r2, [r7, #32]
 800b36a:	e841 2300 	strex	r3, r2, [r1]
 800b36e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1e6      	bne.n	800b344 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	e000      	b.n	800b37c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b37a:	2302      	movs	r3, #2
  }
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3744      	adds	r7, #68	; 0x44
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	0800cedf 	.word	0x0800cedf
 800b38c:	0800cdff 	.word	0x0800cdff
 800b390:	0800cd3d 	.word	0x0800cd3d
 800b394:	0800cc85 	.word	0x0800cc85

0800b398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b0ba      	sub	sp, #232	; 0xe8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b3c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b3cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d11b      	bne.n	800b40c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3d8:	f003 0320 	and.w	r3, r3, #32
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d015      	beq.n	800b40c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d105      	bne.n	800b3f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d009      	beq.n	800b40c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 8377 	beq.w	800baf0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	4798      	blx	r3
      }
      return;
 800b40a:	e371      	b.n	800baf0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b40c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 8123 	beq.w	800b65c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b416:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b41a:	4b8d      	ldr	r3, [pc, #564]	; (800b650 <HAL_UART_IRQHandler+0x2b8>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d106      	bne.n	800b430 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b422:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b426:	4b8b      	ldr	r3, [pc, #556]	; (800b654 <HAL_UART_IRQHandler+0x2bc>)
 800b428:	4013      	ands	r3, r2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 8116 	beq.w	800b65c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b434:	f003 0301 	and.w	r3, r3, #1
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d011      	beq.n	800b460 <HAL_UART_IRQHandler+0xc8>
 800b43c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00b      	beq.n	800b460 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2201      	movs	r2, #1
 800b44e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b456:	f043 0201 	orr.w	r2, r3, #1
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d011      	beq.n	800b490 <HAL_UART_IRQHandler+0xf8>
 800b46c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00b      	beq.n	800b490 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2202      	movs	r2, #2
 800b47e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b486:	f043 0204 	orr.w	r2, r3, #4
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d011      	beq.n	800b4c0 <HAL_UART_IRQHandler+0x128>
 800b49c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2204      	movs	r2, #4
 800b4ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4b6:	f043 0202 	orr.w	r2, r3, #2
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c4:	f003 0308 	and.w	r3, r3, #8
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d017      	beq.n	800b4fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4d0:	f003 0320 	and.w	r3, r3, #32
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d105      	bne.n	800b4e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b4dc:	4b5c      	ldr	r3, [pc, #368]	; (800b650 <HAL_UART_IRQHandler+0x2b8>)
 800b4de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00b      	beq.n	800b4fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f2:	f043 0208 	orr.w	r2, r3, #8
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b504:	2b00      	cmp	r3, #0
 800b506:	d012      	beq.n	800b52e <HAL_UART_IRQHandler+0x196>
 800b508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b50c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00c      	beq.n	800b52e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b51c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b524:	f043 0220 	orr.w	r2, r3, #32
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 82dd 	beq.w	800baf4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b00      	cmp	r3, #0
 800b544:	d013      	beq.n	800b56e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b54a:	f003 0320 	and.w	r3, r3, #32
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d105      	bne.n	800b55e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d007      	beq.n	800b56e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b574:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b582:	2b40      	cmp	r3, #64	; 0x40
 800b584:	d005      	beq.n	800b592 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b58a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d054      	beq.n	800b63c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f001 fafa 	bl	800cb8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a2:	2b40      	cmp	r3, #64	; 0x40
 800b5a4:	d146      	bne.n	800b634 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5b4:	e853 3f00 	ldrex	r3, [r3]
 800b5b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b5bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b5d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b5d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b5de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b5e2:	e841 2300 	strex	r3, r2, [r1]
 800b5e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b5ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1d9      	bne.n	800b5a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d017      	beq.n	800b62c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b602:	4a15      	ldr	r2, [pc, #84]	; (800b658 <HAL_UART_IRQHandler+0x2c0>)
 800b604:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7f9 fd53 	bl	80050b8 <HAL_DMA_Abort_IT>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d019      	beq.n	800b64c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b61e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b626:	4610      	mov	r0, r2
 800b628:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b62a:	e00f      	b.n	800b64c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fa77 	bl	800bb20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b632:	e00b      	b.n	800b64c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fa73 	bl	800bb20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b63a:	e007      	b.n	800b64c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 fa6f 	bl	800bb20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b64a:	e253      	b.n	800baf4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b64c:	bf00      	nop
    return;
 800b64e:	e251      	b.n	800baf4 <HAL_UART_IRQHandler+0x75c>
 800b650:	10000001 	.word	0x10000001
 800b654:	04000120 	.word	0x04000120
 800b658:	0800cc59 	.word	0x0800cc59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b660:	2b01      	cmp	r3, #1
 800b662:	f040 81e7 	bne.w	800ba34 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b66a:	f003 0310 	and.w	r3, r3, #16
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 81e0 	beq.w	800ba34 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b678:	f003 0310 	and.w	r3, r3, #16
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f000 81d9 	beq.w	800ba34 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2210      	movs	r2, #16
 800b688:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b694:	2b40      	cmp	r3, #64	; 0x40
 800b696:	f040 8151 	bne.w	800b93c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a96      	ldr	r2, [pc, #600]	; (800b8fc <HAL_UART_IRQHandler+0x564>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d068      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a93      	ldr	r2, [pc, #588]	; (800b900 <HAL_UART_IRQHandler+0x568>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d061      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a91      	ldr	r2, [pc, #580]	; (800b904 <HAL_UART_IRQHandler+0x56c>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d05a      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a8e      	ldr	r2, [pc, #568]	; (800b908 <HAL_UART_IRQHandler+0x570>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d053      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a8c      	ldr	r2, [pc, #560]	; (800b90c <HAL_UART_IRQHandler+0x574>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d04c      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a89      	ldr	r2, [pc, #548]	; (800b910 <HAL_UART_IRQHandler+0x578>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d045      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a87      	ldr	r2, [pc, #540]	; (800b914 <HAL_UART_IRQHandler+0x57c>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d03e      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a84      	ldr	r2, [pc, #528]	; (800b918 <HAL_UART_IRQHandler+0x580>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d037      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a82      	ldr	r2, [pc, #520]	; (800b91c <HAL_UART_IRQHandler+0x584>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d030      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a7f      	ldr	r2, [pc, #508]	; (800b920 <HAL_UART_IRQHandler+0x588>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d029      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a7d      	ldr	r2, [pc, #500]	; (800b924 <HAL_UART_IRQHandler+0x58c>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d022      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a7a      	ldr	r2, [pc, #488]	; (800b928 <HAL_UART_IRQHandler+0x590>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d01b      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a78      	ldr	r2, [pc, #480]	; (800b92c <HAL_UART_IRQHandler+0x594>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d014      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a75      	ldr	r2, [pc, #468]	; (800b930 <HAL_UART_IRQHandler+0x598>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d00d      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a73      	ldr	r2, [pc, #460]	; (800b934 <HAL_UART_IRQHandler+0x59c>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d006      	beq.n	800b77a <HAL_UART_IRQHandler+0x3e2>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a70      	ldr	r2, [pc, #448]	; (800b938 <HAL_UART_IRQHandler+0x5a0>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d106      	bne.n	800b788 <HAL_UART_IRQHandler+0x3f0>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	b29b      	uxth	r3, r3
 800b786:	e005      	b.n	800b794 <HAL_UART_IRQHandler+0x3fc>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	b29b      	uxth	r3, r3
 800b794:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 81ab 	beq.w	800baf8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	f080 81a3 	bcs.w	800baf8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c2:	69db      	ldr	r3, [r3, #28]
 800b7c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c8:	f000 8087 	beq.w	800b8da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7d8:	e853 3f00 	ldrex	r3, [r3]
 800b7dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b7e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b806:	e841 2300 	strex	r3, r2, [r1]
 800b80a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b80e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1da      	bne.n	800b7cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3308      	adds	r3, #8
 800b81c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b820:	e853 3f00 	ldrex	r3, [r3]
 800b824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b828:	f023 0301 	bic.w	r3, r3, #1
 800b82c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3308      	adds	r3, #8
 800b836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b83a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b83e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b846:	e841 2300 	strex	r3, r2, [r1]
 800b84a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b84c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1e1      	bne.n	800b816 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3308      	adds	r3, #8
 800b872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b876:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b87c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e3      	bne.n	800b852 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8a8:	f023 0310 	bic.w	r3, r3, #16
 800b8ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8c2:	e841 2300 	strex	r3, r2, [r1]
 800b8c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e4      	bne.n	800b898 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f9 f8d1 	bl	8004a7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2202      	movs	r2, #2
 800b8de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f91d 	bl	800bb34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8fa:	e0fd      	b.n	800baf8 <HAL_UART_IRQHandler+0x760>
 800b8fc:	40020010 	.word	0x40020010
 800b900:	40020028 	.word	0x40020028
 800b904:	40020040 	.word	0x40020040
 800b908:	40020058 	.word	0x40020058
 800b90c:	40020070 	.word	0x40020070
 800b910:	40020088 	.word	0x40020088
 800b914:	400200a0 	.word	0x400200a0
 800b918:	400200b8 	.word	0x400200b8
 800b91c:	40020410 	.word	0x40020410
 800b920:	40020428 	.word	0x40020428
 800b924:	40020440 	.word	0x40020440
 800b928:	40020458 	.word	0x40020458
 800b92c:	40020470 	.word	0x40020470
 800b930:	40020488 	.word	0x40020488
 800b934:	400204a0 	.word	0x400204a0
 800b938:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b948:	b29b      	uxth	r3, r3
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b956:	b29b      	uxth	r3, r3
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 80cf 	beq.w	800bafc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b95e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 80ca 	beq.w	800bafc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	e853 3f00 	ldrex	r3, [r3]
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b97c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	461a      	mov	r2, r3
 800b986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b98a:	647b      	str	r3, [r7, #68]	; 0x44
 800b98c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b992:	e841 2300 	strex	r3, r2, [r1]
 800b996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1e4      	bne.n	800b968 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b9ae:	6a3a      	ldr	r2, [r7, #32]
 800b9b0:	4b55      	ldr	r3, [pc, #340]	; (800bb08 <HAL_UART_IRQHandler+0x770>)
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3308      	adds	r3, #8
 800b9be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9c2:	633a      	str	r2, [r7, #48]	; 0x30
 800b9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ca:	e841 2300 	strex	r3, r2, [r1]
 800b9ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1e3      	bne.n	800b99e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2220      	movs	r2, #32
 800b9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	e853 3f00 	ldrex	r3, [r3]
 800b9f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0310 	bic.w	r3, r3, #16
 800b9fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba0c:	61fb      	str	r3, [r7, #28]
 800ba0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba10:	69b9      	ldr	r1, [r7, #24]
 800ba12:	69fa      	ldr	r2, [r7, #28]
 800ba14:	e841 2300 	strex	r3, r2, [r1]
 800ba18:	617b      	str	r3, [r7, #20]
   return(result);
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1e4      	bne.n	800b9ea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2202      	movs	r2, #2
 800ba24:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f881 	bl	800bb34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba32:	e063      	b.n	800bafc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00e      	beq.n	800ba5e <HAL_UART_IRQHandler+0x6c6>
 800ba40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d008      	beq.n	800ba5e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 fae1 	bl	800d01e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba5c:	e051      	b.n	800bb02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d014      	beq.n	800ba94 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d105      	bne.n	800ba82 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d008      	beq.n	800ba94 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d03a      	beq.n	800bb00 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	4798      	blx	r3
    }
    return;
 800ba92:	e035      	b.n	800bb00 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d009      	beq.n	800bab4 <HAL_UART_IRQHandler+0x71c>
 800baa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d003      	beq.n	800bab4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f001 fa8b 	bl	800cfc8 <UART_EndTransmit_IT>
    return;
 800bab2:	e026      	b.n	800bb02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d009      	beq.n	800bad4 <HAL_UART_IRQHandler+0x73c>
 800bac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f001 faba 	bl	800d046 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bad2:	e016      	b.n	800bb02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d010      	beq.n	800bb02 <HAL_UART_IRQHandler+0x76a>
 800bae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	da0c      	bge.n	800bb02 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f001 faa2 	bl	800d032 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baee:	e008      	b.n	800bb02 <HAL_UART_IRQHandler+0x76a>
      return;
 800baf0:	bf00      	nop
 800baf2:	e006      	b.n	800bb02 <HAL_UART_IRQHandler+0x76a>
    return;
 800baf4:	bf00      	nop
 800baf6:	e004      	b.n	800bb02 <HAL_UART_IRQHandler+0x76a>
      return;
 800baf8:	bf00      	nop
 800bafa:	e002      	b.n	800bb02 <HAL_UART_IRQHandler+0x76a>
      return;
 800bafc:	bf00      	nop
 800bafe:	e000      	b.n	800bb02 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb00:	bf00      	nop
  }
}
 800bb02:	37e8      	adds	r7, #232	; 0xe8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	effffffe 	.word	0xeffffffe

0800bb0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb50:	b092      	sub	sp, #72	; 0x48
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	689a      	ldr	r2, [r3, #8]
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	431a      	orrs	r2, r3
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	431a      	orrs	r2, r3
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	69db      	ldr	r3, [r3, #28]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	4bbe      	ldr	r3, [pc, #760]	; (800be74 <UART_SetConfig+0x328>)
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	6812      	ldr	r2, [r2, #0]
 800bb82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb84:	430b      	orrs	r3, r1
 800bb86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	68da      	ldr	r2, [r3, #12]
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	430a      	orrs	r2, r1
 800bb9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	699b      	ldr	r3, [r3, #24]
 800bba2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4ab3      	ldr	r2, [pc, #716]	; (800be78 <UART_SetConfig+0x32c>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d004      	beq.n	800bbb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	689a      	ldr	r2, [r3, #8]
 800bbbe:	4baf      	ldr	r3, [pc, #700]	; (800be7c <UART_SetConfig+0x330>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	6812      	ldr	r2, [r2, #0]
 800bbc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd2:	f023 010f 	bic.w	r1, r3, #15
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	430a      	orrs	r2, r1
 800bbe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4aa6      	ldr	r2, [pc, #664]	; (800be80 <UART_SetConfig+0x334>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d177      	bne.n	800bcdc <UART_SetConfig+0x190>
 800bbec:	4ba5      	ldr	r3, [pc, #660]	; (800be84 <UART_SetConfig+0x338>)
 800bbee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbf4:	2b28      	cmp	r3, #40	; 0x28
 800bbf6:	d86d      	bhi.n	800bcd4 <UART_SetConfig+0x188>
 800bbf8:	a201      	add	r2, pc, #4	; (adr r2, 800bc00 <UART_SetConfig+0xb4>)
 800bbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfe:	bf00      	nop
 800bc00:	0800bca5 	.word	0x0800bca5
 800bc04:	0800bcd5 	.word	0x0800bcd5
 800bc08:	0800bcd5 	.word	0x0800bcd5
 800bc0c:	0800bcd5 	.word	0x0800bcd5
 800bc10:	0800bcd5 	.word	0x0800bcd5
 800bc14:	0800bcd5 	.word	0x0800bcd5
 800bc18:	0800bcd5 	.word	0x0800bcd5
 800bc1c:	0800bcd5 	.word	0x0800bcd5
 800bc20:	0800bcad 	.word	0x0800bcad
 800bc24:	0800bcd5 	.word	0x0800bcd5
 800bc28:	0800bcd5 	.word	0x0800bcd5
 800bc2c:	0800bcd5 	.word	0x0800bcd5
 800bc30:	0800bcd5 	.word	0x0800bcd5
 800bc34:	0800bcd5 	.word	0x0800bcd5
 800bc38:	0800bcd5 	.word	0x0800bcd5
 800bc3c:	0800bcd5 	.word	0x0800bcd5
 800bc40:	0800bcb5 	.word	0x0800bcb5
 800bc44:	0800bcd5 	.word	0x0800bcd5
 800bc48:	0800bcd5 	.word	0x0800bcd5
 800bc4c:	0800bcd5 	.word	0x0800bcd5
 800bc50:	0800bcd5 	.word	0x0800bcd5
 800bc54:	0800bcd5 	.word	0x0800bcd5
 800bc58:	0800bcd5 	.word	0x0800bcd5
 800bc5c:	0800bcd5 	.word	0x0800bcd5
 800bc60:	0800bcbd 	.word	0x0800bcbd
 800bc64:	0800bcd5 	.word	0x0800bcd5
 800bc68:	0800bcd5 	.word	0x0800bcd5
 800bc6c:	0800bcd5 	.word	0x0800bcd5
 800bc70:	0800bcd5 	.word	0x0800bcd5
 800bc74:	0800bcd5 	.word	0x0800bcd5
 800bc78:	0800bcd5 	.word	0x0800bcd5
 800bc7c:	0800bcd5 	.word	0x0800bcd5
 800bc80:	0800bcc5 	.word	0x0800bcc5
 800bc84:	0800bcd5 	.word	0x0800bcd5
 800bc88:	0800bcd5 	.word	0x0800bcd5
 800bc8c:	0800bcd5 	.word	0x0800bcd5
 800bc90:	0800bcd5 	.word	0x0800bcd5
 800bc94:	0800bcd5 	.word	0x0800bcd5
 800bc98:	0800bcd5 	.word	0x0800bcd5
 800bc9c:	0800bcd5 	.word	0x0800bcd5
 800bca0:	0800bccd 	.word	0x0800bccd
 800bca4:	2301      	movs	r3, #1
 800bca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcaa:	e326      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bcac:	2304      	movs	r3, #4
 800bcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcb2:	e322      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bcb4:	2308      	movs	r3, #8
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcba:	e31e      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcc2:	e31a      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bcc4:	2320      	movs	r3, #32
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcca:	e316      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bccc:	2340      	movs	r3, #64	; 0x40
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcd2:	e312      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bcd4:	2380      	movs	r3, #128	; 0x80
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcda:	e30e      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a69      	ldr	r2, [pc, #420]	; (800be88 <UART_SetConfig+0x33c>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d130      	bne.n	800bd48 <UART_SetConfig+0x1fc>
 800bce6:	4b67      	ldr	r3, [pc, #412]	; (800be84 <UART_SetConfig+0x338>)
 800bce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcea:	f003 0307 	and.w	r3, r3, #7
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	d826      	bhi.n	800bd40 <UART_SetConfig+0x1f4>
 800bcf2:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <UART_SetConfig+0x1ac>)
 800bcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf8:	0800bd11 	.word	0x0800bd11
 800bcfc:	0800bd19 	.word	0x0800bd19
 800bd00:	0800bd21 	.word	0x0800bd21
 800bd04:	0800bd29 	.word	0x0800bd29
 800bd08:	0800bd31 	.word	0x0800bd31
 800bd0c:	0800bd39 	.word	0x0800bd39
 800bd10:	2300      	movs	r3, #0
 800bd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd16:	e2f0      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd18:	2304      	movs	r3, #4
 800bd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd1e:	e2ec      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd20:	2308      	movs	r3, #8
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd26:	e2e8      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd28:	2310      	movs	r3, #16
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd2e:	e2e4      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd30:	2320      	movs	r3, #32
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd36:	e2e0      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd38:	2340      	movs	r3, #64	; 0x40
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3e:	e2dc      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd40:	2380      	movs	r3, #128	; 0x80
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd46:	e2d8      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a4f      	ldr	r2, [pc, #316]	; (800be8c <UART_SetConfig+0x340>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d130      	bne.n	800bdb4 <UART_SetConfig+0x268>
 800bd52:	4b4c      	ldr	r3, [pc, #304]	; (800be84 <UART_SetConfig+0x338>)
 800bd54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd56:	f003 0307 	and.w	r3, r3, #7
 800bd5a:	2b05      	cmp	r3, #5
 800bd5c:	d826      	bhi.n	800bdac <UART_SetConfig+0x260>
 800bd5e:	a201      	add	r2, pc, #4	; (adr r2, 800bd64 <UART_SetConfig+0x218>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bd7d 	.word	0x0800bd7d
 800bd68:	0800bd85 	.word	0x0800bd85
 800bd6c:	0800bd8d 	.word	0x0800bd8d
 800bd70:	0800bd95 	.word	0x0800bd95
 800bd74:	0800bd9d 	.word	0x0800bd9d
 800bd78:	0800bda5 	.word	0x0800bda5
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd82:	e2ba      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd84:	2304      	movs	r3, #4
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd8a:	e2b6      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd8c:	2308      	movs	r3, #8
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd92:	e2b2      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd94:	2310      	movs	r3, #16
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd9a:	e2ae      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bd9c:	2320      	movs	r3, #32
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bda2:	e2aa      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bda4:	2340      	movs	r3, #64	; 0x40
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdaa:	e2a6      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bdac:	2380      	movs	r3, #128	; 0x80
 800bdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdb2:	e2a2      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a35      	ldr	r2, [pc, #212]	; (800be90 <UART_SetConfig+0x344>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d130      	bne.n	800be20 <UART_SetConfig+0x2d4>
 800bdbe:	4b31      	ldr	r3, [pc, #196]	; (800be84 <UART_SetConfig+0x338>)
 800bdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdc2:	f003 0307 	and.w	r3, r3, #7
 800bdc6:	2b05      	cmp	r3, #5
 800bdc8:	d826      	bhi.n	800be18 <UART_SetConfig+0x2cc>
 800bdca:	a201      	add	r2, pc, #4	; (adr r2, 800bdd0 <UART_SetConfig+0x284>)
 800bdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd0:	0800bde9 	.word	0x0800bde9
 800bdd4:	0800bdf1 	.word	0x0800bdf1
 800bdd8:	0800bdf9 	.word	0x0800bdf9
 800bddc:	0800be01 	.word	0x0800be01
 800bde0:	0800be09 	.word	0x0800be09
 800bde4:	0800be11 	.word	0x0800be11
 800bde8:	2300      	movs	r3, #0
 800bdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdee:	e284      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bdf0:	2304      	movs	r3, #4
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdf6:	e280      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bdf8:	2308      	movs	r3, #8
 800bdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdfe:	e27c      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be00:	2310      	movs	r3, #16
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be06:	e278      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be08:	2320      	movs	r3, #32
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0e:	e274      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be10:	2340      	movs	r3, #64	; 0x40
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be16:	e270      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be18:	2380      	movs	r3, #128	; 0x80
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1e:	e26c      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a1b      	ldr	r2, [pc, #108]	; (800be94 <UART_SetConfig+0x348>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d142      	bne.n	800beb0 <UART_SetConfig+0x364>
 800be2a:	4b16      	ldr	r3, [pc, #88]	; (800be84 <UART_SetConfig+0x338>)
 800be2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2e:	f003 0307 	and.w	r3, r3, #7
 800be32:	2b05      	cmp	r3, #5
 800be34:	d838      	bhi.n	800bea8 <UART_SetConfig+0x35c>
 800be36:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <UART_SetConfig+0x2f0>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800be55 	.word	0x0800be55
 800be40:	0800be5d 	.word	0x0800be5d
 800be44:	0800be65 	.word	0x0800be65
 800be48:	0800be6d 	.word	0x0800be6d
 800be4c:	0800be99 	.word	0x0800be99
 800be50:	0800bea1 	.word	0x0800bea1
 800be54:	2300      	movs	r3, #0
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5a:	e24e      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be5c:	2304      	movs	r3, #4
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be62:	e24a      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be64:	2308      	movs	r3, #8
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6a:	e246      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be6c:	2310      	movs	r3, #16
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be72:	e242      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800be74:	cfff69f3 	.word	0xcfff69f3
 800be78:	58000c00 	.word	0x58000c00
 800be7c:	11fff4ff 	.word	0x11fff4ff
 800be80:	40011000 	.word	0x40011000
 800be84:	58024400 	.word	0x58024400
 800be88:	40004400 	.word	0x40004400
 800be8c:	40004800 	.word	0x40004800
 800be90:	40004c00 	.word	0x40004c00
 800be94:	40005000 	.word	0x40005000
 800be98:	2320      	movs	r3, #32
 800be9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9e:	e22c      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bea0:	2340      	movs	r3, #64	; 0x40
 800bea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bea6:	e228      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bea8:	2380      	movs	r3, #128	; 0x80
 800beaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beae:	e224      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4ab1      	ldr	r2, [pc, #708]	; (800c17c <UART_SetConfig+0x630>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d176      	bne.n	800bfa8 <UART_SetConfig+0x45c>
 800beba:	4bb1      	ldr	r3, [pc, #708]	; (800c180 <UART_SetConfig+0x634>)
 800bebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bec2:	2b28      	cmp	r3, #40	; 0x28
 800bec4:	d86c      	bhi.n	800bfa0 <UART_SetConfig+0x454>
 800bec6:	a201      	add	r2, pc, #4	; (adr r2, 800becc <UART_SetConfig+0x380>)
 800bec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800becc:	0800bf71 	.word	0x0800bf71
 800bed0:	0800bfa1 	.word	0x0800bfa1
 800bed4:	0800bfa1 	.word	0x0800bfa1
 800bed8:	0800bfa1 	.word	0x0800bfa1
 800bedc:	0800bfa1 	.word	0x0800bfa1
 800bee0:	0800bfa1 	.word	0x0800bfa1
 800bee4:	0800bfa1 	.word	0x0800bfa1
 800bee8:	0800bfa1 	.word	0x0800bfa1
 800beec:	0800bf79 	.word	0x0800bf79
 800bef0:	0800bfa1 	.word	0x0800bfa1
 800bef4:	0800bfa1 	.word	0x0800bfa1
 800bef8:	0800bfa1 	.word	0x0800bfa1
 800befc:	0800bfa1 	.word	0x0800bfa1
 800bf00:	0800bfa1 	.word	0x0800bfa1
 800bf04:	0800bfa1 	.word	0x0800bfa1
 800bf08:	0800bfa1 	.word	0x0800bfa1
 800bf0c:	0800bf81 	.word	0x0800bf81
 800bf10:	0800bfa1 	.word	0x0800bfa1
 800bf14:	0800bfa1 	.word	0x0800bfa1
 800bf18:	0800bfa1 	.word	0x0800bfa1
 800bf1c:	0800bfa1 	.word	0x0800bfa1
 800bf20:	0800bfa1 	.word	0x0800bfa1
 800bf24:	0800bfa1 	.word	0x0800bfa1
 800bf28:	0800bfa1 	.word	0x0800bfa1
 800bf2c:	0800bf89 	.word	0x0800bf89
 800bf30:	0800bfa1 	.word	0x0800bfa1
 800bf34:	0800bfa1 	.word	0x0800bfa1
 800bf38:	0800bfa1 	.word	0x0800bfa1
 800bf3c:	0800bfa1 	.word	0x0800bfa1
 800bf40:	0800bfa1 	.word	0x0800bfa1
 800bf44:	0800bfa1 	.word	0x0800bfa1
 800bf48:	0800bfa1 	.word	0x0800bfa1
 800bf4c:	0800bf91 	.word	0x0800bf91
 800bf50:	0800bfa1 	.word	0x0800bfa1
 800bf54:	0800bfa1 	.word	0x0800bfa1
 800bf58:	0800bfa1 	.word	0x0800bfa1
 800bf5c:	0800bfa1 	.word	0x0800bfa1
 800bf60:	0800bfa1 	.word	0x0800bfa1
 800bf64:	0800bfa1 	.word	0x0800bfa1
 800bf68:	0800bfa1 	.word	0x0800bfa1
 800bf6c:	0800bf99 	.word	0x0800bf99
 800bf70:	2301      	movs	r3, #1
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf76:	e1c0      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bf78:	2304      	movs	r3, #4
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7e:	e1bc      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bf80:	2308      	movs	r3, #8
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf86:	e1b8      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bf88:	2310      	movs	r3, #16
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e1b4      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bf90:	2320      	movs	r3, #32
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e1b0      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bf98:	2340      	movs	r3, #64	; 0x40
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e1ac      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bfa0:	2380      	movs	r3, #128	; 0x80
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e1a8      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a75      	ldr	r2, [pc, #468]	; (800c184 <UART_SetConfig+0x638>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d130      	bne.n	800c014 <UART_SetConfig+0x4c8>
 800bfb2:	4b73      	ldr	r3, [pc, #460]	; (800c180 <UART_SetConfig+0x634>)
 800bfb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb6:	f003 0307 	and.w	r3, r3, #7
 800bfba:	2b05      	cmp	r3, #5
 800bfbc:	d826      	bhi.n	800c00c <UART_SetConfig+0x4c0>
 800bfbe:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <UART_SetConfig+0x478>)
 800bfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc4:	0800bfdd 	.word	0x0800bfdd
 800bfc8:	0800bfe5 	.word	0x0800bfe5
 800bfcc:	0800bfed 	.word	0x0800bfed
 800bfd0:	0800bff5 	.word	0x0800bff5
 800bfd4:	0800bffd 	.word	0x0800bffd
 800bfd8:	0800c005 	.word	0x0800c005
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe2:	e18a      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bfe4:	2304      	movs	r3, #4
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfea:	e186      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bfec:	2308      	movs	r3, #8
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff2:	e182      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bff4:	2310      	movs	r3, #16
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffa:	e17e      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800bffc:	2320      	movs	r3, #32
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e17a      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c004:	2340      	movs	r3, #64	; 0x40
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00a:	e176      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c00c:	2380      	movs	r3, #128	; 0x80
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c012:	e172      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a5b      	ldr	r2, [pc, #364]	; (800c188 <UART_SetConfig+0x63c>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d130      	bne.n	800c080 <UART_SetConfig+0x534>
 800c01e:	4b58      	ldr	r3, [pc, #352]	; (800c180 <UART_SetConfig+0x634>)
 800c020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c022:	f003 0307 	and.w	r3, r3, #7
 800c026:	2b05      	cmp	r3, #5
 800c028:	d826      	bhi.n	800c078 <UART_SetConfig+0x52c>
 800c02a:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <UART_SetConfig+0x4e4>)
 800c02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c030:	0800c049 	.word	0x0800c049
 800c034:	0800c051 	.word	0x0800c051
 800c038:	0800c059 	.word	0x0800c059
 800c03c:	0800c061 	.word	0x0800c061
 800c040:	0800c069 	.word	0x0800c069
 800c044:	0800c071 	.word	0x0800c071
 800c048:	2300      	movs	r3, #0
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04e:	e154      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c050:	2304      	movs	r3, #4
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c056:	e150      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c058:	2308      	movs	r3, #8
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c05e:	e14c      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c060:	2310      	movs	r3, #16
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c066:	e148      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c068:	2320      	movs	r3, #32
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e144      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c070:	2340      	movs	r3, #64	; 0x40
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c076:	e140      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c078:	2380      	movs	r3, #128	; 0x80
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07e:	e13c      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a41      	ldr	r2, [pc, #260]	; (800c18c <UART_SetConfig+0x640>)
 800c086:	4293      	cmp	r3, r2
 800c088:	f040 8082 	bne.w	800c190 <UART_SetConfig+0x644>
 800c08c:	4b3c      	ldr	r3, [pc, #240]	; (800c180 <UART_SetConfig+0x634>)
 800c08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c094:	2b28      	cmp	r3, #40	; 0x28
 800c096:	d86d      	bhi.n	800c174 <UART_SetConfig+0x628>
 800c098:	a201      	add	r2, pc, #4	; (adr r2, 800c0a0 <UART_SetConfig+0x554>)
 800c09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c09e:	bf00      	nop
 800c0a0:	0800c145 	.word	0x0800c145
 800c0a4:	0800c175 	.word	0x0800c175
 800c0a8:	0800c175 	.word	0x0800c175
 800c0ac:	0800c175 	.word	0x0800c175
 800c0b0:	0800c175 	.word	0x0800c175
 800c0b4:	0800c175 	.word	0x0800c175
 800c0b8:	0800c175 	.word	0x0800c175
 800c0bc:	0800c175 	.word	0x0800c175
 800c0c0:	0800c14d 	.word	0x0800c14d
 800c0c4:	0800c175 	.word	0x0800c175
 800c0c8:	0800c175 	.word	0x0800c175
 800c0cc:	0800c175 	.word	0x0800c175
 800c0d0:	0800c175 	.word	0x0800c175
 800c0d4:	0800c175 	.word	0x0800c175
 800c0d8:	0800c175 	.word	0x0800c175
 800c0dc:	0800c175 	.word	0x0800c175
 800c0e0:	0800c155 	.word	0x0800c155
 800c0e4:	0800c175 	.word	0x0800c175
 800c0e8:	0800c175 	.word	0x0800c175
 800c0ec:	0800c175 	.word	0x0800c175
 800c0f0:	0800c175 	.word	0x0800c175
 800c0f4:	0800c175 	.word	0x0800c175
 800c0f8:	0800c175 	.word	0x0800c175
 800c0fc:	0800c175 	.word	0x0800c175
 800c100:	0800c15d 	.word	0x0800c15d
 800c104:	0800c175 	.word	0x0800c175
 800c108:	0800c175 	.word	0x0800c175
 800c10c:	0800c175 	.word	0x0800c175
 800c110:	0800c175 	.word	0x0800c175
 800c114:	0800c175 	.word	0x0800c175
 800c118:	0800c175 	.word	0x0800c175
 800c11c:	0800c175 	.word	0x0800c175
 800c120:	0800c165 	.word	0x0800c165
 800c124:	0800c175 	.word	0x0800c175
 800c128:	0800c175 	.word	0x0800c175
 800c12c:	0800c175 	.word	0x0800c175
 800c130:	0800c175 	.word	0x0800c175
 800c134:	0800c175 	.word	0x0800c175
 800c138:	0800c175 	.word	0x0800c175
 800c13c:	0800c175 	.word	0x0800c175
 800c140:	0800c16d 	.word	0x0800c16d
 800c144:	2301      	movs	r3, #1
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e0d6      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c14c:	2304      	movs	r3, #4
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e0d2      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c154:	2308      	movs	r3, #8
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e0ce      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c15c:	2310      	movs	r3, #16
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c162:	e0ca      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c164:	2320      	movs	r3, #32
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e0c6      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c16c:	2340      	movs	r3, #64	; 0x40
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c172:	e0c2      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c174:	2380      	movs	r3, #128	; 0x80
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17a:	e0be      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c17c:	40011400 	.word	0x40011400
 800c180:	58024400 	.word	0x58024400
 800c184:	40007800 	.word	0x40007800
 800c188:	40007c00 	.word	0x40007c00
 800c18c:	40011800 	.word	0x40011800
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4aad      	ldr	r2, [pc, #692]	; (800c44c <UART_SetConfig+0x900>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d176      	bne.n	800c288 <UART_SetConfig+0x73c>
 800c19a:	4bad      	ldr	r3, [pc, #692]	; (800c450 <UART_SetConfig+0x904>)
 800c19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c19e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1a2:	2b28      	cmp	r3, #40	; 0x28
 800c1a4:	d86c      	bhi.n	800c280 <UART_SetConfig+0x734>
 800c1a6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ac <UART_SetConfig+0x660>)
 800c1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ac:	0800c251 	.word	0x0800c251
 800c1b0:	0800c281 	.word	0x0800c281
 800c1b4:	0800c281 	.word	0x0800c281
 800c1b8:	0800c281 	.word	0x0800c281
 800c1bc:	0800c281 	.word	0x0800c281
 800c1c0:	0800c281 	.word	0x0800c281
 800c1c4:	0800c281 	.word	0x0800c281
 800c1c8:	0800c281 	.word	0x0800c281
 800c1cc:	0800c259 	.word	0x0800c259
 800c1d0:	0800c281 	.word	0x0800c281
 800c1d4:	0800c281 	.word	0x0800c281
 800c1d8:	0800c281 	.word	0x0800c281
 800c1dc:	0800c281 	.word	0x0800c281
 800c1e0:	0800c281 	.word	0x0800c281
 800c1e4:	0800c281 	.word	0x0800c281
 800c1e8:	0800c281 	.word	0x0800c281
 800c1ec:	0800c261 	.word	0x0800c261
 800c1f0:	0800c281 	.word	0x0800c281
 800c1f4:	0800c281 	.word	0x0800c281
 800c1f8:	0800c281 	.word	0x0800c281
 800c1fc:	0800c281 	.word	0x0800c281
 800c200:	0800c281 	.word	0x0800c281
 800c204:	0800c281 	.word	0x0800c281
 800c208:	0800c281 	.word	0x0800c281
 800c20c:	0800c269 	.word	0x0800c269
 800c210:	0800c281 	.word	0x0800c281
 800c214:	0800c281 	.word	0x0800c281
 800c218:	0800c281 	.word	0x0800c281
 800c21c:	0800c281 	.word	0x0800c281
 800c220:	0800c281 	.word	0x0800c281
 800c224:	0800c281 	.word	0x0800c281
 800c228:	0800c281 	.word	0x0800c281
 800c22c:	0800c271 	.word	0x0800c271
 800c230:	0800c281 	.word	0x0800c281
 800c234:	0800c281 	.word	0x0800c281
 800c238:	0800c281 	.word	0x0800c281
 800c23c:	0800c281 	.word	0x0800c281
 800c240:	0800c281 	.word	0x0800c281
 800c244:	0800c281 	.word	0x0800c281
 800c248:	0800c281 	.word	0x0800c281
 800c24c:	0800c279 	.word	0x0800c279
 800c250:	2301      	movs	r3, #1
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e050      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c258:	2304      	movs	r3, #4
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e04c      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c260:	2308      	movs	r3, #8
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e048      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c268:	2310      	movs	r3, #16
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e044      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c270:	2320      	movs	r3, #32
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e040      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c278:	2340      	movs	r3, #64	; 0x40
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e03c      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c280:	2380      	movs	r3, #128	; 0x80
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e038      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a71      	ldr	r2, [pc, #452]	; (800c454 <UART_SetConfig+0x908>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d130      	bne.n	800c2f4 <UART_SetConfig+0x7a8>
 800c292:	4b6f      	ldr	r3, [pc, #444]	; (800c450 <UART_SetConfig+0x904>)
 800c294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	2b05      	cmp	r3, #5
 800c29c:	d826      	bhi.n	800c2ec <UART_SetConfig+0x7a0>
 800c29e:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <UART_SetConfig+0x758>)
 800c2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a4:	0800c2bd 	.word	0x0800c2bd
 800c2a8:	0800c2c5 	.word	0x0800c2c5
 800c2ac:	0800c2cd 	.word	0x0800c2cd
 800c2b0:	0800c2d5 	.word	0x0800c2d5
 800c2b4:	0800c2dd 	.word	0x0800c2dd
 800c2b8:	0800c2e5 	.word	0x0800c2e5
 800c2bc:	2302      	movs	r3, #2
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e01a      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c2c4:	2304      	movs	r3, #4
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e016      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c2cc:	2308      	movs	r3, #8
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e012      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c2d4:	2310      	movs	r3, #16
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e00e      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c2dc:	2320      	movs	r3, #32
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e00a      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c2e4:	2340      	movs	r3, #64	; 0x40
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e006      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c2ec:	2380      	movs	r3, #128	; 0x80
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f2:	e002      	b.n	800c2fa <UART_SetConfig+0x7ae>
 800c2f4:	2380      	movs	r3, #128	; 0x80
 800c2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a55      	ldr	r2, [pc, #340]	; (800c454 <UART_SetConfig+0x908>)
 800c300:	4293      	cmp	r3, r2
 800c302:	f040 80f8 	bne.w	800c4f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c306:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c30a:	2b20      	cmp	r3, #32
 800c30c:	dc46      	bgt.n	800c39c <UART_SetConfig+0x850>
 800c30e:	2b02      	cmp	r3, #2
 800c310:	db75      	blt.n	800c3fe <UART_SetConfig+0x8b2>
 800c312:	3b02      	subs	r3, #2
 800c314:	2b1e      	cmp	r3, #30
 800c316:	d872      	bhi.n	800c3fe <UART_SetConfig+0x8b2>
 800c318:	a201      	add	r2, pc, #4	; (adr r2, 800c320 <UART_SetConfig+0x7d4>)
 800c31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31e:	bf00      	nop
 800c320:	0800c3a3 	.word	0x0800c3a3
 800c324:	0800c3ff 	.word	0x0800c3ff
 800c328:	0800c3ab 	.word	0x0800c3ab
 800c32c:	0800c3ff 	.word	0x0800c3ff
 800c330:	0800c3ff 	.word	0x0800c3ff
 800c334:	0800c3ff 	.word	0x0800c3ff
 800c338:	0800c3bb 	.word	0x0800c3bb
 800c33c:	0800c3ff 	.word	0x0800c3ff
 800c340:	0800c3ff 	.word	0x0800c3ff
 800c344:	0800c3ff 	.word	0x0800c3ff
 800c348:	0800c3ff 	.word	0x0800c3ff
 800c34c:	0800c3ff 	.word	0x0800c3ff
 800c350:	0800c3ff 	.word	0x0800c3ff
 800c354:	0800c3ff 	.word	0x0800c3ff
 800c358:	0800c3cb 	.word	0x0800c3cb
 800c35c:	0800c3ff 	.word	0x0800c3ff
 800c360:	0800c3ff 	.word	0x0800c3ff
 800c364:	0800c3ff 	.word	0x0800c3ff
 800c368:	0800c3ff 	.word	0x0800c3ff
 800c36c:	0800c3ff 	.word	0x0800c3ff
 800c370:	0800c3ff 	.word	0x0800c3ff
 800c374:	0800c3ff 	.word	0x0800c3ff
 800c378:	0800c3ff 	.word	0x0800c3ff
 800c37c:	0800c3ff 	.word	0x0800c3ff
 800c380:	0800c3ff 	.word	0x0800c3ff
 800c384:	0800c3ff 	.word	0x0800c3ff
 800c388:	0800c3ff 	.word	0x0800c3ff
 800c38c:	0800c3ff 	.word	0x0800c3ff
 800c390:	0800c3ff 	.word	0x0800c3ff
 800c394:	0800c3ff 	.word	0x0800c3ff
 800c398:	0800c3f1 	.word	0x0800c3f1
 800c39c:	2b40      	cmp	r3, #64	; 0x40
 800c39e:	d02a      	beq.n	800c3f6 <UART_SetConfig+0x8aa>
 800c3a0:	e02d      	b.n	800c3fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c3a2:	f7fe f861 	bl	800a468 <HAL_RCCEx_GetD3PCLK1Freq>
 800c3a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3a8:	e02f      	b.n	800c40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe f870 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b8:	e027      	b.n	800c40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ba:	f107 0318 	add.w	r3, r7, #24
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe f9bc 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c8:	e01f      	b.n	800c40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3ca:	4b21      	ldr	r3, [pc, #132]	; (800c450 <UART_SetConfig+0x904>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 0320 	and.w	r3, r3, #32
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d009      	beq.n	800c3ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3d6:	4b1e      	ldr	r3, [pc, #120]	; (800c450 <UART_SetConfig+0x904>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	08db      	lsrs	r3, r3, #3
 800c3dc:	f003 0303 	and.w	r3, r3, #3
 800c3e0:	4a1d      	ldr	r2, [pc, #116]	; (800c458 <UART_SetConfig+0x90c>)
 800c3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3e8:	e00f      	b.n	800c40a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c3ea:	4b1b      	ldr	r3, [pc, #108]	; (800c458 <UART_SetConfig+0x90c>)
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ee:	e00c      	b.n	800c40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3f0:	4b1a      	ldr	r3, [pc, #104]	; (800c45c <UART_SetConfig+0x910>)
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f4:	e009      	b.n	800c40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3fc:	e005      	b.n	800c40a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c3fe:	2300      	movs	r3, #0
 800c400:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 81ee 	beq.w	800c7ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c416:	4a12      	ldr	r2, [pc, #72]	; (800c460 <UART_SetConfig+0x914>)
 800c418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c41c:	461a      	mov	r2, r3
 800c41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c420:	fbb3 f3f2 	udiv	r3, r3, r2
 800c424:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	4613      	mov	r3, r2
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	4413      	add	r3, r2
 800c430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c432:	429a      	cmp	r2, r3
 800c434:	d305      	bcc.n	800c442 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43e:	429a      	cmp	r2, r3
 800c440:	d910      	bls.n	800c464 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c448:	e1d1      	b.n	800c7ee <UART_SetConfig+0xca2>
 800c44a:	bf00      	nop
 800c44c:	40011c00 	.word	0x40011c00
 800c450:	58024400 	.word	0x58024400
 800c454:	58000c00 	.word	0x58000c00
 800c458:	03d09000 	.word	0x03d09000
 800c45c:	003d0900 	.word	0x003d0900
 800c460:	0800dc3c 	.word	0x0800dc3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c466:	2200      	movs	r2, #0
 800c468:	60bb      	str	r3, [r7, #8]
 800c46a:	60fa      	str	r2, [r7, #12]
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	4ac0      	ldr	r2, [pc, #768]	; (800c774 <UART_SetConfig+0xc28>)
 800c472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c476:	b29b      	uxth	r3, r3
 800c478:	2200      	movs	r2, #0
 800c47a:	603b      	str	r3, [r7, #0]
 800c47c:	607a      	str	r2, [r7, #4]
 800c47e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c486:	f7f3 ff93 	bl	80003b0 <__aeabi_uldivmod>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4610      	mov	r0, r2
 800c490:	4619      	mov	r1, r3
 800c492:	f04f 0200 	mov.w	r2, #0
 800c496:	f04f 0300 	mov.w	r3, #0
 800c49a:	020b      	lsls	r3, r1, #8
 800c49c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4a0:	0202      	lsls	r2, r0, #8
 800c4a2:	6979      	ldr	r1, [r7, #20]
 800c4a4:	6849      	ldr	r1, [r1, #4]
 800c4a6:	0849      	lsrs	r1, r1, #1
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	eb12 0804 	adds.w	r8, r2, r4
 800c4b2:	eb43 0905 	adc.w	r9, r3, r5
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	469a      	mov	sl, r3
 800c4be:	4693      	mov	fp, r2
 800c4c0:	4652      	mov	r2, sl
 800c4c2:	465b      	mov	r3, fp
 800c4c4:	4640      	mov	r0, r8
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	f7f3 ff72 	bl	80003b0 <__aeabi_uldivmod>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4da:	d308      	bcc.n	800c4ee <UART_SetConfig+0x9a2>
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4e2:	d204      	bcs.n	800c4ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4ea:	60da      	str	r2, [r3, #12]
 800c4ec:	e17f      	b.n	800c7ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c4f4:	e17b      	b.n	800c7ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	69db      	ldr	r3, [r3, #28]
 800c4fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4fe:	f040 80bd 	bne.w	800c67c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c502:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c506:	2b20      	cmp	r3, #32
 800c508:	dc48      	bgt.n	800c59c <UART_SetConfig+0xa50>
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	db7b      	blt.n	800c606 <UART_SetConfig+0xaba>
 800c50e:	2b20      	cmp	r3, #32
 800c510:	d879      	bhi.n	800c606 <UART_SetConfig+0xaba>
 800c512:	a201      	add	r2, pc, #4	; (adr r2, 800c518 <UART_SetConfig+0x9cc>)
 800c514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c518:	0800c5a3 	.word	0x0800c5a3
 800c51c:	0800c5ab 	.word	0x0800c5ab
 800c520:	0800c607 	.word	0x0800c607
 800c524:	0800c607 	.word	0x0800c607
 800c528:	0800c5b3 	.word	0x0800c5b3
 800c52c:	0800c607 	.word	0x0800c607
 800c530:	0800c607 	.word	0x0800c607
 800c534:	0800c607 	.word	0x0800c607
 800c538:	0800c5c3 	.word	0x0800c5c3
 800c53c:	0800c607 	.word	0x0800c607
 800c540:	0800c607 	.word	0x0800c607
 800c544:	0800c607 	.word	0x0800c607
 800c548:	0800c607 	.word	0x0800c607
 800c54c:	0800c607 	.word	0x0800c607
 800c550:	0800c607 	.word	0x0800c607
 800c554:	0800c607 	.word	0x0800c607
 800c558:	0800c5d3 	.word	0x0800c5d3
 800c55c:	0800c607 	.word	0x0800c607
 800c560:	0800c607 	.word	0x0800c607
 800c564:	0800c607 	.word	0x0800c607
 800c568:	0800c607 	.word	0x0800c607
 800c56c:	0800c607 	.word	0x0800c607
 800c570:	0800c607 	.word	0x0800c607
 800c574:	0800c607 	.word	0x0800c607
 800c578:	0800c607 	.word	0x0800c607
 800c57c:	0800c607 	.word	0x0800c607
 800c580:	0800c607 	.word	0x0800c607
 800c584:	0800c607 	.word	0x0800c607
 800c588:	0800c607 	.word	0x0800c607
 800c58c:	0800c607 	.word	0x0800c607
 800c590:	0800c607 	.word	0x0800c607
 800c594:	0800c607 	.word	0x0800c607
 800c598:	0800c5f9 	.word	0x0800c5f9
 800c59c:	2b40      	cmp	r3, #64	; 0x40
 800c59e:	d02e      	beq.n	800c5fe <UART_SetConfig+0xab2>
 800c5a0:	e031      	b.n	800c606 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5a2:	f7fc f8c3 	bl	800872c <HAL_RCC_GetPCLK1Freq>
 800c5a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5a8:	e033      	b.n	800c612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5aa:	f7fc f8d5 	bl	8008758 <HAL_RCC_GetPCLK2Freq>
 800c5ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5b0:	e02f      	b.n	800c612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd ff6c 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c0:	e027      	b.n	800c612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5c2:	f107 0318 	add.w	r3, r7, #24
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fe f8b8 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d0:	e01f      	b.n	800c612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5d2:	4b69      	ldr	r3, [pc, #420]	; (800c778 <UART_SetConfig+0xc2c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 0320 	and.w	r3, r3, #32
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d009      	beq.n	800c5f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5de:	4b66      	ldr	r3, [pc, #408]	; (800c778 <UART_SetConfig+0xc2c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	08db      	lsrs	r3, r3, #3
 800c5e4:	f003 0303 	and.w	r3, r3, #3
 800c5e8:	4a64      	ldr	r2, [pc, #400]	; (800c77c <UART_SetConfig+0xc30>)
 800c5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5f0:	e00f      	b.n	800c612 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c5f2:	4b62      	ldr	r3, [pc, #392]	; (800c77c <UART_SetConfig+0xc30>)
 800c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f6:	e00c      	b.n	800c612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5f8:	4b61      	ldr	r3, [pc, #388]	; (800c780 <UART_SetConfig+0xc34>)
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fc:	e009      	b.n	800c612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c604:	e005      	b.n	800c612 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c606:	2300      	movs	r3, #0
 800c608:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c614:	2b00      	cmp	r3, #0
 800c616:	f000 80ea 	beq.w	800c7ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61e:	4a55      	ldr	r2, [pc, #340]	; (800c774 <UART_SetConfig+0xc28>)
 800c620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c624:	461a      	mov	r2, r3
 800c626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c628:	fbb3 f3f2 	udiv	r3, r3, r2
 800c62c:	005a      	lsls	r2, r3, #1
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	085b      	lsrs	r3, r3, #1
 800c634:	441a      	add	r2, r3
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c63e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	2b0f      	cmp	r3, #15
 800c644:	d916      	bls.n	800c674 <UART_SetConfig+0xb28>
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c64c:	d212      	bcs.n	800c674 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	b29b      	uxth	r3, r3
 800c652:	f023 030f 	bic.w	r3, r3, #15
 800c656:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	085b      	lsrs	r3, r3, #1
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	f003 0307 	and.w	r3, r3, #7
 800c662:	b29a      	uxth	r2, r3
 800c664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c666:	4313      	orrs	r3, r2
 800c668:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c670:	60da      	str	r2, [r3, #12]
 800c672:	e0bc      	b.n	800c7ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c67a:	e0b8      	b.n	800c7ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c67c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c680:	2b20      	cmp	r3, #32
 800c682:	dc4b      	bgt.n	800c71c <UART_SetConfig+0xbd0>
 800c684:	2b00      	cmp	r3, #0
 800c686:	f2c0 8087 	blt.w	800c798 <UART_SetConfig+0xc4c>
 800c68a:	2b20      	cmp	r3, #32
 800c68c:	f200 8084 	bhi.w	800c798 <UART_SetConfig+0xc4c>
 800c690:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <UART_SetConfig+0xb4c>)
 800c692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c696:	bf00      	nop
 800c698:	0800c723 	.word	0x0800c723
 800c69c:	0800c72b 	.word	0x0800c72b
 800c6a0:	0800c799 	.word	0x0800c799
 800c6a4:	0800c799 	.word	0x0800c799
 800c6a8:	0800c733 	.word	0x0800c733
 800c6ac:	0800c799 	.word	0x0800c799
 800c6b0:	0800c799 	.word	0x0800c799
 800c6b4:	0800c799 	.word	0x0800c799
 800c6b8:	0800c743 	.word	0x0800c743
 800c6bc:	0800c799 	.word	0x0800c799
 800c6c0:	0800c799 	.word	0x0800c799
 800c6c4:	0800c799 	.word	0x0800c799
 800c6c8:	0800c799 	.word	0x0800c799
 800c6cc:	0800c799 	.word	0x0800c799
 800c6d0:	0800c799 	.word	0x0800c799
 800c6d4:	0800c799 	.word	0x0800c799
 800c6d8:	0800c753 	.word	0x0800c753
 800c6dc:	0800c799 	.word	0x0800c799
 800c6e0:	0800c799 	.word	0x0800c799
 800c6e4:	0800c799 	.word	0x0800c799
 800c6e8:	0800c799 	.word	0x0800c799
 800c6ec:	0800c799 	.word	0x0800c799
 800c6f0:	0800c799 	.word	0x0800c799
 800c6f4:	0800c799 	.word	0x0800c799
 800c6f8:	0800c799 	.word	0x0800c799
 800c6fc:	0800c799 	.word	0x0800c799
 800c700:	0800c799 	.word	0x0800c799
 800c704:	0800c799 	.word	0x0800c799
 800c708:	0800c799 	.word	0x0800c799
 800c70c:	0800c799 	.word	0x0800c799
 800c710:	0800c799 	.word	0x0800c799
 800c714:	0800c799 	.word	0x0800c799
 800c718:	0800c78b 	.word	0x0800c78b
 800c71c:	2b40      	cmp	r3, #64	; 0x40
 800c71e:	d037      	beq.n	800c790 <UART_SetConfig+0xc44>
 800c720:	e03a      	b.n	800c798 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c722:	f7fc f803 	bl	800872c <HAL_RCC_GetPCLK1Freq>
 800c726:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c728:	e03c      	b.n	800c7a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c72a:	f7fc f815 	bl	8008758 <HAL_RCC_GetPCLK2Freq>
 800c72e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c730:	e038      	b.n	800c7a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c736:	4618      	mov	r0, r3
 800c738:	f7fd feac 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c740:	e030      	b.n	800c7a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c742:	f107 0318 	add.w	r3, r7, #24
 800c746:	4618      	mov	r0, r3
 800c748:	f7fd fff8 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c750:	e028      	b.n	800c7a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c752:	4b09      	ldr	r3, [pc, #36]	; (800c778 <UART_SetConfig+0xc2c>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 0320 	and.w	r3, r3, #32
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d012      	beq.n	800c784 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c75e:	4b06      	ldr	r3, [pc, #24]	; (800c778 <UART_SetConfig+0xc2c>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	08db      	lsrs	r3, r3, #3
 800c764:	f003 0303 	and.w	r3, r3, #3
 800c768:	4a04      	ldr	r2, [pc, #16]	; (800c77c <UART_SetConfig+0xc30>)
 800c76a:	fa22 f303 	lsr.w	r3, r2, r3
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c770:	e018      	b.n	800c7a4 <UART_SetConfig+0xc58>
 800c772:	bf00      	nop
 800c774:	0800dc3c 	.word	0x0800dc3c
 800c778:	58024400 	.word	0x58024400
 800c77c:	03d09000 	.word	0x03d09000
 800c780:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c784:	4b24      	ldr	r3, [pc, #144]	; (800c818 <UART_SetConfig+0xccc>)
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c788:	e00c      	b.n	800c7a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c78a:	4b24      	ldr	r3, [pc, #144]	; (800c81c <UART_SetConfig+0xcd0>)
 800c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c78e:	e009      	b.n	800c7a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c796:	e005      	b.n	800c7a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c798:	2300      	movs	r3, #0
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c7a2:	bf00      	nop
    }

    if (pclk != 0U)
 800c7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d021      	beq.n	800c7ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ae:	4a1c      	ldr	r2, [pc, #112]	; (800c820 <UART_SetConfig+0xcd4>)
 800c7b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	085b      	lsrs	r3, r3, #1
 800c7c2:	441a      	add	r2, r3
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	2b0f      	cmp	r3, #15
 800c7d2:	d909      	bls.n	800c7e8 <UART_SetConfig+0xc9c>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7da:	d205      	bcs.n	800c7e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	60da      	str	r2, [r3, #12]
 800c7e6:	e002      	b.n	800c7ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2200      	movs	r2, #0
 800c802:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	2200      	movs	r2, #0
 800c808:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c80a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3748      	adds	r7, #72	; 0x48
 800c812:	46bd      	mov	sp, r7
 800c814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c818:	03d09000 	.word	0x03d09000
 800c81c:	003d0900 	.word	0x003d0900
 800c820:	0800dc3c 	.word	0x0800dc3c

0800c824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00a      	beq.n	800c84e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	430a      	orrs	r2, r1
 800c84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c852:	f003 0302 	and.w	r3, r3, #2
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00a      	beq.n	800c870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	430a      	orrs	r2, r1
 800c86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c874:	f003 0304 	and.w	r3, r3, #4
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00a      	beq.n	800c892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	430a      	orrs	r2, r1
 800c890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c896:	f003 0308 	and.w	r3, r3, #8
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00a      	beq.n	800c8b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00a      	beq.n	800c8d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8da:	f003 0320 	and.w	r3, r3, #32
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01a      	beq.n	800c93a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	430a      	orrs	r2, r1
 800c918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c922:	d10a      	bne.n	800c93a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	430a      	orrs	r2, r1
 800c938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00a      	beq.n	800c95c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	430a      	orrs	r2, r1
 800c95a:	605a      	str	r2, [r3, #4]
  }
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b098      	sub	sp, #96	; 0x60
 800c96c:	af02      	add	r7, sp, #8
 800c96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c978:	f7f5 fb9e 	bl	80020b8 <HAL_GetTick>
 800c97c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 0308 	and.w	r3, r3, #8
 800c988:	2b08      	cmp	r3, #8
 800c98a:	d12f      	bne.n	800c9ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c98c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c994:	2200      	movs	r2, #0
 800c996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f88e 	bl	800cabc <UART_WaitOnFlagUntilTimeout>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d022      	beq.n	800c9ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	e853 3f00 	ldrex	r3, [r3]
 800c9b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9ba:	653b      	str	r3, [r7, #80]	; 0x50
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9c4:	647b      	str	r3, [r7, #68]	; 0x44
 800c9c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9cc:	e841 2300 	strex	r3, r2, [r1]
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1e6      	bne.n	800c9a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2220      	movs	r2, #32
 800c9dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	e063      	b.n	800cab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f003 0304 	and.w	r3, r3, #4
 800c9f6:	2b04      	cmp	r3, #4
 800c9f8:	d149      	bne.n	800ca8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca02:	2200      	movs	r2, #0
 800ca04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 f857 	bl	800cabc <UART_WaitOnFlagUntilTimeout>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d03c      	beq.n	800ca8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	e853 3f00 	ldrex	r3, [r3]
 800ca20:	623b      	str	r3, [r7, #32]
   return(result);
 800ca22:	6a3b      	ldr	r3, [r7, #32]
 800ca24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca32:	633b      	str	r3, [r7, #48]	; 0x30
 800ca34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca3a:	e841 2300 	strex	r3, r2, [r1]
 800ca3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1e6      	bne.n	800ca14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	e853 3f00 	ldrex	r3, [r3]
 800ca54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f023 0301 	bic.w	r3, r3, #1
 800ca5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3308      	adds	r3, #8
 800ca64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca66:	61fa      	str	r2, [r7, #28]
 800ca68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6a:	69b9      	ldr	r1, [r7, #24]
 800ca6c:	69fa      	ldr	r2, [r7, #28]
 800ca6e:	e841 2300 	strex	r3, r2, [r1]
 800ca72:	617b      	str	r3, [r7, #20]
   return(result);
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e5      	bne.n	800ca46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2220      	movs	r2, #32
 800ca7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e012      	b.n	800cab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2220      	movs	r2, #32
 800ca92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2220      	movs	r2, #32
 800ca9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3758      	adds	r7, #88	; 0x58
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	4613      	mov	r3, r2
 800caca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cacc:	e049      	b.n	800cb62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad4:	d045      	beq.n	800cb62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cad6:	f7f5 faef 	bl	80020b8 <HAL_GetTick>
 800cada:	4602      	mov	r2, r0
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	69ba      	ldr	r2, [r7, #24]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d302      	bcc.n	800caec <UART_WaitOnFlagUntilTimeout+0x30>
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d101      	bne.n	800caf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	e048      	b.n	800cb82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0304 	and.w	r3, r3, #4
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d031      	beq.n	800cb62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	f003 0308 	and.w	r3, r3, #8
 800cb08:	2b08      	cmp	r3, #8
 800cb0a:	d110      	bne.n	800cb2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2208      	movs	r2, #8
 800cb12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f000 f839 	bl	800cb8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2208      	movs	r2, #8
 800cb1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e029      	b.n	800cb82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	69db      	ldr	r3, [r3, #28]
 800cb34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb3c:	d111      	bne.n	800cb62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 f81f 	bl	800cb8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2220      	movs	r2, #32
 800cb52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cb5e:	2303      	movs	r3, #3
 800cb60:	e00f      	b.n	800cb82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	69da      	ldr	r2, [r3, #28]
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	bf0c      	ite	eq
 800cb72:	2301      	moveq	r3, #1
 800cb74:	2300      	movne	r3, #0
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	461a      	mov	r2, r3
 800cb7a:	79fb      	ldrb	r3, [r7, #7]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d0a6      	beq.n	800cace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
	...

0800cb8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b095      	sub	sp, #84	; 0x54
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9c:	e853 3f00 	ldrex	r3, [r3]
 800cba0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb2:	643b      	str	r3, [r7, #64]	; 0x40
 800cbb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbba:	e841 2300 	strex	r3, r2, [r1]
 800cbbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1e6      	bne.n	800cb94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3308      	adds	r3, #8
 800cbcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbce:	6a3b      	ldr	r3, [r7, #32]
 800cbd0:	e853 3f00 	ldrex	r3, [r3]
 800cbd4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbd6:	69fa      	ldr	r2, [r7, #28]
 800cbd8:	4b1e      	ldr	r3, [pc, #120]	; (800cc54 <UART_EndRxTransfer+0xc8>)
 800cbda:	4013      	ands	r3, r2
 800cbdc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cbe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbee:	e841 2300 	strex	r3, r2, [r1]
 800cbf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1e5      	bne.n	800cbc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d118      	bne.n	800cc34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	e853 3f00 	ldrex	r3, [r3]
 800cc0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	f023 0310 	bic.w	r3, r3, #16
 800cc16:	647b      	str	r3, [r7, #68]	; 0x44
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc20:	61bb      	str	r3, [r7, #24]
 800cc22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc24:	6979      	ldr	r1, [r7, #20]
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	e841 2300 	strex	r3, r2, [r1]
 800cc2c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e6      	bne.n	800cc02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2220      	movs	r2, #32
 800cc38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cc48:	bf00      	nop
 800cc4a:	3754      	adds	r7, #84	; 0x54
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr
 800cc54:	effffffe 	.word	0xeffffffe

0800cc58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7fe ff52 	bl	800bb20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc7c:	bf00      	nop
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b08f      	sub	sp, #60	; 0x3c
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc92:	2b21      	cmp	r3, #33	; 0x21
 800cc94:	d14c      	bne.n	800cd30 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d132      	bne.n	800cd08 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca8:	6a3b      	ldr	r3, [r7, #32]
 800ccaa:	e853 3f00 	ldrex	r3, [r3]
 800ccae:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccc8:	e841 2300 	strex	r3, r2, [r1]
 800cccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1e6      	bne.n	800cca2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	e853 3f00 	ldrex	r3, [r3]
 800cce0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce8:	633b      	str	r3, [r7, #48]	; 0x30
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf2:	61bb      	str	r3, [r7, #24]
 800ccf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf6:	6979      	ldr	r1, [r7, #20]
 800ccf8:	69ba      	ldr	r2, [r7, #24]
 800ccfa:	e841 2300 	strex	r3, r2, [r1]
 800ccfe:	613b      	str	r3, [r7, #16]
   return(result);
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1e6      	bne.n	800ccd4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cd06:	e013      	b.n	800cd30 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd0c:	781a      	ldrb	r2, [r3, #0]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	3b01      	subs	r3, #1
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800cd30:	bf00      	nop
 800cd32:	373c      	adds	r7, #60	; 0x3c
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b091      	sub	sp, #68	; 0x44
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd4a:	2b21      	cmp	r3, #33	; 0x21
 800cd4c:	d151      	bne.n	800cdf2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d132      	bne.n	800cdc0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd62:	e853 3f00 	ldrex	r3, [r3]
 800cd66:	623b      	str	r3, [r7, #32]
   return(result);
 800cd68:	6a3b      	ldr	r3, [r7, #32]
 800cd6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	461a      	mov	r2, r3
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	633b      	str	r3, [r7, #48]	; 0x30
 800cd7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd80:	e841 2300 	strex	r3, r2, [r1]
 800cd84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1e6      	bne.n	800cd5a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	e853 3f00 	ldrex	r3, [r3]
 800cd98:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cda0:	637b      	str	r3, [r7, #52]	; 0x34
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdaa:	61fb      	str	r3, [r7, #28]
 800cdac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdae:	69b9      	ldr	r1, [r7, #24]
 800cdb0:	69fa      	ldr	r2, [r7, #28]
 800cdb2:	e841 2300 	strex	r3, r2, [r1]
 800cdb6:	617b      	str	r3, [r7, #20]
   return(result);
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1e6      	bne.n	800cd8c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cdbe:	e018      	b.n	800cdf2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc8:	881b      	ldrh	r3, [r3, #0]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cdd4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdda:	1c9a      	adds	r2, r3, #2
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	3b01      	subs	r3, #1
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800cdf2:	bf00      	nop
 800cdf4:	3744      	adds	r7, #68	; 0x44
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cdfe:	b480      	push	{r7}
 800ce00:	b091      	sub	sp, #68	; 0x44
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce0c:	2b21      	cmp	r3, #33	; 0x21
 800ce0e:	d160      	bne.n	800ced2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce16:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ce18:	e057      	b.n	800ceca <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d133      	bne.n	800ce8e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	e853 3f00 	ldrex	r3, [r3]
 800ce34:	623b      	str	r3, [r7, #32]
   return(result);
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ce3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	3308      	adds	r3, #8
 800ce44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce46:	633a      	str	r2, [r7, #48]	; 0x30
 800ce48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce4e:	e841 2300 	strex	r3, r2, [r1]
 800ce52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1e5      	bne.n	800ce26 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	e853 3f00 	ldrex	r3, [r3]
 800ce66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	461a      	mov	r2, r3
 800ce76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce78:	61fb      	str	r3, [r7, #28]
 800ce7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7c:	69b9      	ldr	r1, [r7, #24]
 800ce7e:	69fa      	ldr	r2, [r7, #28]
 800ce80:	e841 2300 	strex	r3, r2, [r1]
 800ce84:	617b      	str	r3, [r7, #20]
   return(result);
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1e6      	bne.n	800ce5a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ce8c:	e021      	b.n	800ced2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	69db      	ldr	r3, [r3, #28]
 800ce94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d013      	beq.n	800cec4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cea0:	781a      	ldrb	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceac:	1c5a      	adds	r2, r3, #1
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	3b01      	subs	r3, #1
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cec4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cec6:	3b01      	subs	r3, #1
 800cec8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ceca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1a4      	bne.n	800ce1a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ced0:	e7ff      	b.n	800ced2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ced2:	bf00      	nop
 800ced4:	3744      	adds	r7, #68	; 0x44
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr

0800cede <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cede:	b480      	push	{r7}
 800cee0:	b091      	sub	sp, #68	; 0x44
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceec:	2b21      	cmp	r3, #33	; 0x21
 800ceee:	d165      	bne.n	800cfbc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cef6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cef8:	e05c      	b.n	800cfb4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d133      	bne.n	800cf6e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	3308      	adds	r3, #8
 800cf0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	e853 3f00 	ldrex	r3, [r3]
 800cf14:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf1c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	3308      	adds	r3, #8
 800cf24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf26:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2e:	e841 2300 	strex	r3, r2, [r1]
 800cf32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1e5      	bne.n	800cf06 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	e853 3f00 	ldrex	r3, [r3]
 800cf46:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf4e:	633b      	str	r3, [r7, #48]	; 0x30
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf58:	61bb      	str	r3, [r7, #24]
 800cf5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf5c:	6979      	ldr	r1, [r7, #20]
 800cf5e:	69ba      	ldr	r2, [r7, #24]
 800cf60:	e841 2300 	strex	r3, r2, [r1]
 800cf64:	613b      	str	r3, [r7, #16]
   return(result);
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1e6      	bne.n	800cf3a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cf6c:	e026      	b.n	800cfbc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	69db      	ldr	r3, [r3, #28]
 800cf74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d018      	beq.n	800cfae <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf80:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf90:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf96:	1c9a      	adds	r2, r3, #2
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cfae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cfb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d19f      	bne.n	800cefa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800cfba:	e7ff      	b.n	800cfbc <UART_TxISR_16BIT_FIFOEN+0xde>
 800cfbc:	bf00      	nop
 800cfbe:	3744      	adds	r7, #68	; 0x44
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b088      	sub	sp, #32
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	e853 3f00 	ldrex	r3, [r3]
 800cfdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfe4:	61fb      	str	r3, [r7, #28]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	61bb      	str	r3, [r7, #24]
 800cff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff2:	6979      	ldr	r1, [r7, #20]
 800cff4:	69ba      	ldr	r2, [r7, #24]
 800cff6:	e841 2300 	strex	r3, r2, [r1]
 800cffa:	613b      	str	r3, [r7, #16]
   return(result);
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1e6      	bne.n	800cfd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2220      	movs	r2, #32
 800d006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f7fe fd7b 	bl	800bb0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d016:	bf00      	nop
 800d018:	3720      	adds	r7, #32
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d01e:	b480      	push	{r7}
 800d020:	b083      	sub	sp, #12
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d026:	bf00      	nop
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d032:	b480      	push	{r7}
 800d034:	b083      	sub	sp, #12
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d03a:	bf00      	nop
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr

0800d046 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d046:	b480      	push	{r7}
 800d048:	b083      	sub	sp, #12
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d04e:	bf00      	nop
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d05a:	b480      	push	{r7}
 800d05c:	b085      	sub	sp, #20
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d101      	bne.n	800d070 <HAL_UARTEx_DisableFifoMode+0x16>
 800d06c:	2302      	movs	r3, #2
 800d06e:	e027      	b.n	800d0c0 <HAL_UARTEx_DisableFifoMode+0x66>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2224      	movs	r2, #36	; 0x24
 800d07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0201 	bic.w	r2, r2, #1
 800d096:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d09e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2220      	movs	r2, #32
 800d0b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d101      	bne.n	800d0e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	e02d      	b.n	800d140 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2224      	movs	r2, #36	; 0x24
 800d0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f022 0201 	bic.w	r2, r2, #1
 800d10a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	683a      	ldr	r2, [r7, #0]
 800d11c:	430a      	orrs	r2, r1
 800d11e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f84f 	bl	800d1c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2220      	movs	r2, #32
 800d132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d101      	bne.n	800d160 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d15c:	2302      	movs	r3, #2
 800d15e:	e02d      	b.n	800d1bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2224      	movs	r2, #36	; 0x24
 800d16c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f022 0201 	bic.w	r2, r2, #1
 800d186:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	430a      	orrs	r2, r1
 800d19a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f811 	bl	800d1c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2220      	movs	r2, #32
 800d1ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d108      	bne.n	800d1e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1e4:	e031      	b.n	800d24a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1e6:	2310      	movs	r3, #16
 800d1e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1ea:	2310      	movs	r3, #16
 800d1ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	0e5b      	lsrs	r3, r3, #25
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 0307 	and.w	r3, r3, #7
 800d1fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	0f5b      	lsrs	r3, r3, #29
 800d206:	b2db      	uxtb	r3, r3
 800d208:	f003 0307 	and.w	r3, r3, #7
 800d20c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d20e:	7bbb      	ldrb	r3, [r7, #14]
 800d210:	7b3a      	ldrb	r2, [r7, #12]
 800d212:	4911      	ldr	r1, [pc, #68]	; (800d258 <UARTEx_SetNbDataToProcess+0x94>)
 800d214:	5c8a      	ldrb	r2, [r1, r2]
 800d216:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d21a:	7b3a      	ldrb	r2, [r7, #12]
 800d21c:	490f      	ldr	r1, [pc, #60]	; (800d25c <UARTEx_SetNbDataToProcess+0x98>)
 800d21e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d220:	fb93 f3f2 	sdiv	r3, r3, r2
 800d224:	b29a      	uxth	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	7b7a      	ldrb	r2, [r7, #13]
 800d230:	4909      	ldr	r1, [pc, #36]	; (800d258 <UARTEx_SetNbDataToProcess+0x94>)
 800d232:	5c8a      	ldrb	r2, [r1, r2]
 800d234:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d238:	7b7a      	ldrb	r2, [r7, #13]
 800d23a:	4908      	ldr	r1, [pc, #32]	; (800d25c <UARTEx_SetNbDataToProcess+0x98>)
 800d23c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d23e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d242:	b29a      	uxth	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d24a:	bf00      	nop
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	0800dc54 	.word	0x0800dc54
 800d25c:	0800dc5c 	.word	0x0800dc5c

0800d260 <siprintf>:
 800d260:	b40e      	push	{r1, r2, r3}
 800d262:	b500      	push	{lr}
 800d264:	b09c      	sub	sp, #112	; 0x70
 800d266:	ab1d      	add	r3, sp, #116	; 0x74
 800d268:	9002      	str	r0, [sp, #8]
 800d26a:	9006      	str	r0, [sp, #24]
 800d26c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d270:	4809      	ldr	r0, [pc, #36]	; (800d298 <siprintf+0x38>)
 800d272:	9107      	str	r1, [sp, #28]
 800d274:	9104      	str	r1, [sp, #16]
 800d276:	4909      	ldr	r1, [pc, #36]	; (800d29c <siprintf+0x3c>)
 800d278:	f853 2b04 	ldr.w	r2, [r3], #4
 800d27c:	9105      	str	r1, [sp, #20]
 800d27e:	6800      	ldr	r0, [r0, #0]
 800d280:	9301      	str	r3, [sp, #4]
 800d282:	a902      	add	r1, sp, #8
 800d284:	f000 f9a0 	bl	800d5c8 <_svfiprintf_r>
 800d288:	9b02      	ldr	r3, [sp, #8]
 800d28a:	2200      	movs	r2, #0
 800d28c:	701a      	strb	r2, [r3, #0]
 800d28e:	b01c      	add	sp, #112	; 0x70
 800d290:	f85d eb04 	ldr.w	lr, [sp], #4
 800d294:	b003      	add	sp, #12
 800d296:	4770      	bx	lr
 800d298:	24000060 	.word	0x24000060
 800d29c:	ffff0208 	.word	0xffff0208

0800d2a0 <memset>:
 800d2a0:	4402      	add	r2, r0
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d100      	bne.n	800d2aa <memset+0xa>
 800d2a8:	4770      	bx	lr
 800d2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800d2ae:	e7f9      	b.n	800d2a4 <memset+0x4>

0800d2b0 <__errno>:
 800d2b0:	4b01      	ldr	r3, [pc, #4]	; (800d2b8 <__errno+0x8>)
 800d2b2:	6818      	ldr	r0, [r3, #0]
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	24000060 	.word	0x24000060

0800d2bc <__libc_init_array>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	4d0d      	ldr	r5, [pc, #52]	; (800d2f4 <__libc_init_array+0x38>)
 800d2c0:	4c0d      	ldr	r4, [pc, #52]	; (800d2f8 <__libc_init_array+0x3c>)
 800d2c2:	1b64      	subs	r4, r4, r5
 800d2c4:	10a4      	asrs	r4, r4, #2
 800d2c6:	2600      	movs	r6, #0
 800d2c8:	42a6      	cmp	r6, r4
 800d2ca:	d109      	bne.n	800d2e0 <__libc_init_array+0x24>
 800d2cc:	4d0b      	ldr	r5, [pc, #44]	; (800d2fc <__libc_init_array+0x40>)
 800d2ce:	4c0c      	ldr	r4, [pc, #48]	; (800d300 <__libc_init_array+0x44>)
 800d2d0:	f000 fc6a 	bl	800dba8 <_init>
 800d2d4:	1b64      	subs	r4, r4, r5
 800d2d6:	10a4      	asrs	r4, r4, #2
 800d2d8:	2600      	movs	r6, #0
 800d2da:	42a6      	cmp	r6, r4
 800d2dc:	d105      	bne.n	800d2ea <__libc_init_array+0x2e>
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2e4:	4798      	blx	r3
 800d2e6:	3601      	adds	r6, #1
 800d2e8:	e7ee      	b.n	800d2c8 <__libc_init_array+0xc>
 800d2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ee:	4798      	blx	r3
 800d2f0:	3601      	adds	r6, #1
 800d2f2:	e7f2      	b.n	800d2da <__libc_init_array+0x1e>
 800d2f4:	0800dca0 	.word	0x0800dca0
 800d2f8:	0800dca0 	.word	0x0800dca0
 800d2fc:	0800dca0 	.word	0x0800dca0
 800d300:	0800dca4 	.word	0x0800dca4

0800d304 <__retarget_lock_acquire_recursive>:
 800d304:	4770      	bx	lr

0800d306 <__retarget_lock_release_recursive>:
 800d306:	4770      	bx	lr

0800d308 <memcpy>:
 800d308:	440a      	add	r2, r1
 800d30a:	4291      	cmp	r1, r2
 800d30c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d310:	d100      	bne.n	800d314 <memcpy+0xc>
 800d312:	4770      	bx	lr
 800d314:	b510      	push	{r4, lr}
 800d316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d31e:	4291      	cmp	r1, r2
 800d320:	d1f9      	bne.n	800d316 <memcpy+0xe>
 800d322:	bd10      	pop	{r4, pc}

0800d324 <_free_r>:
 800d324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d326:	2900      	cmp	r1, #0
 800d328:	d044      	beq.n	800d3b4 <_free_r+0x90>
 800d32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d32e:	9001      	str	r0, [sp, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	f1a1 0404 	sub.w	r4, r1, #4
 800d336:	bfb8      	it	lt
 800d338:	18e4      	addlt	r4, r4, r3
 800d33a:	f000 f8df 	bl	800d4fc <__malloc_lock>
 800d33e:	4a1e      	ldr	r2, [pc, #120]	; (800d3b8 <_free_r+0x94>)
 800d340:	9801      	ldr	r0, [sp, #4]
 800d342:	6813      	ldr	r3, [r2, #0]
 800d344:	b933      	cbnz	r3, 800d354 <_free_r+0x30>
 800d346:	6063      	str	r3, [r4, #4]
 800d348:	6014      	str	r4, [r2, #0]
 800d34a:	b003      	add	sp, #12
 800d34c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d350:	f000 b8da 	b.w	800d508 <__malloc_unlock>
 800d354:	42a3      	cmp	r3, r4
 800d356:	d908      	bls.n	800d36a <_free_r+0x46>
 800d358:	6825      	ldr	r5, [r4, #0]
 800d35a:	1961      	adds	r1, r4, r5
 800d35c:	428b      	cmp	r3, r1
 800d35e:	bf01      	itttt	eq
 800d360:	6819      	ldreq	r1, [r3, #0]
 800d362:	685b      	ldreq	r3, [r3, #4]
 800d364:	1949      	addeq	r1, r1, r5
 800d366:	6021      	streq	r1, [r4, #0]
 800d368:	e7ed      	b.n	800d346 <_free_r+0x22>
 800d36a:	461a      	mov	r2, r3
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	b10b      	cbz	r3, 800d374 <_free_r+0x50>
 800d370:	42a3      	cmp	r3, r4
 800d372:	d9fa      	bls.n	800d36a <_free_r+0x46>
 800d374:	6811      	ldr	r1, [r2, #0]
 800d376:	1855      	adds	r5, r2, r1
 800d378:	42a5      	cmp	r5, r4
 800d37a:	d10b      	bne.n	800d394 <_free_r+0x70>
 800d37c:	6824      	ldr	r4, [r4, #0]
 800d37e:	4421      	add	r1, r4
 800d380:	1854      	adds	r4, r2, r1
 800d382:	42a3      	cmp	r3, r4
 800d384:	6011      	str	r1, [r2, #0]
 800d386:	d1e0      	bne.n	800d34a <_free_r+0x26>
 800d388:	681c      	ldr	r4, [r3, #0]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	6053      	str	r3, [r2, #4]
 800d38e:	440c      	add	r4, r1
 800d390:	6014      	str	r4, [r2, #0]
 800d392:	e7da      	b.n	800d34a <_free_r+0x26>
 800d394:	d902      	bls.n	800d39c <_free_r+0x78>
 800d396:	230c      	movs	r3, #12
 800d398:	6003      	str	r3, [r0, #0]
 800d39a:	e7d6      	b.n	800d34a <_free_r+0x26>
 800d39c:	6825      	ldr	r5, [r4, #0]
 800d39e:	1961      	adds	r1, r4, r5
 800d3a0:	428b      	cmp	r3, r1
 800d3a2:	bf04      	itt	eq
 800d3a4:	6819      	ldreq	r1, [r3, #0]
 800d3a6:	685b      	ldreq	r3, [r3, #4]
 800d3a8:	6063      	str	r3, [r4, #4]
 800d3aa:	bf04      	itt	eq
 800d3ac:	1949      	addeq	r1, r1, r5
 800d3ae:	6021      	streq	r1, [r4, #0]
 800d3b0:	6054      	str	r4, [r2, #4]
 800d3b2:	e7ca      	b.n	800d34a <_free_r+0x26>
 800d3b4:	b003      	add	sp, #12
 800d3b6:	bd30      	pop	{r4, r5, pc}
 800d3b8:	240009a0 	.word	0x240009a0

0800d3bc <sbrk_aligned>:
 800d3bc:	b570      	push	{r4, r5, r6, lr}
 800d3be:	4e0e      	ldr	r6, [pc, #56]	; (800d3f8 <sbrk_aligned+0x3c>)
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	6831      	ldr	r1, [r6, #0]
 800d3c4:	4605      	mov	r5, r0
 800d3c6:	b911      	cbnz	r1, 800d3ce <sbrk_aligned+0x12>
 800d3c8:	f000 fba6 	bl	800db18 <_sbrk_r>
 800d3cc:	6030      	str	r0, [r6, #0]
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f000 fba1 	bl	800db18 <_sbrk_r>
 800d3d6:	1c43      	adds	r3, r0, #1
 800d3d8:	d00a      	beq.n	800d3f0 <sbrk_aligned+0x34>
 800d3da:	1cc4      	adds	r4, r0, #3
 800d3dc:	f024 0403 	bic.w	r4, r4, #3
 800d3e0:	42a0      	cmp	r0, r4
 800d3e2:	d007      	beq.n	800d3f4 <sbrk_aligned+0x38>
 800d3e4:	1a21      	subs	r1, r4, r0
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f000 fb96 	bl	800db18 <_sbrk_r>
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	d101      	bne.n	800d3f4 <sbrk_aligned+0x38>
 800d3f0:	f04f 34ff 	mov.w	r4, #4294967295
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	240009a4 	.word	0x240009a4

0800d3fc <_malloc_r>:
 800d3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d400:	1ccd      	adds	r5, r1, #3
 800d402:	f025 0503 	bic.w	r5, r5, #3
 800d406:	3508      	adds	r5, #8
 800d408:	2d0c      	cmp	r5, #12
 800d40a:	bf38      	it	cc
 800d40c:	250c      	movcc	r5, #12
 800d40e:	2d00      	cmp	r5, #0
 800d410:	4607      	mov	r7, r0
 800d412:	db01      	blt.n	800d418 <_malloc_r+0x1c>
 800d414:	42a9      	cmp	r1, r5
 800d416:	d905      	bls.n	800d424 <_malloc_r+0x28>
 800d418:	230c      	movs	r3, #12
 800d41a:	603b      	str	r3, [r7, #0]
 800d41c:	2600      	movs	r6, #0
 800d41e:	4630      	mov	r0, r6
 800d420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d4f8 <_malloc_r+0xfc>
 800d428:	f000 f868 	bl	800d4fc <__malloc_lock>
 800d42c:	f8d8 3000 	ldr.w	r3, [r8]
 800d430:	461c      	mov	r4, r3
 800d432:	bb5c      	cbnz	r4, 800d48c <_malloc_r+0x90>
 800d434:	4629      	mov	r1, r5
 800d436:	4638      	mov	r0, r7
 800d438:	f7ff ffc0 	bl	800d3bc <sbrk_aligned>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	4604      	mov	r4, r0
 800d440:	d155      	bne.n	800d4ee <_malloc_r+0xf2>
 800d442:	f8d8 4000 	ldr.w	r4, [r8]
 800d446:	4626      	mov	r6, r4
 800d448:	2e00      	cmp	r6, #0
 800d44a:	d145      	bne.n	800d4d8 <_malloc_r+0xdc>
 800d44c:	2c00      	cmp	r4, #0
 800d44e:	d048      	beq.n	800d4e2 <_malloc_r+0xe6>
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	4631      	mov	r1, r6
 800d454:	4638      	mov	r0, r7
 800d456:	eb04 0903 	add.w	r9, r4, r3
 800d45a:	f000 fb5d 	bl	800db18 <_sbrk_r>
 800d45e:	4581      	cmp	r9, r0
 800d460:	d13f      	bne.n	800d4e2 <_malloc_r+0xe6>
 800d462:	6821      	ldr	r1, [r4, #0]
 800d464:	1a6d      	subs	r5, r5, r1
 800d466:	4629      	mov	r1, r5
 800d468:	4638      	mov	r0, r7
 800d46a:	f7ff ffa7 	bl	800d3bc <sbrk_aligned>
 800d46e:	3001      	adds	r0, #1
 800d470:	d037      	beq.n	800d4e2 <_malloc_r+0xe6>
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	442b      	add	r3, r5
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	f8d8 3000 	ldr.w	r3, [r8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d038      	beq.n	800d4f2 <_malloc_r+0xf6>
 800d480:	685a      	ldr	r2, [r3, #4]
 800d482:	42a2      	cmp	r2, r4
 800d484:	d12b      	bne.n	800d4de <_malloc_r+0xe2>
 800d486:	2200      	movs	r2, #0
 800d488:	605a      	str	r2, [r3, #4]
 800d48a:	e00f      	b.n	800d4ac <_malloc_r+0xb0>
 800d48c:	6822      	ldr	r2, [r4, #0]
 800d48e:	1b52      	subs	r2, r2, r5
 800d490:	d41f      	bmi.n	800d4d2 <_malloc_r+0xd6>
 800d492:	2a0b      	cmp	r2, #11
 800d494:	d917      	bls.n	800d4c6 <_malloc_r+0xca>
 800d496:	1961      	adds	r1, r4, r5
 800d498:	42a3      	cmp	r3, r4
 800d49a:	6025      	str	r5, [r4, #0]
 800d49c:	bf18      	it	ne
 800d49e:	6059      	strne	r1, [r3, #4]
 800d4a0:	6863      	ldr	r3, [r4, #4]
 800d4a2:	bf08      	it	eq
 800d4a4:	f8c8 1000 	streq.w	r1, [r8]
 800d4a8:	5162      	str	r2, [r4, r5]
 800d4aa:	604b      	str	r3, [r1, #4]
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	f104 060b 	add.w	r6, r4, #11
 800d4b2:	f000 f829 	bl	800d508 <__malloc_unlock>
 800d4b6:	f026 0607 	bic.w	r6, r6, #7
 800d4ba:	1d23      	adds	r3, r4, #4
 800d4bc:	1af2      	subs	r2, r6, r3
 800d4be:	d0ae      	beq.n	800d41e <_malloc_r+0x22>
 800d4c0:	1b9b      	subs	r3, r3, r6
 800d4c2:	50a3      	str	r3, [r4, r2]
 800d4c4:	e7ab      	b.n	800d41e <_malloc_r+0x22>
 800d4c6:	42a3      	cmp	r3, r4
 800d4c8:	6862      	ldr	r2, [r4, #4]
 800d4ca:	d1dd      	bne.n	800d488 <_malloc_r+0x8c>
 800d4cc:	f8c8 2000 	str.w	r2, [r8]
 800d4d0:	e7ec      	b.n	800d4ac <_malloc_r+0xb0>
 800d4d2:	4623      	mov	r3, r4
 800d4d4:	6864      	ldr	r4, [r4, #4]
 800d4d6:	e7ac      	b.n	800d432 <_malloc_r+0x36>
 800d4d8:	4634      	mov	r4, r6
 800d4da:	6876      	ldr	r6, [r6, #4]
 800d4dc:	e7b4      	b.n	800d448 <_malloc_r+0x4c>
 800d4de:	4613      	mov	r3, r2
 800d4e0:	e7cc      	b.n	800d47c <_malloc_r+0x80>
 800d4e2:	230c      	movs	r3, #12
 800d4e4:	603b      	str	r3, [r7, #0]
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	f000 f80e 	bl	800d508 <__malloc_unlock>
 800d4ec:	e797      	b.n	800d41e <_malloc_r+0x22>
 800d4ee:	6025      	str	r5, [r4, #0]
 800d4f0:	e7dc      	b.n	800d4ac <_malloc_r+0xb0>
 800d4f2:	605b      	str	r3, [r3, #4]
 800d4f4:	deff      	udf	#255	; 0xff
 800d4f6:	bf00      	nop
 800d4f8:	240009a0 	.word	0x240009a0

0800d4fc <__malloc_lock>:
 800d4fc:	4801      	ldr	r0, [pc, #4]	; (800d504 <__malloc_lock+0x8>)
 800d4fe:	f7ff bf01 	b.w	800d304 <__retarget_lock_acquire_recursive>
 800d502:	bf00      	nop
 800d504:	2400099c 	.word	0x2400099c

0800d508 <__malloc_unlock>:
 800d508:	4801      	ldr	r0, [pc, #4]	; (800d510 <__malloc_unlock+0x8>)
 800d50a:	f7ff befc 	b.w	800d306 <__retarget_lock_release_recursive>
 800d50e:	bf00      	nop
 800d510:	2400099c 	.word	0x2400099c

0800d514 <__ssputs_r>:
 800d514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	688e      	ldr	r6, [r1, #8]
 800d51a:	461f      	mov	r7, r3
 800d51c:	42be      	cmp	r6, r7
 800d51e:	680b      	ldr	r3, [r1, #0]
 800d520:	4682      	mov	sl, r0
 800d522:	460c      	mov	r4, r1
 800d524:	4690      	mov	r8, r2
 800d526:	d82c      	bhi.n	800d582 <__ssputs_r+0x6e>
 800d528:	898a      	ldrh	r2, [r1, #12]
 800d52a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d52e:	d026      	beq.n	800d57e <__ssputs_r+0x6a>
 800d530:	6965      	ldr	r5, [r4, #20]
 800d532:	6909      	ldr	r1, [r1, #16]
 800d534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d538:	eba3 0901 	sub.w	r9, r3, r1
 800d53c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d540:	1c7b      	adds	r3, r7, #1
 800d542:	444b      	add	r3, r9
 800d544:	106d      	asrs	r5, r5, #1
 800d546:	429d      	cmp	r5, r3
 800d548:	bf38      	it	cc
 800d54a:	461d      	movcc	r5, r3
 800d54c:	0553      	lsls	r3, r2, #21
 800d54e:	d527      	bpl.n	800d5a0 <__ssputs_r+0x8c>
 800d550:	4629      	mov	r1, r5
 800d552:	f7ff ff53 	bl	800d3fc <_malloc_r>
 800d556:	4606      	mov	r6, r0
 800d558:	b360      	cbz	r0, 800d5b4 <__ssputs_r+0xa0>
 800d55a:	6921      	ldr	r1, [r4, #16]
 800d55c:	464a      	mov	r2, r9
 800d55e:	f7ff fed3 	bl	800d308 <memcpy>
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	6126      	str	r6, [r4, #16]
 800d570:	6165      	str	r5, [r4, #20]
 800d572:	444e      	add	r6, r9
 800d574:	eba5 0509 	sub.w	r5, r5, r9
 800d578:	6026      	str	r6, [r4, #0]
 800d57a:	60a5      	str	r5, [r4, #8]
 800d57c:	463e      	mov	r6, r7
 800d57e:	42be      	cmp	r6, r7
 800d580:	d900      	bls.n	800d584 <__ssputs_r+0x70>
 800d582:	463e      	mov	r6, r7
 800d584:	6820      	ldr	r0, [r4, #0]
 800d586:	4632      	mov	r2, r6
 800d588:	4641      	mov	r1, r8
 800d58a:	f000 faab 	bl	800dae4 <memmove>
 800d58e:	68a3      	ldr	r3, [r4, #8]
 800d590:	1b9b      	subs	r3, r3, r6
 800d592:	60a3      	str	r3, [r4, #8]
 800d594:	6823      	ldr	r3, [r4, #0]
 800d596:	4433      	add	r3, r6
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	2000      	movs	r0, #0
 800d59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a0:	462a      	mov	r2, r5
 800d5a2:	f000 fac9 	bl	800db38 <_realloc_r>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	d1e0      	bne.n	800d56e <__ssputs_r+0x5a>
 800d5ac:	6921      	ldr	r1, [r4, #16]
 800d5ae:	4650      	mov	r0, sl
 800d5b0:	f7ff feb8 	bl	800d324 <_free_r>
 800d5b4:	230c      	movs	r3, #12
 800d5b6:	f8ca 3000 	str.w	r3, [sl]
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c6:	e7e9      	b.n	800d59c <__ssputs_r+0x88>

0800d5c8 <_svfiprintf_r>:
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	4698      	mov	r8, r3
 800d5ce:	898b      	ldrh	r3, [r1, #12]
 800d5d0:	061b      	lsls	r3, r3, #24
 800d5d2:	b09d      	sub	sp, #116	; 0x74
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	460d      	mov	r5, r1
 800d5d8:	4614      	mov	r4, r2
 800d5da:	d50e      	bpl.n	800d5fa <_svfiprintf_r+0x32>
 800d5dc:	690b      	ldr	r3, [r1, #16]
 800d5de:	b963      	cbnz	r3, 800d5fa <_svfiprintf_r+0x32>
 800d5e0:	2140      	movs	r1, #64	; 0x40
 800d5e2:	f7ff ff0b 	bl	800d3fc <_malloc_r>
 800d5e6:	6028      	str	r0, [r5, #0]
 800d5e8:	6128      	str	r0, [r5, #16]
 800d5ea:	b920      	cbnz	r0, 800d5f6 <_svfiprintf_r+0x2e>
 800d5ec:	230c      	movs	r3, #12
 800d5ee:	603b      	str	r3, [r7, #0]
 800d5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f4:	e0d0      	b.n	800d798 <_svfiprintf_r+0x1d0>
 800d5f6:	2340      	movs	r3, #64	; 0x40
 800d5f8:	616b      	str	r3, [r5, #20]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5fe:	2320      	movs	r3, #32
 800d600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d604:	f8cd 800c 	str.w	r8, [sp, #12]
 800d608:	2330      	movs	r3, #48	; 0x30
 800d60a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d7b0 <_svfiprintf_r+0x1e8>
 800d60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d612:	f04f 0901 	mov.w	r9, #1
 800d616:	4623      	mov	r3, r4
 800d618:	469a      	mov	sl, r3
 800d61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61e:	b10a      	cbz	r2, 800d624 <_svfiprintf_r+0x5c>
 800d620:	2a25      	cmp	r2, #37	; 0x25
 800d622:	d1f9      	bne.n	800d618 <_svfiprintf_r+0x50>
 800d624:	ebba 0b04 	subs.w	fp, sl, r4
 800d628:	d00b      	beq.n	800d642 <_svfiprintf_r+0x7a>
 800d62a:	465b      	mov	r3, fp
 800d62c:	4622      	mov	r2, r4
 800d62e:	4629      	mov	r1, r5
 800d630:	4638      	mov	r0, r7
 800d632:	f7ff ff6f 	bl	800d514 <__ssputs_r>
 800d636:	3001      	adds	r0, #1
 800d638:	f000 80a9 	beq.w	800d78e <_svfiprintf_r+0x1c6>
 800d63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d63e:	445a      	add	r2, fp
 800d640:	9209      	str	r2, [sp, #36]	; 0x24
 800d642:	f89a 3000 	ldrb.w	r3, [sl]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 80a1 	beq.w	800d78e <_svfiprintf_r+0x1c6>
 800d64c:	2300      	movs	r3, #0
 800d64e:	f04f 32ff 	mov.w	r2, #4294967295
 800d652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d656:	f10a 0a01 	add.w	sl, sl, #1
 800d65a:	9304      	str	r3, [sp, #16]
 800d65c:	9307      	str	r3, [sp, #28]
 800d65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d662:	931a      	str	r3, [sp, #104]	; 0x68
 800d664:	4654      	mov	r4, sl
 800d666:	2205      	movs	r2, #5
 800d668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d66c:	4850      	ldr	r0, [pc, #320]	; (800d7b0 <_svfiprintf_r+0x1e8>)
 800d66e:	f7f2 fe4f 	bl	8000310 <memchr>
 800d672:	9a04      	ldr	r2, [sp, #16]
 800d674:	b9d8      	cbnz	r0, 800d6ae <_svfiprintf_r+0xe6>
 800d676:	06d0      	lsls	r0, r2, #27
 800d678:	bf44      	itt	mi
 800d67a:	2320      	movmi	r3, #32
 800d67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d680:	0711      	lsls	r1, r2, #28
 800d682:	bf44      	itt	mi
 800d684:	232b      	movmi	r3, #43	; 0x2b
 800d686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d68a:	f89a 3000 	ldrb.w	r3, [sl]
 800d68e:	2b2a      	cmp	r3, #42	; 0x2a
 800d690:	d015      	beq.n	800d6be <_svfiprintf_r+0xf6>
 800d692:	9a07      	ldr	r2, [sp, #28]
 800d694:	4654      	mov	r4, sl
 800d696:	2000      	movs	r0, #0
 800d698:	f04f 0c0a 	mov.w	ip, #10
 800d69c:	4621      	mov	r1, r4
 800d69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6a2:	3b30      	subs	r3, #48	; 0x30
 800d6a4:	2b09      	cmp	r3, #9
 800d6a6:	d94d      	bls.n	800d744 <_svfiprintf_r+0x17c>
 800d6a8:	b1b0      	cbz	r0, 800d6d8 <_svfiprintf_r+0x110>
 800d6aa:	9207      	str	r2, [sp, #28]
 800d6ac:	e014      	b.n	800d6d8 <_svfiprintf_r+0x110>
 800d6ae:	eba0 0308 	sub.w	r3, r0, r8
 800d6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	9304      	str	r3, [sp, #16]
 800d6ba:	46a2      	mov	sl, r4
 800d6bc:	e7d2      	b.n	800d664 <_svfiprintf_r+0x9c>
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	1d19      	adds	r1, r3, #4
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	9103      	str	r1, [sp, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfbb      	ittet	lt
 800d6ca:	425b      	neglt	r3, r3
 800d6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d6d0:	9307      	strge	r3, [sp, #28]
 800d6d2:	9307      	strlt	r3, [sp, #28]
 800d6d4:	bfb8      	it	lt
 800d6d6:	9204      	strlt	r2, [sp, #16]
 800d6d8:	7823      	ldrb	r3, [r4, #0]
 800d6da:	2b2e      	cmp	r3, #46	; 0x2e
 800d6dc:	d10c      	bne.n	800d6f8 <_svfiprintf_r+0x130>
 800d6de:	7863      	ldrb	r3, [r4, #1]
 800d6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6e2:	d134      	bne.n	800d74e <_svfiprintf_r+0x186>
 800d6e4:	9b03      	ldr	r3, [sp, #12]
 800d6e6:	1d1a      	adds	r2, r3, #4
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	9203      	str	r2, [sp, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	bfb8      	it	lt
 800d6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6f4:	3402      	adds	r4, #2
 800d6f6:	9305      	str	r3, [sp, #20]
 800d6f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d7c0 <_svfiprintf_r+0x1f8>
 800d6fc:	7821      	ldrb	r1, [r4, #0]
 800d6fe:	2203      	movs	r2, #3
 800d700:	4650      	mov	r0, sl
 800d702:	f7f2 fe05 	bl	8000310 <memchr>
 800d706:	b138      	cbz	r0, 800d718 <_svfiprintf_r+0x150>
 800d708:	9b04      	ldr	r3, [sp, #16]
 800d70a:	eba0 000a 	sub.w	r0, r0, sl
 800d70e:	2240      	movs	r2, #64	; 0x40
 800d710:	4082      	lsls	r2, r0
 800d712:	4313      	orrs	r3, r2
 800d714:	3401      	adds	r4, #1
 800d716:	9304      	str	r3, [sp, #16]
 800d718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d71c:	4825      	ldr	r0, [pc, #148]	; (800d7b4 <_svfiprintf_r+0x1ec>)
 800d71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d722:	2206      	movs	r2, #6
 800d724:	f7f2 fdf4 	bl	8000310 <memchr>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d038      	beq.n	800d79e <_svfiprintf_r+0x1d6>
 800d72c:	4b22      	ldr	r3, [pc, #136]	; (800d7b8 <_svfiprintf_r+0x1f0>)
 800d72e:	bb1b      	cbnz	r3, 800d778 <_svfiprintf_r+0x1b0>
 800d730:	9b03      	ldr	r3, [sp, #12]
 800d732:	3307      	adds	r3, #7
 800d734:	f023 0307 	bic.w	r3, r3, #7
 800d738:	3308      	adds	r3, #8
 800d73a:	9303      	str	r3, [sp, #12]
 800d73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d73e:	4433      	add	r3, r6
 800d740:	9309      	str	r3, [sp, #36]	; 0x24
 800d742:	e768      	b.n	800d616 <_svfiprintf_r+0x4e>
 800d744:	fb0c 3202 	mla	r2, ip, r2, r3
 800d748:	460c      	mov	r4, r1
 800d74a:	2001      	movs	r0, #1
 800d74c:	e7a6      	b.n	800d69c <_svfiprintf_r+0xd4>
 800d74e:	2300      	movs	r3, #0
 800d750:	3401      	adds	r4, #1
 800d752:	9305      	str	r3, [sp, #20]
 800d754:	4619      	mov	r1, r3
 800d756:	f04f 0c0a 	mov.w	ip, #10
 800d75a:	4620      	mov	r0, r4
 800d75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d760:	3a30      	subs	r2, #48	; 0x30
 800d762:	2a09      	cmp	r2, #9
 800d764:	d903      	bls.n	800d76e <_svfiprintf_r+0x1a6>
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0c6      	beq.n	800d6f8 <_svfiprintf_r+0x130>
 800d76a:	9105      	str	r1, [sp, #20]
 800d76c:	e7c4      	b.n	800d6f8 <_svfiprintf_r+0x130>
 800d76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d772:	4604      	mov	r4, r0
 800d774:	2301      	movs	r3, #1
 800d776:	e7f0      	b.n	800d75a <_svfiprintf_r+0x192>
 800d778:	ab03      	add	r3, sp, #12
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	462a      	mov	r2, r5
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <_svfiprintf_r+0x1f4>)
 800d780:	a904      	add	r1, sp, #16
 800d782:	4638      	mov	r0, r7
 800d784:	f3af 8000 	nop.w
 800d788:	1c42      	adds	r2, r0, #1
 800d78a:	4606      	mov	r6, r0
 800d78c:	d1d6      	bne.n	800d73c <_svfiprintf_r+0x174>
 800d78e:	89ab      	ldrh	r3, [r5, #12]
 800d790:	065b      	lsls	r3, r3, #25
 800d792:	f53f af2d 	bmi.w	800d5f0 <_svfiprintf_r+0x28>
 800d796:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d798:	b01d      	add	sp, #116	; 0x74
 800d79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79e:	ab03      	add	r3, sp, #12
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <_svfiprintf_r+0x1f4>)
 800d7a6:	a904      	add	r1, sp, #16
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	f000 f879 	bl	800d8a0 <_printf_i>
 800d7ae:	e7eb      	b.n	800d788 <_svfiprintf_r+0x1c0>
 800d7b0:	0800dc64 	.word	0x0800dc64
 800d7b4:	0800dc6e 	.word	0x0800dc6e
 800d7b8:	00000000 	.word	0x00000000
 800d7bc:	0800d515 	.word	0x0800d515
 800d7c0:	0800dc6a 	.word	0x0800dc6a

0800d7c4 <_printf_common>:
 800d7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7c8:	4616      	mov	r6, r2
 800d7ca:	4699      	mov	r9, r3
 800d7cc:	688a      	ldr	r2, [r1, #8]
 800d7ce:	690b      	ldr	r3, [r1, #16]
 800d7d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	bfb8      	it	lt
 800d7d8:	4613      	movlt	r3, r2
 800d7da:	6033      	str	r3, [r6, #0]
 800d7dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	b10a      	cbz	r2, 800d7ea <_printf_common+0x26>
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	6033      	str	r3, [r6, #0]
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	0699      	lsls	r1, r3, #26
 800d7ee:	bf42      	ittt	mi
 800d7f0:	6833      	ldrmi	r3, [r6, #0]
 800d7f2:	3302      	addmi	r3, #2
 800d7f4:	6033      	strmi	r3, [r6, #0]
 800d7f6:	6825      	ldr	r5, [r4, #0]
 800d7f8:	f015 0506 	ands.w	r5, r5, #6
 800d7fc:	d106      	bne.n	800d80c <_printf_common+0x48>
 800d7fe:	f104 0a19 	add.w	sl, r4, #25
 800d802:	68e3      	ldr	r3, [r4, #12]
 800d804:	6832      	ldr	r2, [r6, #0]
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	42ab      	cmp	r3, r5
 800d80a:	dc26      	bgt.n	800d85a <_printf_common+0x96>
 800d80c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d810:	1e13      	subs	r3, r2, #0
 800d812:	6822      	ldr	r2, [r4, #0]
 800d814:	bf18      	it	ne
 800d816:	2301      	movne	r3, #1
 800d818:	0692      	lsls	r2, r2, #26
 800d81a:	d42b      	bmi.n	800d874 <_printf_common+0xb0>
 800d81c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d820:	4649      	mov	r1, r9
 800d822:	4638      	mov	r0, r7
 800d824:	47c0      	blx	r8
 800d826:	3001      	adds	r0, #1
 800d828:	d01e      	beq.n	800d868 <_printf_common+0xa4>
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	6922      	ldr	r2, [r4, #16]
 800d82e:	f003 0306 	and.w	r3, r3, #6
 800d832:	2b04      	cmp	r3, #4
 800d834:	bf02      	ittt	eq
 800d836:	68e5      	ldreq	r5, [r4, #12]
 800d838:	6833      	ldreq	r3, [r6, #0]
 800d83a:	1aed      	subeq	r5, r5, r3
 800d83c:	68a3      	ldr	r3, [r4, #8]
 800d83e:	bf0c      	ite	eq
 800d840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d844:	2500      	movne	r5, #0
 800d846:	4293      	cmp	r3, r2
 800d848:	bfc4      	itt	gt
 800d84a:	1a9b      	subgt	r3, r3, r2
 800d84c:	18ed      	addgt	r5, r5, r3
 800d84e:	2600      	movs	r6, #0
 800d850:	341a      	adds	r4, #26
 800d852:	42b5      	cmp	r5, r6
 800d854:	d11a      	bne.n	800d88c <_printf_common+0xc8>
 800d856:	2000      	movs	r0, #0
 800d858:	e008      	b.n	800d86c <_printf_common+0xa8>
 800d85a:	2301      	movs	r3, #1
 800d85c:	4652      	mov	r2, sl
 800d85e:	4649      	mov	r1, r9
 800d860:	4638      	mov	r0, r7
 800d862:	47c0      	blx	r8
 800d864:	3001      	adds	r0, #1
 800d866:	d103      	bne.n	800d870 <_printf_common+0xac>
 800d868:	f04f 30ff 	mov.w	r0, #4294967295
 800d86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d870:	3501      	adds	r5, #1
 800d872:	e7c6      	b.n	800d802 <_printf_common+0x3e>
 800d874:	18e1      	adds	r1, r4, r3
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	2030      	movs	r0, #48	; 0x30
 800d87a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d87e:	4422      	add	r2, r4
 800d880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d888:	3302      	adds	r3, #2
 800d88a:	e7c7      	b.n	800d81c <_printf_common+0x58>
 800d88c:	2301      	movs	r3, #1
 800d88e:	4622      	mov	r2, r4
 800d890:	4649      	mov	r1, r9
 800d892:	4638      	mov	r0, r7
 800d894:	47c0      	blx	r8
 800d896:	3001      	adds	r0, #1
 800d898:	d0e6      	beq.n	800d868 <_printf_common+0xa4>
 800d89a:	3601      	adds	r6, #1
 800d89c:	e7d9      	b.n	800d852 <_printf_common+0x8e>
	...

0800d8a0 <_printf_i>:
 800d8a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a4:	7e0f      	ldrb	r7, [r1, #24]
 800d8a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8a8:	2f78      	cmp	r7, #120	; 0x78
 800d8aa:	4691      	mov	r9, r2
 800d8ac:	4680      	mov	r8, r0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	469a      	mov	sl, r3
 800d8b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8b6:	d807      	bhi.n	800d8c8 <_printf_i+0x28>
 800d8b8:	2f62      	cmp	r7, #98	; 0x62
 800d8ba:	d80a      	bhi.n	800d8d2 <_printf_i+0x32>
 800d8bc:	2f00      	cmp	r7, #0
 800d8be:	f000 80d4 	beq.w	800da6a <_printf_i+0x1ca>
 800d8c2:	2f58      	cmp	r7, #88	; 0x58
 800d8c4:	f000 80c0 	beq.w	800da48 <_printf_i+0x1a8>
 800d8c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8d0:	e03a      	b.n	800d948 <_printf_i+0xa8>
 800d8d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8d6:	2b15      	cmp	r3, #21
 800d8d8:	d8f6      	bhi.n	800d8c8 <_printf_i+0x28>
 800d8da:	a101      	add	r1, pc, #4	; (adr r1, 800d8e0 <_printf_i+0x40>)
 800d8dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8e0:	0800d939 	.word	0x0800d939
 800d8e4:	0800d94d 	.word	0x0800d94d
 800d8e8:	0800d8c9 	.word	0x0800d8c9
 800d8ec:	0800d8c9 	.word	0x0800d8c9
 800d8f0:	0800d8c9 	.word	0x0800d8c9
 800d8f4:	0800d8c9 	.word	0x0800d8c9
 800d8f8:	0800d94d 	.word	0x0800d94d
 800d8fc:	0800d8c9 	.word	0x0800d8c9
 800d900:	0800d8c9 	.word	0x0800d8c9
 800d904:	0800d8c9 	.word	0x0800d8c9
 800d908:	0800d8c9 	.word	0x0800d8c9
 800d90c:	0800da51 	.word	0x0800da51
 800d910:	0800d979 	.word	0x0800d979
 800d914:	0800da0b 	.word	0x0800da0b
 800d918:	0800d8c9 	.word	0x0800d8c9
 800d91c:	0800d8c9 	.word	0x0800d8c9
 800d920:	0800da73 	.word	0x0800da73
 800d924:	0800d8c9 	.word	0x0800d8c9
 800d928:	0800d979 	.word	0x0800d979
 800d92c:	0800d8c9 	.word	0x0800d8c9
 800d930:	0800d8c9 	.word	0x0800d8c9
 800d934:	0800da13 	.word	0x0800da13
 800d938:	682b      	ldr	r3, [r5, #0]
 800d93a:	1d1a      	adds	r2, r3, #4
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	602a      	str	r2, [r5, #0]
 800d940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d948:	2301      	movs	r3, #1
 800d94a:	e09f      	b.n	800da8c <_printf_i+0x1ec>
 800d94c:	6820      	ldr	r0, [r4, #0]
 800d94e:	682b      	ldr	r3, [r5, #0]
 800d950:	0607      	lsls	r7, r0, #24
 800d952:	f103 0104 	add.w	r1, r3, #4
 800d956:	6029      	str	r1, [r5, #0]
 800d958:	d501      	bpl.n	800d95e <_printf_i+0xbe>
 800d95a:	681e      	ldr	r6, [r3, #0]
 800d95c:	e003      	b.n	800d966 <_printf_i+0xc6>
 800d95e:	0646      	lsls	r6, r0, #25
 800d960:	d5fb      	bpl.n	800d95a <_printf_i+0xba>
 800d962:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d966:	2e00      	cmp	r6, #0
 800d968:	da03      	bge.n	800d972 <_printf_i+0xd2>
 800d96a:	232d      	movs	r3, #45	; 0x2d
 800d96c:	4276      	negs	r6, r6
 800d96e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d972:	485a      	ldr	r0, [pc, #360]	; (800dadc <_printf_i+0x23c>)
 800d974:	230a      	movs	r3, #10
 800d976:	e012      	b.n	800d99e <_printf_i+0xfe>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	6820      	ldr	r0, [r4, #0]
 800d97c:	1d19      	adds	r1, r3, #4
 800d97e:	6029      	str	r1, [r5, #0]
 800d980:	0605      	lsls	r5, r0, #24
 800d982:	d501      	bpl.n	800d988 <_printf_i+0xe8>
 800d984:	681e      	ldr	r6, [r3, #0]
 800d986:	e002      	b.n	800d98e <_printf_i+0xee>
 800d988:	0641      	lsls	r1, r0, #25
 800d98a:	d5fb      	bpl.n	800d984 <_printf_i+0xe4>
 800d98c:	881e      	ldrh	r6, [r3, #0]
 800d98e:	4853      	ldr	r0, [pc, #332]	; (800dadc <_printf_i+0x23c>)
 800d990:	2f6f      	cmp	r7, #111	; 0x6f
 800d992:	bf0c      	ite	eq
 800d994:	2308      	moveq	r3, #8
 800d996:	230a      	movne	r3, #10
 800d998:	2100      	movs	r1, #0
 800d99a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d99e:	6865      	ldr	r5, [r4, #4]
 800d9a0:	60a5      	str	r5, [r4, #8]
 800d9a2:	2d00      	cmp	r5, #0
 800d9a4:	bfa2      	ittt	ge
 800d9a6:	6821      	ldrge	r1, [r4, #0]
 800d9a8:	f021 0104 	bicge.w	r1, r1, #4
 800d9ac:	6021      	strge	r1, [r4, #0]
 800d9ae:	b90e      	cbnz	r6, 800d9b4 <_printf_i+0x114>
 800d9b0:	2d00      	cmp	r5, #0
 800d9b2:	d04b      	beq.n	800da4c <_printf_i+0x1ac>
 800d9b4:	4615      	mov	r5, r2
 800d9b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9ba:	fb03 6711 	mls	r7, r3, r1, r6
 800d9be:	5dc7      	ldrb	r7, [r0, r7]
 800d9c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9c4:	4637      	mov	r7, r6
 800d9c6:	42bb      	cmp	r3, r7
 800d9c8:	460e      	mov	r6, r1
 800d9ca:	d9f4      	bls.n	800d9b6 <_printf_i+0x116>
 800d9cc:	2b08      	cmp	r3, #8
 800d9ce:	d10b      	bne.n	800d9e8 <_printf_i+0x148>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	07de      	lsls	r6, r3, #31
 800d9d4:	d508      	bpl.n	800d9e8 <_printf_i+0x148>
 800d9d6:	6923      	ldr	r3, [r4, #16]
 800d9d8:	6861      	ldr	r1, [r4, #4]
 800d9da:	4299      	cmp	r1, r3
 800d9dc:	bfde      	ittt	le
 800d9de:	2330      	movle	r3, #48	; 0x30
 800d9e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d9e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d9e8:	1b52      	subs	r2, r2, r5
 800d9ea:	6122      	str	r2, [r4, #16]
 800d9ec:	f8cd a000 	str.w	sl, [sp]
 800d9f0:	464b      	mov	r3, r9
 800d9f2:	aa03      	add	r2, sp, #12
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	f7ff fee4 	bl	800d7c4 <_printf_common>
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	d14a      	bne.n	800da96 <_printf_i+0x1f6>
 800da00:	f04f 30ff 	mov.w	r0, #4294967295
 800da04:	b004      	add	sp, #16
 800da06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	f043 0320 	orr.w	r3, r3, #32
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	4833      	ldr	r0, [pc, #204]	; (800dae0 <_printf_i+0x240>)
 800da14:	2778      	movs	r7, #120	; 0x78
 800da16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	6829      	ldr	r1, [r5, #0]
 800da1e:	061f      	lsls	r7, r3, #24
 800da20:	f851 6b04 	ldr.w	r6, [r1], #4
 800da24:	d402      	bmi.n	800da2c <_printf_i+0x18c>
 800da26:	065f      	lsls	r7, r3, #25
 800da28:	bf48      	it	mi
 800da2a:	b2b6      	uxthmi	r6, r6
 800da2c:	07df      	lsls	r7, r3, #31
 800da2e:	bf48      	it	mi
 800da30:	f043 0320 	orrmi.w	r3, r3, #32
 800da34:	6029      	str	r1, [r5, #0]
 800da36:	bf48      	it	mi
 800da38:	6023      	strmi	r3, [r4, #0]
 800da3a:	b91e      	cbnz	r6, 800da44 <_printf_i+0x1a4>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	f023 0320 	bic.w	r3, r3, #32
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	2310      	movs	r3, #16
 800da46:	e7a7      	b.n	800d998 <_printf_i+0xf8>
 800da48:	4824      	ldr	r0, [pc, #144]	; (800dadc <_printf_i+0x23c>)
 800da4a:	e7e4      	b.n	800da16 <_printf_i+0x176>
 800da4c:	4615      	mov	r5, r2
 800da4e:	e7bd      	b.n	800d9cc <_printf_i+0x12c>
 800da50:	682b      	ldr	r3, [r5, #0]
 800da52:	6826      	ldr	r6, [r4, #0]
 800da54:	6961      	ldr	r1, [r4, #20]
 800da56:	1d18      	adds	r0, r3, #4
 800da58:	6028      	str	r0, [r5, #0]
 800da5a:	0635      	lsls	r5, r6, #24
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	d501      	bpl.n	800da64 <_printf_i+0x1c4>
 800da60:	6019      	str	r1, [r3, #0]
 800da62:	e002      	b.n	800da6a <_printf_i+0x1ca>
 800da64:	0670      	lsls	r0, r6, #25
 800da66:	d5fb      	bpl.n	800da60 <_printf_i+0x1c0>
 800da68:	8019      	strh	r1, [r3, #0]
 800da6a:	2300      	movs	r3, #0
 800da6c:	6123      	str	r3, [r4, #16]
 800da6e:	4615      	mov	r5, r2
 800da70:	e7bc      	b.n	800d9ec <_printf_i+0x14c>
 800da72:	682b      	ldr	r3, [r5, #0]
 800da74:	1d1a      	adds	r2, r3, #4
 800da76:	602a      	str	r2, [r5, #0]
 800da78:	681d      	ldr	r5, [r3, #0]
 800da7a:	6862      	ldr	r2, [r4, #4]
 800da7c:	2100      	movs	r1, #0
 800da7e:	4628      	mov	r0, r5
 800da80:	f7f2 fc46 	bl	8000310 <memchr>
 800da84:	b108      	cbz	r0, 800da8a <_printf_i+0x1ea>
 800da86:	1b40      	subs	r0, r0, r5
 800da88:	6060      	str	r0, [r4, #4]
 800da8a:	6863      	ldr	r3, [r4, #4]
 800da8c:	6123      	str	r3, [r4, #16]
 800da8e:	2300      	movs	r3, #0
 800da90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da94:	e7aa      	b.n	800d9ec <_printf_i+0x14c>
 800da96:	6923      	ldr	r3, [r4, #16]
 800da98:	462a      	mov	r2, r5
 800da9a:	4649      	mov	r1, r9
 800da9c:	4640      	mov	r0, r8
 800da9e:	47d0      	blx	sl
 800daa0:	3001      	adds	r0, #1
 800daa2:	d0ad      	beq.n	800da00 <_printf_i+0x160>
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	079b      	lsls	r3, r3, #30
 800daa8:	d413      	bmi.n	800dad2 <_printf_i+0x232>
 800daaa:	68e0      	ldr	r0, [r4, #12]
 800daac:	9b03      	ldr	r3, [sp, #12]
 800daae:	4298      	cmp	r0, r3
 800dab0:	bfb8      	it	lt
 800dab2:	4618      	movlt	r0, r3
 800dab4:	e7a6      	b.n	800da04 <_printf_i+0x164>
 800dab6:	2301      	movs	r3, #1
 800dab8:	4632      	mov	r2, r6
 800daba:	4649      	mov	r1, r9
 800dabc:	4640      	mov	r0, r8
 800dabe:	47d0      	blx	sl
 800dac0:	3001      	adds	r0, #1
 800dac2:	d09d      	beq.n	800da00 <_printf_i+0x160>
 800dac4:	3501      	adds	r5, #1
 800dac6:	68e3      	ldr	r3, [r4, #12]
 800dac8:	9903      	ldr	r1, [sp, #12]
 800daca:	1a5b      	subs	r3, r3, r1
 800dacc:	42ab      	cmp	r3, r5
 800dace:	dcf2      	bgt.n	800dab6 <_printf_i+0x216>
 800dad0:	e7eb      	b.n	800daaa <_printf_i+0x20a>
 800dad2:	2500      	movs	r5, #0
 800dad4:	f104 0619 	add.w	r6, r4, #25
 800dad8:	e7f5      	b.n	800dac6 <_printf_i+0x226>
 800dada:	bf00      	nop
 800dadc:	0800dc75 	.word	0x0800dc75
 800dae0:	0800dc86 	.word	0x0800dc86

0800dae4 <memmove>:
 800dae4:	4288      	cmp	r0, r1
 800dae6:	b510      	push	{r4, lr}
 800dae8:	eb01 0402 	add.w	r4, r1, r2
 800daec:	d902      	bls.n	800daf4 <memmove+0x10>
 800daee:	4284      	cmp	r4, r0
 800daf0:	4623      	mov	r3, r4
 800daf2:	d807      	bhi.n	800db04 <memmove+0x20>
 800daf4:	1e43      	subs	r3, r0, #1
 800daf6:	42a1      	cmp	r1, r4
 800daf8:	d008      	beq.n	800db0c <memmove+0x28>
 800dafa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dafe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db02:	e7f8      	b.n	800daf6 <memmove+0x12>
 800db04:	4402      	add	r2, r0
 800db06:	4601      	mov	r1, r0
 800db08:	428a      	cmp	r2, r1
 800db0a:	d100      	bne.n	800db0e <memmove+0x2a>
 800db0c:	bd10      	pop	{r4, pc}
 800db0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db16:	e7f7      	b.n	800db08 <memmove+0x24>

0800db18 <_sbrk_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	4d06      	ldr	r5, [pc, #24]	; (800db34 <_sbrk_r+0x1c>)
 800db1c:	2300      	movs	r3, #0
 800db1e:	4604      	mov	r4, r0
 800db20:	4608      	mov	r0, r1
 800db22:	602b      	str	r3, [r5, #0]
 800db24:	f7f4 f96a 	bl	8001dfc <_sbrk>
 800db28:	1c43      	adds	r3, r0, #1
 800db2a:	d102      	bne.n	800db32 <_sbrk_r+0x1a>
 800db2c:	682b      	ldr	r3, [r5, #0]
 800db2e:	b103      	cbz	r3, 800db32 <_sbrk_r+0x1a>
 800db30:	6023      	str	r3, [r4, #0]
 800db32:	bd38      	pop	{r3, r4, r5, pc}
 800db34:	24000998 	.word	0x24000998

0800db38 <_realloc_r>:
 800db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3c:	4680      	mov	r8, r0
 800db3e:	4614      	mov	r4, r2
 800db40:	460e      	mov	r6, r1
 800db42:	b921      	cbnz	r1, 800db4e <_realloc_r+0x16>
 800db44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db48:	4611      	mov	r1, r2
 800db4a:	f7ff bc57 	b.w	800d3fc <_malloc_r>
 800db4e:	b92a      	cbnz	r2, 800db5c <_realloc_r+0x24>
 800db50:	f7ff fbe8 	bl	800d324 <_free_r>
 800db54:	4625      	mov	r5, r4
 800db56:	4628      	mov	r0, r5
 800db58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db5c:	f000 f81b 	bl	800db96 <_malloc_usable_size_r>
 800db60:	4284      	cmp	r4, r0
 800db62:	4607      	mov	r7, r0
 800db64:	d802      	bhi.n	800db6c <_realloc_r+0x34>
 800db66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db6a:	d812      	bhi.n	800db92 <_realloc_r+0x5a>
 800db6c:	4621      	mov	r1, r4
 800db6e:	4640      	mov	r0, r8
 800db70:	f7ff fc44 	bl	800d3fc <_malloc_r>
 800db74:	4605      	mov	r5, r0
 800db76:	2800      	cmp	r0, #0
 800db78:	d0ed      	beq.n	800db56 <_realloc_r+0x1e>
 800db7a:	42bc      	cmp	r4, r7
 800db7c:	4622      	mov	r2, r4
 800db7e:	4631      	mov	r1, r6
 800db80:	bf28      	it	cs
 800db82:	463a      	movcs	r2, r7
 800db84:	f7ff fbc0 	bl	800d308 <memcpy>
 800db88:	4631      	mov	r1, r6
 800db8a:	4640      	mov	r0, r8
 800db8c:	f7ff fbca 	bl	800d324 <_free_r>
 800db90:	e7e1      	b.n	800db56 <_realloc_r+0x1e>
 800db92:	4635      	mov	r5, r6
 800db94:	e7df      	b.n	800db56 <_realloc_r+0x1e>

0800db96 <_malloc_usable_size_r>:
 800db96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db9a:	1f18      	subs	r0, r3, #4
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	bfbc      	itt	lt
 800dba0:	580b      	ldrlt	r3, [r1, r0]
 800dba2:	18c0      	addlt	r0, r0, r3
 800dba4:	4770      	bx	lr
	...

0800dba8 <_init>:
 800dba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbaa:	bf00      	nop
 800dbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbae:	bc08      	pop	{r3}
 800dbb0:	469e      	mov	lr, r3
 800dbb2:	4770      	bx	lr

0800dbb4 <_fini>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	bf00      	nop
 800dbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbba:	bc08      	pop	{r3}
 800dbbc:	469e      	mov	lr, r3
 800dbbe:	4770      	bx	lr
