
DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800bed4  0800bed4  0001bed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf58  0800bf58  0001bf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf60  0800bf60  0001bf60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bf64  0800bf64  0001bf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800bf68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a8  24000074  0800bfdc  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400031c  0800bfdc  0002031c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016335  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025d0  00000000  00000000  000363d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ef0  00000000  00000000  000389a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e18  00000000  00000000  00039898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037fc1  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014ede  00000000  00000000  00072671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b4c3  00000000  00000000  0008754f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f2a12  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004358  00000000  00000000  001f2a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bebc 	.word	0x0800bebc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800bebc 	.word	0x0800bebc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fe81 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f839 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 fa8b 	bl	8000bac <MX_GPIO_Init>
  MX_DMA_Init();
 8000696:	f000 fa69 	bl	8000b6c <MX_DMA_Init>
  MX_ADC1_Init();
 800069a:	f000 f8a5 	bl	80007e8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800069e:	f000 fa19 	bl	8000ad4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcResultsDMA, ADC_CHANNELS) != HAL_OK) {
 80006a2:	2240      	movs	r2, #64	; 0x40
 80006a4:	4911      	ldr	r1, [pc, #68]	; (80006ec <main+0x68>)
 80006a6:	4812      	ldr	r0, [pc, #72]	; (80006f0 <main+0x6c>)
 80006a8:	f001 fa9a 	bl	8001be0 <HAL_ADC_Start_DMA>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <main+0x32>
  		  Error_Handler();
 80006b2:	f000 fbab 	bl	8000e0c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (adcConversionComplete == 1) {
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <main+0x70>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d1fb      	bne.n	80006b6 <main+0x32>
		  sprintf(message, "%d - %d - %d\r\n", adcResultsDMA[3], adcResultsDMA[8], adcResultsDMA[11]);
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <main+0x68>)
 80006c0:	88db      	ldrh	r3, [r3, #6]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <main+0x68>)
 80006c6:	8a1b      	ldrh	r3, [r3, #16]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <main+0x68>)
 80006cc:	8adb      	ldrh	r3, [r3, #22]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	460b      	mov	r3, r1
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <main+0x74>)
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <main+0x78>)
 80006d6:	f00a ff83 	bl	800b5e0 <siprintf>
		  HAL_UART_Transmit_IT(&huart3, message, sizeof(message));
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	4907      	ldr	r1, [pc, #28]	; (80006fc <main+0x78>)
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <main+0x7c>)
 80006e0:	f009 f858 	bl	8009794 <HAL_UART_Transmit_IT>
		  adcConversionComplete = 0;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <main+0x70>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	  if (adcConversionComplete == 1) {
 80006ea:	e7e4      	b.n	80006b6 <main+0x32>
 80006ec:	24000200 	.word	0x24000200
 80006f0:	24000090 	.word	0x24000090
 80006f4:	24000280 	.word	0x24000280
 80006f8:	0800bed4 	.word	0x0800bed4
 80006fc:	24000284 	.word	0x24000284
 8000700:	2400016c 	.word	0x2400016c

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	; 0x70
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	224c      	movs	r2, #76	; 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00a ff5c 	bl	800b5d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a ff56 	bl	800b5d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000724:	2002      	movs	r0, #2
 8000726:	f005 fac7 	bl	8005cb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <SystemClock_Config+0xd8>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	4a2a      	ldr	r2, [pc, #168]	; (80007dc <SystemClock_Config+0xd8>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	62d3      	str	r3, [r2, #44]	; 0x2c
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <SystemClock_Config+0xd8>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <SystemClock_Config+0xdc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <SystemClock_Config+0xdc>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <SystemClock_Config+0xdc>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <SystemClock_Config+0xdc>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <SystemClock_Config+0xe0>)
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <SystemClock_Config+0xe0>)
 8000776:	f023 0303 	bic.w	r3, r3, #3
 800077a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000780:	2301      	movs	r3, #1
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2340      	movs	r3, #64	; 0x40
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	4618      	mov	r0, r3
 8000792:	f005 facb 	bl	8005d2c <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800079c:	f000 fb36 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	233f      	movs	r3, #63	; 0x3f
 80007a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007b4:	2340      	movs	r3, #64	; 0x40
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2101      	movs	r1, #1
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 ff0b 	bl	80065e0 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007d0:	f000 fb1c 	bl	8000e0c <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3770      	adds	r7, #112	; 0x70
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58000400 	.word	0x58000400
 80007e0:	58024800 	.word	0x58024800
 80007e4:	58024400 	.word	0x58024400

080007e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	615a      	str	r2, [r3, #20]
 800080a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800080c:	4b9f      	ldr	r3, [pc, #636]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800080e:	4aa0      	ldr	r2, [pc, #640]	; (8000a90 <MX_ADC1_Init+0x2a8>)
 8000810:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000812:	4b9e      	ldr	r3, [pc, #632]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000814:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000818:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800081a:	4b9c      	ldr	r3, [pc, #624]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000820:	4b9a      	ldr	r3, [pc, #616]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000822:	2201      	movs	r2, #1
 8000824:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000826:	4b99      	ldr	r3, [pc, #612]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000828:	2204      	movs	r2, #4
 800082a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800082c:	4b97      	ldr	r3, [pc, #604]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800082e:	2200      	movs	r2, #0
 8000830:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000832:	4b96      	ldr	r3, [pc, #600]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000834:	2201      	movs	r2, #1
 8000836:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 8000838:	4b94      	ldr	r3, [pc, #592]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800083a:	2210      	movs	r2, #16
 800083c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b93      	ldr	r3, [pc, #588]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000840:	2200      	movs	r2, #0
 8000842:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000844:	4b91      	ldr	r3, [pc, #580]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084a:	4b90      	ldr	r3, [pc, #576]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000850:	4b8e      	ldr	r3, [pc, #568]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000852:	2203      	movs	r2, #3
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000856:	4b8d      	ldr	r3, [pc, #564]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800085e:	4b8b      	ldr	r3, [pc, #556]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000860:	2200      	movs	r2, #0
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000864:	4b89      	ldr	r3, [pc, #548]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086c:	4887      	ldr	r0, [pc, #540]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800086e:	f001 f815 	bl	800189c <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000878:	f000 fac8 	bl	8000e0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4881      	ldr	r0, [pc, #516]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000888:	f002 f822 	bl	80028d0 <HAL_ADCEx_MultiModeConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000892:	f000 fabb 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000896:	4b7f      	ldr	r3, [pc, #508]	; (8000a94 <MX_ADC1_Init+0x2ac>)
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089a:	2306      	movs	r3, #6
 800089c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a8:	2304      	movs	r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4874      	ldr	r0, [pc, #464]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 80008ba:	f001 fa69 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80008c4:	f000 faa2 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c8:	4b73      	ldr	r3, [pc, #460]	; (8000a98 <MX_ADC1_Init+0x2b0>)
 80008ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008cc:	230c      	movs	r3, #12
 80008ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	486d      	ldr	r0, [pc, #436]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 80008d6:	f001 fa5b 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80008e0:	f000 fa94 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008e4:	4b6d      	ldr	r3, [pc, #436]	; (8000a9c <MX_ADC1_Init+0x2b4>)
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008e8:	2312      	movs	r3, #18
 80008ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4866      	ldr	r0, [pc, #408]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 80008f2:	f001 fa4d 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80008fc:	f000 fa86 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000900:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <MX_ADC1_Init+0x2b8>)
 8000902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000904:	2318      	movs	r3, #24
 8000906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	485f      	ldr	r0, [pc, #380]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800090e:	f001 fa3f 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000918:	f000 fa78 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800091c:	4b61      	ldr	r3, [pc, #388]	; (8000aa4 <MX_ADC1_Init+0x2bc>)
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4619      	mov	r1, r3
 800092a:	4858      	ldr	r0, [pc, #352]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800092c:	f001 fa30 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000936:	f000 fa69 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800093a:	4b5b      	ldr	r3, [pc, #364]	; (8000aa8 <MX_ADC1_Init+0x2c0>)
 800093c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800093e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000942:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4850      	ldr	r0, [pc, #320]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 800094a:	f001 fa21 	bl	8001d90 <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000954:	f000 fa5a 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000958:	4b54      	ldr	r3, [pc, #336]	; (8000aac <MX_ADC1_Init+0x2c4>)
 800095a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800095c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000960:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4849      	ldr	r0, [pc, #292]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000968:	f001 fa12 	bl	8001d90 <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000972:	f000 fa4b 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000976:	4b4e      	ldr	r3, [pc, #312]	; (8000ab0 <MX_ADC1_Init+0x2c8>)
 8000978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800097a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4841      	ldr	r0, [pc, #260]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000986:	f001 fa03 	bl	8001d90 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000990:	f000 fa3c 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000994:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <MX_ADC1_Init+0x2cc>)
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000998:	f44f 738c 	mov.w	r3, #280	; 0x118
 800099c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	483a      	ldr	r0, [pc, #232]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 80009a4:	f001 f9f4 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80009ae:	f000 fa2d 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <MX_ADC1_Init+0x2d0>)
 80009b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80009b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4832      	ldr	r0, [pc, #200]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 80009c2:	f001 f9e5 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80009cc:	f000 fa1e 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009d0:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <MX_ADC1_Init+0x2d4>)
 80009d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80009d4:	f240 2306 	movw	r3, #518	; 0x206
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	482b      	ldr	r0, [pc, #172]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 80009e0:	f001 f9d6 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80009ea:	f000 fa0f 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009ee:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <MX_ADC1_Init+0x2d8>)
 80009f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80009f2:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80009f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4823      	ldr	r0, [pc, #140]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 80009fe:	f001 f9c7 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8000a08:	f000 fa00 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <MX_ADC1_Init+0x2dc>)
 8000a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000a10:	f240 2312 	movw	r3, #530	; 0x212
 8000a14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481c      	ldr	r0, [pc, #112]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000a1c:	f001 f9b8 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 8000a26:	f000 f9f1 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_ADC1_Init+0x2e0>)
 8000a2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000a2e:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000a32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000a3a:	f001 f9a9 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 8000a44:	f000 f9e2 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_ADC1_Init+0x2e4>)
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000a4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000a58:	f001 f99a 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC1_Init+0x27e>
  {
    Error_Handler();
 8000a62:	f000 f9d3 	bl	8000e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_ADC1_Init+0x2e8>)
 8000a68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000a6a:	f240 3306 	movw	r3, #774	; 0x306
 8000a6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_ADC1_Init+0x2a4>)
 8000a76:	f001 f98b 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x29c>
  {
    Error_Handler();
 8000a80:	f000 f9c4 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	24000090 	.word	0x24000090
 8000a90:	40022000 	.word	0x40022000
 8000a94:	08600004 	.word	0x08600004
 8000a98:	0c900008 	.word	0x0c900008
 8000a9c:	10c00010 	.word	0x10c00010
 8000aa0:	14f00020 	.word	0x14f00020
 8000aa4:	19200040 	.word	0x19200040
 8000aa8:	1d500080 	.word	0x1d500080
 8000aac:	21800100 	.word	0x21800100
 8000ab0:	25b00200 	.word	0x25b00200
 8000ab4:	2a000400 	.word	0x2a000400
 8000ab8:	2e300800 	.word	0x2e300800
 8000abc:	3ac04000 	.word	0x3ac04000
 8000ac0:	3ef08000 	.word	0x3ef08000
 8000ac4:	43210000 	.word	0x43210000
 8000ac8:	47520000 	.word	0x47520000
 8000acc:	4b840000 	.word	0x4b840000
 8000ad0:	4fb80000 	.word	0x4fb80000

08000ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ada:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <MX_USART3_UART_Init+0x94>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b1e:	f008 fde9 	bl	80096f4 <HAL_UART_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b28:	f000 f970 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b30:	f00a fc5a 	bl	800b3e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3a:	f000 f967 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b42:	f00a fc8f 	bl	800b464 <HAL_UARTEx_SetRxFifoThreshold>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b4c:	f000 f95e 	bl	8000e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b52:	f00a fc10 	bl	800b376 <HAL_UARTEx_DisableFifoMode>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f956 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2400016c 	.word	0x2400016c
 8000b68:	40004800 	.word	0x40004800

08000b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_DMA_Init+0x3c>)
 8000b74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b78:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <MX_DMA_Init+0x3c>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_DMA_Init+0x3c>)
 8000b84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	200b      	movs	r0, #11
 8000b96:	f002 f854 	bl	8002c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b9a:	200b      	movs	r0, #11
 8000b9c:	f002 f86b 	bl	8002c76 <HAL_NVIC_EnableIRQ>

}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	58024400 	.word	0x58024400

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b83      	ldr	r3, [pc, #524]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a81      	ldr	r2, [pc, #516]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b7f      	ldr	r3, [pc, #508]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be0:	4b7b      	ldr	r3, [pc, #492]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a7a      	ldr	r2, [pc, #488]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b77      	ldr	r3, [pc, #476]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b74      	ldr	r3, [pc, #464]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a72      	ldr	r2, [pc, #456]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b70      	ldr	r3, [pc, #448]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b6c      	ldr	r3, [pc, #432]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a6b      	ldr	r2, [pc, #428]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b68      	ldr	r3, [pc, #416]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3a:	4b65      	ldr	r3, [pc, #404]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a63      	ldr	r2, [pc, #396]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b61      	ldr	r3, [pc, #388]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0320 	and.w	r3, r3, #32
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c58:	4b5d      	ldr	r3, [pc, #372]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	4a5c      	ldr	r2, [pc, #368]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c68:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c76:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a54      	ldr	r2, [pc, #336]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b52      	ldr	r3, [pc, #328]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c94:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b4a      	ldr	r3, [pc, #296]	; (8000dd0 <MX_GPIO_Init+0x224>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb8:	4846      	ldr	r0, [pc, #280]	; (8000dd4 <MX_GPIO_Init+0x228>)
 8000cba:	f004 ffe3 	bl	8005c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc4:	4844      	ldr	r0, [pc, #272]	; (8000dd8 <MX_GPIO_Init+0x22c>)
 8000cc6:	f004 ffdd 	bl	8005c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2102      	movs	r1, #2
 8000cce:	4843      	ldr	r0, [pc, #268]	; (8000ddc <MX_GPIO_Init+0x230>)
 8000cd0:	f004 ffd8 	bl	8005c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	483d      	ldr	r0, [pc, #244]	; (8000de0 <MX_GPIO_Init+0x234>)
 8000cea:	f004 fe1b 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d00:	230b      	movs	r3, #11
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4832      	ldr	r0, [pc, #200]	; (8000dd4 <MX_GPIO_Init+0x228>)
 8000d0c:	f004 fe0a 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	482a      	ldr	r0, [pc, #168]	; (8000dd4 <MX_GPIO_Init+0x228>)
 8000d2a:	f004 fdfb 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4824      	ldr	r0, [pc, #144]	; (8000dd8 <MX_GPIO_Init+0x22c>)
 8000d48:	f004 fdec 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4820      	ldr	r0, [pc, #128]	; (8000de4 <MX_GPIO_Init+0x238>)
 8000d62:	f004 fddf 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d66:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4819      	ldr	r0, [pc, #100]	; (8000de8 <MX_GPIO_Init+0x23c>)
 8000d84:	f004 fdce 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9a:	230b      	movs	r3, #11
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <MX_GPIO_Init+0x238>)
 8000da6:	f004 fdbd 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000daa:	2302      	movs	r3, #2
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_GPIO_Init+0x230>)
 8000dc2:	f004 fdaf 	bl	8005924 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	58020c00 	.word	0x58020c00
 8000ddc:	58021000 	.word	0x58021000
 8000de0:	58020800 	.word	0x58020800
 8000de4:	58021800 	.word	0x58021800
 8000de8:	58020000 	.word	0x58020000

08000dec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  adcConversionComplete = 1;
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	24000280 	.word	0x24000280

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_MspInit+0x30>)
 8000e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x30>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x30>)
 8000e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	58024400 	.word	0x58024400

08000e4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0be      	sub	sp, #248	; 0xf8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	22c0      	movs	r2, #192	; 0xc0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00a fbaf 	bl	800b5d0 <memset>
  if(hadc->Instance==ADC1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a72      	ldr	r2, [pc, #456]	; (8001040 <HAL_ADC_MspInit+0x1f4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	f040 80dd 	bne.w	8001038 <HAL_ADC_MspInit+0x1ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000e8e:	2309      	movs	r3, #9
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000e92:	2304      	movs	r3, #4
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e9e:	23c0      	movs	r3, #192	; 0xc0
 8000ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000ea6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 ff1e 	bl	8006cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000ec2:	f7ff ffa3 	bl	8000e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec6:	4b5f      	ldr	r3, [pc, #380]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000ec8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ecc:	4a5d      	ldr	r2, [pc, #372]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000ece:	f043 0320 	orr.w	r3, r3, #32
 8000ed2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ed6:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000ed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000edc:	f003 0320 	and.w	r3, r3, #32
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee4:	4b57      	ldr	r3, [pc, #348]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	4a56      	ldr	r2, [pc, #344]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b50      	ldr	r3, [pc, #320]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	4a4e      	ldr	r2, [pc, #312]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f12:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b48      	ldr	r3, [pc, #288]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	4a47      	ldr	r2, [pc, #284]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f30:	4b44      	ldr	r3, [pc, #272]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <HAL_ADC_MspInit+0x1f8>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	f003 0320 	and.w	r3, r3, #32
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f5c:	2333      	movs	r3, #51	; 0x33
 8000f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4834      	ldr	r0, [pc, #208]	; (8001048 <HAL_ADC_MspInit+0x1fc>)
 8000f76:	f004 fcd5 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f7a:	23ff      	movs	r3, #255	; 0xff
 8000f7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f90:	4619      	mov	r1, r3
 8000f92:	482e      	ldr	r0, [pc, #184]	; (800104c <HAL_ADC_MspInit+0x200>)
 8000f94:	f004 fcc6 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4827      	ldr	r0, [pc, #156]	; (8001050 <HAL_ADC_MspInit+0x204>)
 8000fb2:	f004 fcb7 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4820      	ldr	r0, [pc, #128]	; (8001054 <HAL_ADC_MspInit+0x208>)
 8000fd2:	f004 fca7 	bl	8005924 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <HAL_ADC_MspInit+0x210>)
 8000fda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8000fde:	2209      	movs	r2, #9
 8000fe0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8000ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8000ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ffc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8001000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001004:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8001008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8001010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001014:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800101c:	480e      	ldr	r0, [pc, #56]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 800101e:	f001 fe45 	bl	8002cac <HAL_DMA_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_ADC_MspInit+0x1e0>
    {
      Error_Handler();
 8001028:	f7ff fef0 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8001030:	64da      	str	r2, [r3, #76]	; 0x4c
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <HAL_ADC_MspInit+0x20c>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	37f8      	adds	r7, #248	; 0xf8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40022000 	.word	0x40022000
 8001044:	58024400 	.word	0x58024400
 8001048:	58020800 	.word	0x58020800
 800104c:	58020000 	.word	0x58020000
 8001050:	58020400 	.word	0x58020400
 8001054:	58021400 	.word	0x58021400
 8001058:	240000f4 	.word	0x240000f4
 800105c:	40020010 	.word	0x40020010

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0ba      	sub	sp, #232	; 0xe8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	22c0      	movs	r2, #192	; 0xc0
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00a faa5 	bl	800b5d0 <memset>
  if(huart->Instance==USART3)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <HAL_UART_MspInit+0xd8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d14e      	bne.n	800112e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001090:	f04f 0202 	mov.w	r2, #2
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fe26 	bl	8006cf8 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010b2:	f7ff feab 	bl	8000e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_UART_MspInit+0xdc>)
 80010b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_UART_MspInit+0xdc>)
 80010be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_UART_MspInit+0xdc>)
 80010c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_UART_MspInit+0xdc>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_UART_MspInit+0xdc>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_UART_MspInit+0xdc>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800110c:	2307      	movs	r3, #7
 800110e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001116:	4619      	mov	r1, r3
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <HAL_UART_MspInit+0xe0>)
 800111a:	f004 fc03 	bl	8005924 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2027      	movs	r0, #39	; 0x27
 8001124:	f001 fd8d 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001128:	2027      	movs	r0, #39	; 0x27
 800112a:	f001 fda4 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	37e8      	adds	r7, #232	; 0xe8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004800 	.word	0x40004800
 800113c:	58024400 	.word	0x58024400
 8001140:	58020c00 	.word	0x58020c00

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f970 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DMA1_Stream0_IRQHandler+0x10>)
 800119e:	f003 f8af 	bl	8004300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	240000f4 	.word	0x240000f4

080011ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <USART3_IRQHandler+0x10>)
 80011b2:	f008 fb83 	bl	80098bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2400016c 	.word	0x2400016c

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f00a f9c4 	bl	800b57c <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	24080000 	.word	0x24080000
 8001220:	00000400 	.word	0x00000400
 8001224:	24000304 	.word	0x24000304
 8001228:	24000320 	.word	0x24000320

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001230:	4b37      	ldr	r3, [pc, #220]	; (8001310 <SystemInit+0xe4>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a36      	ldr	r2, [pc, #216]	; (8001310 <SystemInit+0xe4>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <SystemInit+0xe8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	2b06      	cmp	r3, #6
 800124a:	d807      	bhi.n	800125c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <SystemInit+0xe8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 030f 	bic.w	r3, r3, #15
 8001254:	4a2f      	ldr	r2, [pc, #188]	; (8001314 <SystemInit+0xe8>)
 8001256:	f043 0307 	orr.w	r3, r3, #7
 800125a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <SystemInit+0xec>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <SystemInit+0xec>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <SystemInit+0xec>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <SystemInit+0xec>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4929      	ldr	r1, [pc, #164]	; (8001318 <SystemInit+0xec>)
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <SystemInit+0xf0>)
 8001276:	4013      	ands	r3, r2
 8001278:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <SystemInit+0xe8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <SystemInit+0xe8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 030f 	bic.w	r3, r3, #15
 800128e:	4a21      	ldr	r2, [pc, #132]	; (8001314 <SystemInit+0xe8>)
 8001290:	f043 0307 	orr.w	r3, r3, #7
 8001294:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <SystemInit+0xec>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <SystemInit+0xec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <SystemInit+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <SystemInit+0xec>)
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <SystemInit+0xf4>)
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <SystemInit+0xec>)
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <SystemInit+0xf8>)
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <SystemInit+0xec>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <SystemInit+0xfc>)
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <SystemInit+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <SystemInit+0xec>)
 80012c2:	4a19      	ldr	r2, [pc, #100]	; (8001328 <SystemInit+0xfc>)
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <SystemInit+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <SystemInit+0xec>)
 80012ce:	4a16      	ldr	r2, [pc, #88]	; (8001328 <SystemInit+0xfc>)
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <SystemInit+0xec>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <SystemInit+0xec>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <SystemInit+0xec>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <SystemInit+0xec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <SystemInit+0x100>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <SystemInit+0x104>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012f6:	d202      	bcs.n	80012fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <SystemInit+0x108>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <SystemInit+0x10c>)
 8001300:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001304:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	52002000 	.word	0x52002000
 8001318:	58024400 	.word	0x58024400
 800131c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001320:	02020200 	.word	0x02020200
 8001324:	01ff0000 	.word	0x01ff0000
 8001328:	01010280 	.word	0x01010280
 800132c:	5c001000 	.word	0x5c001000
 8001330:	ffff0000 	.word	0xffff0000
 8001334:	51008108 	.word	0x51008108
 8001338:	52004000 	.word	0x52004000

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001340:	f7ff ff74 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	; (800137c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	; (8001388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f00a f90d 	bl	800b588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff f989 	bl	8000684 <main>
  bx  lr
 8001372:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001378:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800137c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001380:	0800bf68 	.word	0x0800bf68
  ldr r2, =_sbss
 8001384:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001388:	2400031c 	.word	0x2400031c

0800138c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC3_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001396:	2003      	movs	r0, #3
 8001398:	f001 fc48 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800139c:	f005 fad6 	bl	800694c <HAL_RCC_GetSysClockFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_Init+0x68>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	4913      	ldr	r1, [pc, #76]	; (80013fc <HAL_Init+0x6c>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_Init+0x68>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_Init+0x6c>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	fa22 f303 	lsr.w	r3, r2, r3
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_Init+0x70>)
 80013d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_Init+0x74>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f814 	bl	8001408 <HAL_InitTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e002      	b.n	80013f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ea:	f7ff fd15 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	58024400 	.word	0x58024400
 80013fc:	0800bee4 	.word	0x0800bee4
 8001400:	24000004 	.word	0x24000004
 8001404:	24000000 	.word	0x24000000

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_InitTick+0x60>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e021      	b.n	8001460 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_InitTick+0x64>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_InitTick+0x60>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fc2d 	bl	8002c92 <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f001 fbf7 	bl	8002c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_InitTick+0x68>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2400000c 	.word	0x2400000c
 800146c:	24000000 	.word	0x24000000
 8001470:	24000008 	.word	0x24000008

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	2400000c 	.word	0x2400000c
 8001498:	24000308 	.word	0x24000308

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	24000308 	.word	0x24000308

080014b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetREVID+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0c1b      	lsrs	r3, r3, #16
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	5c001000 	.word	0x5c001000

080014cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	609a      	str	r2, [r3, #8]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3360      	adds	r3, #96	; 0x60
 8001546:	461a      	mov	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	430b      	orrs	r3, r1
 8001562:	431a      	orrs	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001568:	bf00      	nop
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	611a      	str	r2, [r3, #16]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b087      	sub	sp, #28
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3360      	adds	r3, #96	; 0x60
 80015b6:	461a      	mov	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	601a      	str	r2, [r3, #0]
  }
}
 80015d0:	bf00      	nop
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001602:	b480      	push	{r7}
 8001604:	b087      	sub	sp, #28
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3330      	adds	r3, #48	; 0x30
 8001612:	461a      	mov	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	4413      	add	r3, r2
 8001620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	211f      	movs	r1, #31
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	401a      	ands	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	0e9b      	lsrs	r3, r3, #26
 800163a:	f003 011f 	and.w	r1, r3, #31
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	431a      	orrs	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800164e:	bf00      	nop
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f023 0203 	bic.w	r2, r3, #3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	60da      	str	r2, [r3, #12]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3314      	adds	r3, #20
 8001690:	461a      	mov	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	0e5b      	lsrs	r3, r3, #25
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	0d1b      	lsrs	r3, r3, #20
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2107      	movs	r1, #7
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	401a      	ands	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	0d1b      	lsrs	r3, r3, #20
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016f0:	43db      	mvns	r3, r3
 80016f2:	401a      	ands	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0318 	and.w	r3, r3, #24
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <LL_ADC_SetChannelSingleDiff+0x44>)
 80016fc:	40d9      	lsrs	r1, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	400b      	ands	r3, r1
 8001702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001706:	431a      	orrs	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	000fffff 	.word	0x000fffff

08001720 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 031f 	and.w	r3, r3, #31
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <LL_ADC_DisableDeepPowerDown+0x20>)
 800174a:	4013      	ands	r3, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6093      	str	r3, [r2, #8]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	5fffffc0 	.word	0x5fffffc0

08001760 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001774:	d101      	bne.n	800177a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <LL_ADC_EnableInternalRegulator+0x24>)
 8001796:	4013      	ands	r3, r2
 8001798:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	6fffffc0 	.word	0x6fffffc0

080017b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017c4:	d101      	bne.n	80017ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <LL_ADC_Enable+0x24>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	7fffffc0 	.word	0x7fffffc0

08001800 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <LL_ADC_IsEnabled+0x18>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <LL_ADC_IsEnabled+0x1a>
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <LL_ADC_REG_StartConversion+0x24>)
 8001836:	4013      	ands	r3, r2
 8001838:	f043 0204 	orr.w	r2, r3, #4
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	7fffffc0 	.word	0x7fffffc0

08001850 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d101      	bne.n	8001868 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b08      	cmp	r3, #8
 8001888:	d101      	bne.n	800188e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e18f      	b.n	8001bd6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fac1 	bl	8000e4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff3f 	bl	8001760 <LL_ADC_IsDeepPowerDownEnabled>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff25 	bl	800173c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff5a 	bl	80017b0 <LL_ADC_IsInternalRegulatorEnabled>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d114      	bne.n	800192c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff3e 	bl	8001788 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800190c:	4b87      	ldr	r3, [pc, #540]	; (8001b2c <HAL_ADC_Init+0x290>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	4a87      	ldr	r2, [pc, #540]	; (8001b30 <HAL_ADC_Init+0x294>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	099b      	lsrs	r3, r3, #6
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800191e:	e002      	b.n	8001926 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	3b01      	subs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f9      	bne.n	8001920 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff3d 	bl	80017b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10d      	bne.n	8001958 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f043 0210 	orr.w	r2, r3, #16
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff77 	bl	8001850 <LL_ADC_REG_IsConversionOngoing>
 8001962:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b00      	cmp	r3, #0
 800196e:	f040 8129 	bne.w	8001bc4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 8125 	bne.w	8001bc4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001982:	f043 0202 	orr.w	r2, r3, #2
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff36 	bl	8001800 <LL_ADC_IsEnabled>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d136      	bne.n	8001a08 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a65      	ldr	r2, [pc, #404]	; (8001b34 <HAL_ADC_Init+0x298>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d004      	beq.n	80019ae <HAL_ADC_Init+0x112>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a63      	ldr	r2, [pc, #396]	; (8001b38 <HAL_ADC_Init+0x29c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10e      	bne.n	80019cc <HAL_ADC_Init+0x130>
 80019ae:	4861      	ldr	r0, [pc, #388]	; (8001b34 <HAL_ADC_Init+0x298>)
 80019b0:	f7ff ff26 	bl	8001800 <LL_ADC_IsEnabled>
 80019b4:	4604      	mov	r4, r0
 80019b6:	4860      	ldr	r0, [pc, #384]	; (8001b38 <HAL_ADC_Init+0x29c>)
 80019b8:	f7ff ff22 	bl	8001800 <LL_ADC_IsEnabled>
 80019bc:	4603      	mov	r3, r0
 80019be:	4323      	orrs	r3, r4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	e008      	b.n	80019de <HAL_ADC_Init+0x142>
 80019cc:	485b      	ldr	r0, [pc, #364]	; (8001b3c <HAL_ADC_Init+0x2a0>)
 80019ce:	f7ff ff17 	bl	8001800 <LL_ADC_IsEnabled>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf0c      	ite	eq
 80019d8:	2301      	moveq	r3, #1
 80019da:	2300      	movne	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d012      	beq.n	8001a08 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a53      	ldr	r2, [pc, #332]	; (8001b34 <HAL_ADC_Init+0x298>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d004      	beq.n	80019f6 <HAL_ADC_Init+0x15a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <HAL_ADC_Init+0x29c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Init+0x15e>
 80019f6:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <HAL_ADC_Init+0x2a4>)
 80019f8:	e000      	b.n	80019fc <HAL_ADC_Init+0x160>
 80019fa:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_ADC_Init+0x2a8>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f7ff fd62 	bl	80014cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a08:	f7ff fd54 	bl	80014b4 <HAL_GetREVID>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d914      	bls.n	8001a40 <HAL_ADC_Init+0x1a4>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d110      	bne.n	8001a40 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7d5b      	ldrb	r3, [r3, #21]
 8001a22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7f1b      	ldrb	r3, [r3, #28]
 8001a34:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a36:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a38:	f043 030c 	orr.w	r3, r3, #12
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	e00d      	b.n	8001a5c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7d5b      	ldrb	r3, [r3, #21]
 8001a44:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a4a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a50:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7f1b      	ldrb	r3, [r3, #28]
 8001a56:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7f1b      	ldrb	r3, [r3, #28]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	045b      	lsls	r3, r3, #17
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_ADC_Init+0x2ac>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	69b9      	ldr	r1, [r7, #24]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fed2 	bl	8001850 <LL_ADC_REG_IsConversionOngoing>
 8001aac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fedf 	bl	8001876 <LL_ADC_INJ_IsConversionOngoing>
 8001ab8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d15f      	bne.n	8001b80 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d15c      	bne.n	8001b80 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7d1b      	ldrb	r3, [r3, #20]
 8001aca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_ADC_Init+0x2b0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	69b9      	ldr	r1, [r7, #24]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d130      	bne.n	8001b54 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_ADC_Init+0x2b4>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b06:	3a01      	subs	r2, #1
 8001b08:	0411      	lsls	r1, r2, #16
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b14:	4311      	orrs	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	e01c      	b.n	8001b64 <HAL_ADC_Init+0x2c8>
 8001b2a:	bf00      	nop
 8001b2c:	24000000 	.word	0x24000000
 8001b30:	053e2d63 	.word	0x053e2d63
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40022100 	.word	0x40022100
 8001b3c:	58026000 	.word	0x58026000
 8001b40:	40022300 	.word	0x40022300
 8001b44:	58026300 	.word	0x58026300
 8001b48:	fff0c003 	.word	0xfff0c003
 8001b4c:	ffffbffc 	.word	0xffffbffc
 8001b50:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fd76 	bl	800266c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d10c      	bne.n	8001ba2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f023 010f 	bic.w	r1, r3, #15
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	1e5a      	subs	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba0:	e007      	b.n	8001bb2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 020f 	bic.w	r2, r2, #15
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
 8001bc2:	e007      	b.n	8001bd4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f043 0210 	orr.w	r2, r3, #16
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	bf00      	nop

08001be0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a55      	ldr	r2, [pc, #340]	; (8001d48 <HAL_ADC_Start_DMA+0x168>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d004      	beq.n	8001c00 <HAL_ADC_Start_DMA+0x20>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a54      	ldr	r2, [pc, #336]	; (8001d4c <HAL_ADC_Start_DMA+0x16c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_Start_DMA+0x24>
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_ADC_Start_DMA+0x170>)
 8001c02:	e000      	b.n	8001c06 <HAL_ADC_Start_DMA+0x26>
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_ADC_Start_DMA+0x174>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fd8a 	bl	8001720 <LL_ADC_GetMultimode>
 8001c0c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fe1c 	bl	8001850 <LL_ADC_REG_IsConversionOngoing>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 808c 	bne.w	8001d38 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Start_DMA+0x4e>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e087      	b.n	8001d3e <HAL_ADC_Start_DMA+0x15e>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d002      	beq.n	8001c48 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	d170      	bne.n	8001d2a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fbf1 	bl	8002430 <ADC_Enable>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d163      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <HAL_ADC_Start_DMA+0x178>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a37      	ldr	r2, [pc, #220]	; (8001d4c <HAL_ADC_Start_DMA+0x16c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d002      	beq.n	8001c78 <HAL_ADC_Start_DMA+0x98>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	e000      	b.n	8001c7a <HAL_ADC_Start_DMA+0x9a>
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <HAL_ADC_Start_DMA+0x168>)
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d002      	beq.n	8001c88 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f023 0206 	bic.w	r2, r3, #6
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
 8001cac:	e002      	b.n	8001cb4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <HAL_ADC_Start_DMA+0x17c>)
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <HAL_ADC_Start_DMA+0x180>)
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <HAL_ADC_Start_DMA+0x184>)
 8001cca:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	221c      	movs	r2, #28
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0210 	orr.w	r2, r2, #16
 8001cea:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f7ff fcaf 	bl	800165a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3340      	adds	r3, #64	; 0x40
 8001d06:	4619      	mov	r1, r3
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f001 fb2a 	bl	8003364 <HAL_DMA_Start_IT>
 8001d10:	4603      	mov	r3, r0
 8001d12:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fd85 	bl	8001828 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d1e:	e00d      	b.n	8001d3c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d28:	e008      	b.n	8001d3c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d36:	e001      	b.n	8001d3c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40022100 	.word	0x40022100
 8001d50:	40022300 	.word	0x40022300
 8001d54:	58026300 	.word	0x58026300
 8001d58:	fffff0fe 	.word	0xfffff0fe
 8001d5c:	08002545 	.word	0x08002545
 8001d60:	0800261d 	.word	0x0800261d
 8001d64:	08002639 	.word	0x08002639

08001d68 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b0a1      	sub	sp, #132	; 0x84
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a9d      	ldr	r2, [pc, #628]	; (8002020 <HAL_ADC_ConfigChannel+0x290>)
 8001daa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x2a>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e321      	b.n	80023fe <HAL_ADC_ConfigChannel+0x66e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fd42 	bl	8001850 <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 8306 	bne.w	80023e0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d108      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x62>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2201      	movs	r2, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	e016      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x90>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e02:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	69d1      	ldr	r1, [r2, #28]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	430b      	orrs	r3, r1
 8001e2c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f7ff fbe1 	bl	8001602 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fd03 	bl	8001850 <LL_ADC_REG_IsConversionOngoing>
 8001e4a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fd10 	bl	8001876 <LL_ADC_INJ_IsConversionOngoing>
 8001e56:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 80b3 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80af 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	461a      	mov	r2, r3
 8001e76:	f7ff fc03 	bl	8001680 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e7a:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_ADC_ConfigChannel+0x294>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e86:	d10b      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x110>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	e01d      	b.n	8001edc <HAL_ADC_ConfigChannel+0x14c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10b      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x136>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	e00a      	b.n	8001edc <HAL_ADC_ConfigChannel+0x14c>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d027      	beq.n	8001f36 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef4:	f7ff fb1e 	bl	8001534 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6919      	ldr	r1, [r3, #16]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7e5b      	ldrb	r3, [r3, #25]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x17e>
 8001f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x180>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	461a      	mov	r2, r3
 8001f12:	f7ff fb48 	bl	80015a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	7e1b      	ldrb	r3, [r3, #24]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x19c>
 8001f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f2a:	e000      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x19e>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f7ff fb20 	bl	8001574 <LL_ADC_SetDataRightShift>
 8001f34:	e047      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	069b      	lsls	r3, r3, #26
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d107      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f58:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	069b      	lsls	r3, r3, #26
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d107      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f7c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	069b      	lsls	r3, r3, #26
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d107      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	069b      	lsls	r3, r3, #26
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fc18 	bl	8001800 <LL_ADC_IsEnabled>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 820d 	bne.w	80023f2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f7ff fb77 	bl	80016d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_ADC_ConfigChannel+0x290>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f040 8133 	bne.w	800225c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002002:	2b00      	cmp	r3, #0
 8002004:	d110      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x298>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2b09      	cmp	r3, #9
 8002014:	bf94      	ite	ls
 8002016:	2301      	movls	r3, #1
 8002018:	2300      	movhi	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	e01e      	b.n	800205c <HAL_ADC_ConfigChannel+0x2cc>
 800201e:	bf00      	nop
 8002020:	47ff0000 	.word	0x47ff0000
 8002024:	5c001000 	.word	0x5c001000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800203a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e003      	b.n	800204c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2b09      	cmp	r3, #9
 8002054:	bf94      	ite	ls
 8002056:	2301      	movls	r3, #1
 8002058:	2300      	movhi	r3, #0
 800205a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800205c:	2b00      	cmp	r3, #0
 800205e:	d079      	beq.n	8002154 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_ADC_ConfigChannel+0x2ec>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	3301      	adds	r3, #1
 8002074:	069b      	lsls	r3, r3, #26
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	e015      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x318>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800208a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800208e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002094:	2320      	movs	r3, #32
 8002096:	e003      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x338>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	3301      	adds	r3, #1
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	e017      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x368>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e003      	b.n	80020ec <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80020e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	ea42 0103 	orr.w	r1, r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_ADC_ConfigChannel+0x38e>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	051b      	lsls	r3, r3, #20
 800211c:	e018      	b.n	8002150 <HAL_ADC_ConfigChannel+0x3c0>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e003      	b.n	8002142 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3301      	adds	r3, #1
 8002144:	f003 021f 	and.w	r2, r3, #31
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002150:	430b      	orrs	r3, r1
 8002152:	e07e      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x3e0>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0e9b      	lsrs	r3, r3, #26
 8002166:	3301      	adds	r3, #1
 8002168:	069b      	lsls	r3, r3, #26
 800216a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216e:	e015      	b.n	800219c <HAL_ADC_ConfigChannel+0x40c>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e003      	b.n	8002194 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	069b      	lsls	r3, r3, #26
 8002198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x42c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	3301      	adds	r3, #1
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	e017      	b.n	80021ec <HAL_ADC_ConfigChannel+0x45c>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	61bb      	str	r3, [r7, #24]
  return result;
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80021d4:	2320      	movs	r3, #32
 80021d6:	e003      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	ea42 0103 	orr.w	r1, r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10d      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x488>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	3301      	adds	r3, #1
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	3b1e      	subs	r3, #30
 8002210:	051b      	lsls	r3, r3, #20
 8002212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002216:	e01b      	b.n	8002250 <HAL_ADC_ConfigChannel+0x4c0>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	60fb      	str	r3, [r7, #12]
  return result;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002230:	2320      	movs	r3, #32
 8002232:	e003      	b.n	800223c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f003 021f 	and.w	r2, r3, #31
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	3b1e      	subs	r3, #30
 800224a:	051b      	lsls	r3, r3, #20
 800224c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002250:	430b      	orrs	r3, r1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	6892      	ldr	r2, [r2, #8]
 8002256:	4619      	mov	r1, r3
 8002258:	f7ff fa12 	bl	8001680 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f280 80c6 	bge.w	80023f2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a67      	ldr	r2, [pc, #412]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_ADC_ConfigChannel+0x4ea>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a65      	ldr	r2, [pc, #404]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_ADC_ConfigChannel+0x4ee>
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_ADC_ConfigChannel+0x680>)
 800227c:	e000      	b.n	8002280 <HAL_ADC_ConfigChannel+0x4f0>
 800227e:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_ADC_ConfigChannel+0x684>)
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f949 	bl	8001518 <LL_ADC_GetCommonPathInternalCh>
 8002286:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5e      	ldr	r2, [pc, #376]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_ADC_ConfigChannel+0x50c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a5d      	ldr	r2, [pc, #372]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d10e      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x52a>
 800229c:	485a      	ldr	r0, [pc, #360]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 800229e:	f7ff faaf 	bl	8001800 <LL_ADC_IsEnabled>
 80022a2:	4604      	mov	r4, r0
 80022a4:	4859      	ldr	r0, [pc, #356]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 80022a6:	f7ff faab 	bl	8001800 <LL_ADC_IsEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4323      	orrs	r3, r4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	e008      	b.n	80022cc <HAL_ADC_ConfigChannel+0x53c>
 80022ba:	4857      	ldr	r0, [pc, #348]	; (8002418 <HAL_ADC_ConfigChannel+0x688>)
 80022bc:	f7ff faa0 	bl	8001800 <LL_ADC_IsEnabled>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d07d      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a51      	ldr	r2, [pc, #324]	; (800241c <HAL_ADC_ConfigChannel+0x68c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d130      	bne.n	800233c <HAL_ADC_ConfigChannel+0x5ac>
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12b      	bne.n	800233c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_ADC_ConfigChannel+0x688>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	f040 8081 	bne.w	80023f2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a44      	ldr	r2, [pc, #272]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x574>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a43      	ldr	r2, [pc, #268]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x578>
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_ADC_ConfigChannel+0x680>)
 8002306:	e000      	b.n	800230a <HAL_ADC_ConfigChannel+0x57a>
 8002308:	4a42      	ldr	r2, [pc, #264]	; (8002414 <HAL_ADC_ConfigChannel+0x684>)
 800230a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f7ff f8ed 	bl	80014f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_ADC_ConfigChannel+0x690>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	4a41      	ldr	r2, [pc, #260]	; (8002424 <HAL_ADC_ConfigChannel+0x694>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800232c:	e002      	b.n	8002334 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800233a:	e05a      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a39      	ldr	r2, [pc, #228]	; (8002428 <HAL_ADC_ConfigChannel+0x698>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d11e      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x5f4>
 8002346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d119      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a30      	ldr	r2, [pc, #192]	; (8002418 <HAL_ADC_ConfigChannel+0x688>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d14b      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_ADC_ConfigChannel+0x5de>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x5e2>
 800236e:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_ADC_ConfigChannel+0x680>)
 8002370:	e000      	b.n	8002374 <HAL_ADC_ConfigChannel+0x5e4>
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <HAL_ADC_ConfigChannel+0x684>)
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f7ff f8b8 	bl	80014f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002382:	e036      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_ADC_ConfigChannel+0x69c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d131      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d12c      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_ADC_ConfigChannel+0x688>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d127      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x626>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x62a>
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_ADC_ConfigChannel+0x680>)
 80023b8:	e000      	b.n	80023bc <HAL_ADC_ConfigChannel+0x62c>
 80023ba:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_ADC_ConfigChannel+0x684>)
 80023bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7ff f894 	bl	80014f2 <LL_ADC_SetCommonPathInternalCh>
 80023ca:	e012      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023de:	e008      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3784      	adds	r7, #132	; 0x84
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	40022100 	.word	0x40022100
 8002410:	40022300 	.word	0x40022300
 8002414:	58026300 	.word	0x58026300
 8002418:	58026000 	.word	0x58026000
 800241c:	cb840000 	.word	0xcb840000
 8002420:	24000000 	.word	0x24000000
 8002424:	053e2d63 	.word	0x053e2d63
 8002428:	c7520000 	.word	0xc7520000
 800242c:	cfb80000 	.word	0xcfb80000

08002430 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f9df 	bl	8001800 <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d16e      	bne.n	8002526 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	4b38      	ldr	r3, [pc, #224]	; (8002530 <ADC_Enable+0x100>)
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e05a      	b.n	8002528 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f9ae 	bl	80017d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800247c:	f7ff f80e 	bl	800149c <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <ADC_Enable+0x104>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d004      	beq.n	8002496 <ADC_Enable+0x66>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a29      	ldr	r2, [pc, #164]	; (8002538 <ADC_Enable+0x108>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <ADC_Enable+0x6a>
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <ADC_Enable+0x10c>)
 8002498:	e000      	b.n	800249c <ADC_Enable+0x6c>
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <ADC_Enable+0x110>)
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff f93f 	bl	8001720 <LL_ADC_GetMultimode>
 80024a2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <ADC_Enable+0x108>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d002      	beq.n	80024b4 <ADC_Enable+0x84>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	e000      	b.n	80024b6 <ADC_Enable+0x86>
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <ADC_Enable+0x104>)
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d02c      	beq.n	8002518 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d130      	bne.n	8002526 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024c4:	e028      	b.n	8002518 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f998 	bl	8001800 <LL_ADC_IsEnabled>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d104      	bne.n	80024e0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f97c 	bl	80017d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024e0:	f7fe ffdc 	bl	800149c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d914      	bls.n	8002518 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d00d      	beq.n	8002518 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	f043 0210 	orr.w	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e007      	b.n	8002528 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d1cf      	bne.n	80024c6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	8000003f 	.word	0x8000003f
 8002534:	40022000 	.word	0x40022000
 8002538:	40022100 	.word	0x40022100
 800253c:	40022300 	.word	0x40022300
 8002540:	58026300 	.word	0x58026300

08002544 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800255a:	2b00      	cmp	r3, #0
 800255c:	d14b      	bne.n	80025f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d021      	beq.n	80025bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff f82d 	bl	80015dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d032      	beq.n	80025ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d12b      	bne.n	80025ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11f      	bne.n	80025ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
 80025ba:	e018      	b.n	80025ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d111      	bne.n	80025ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7fe fbfc 	bl	8000dec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025f4:	e00e      	b.n	8002614 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff fbba 	bl	8001d7c <HAL_ADC_ErrorCallback>
}
 8002608:	e004      	b.n	8002614 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff fb9c 	bl	8001d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f043 0204 	orr.w	r2, r3, #4
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff fb8c 	bl	8001d7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a7a      	ldr	r2, [pc, #488]	; (8002864 <ADC_ConfigureBoostMode+0x1f8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <ADC_ConfigureBoostMode+0x1c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a79      	ldr	r2, [pc, #484]	; (8002868 <ADC_ConfigureBoostMode+0x1fc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d109      	bne.n	800269c <ADC_ConfigureBoostMode+0x30>
 8002688:	4b78      	ldr	r3, [pc, #480]	; (800286c <ADC_ConfigureBoostMode+0x200>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e008      	b.n	80026ae <ADC_ConfigureBoostMode+0x42>
 800269c:	4b74      	ldr	r3, [pc, #464]	; (8002870 <ADC_ConfigureBoostMode+0x204>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01c      	beq.n	80026ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026b2:	f004 fac5 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 80026b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026c0:	d010      	beq.n	80026e4 <ADC_ConfigureBoostMode+0x78>
 80026c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026c6:	d873      	bhi.n	80027b0 <ADC_ConfigureBoostMode+0x144>
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d002      	beq.n	80026d4 <ADC_ConfigureBoostMode+0x68>
 80026ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026d2:	d16d      	bne.n	80027b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	60fb      	str	r3, [r7, #12]
        break;
 80026e2:	e068      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	60fb      	str	r3, [r7, #12]
        break;
 80026ea:	e064      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	f005 fd0a 	bl	800810c <HAL_RCCEx_GetPeriphCLKFreq>
 80026f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002702:	d051      	beq.n	80027a8 <ADC_ConfigureBoostMode+0x13c>
 8002704:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002708:	d854      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 800270a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800270e:	d047      	beq.n	80027a0 <ADC_ConfigureBoostMode+0x134>
 8002710:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002714:	d84e      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 8002716:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800271a:	d03d      	beq.n	8002798 <ADC_ConfigureBoostMode+0x12c>
 800271c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002720:	d848      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 8002722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002726:	d033      	beq.n	8002790 <ADC_ConfigureBoostMode+0x124>
 8002728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800272c:	d842      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 800272e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002732:	d029      	beq.n	8002788 <ADC_ConfigureBoostMode+0x11c>
 8002734:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002738:	d83c      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 800273a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800273e:	d01a      	beq.n	8002776 <ADC_ConfigureBoostMode+0x10a>
 8002740:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002744:	d836      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 8002746:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800274a:	d014      	beq.n	8002776 <ADC_ConfigureBoostMode+0x10a>
 800274c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002750:	d830      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 8002752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002756:	d00e      	beq.n	8002776 <ADC_ConfigureBoostMode+0x10a>
 8002758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800275c:	d82a      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 800275e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002762:	d008      	beq.n	8002776 <ADC_ConfigureBoostMode+0x10a>
 8002764:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002768:	d824      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x148>
 800276a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800276e:	d002      	beq.n	8002776 <ADC_ConfigureBoostMode+0x10a>
 8002770:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002774:	d11e      	bne.n	80027b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0c9b      	lsrs	r3, r3, #18
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	60fb      	str	r3, [r7, #12]
        break;
 8002786:	e016      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	60fb      	str	r3, [r7, #12]
        break;
 800278e:	e012      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	60fb      	str	r3, [r7, #12]
        break;
 8002796:	e00e      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	60fb      	str	r3, [r7, #12]
        break;
 800279e:	e00a      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	09db      	lsrs	r3, r3, #7
 80027a4:	60fb      	str	r3, [r7, #12]
        break;
 80027a6:	e006      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	60fb      	str	r3, [r7, #12]
        break;
 80027ae:	e002      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80027b0:	bf00      	nop
 80027b2:	e000      	b.n	80027b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027b4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027b6:	f7fe fe7d 	bl	80014b4 <HAL_GetREVID>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d815      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <ADC_ConfigureBoostMode+0x208>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d908      	bls.n	80027de <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027da:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027dc:	e03e      	b.n	800285c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	e035      	b.n	800285c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <ADC_ConfigureBoostMode+0x20c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d808      	bhi.n	8002810 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800280c:	609a      	str	r2, [r3, #8]
}
 800280e:	e025      	b.n	800285c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a1a      	ldr	r2, [pc, #104]	; (800287c <ADC_ConfigureBoostMode+0x210>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d80a      	bhi.n	800282e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	e016      	b.n	800285c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <ADC_ConfigureBoostMode+0x214>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d80a      	bhi.n	800284c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002848:	609a      	str	r2, [r3, #8]
}
 800284a:	e007      	b.n	800285c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40022000 	.word	0x40022000
 8002868:	40022100 	.word	0x40022100
 800286c:	40022300 	.word	0x40022300
 8002870:	58026300 	.word	0x58026300
 8002874:	01312d00 	.word	0x01312d00
 8002878:	005f5e10 	.word	0x005f5e10
 800287c:	00bebc20 	.word	0x00bebc20
 8002880:	017d7840 	.word	0x017d7840

08002884 <LL_ADC_IsEnabled>:
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <LL_ADC_IsEnabled+0x18>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_ADC_IsEnabled+0x1a>
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_REG_IsConversionOngoing>:
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d101      	bne.n	80028c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b09f      	sub	sp, #124	; 0x7c
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e0be      	b.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5c      	ldr	r2, [pc, #368]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002908:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	e001      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e09d      	b.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ffb9 	bl	80028aa <LL_ADC_REG_IsConversionOngoing>
 8002938:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ffb3 	bl	80028aa <LL_ADC_REG_IsConversionOngoing>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d17f      	bne.n	8002a4a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800294a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800294c:	2b00      	cmp	r3, #0
 800294e:	d17c      	bne.n	8002a4a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a47      	ldr	r2, [pc, #284]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a46      	ldr	r2, [pc, #280]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002964:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002966:	e000      	b.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002968:	4b45      	ldr	r3, [pc, #276]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800296a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d039      	beq.n	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	431a      	orrs	r2, r3
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a3a      	ldr	r2, [pc, #232]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10e      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800299a:	4836      	ldr	r0, [pc, #216]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800299c:	f7ff ff72 	bl	8002884 <LL_ADC_IsEnabled>
 80029a0:	4604      	mov	r4, r0
 80029a2:	4835      	ldr	r0, [pc, #212]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029a4:	f7ff ff6e 	bl	8002884 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4323      	orrs	r3, r4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e008      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80029b8:	4832      	ldr	r0, [pc, #200]	; (8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80029ba:	f7ff ff63 	bl	8002884 <LL_ADC_IsEnabled>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d047      	beq.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	6811      	ldr	r1, [r2, #0]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	6892      	ldr	r2, [r2, #8]
 80029de:	430a      	orrs	r2, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e6:	e03a      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10e      	bne.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002a08:	481a      	ldr	r0, [pc, #104]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a0a:	f7ff ff3b 	bl	8002884 <LL_ADC_IsEnabled>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	4819      	ldr	r0, [pc, #100]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a12:	f7ff ff37 	bl	8002884 <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf0c      	ite	eq
 8002a1e:	2301      	moveq	r3, #1
 8002a20:	2300      	movne	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e008      	b.n	8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a26:	4817      	ldr	r0, [pc, #92]	; (8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a28:	f7ff ff2c 	bl	8002884 <LL_ADC_IsEnabled>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d010      	beq.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a46:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a48:	e009      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a5c:	e000      	b.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a5e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	377c      	adds	r7, #124	; 0x7c
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}
 8002a74:	40022000 	.word	0x40022000
 8002a78:	40022100 	.word	0x40022100
 8002a7c:	40022300 	.word	0x40022300
 8002a80:	58026300 	.word	0x58026300
 8002a84:	58026000 	.word	0x58026000
 8002a88:	fffff0e0 	.word	0xfffff0e0

08002a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <__NVIC_SetPriorityGrouping+0x40>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <__NVIC_SetPriorityGrouping+0x40>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	05fa0000 	.word	0x05fa0000

08002ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0b      	blt.n	8002b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4907      	ldr	r1, [pc, #28]	; (8002b28 <__NVIC_EnableIRQ+0x38>)
 8002b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf8:	d301      	bcc.n	8002bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00f      	b.n	8002c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <SysTick_Config+0x40>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c06:	210f      	movs	r1, #15
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	f7ff ff8e 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <SysTick_Config+0x40>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <SysTick_Config+0x40>)
 8002c18:	2207      	movs	r2, #7
 8002c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000e010 	.word	0xe000e010

08002c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff29 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff40 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff90 	bl	8002b80 <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5f 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff33 	bl	8002af0 <__NVIC_EnableIRQ>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ffa4 	bl	8002be8 <SysTick_Config>
 8002ca0:	4603      	mov	r3, r0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7fe fbf2 	bl	800149c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e316      	b.n	80032f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a66      	ldr	r2, [pc, #408]	; (8002e64 <HAL_DMA_Init+0x1b8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d04a      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <HAL_DMA_Init+0x1bc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d045      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a63      	ldr	r2, [pc, #396]	; (8002e6c <HAL_DMA_Init+0x1c0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d040      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a62      	ldr	r2, [pc, #392]	; (8002e70 <HAL_DMA_Init+0x1c4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d03b      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a60      	ldr	r2, [pc, #384]	; (8002e74 <HAL_DMA_Init+0x1c8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d036      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a5f      	ldr	r2, [pc, #380]	; (8002e78 <HAL_DMA_Init+0x1cc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d031      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5d      	ldr	r2, [pc, #372]	; (8002e7c <HAL_DMA_Init+0x1d0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d02c      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5c      	ldr	r2, [pc, #368]	; (8002e80 <HAL_DMA_Init+0x1d4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d027      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5a      	ldr	r2, [pc, #360]	; (8002e84 <HAL_DMA_Init+0x1d8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a59      	ldr	r2, [pc, #356]	; (8002e88 <HAL_DMA_Init+0x1dc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01d      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_DMA_Init+0x1e0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d018      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a56      	ldr	r2, [pc, #344]	; (8002e90 <HAL_DMA_Init+0x1e4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a54      	ldr	r2, [pc, #336]	; (8002e94 <HAL_DMA_Init+0x1e8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a53      	ldr	r2, [pc, #332]	; (8002e98 <HAL_DMA_Init+0x1ec>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a51      	ldr	r2, [pc, #324]	; (8002e9c <HAL_DMA_Init+0x1f0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_DMA_Init+0xb8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a50      	ldr	r2, [pc, #320]	; (8002ea0 <HAL_DMA_Init+0x1f4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d101      	bne.n	8002d68 <HAL_DMA_Init+0xbc>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_Init+0xbe>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 813b 	beq.w	8002fe6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a37      	ldr	r2, [pc, #220]	; (8002e64 <HAL_DMA_Init+0x1b8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d04a      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a36      	ldr	r2, [pc, #216]	; (8002e68 <HAL_DMA_Init+0x1bc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d045      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <HAL_DMA_Init+0x1c0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d040      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a33      	ldr	r2, [pc, #204]	; (8002e70 <HAL_DMA_Init+0x1c4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d03b      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <HAL_DMA_Init+0x1c8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d036      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a30      	ldr	r2, [pc, #192]	; (8002e78 <HAL_DMA_Init+0x1cc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d031      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2e      	ldr	r2, [pc, #184]	; (8002e7c <HAL_DMA_Init+0x1d0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d02c      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2d      	ldr	r2, [pc, #180]	; (8002e80 <HAL_DMA_Init+0x1d4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d027      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <HAL_DMA_Init+0x1d8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d022      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <HAL_DMA_Init+0x1dc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d01d      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <HAL_DMA_Init+0x1e0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d018      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a27      	ldr	r2, [pc, #156]	; (8002e90 <HAL_DMA_Init+0x1e4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <HAL_DMA_Init+0x1e8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00e      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <HAL_DMA_Init+0x1ec>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_DMA_Init+0x1f0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_DMA_Init+0x174>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <HAL_DMA_Init+0x1f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d108      	bne.n	8002e32 <HAL_DMA_Init+0x186>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e007      	b.n	8002e42 <HAL_DMA_Init+0x196>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e42:	e02f      	b.n	8002ea4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e44:	f7fe fb2a 	bl	800149c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b05      	cmp	r3, #5
 8002e50:	d928      	bls.n	8002ea4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e246      	b.n	80032f2 <HAL_DMA_Init+0x646>
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1c8      	bne.n	8002e44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4b83      	ldr	r3, [pc, #524]	; (80030cc <HAL_DMA_Init+0x420>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002eca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d107      	bne.n	8002f08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	4313      	orrs	r3, r2
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f08:	4b71      	ldr	r3, [pc, #452]	; (80030d0 <HAL_DMA_Init+0x424>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b71      	ldr	r3, [pc, #452]	; (80030d4 <HAL_DMA_Init+0x428>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f14:	d328      	bcc.n	8002f68 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b28      	cmp	r3, #40	; 0x28
 8002f1c:	d903      	bls.n	8002f26 <HAL_DMA_Init+0x27a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b2e      	cmp	r3, #46	; 0x2e
 8002f24:	d917      	bls.n	8002f56 <HAL_DMA_Init+0x2aa>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f2c:	d903      	bls.n	8002f36 <HAL_DMA_Init+0x28a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b42      	cmp	r3, #66	; 0x42
 8002f34:	d90f      	bls.n	8002f56 <HAL_DMA_Init+0x2aa>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b46      	cmp	r3, #70	; 0x46
 8002f3c:	d903      	bls.n	8002f46 <HAL_DMA_Init+0x29a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b48      	cmp	r3, #72	; 0x48
 8002f44:	d907      	bls.n	8002f56 <HAL_DMA_Init+0x2aa>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b4e      	cmp	r3, #78	; 0x4e
 8002f4c:	d905      	bls.n	8002f5a <HAL_DMA_Init+0x2ae>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b52      	cmp	r3, #82	; 0x52
 8002f54:	d801      	bhi.n	8002f5a <HAL_DMA_Init+0x2ae>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_DMA_Init+0x2b0>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f66:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f023 0307 	bic.w	r3, r3, #7
 8002f7e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d117      	bne.n	8002fc2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00e      	beq.n	8002fc2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f002 fb33 	bl	8005610 <DMA_CheckFifoParam>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2240      	movs	r2, #64	; 0x40
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e197      	b.n	80032f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f002 fa6e 	bl	80054ac <DMA_CalcBaseAndBitshift>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	223f      	movs	r2, #63	; 0x3f
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	e0cd      	b.n	8003182 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a3b      	ldr	r2, [pc, #236]	; (80030d8 <HAL_DMA_Init+0x42c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d022      	beq.n	8003036 <HAL_DMA_Init+0x38a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a39      	ldr	r2, [pc, #228]	; (80030dc <HAL_DMA_Init+0x430>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01d      	beq.n	8003036 <HAL_DMA_Init+0x38a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_DMA_Init+0x434>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_DMA_Init+0x38a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a36      	ldr	r2, [pc, #216]	; (80030e4 <HAL_DMA_Init+0x438>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_DMA_Init+0x38a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a35      	ldr	r2, [pc, #212]	; (80030e8 <HAL_DMA_Init+0x43c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_DMA_Init+0x38a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a33      	ldr	r2, [pc, #204]	; (80030ec <HAL_DMA_Init+0x440>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_DMA_Init+0x38a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a32      	ldr	r2, [pc, #200]	; (80030f0 <HAL_DMA_Init+0x444>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_DMA_Init+0x38a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a30      	ldr	r2, [pc, #192]	; (80030f4 <HAL_DMA_Init+0x448>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_DMA_Init+0x38e>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_DMA_Init+0x390>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8097 	beq.w	8003170 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <HAL_DMA_Init+0x42c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d021      	beq.n	8003090 <HAL_DMA_Init+0x3e4>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a22      	ldr	r2, [pc, #136]	; (80030dc <HAL_DMA_Init+0x430>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01c      	beq.n	8003090 <HAL_DMA_Init+0x3e4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a21      	ldr	r2, [pc, #132]	; (80030e0 <HAL_DMA_Init+0x434>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d017      	beq.n	8003090 <HAL_DMA_Init+0x3e4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_DMA_Init+0x438>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d012      	beq.n	8003090 <HAL_DMA_Init+0x3e4>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_DMA_Init+0x43c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00d      	beq.n	8003090 <HAL_DMA_Init+0x3e4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_DMA_Init+0x440>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d008      	beq.n	8003090 <HAL_DMA_Init+0x3e4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_DMA_Init+0x444>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <HAL_DMA_Init+0x3e4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_DMA_Init+0x448>)
 800308e:	4293      	cmp	r3, r2
 8003090:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_DMA_Init+0x44c>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d020      	beq.n	80030fc <HAL_DMA_Init+0x450>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b80      	cmp	r3, #128	; 0x80
 80030c0:	d102      	bne.n	80030c8 <HAL_DMA_Init+0x41c>
 80030c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030c6:	e01a      	b.n	80030fe <HAL_DMA_Init+0x452>
 80030c8:	2300      	movs	r3, #0
 80030ca:	e018      	b.n	80030fe <HAL_DMA_Init+0x452>
 80030cc:	fe10803f 	.word	0xfe10803f
 80030d0:	5c001000 	.word	0x5c001000
 80030d4:	ffff0000 	.word	0xffff0000
 80030d8:	58025408 	.word	0x58025408
 80030dc:	5802541c 	.word	0x5802541c
 80030e0:	58025430 	.word	0x58025430
 80030e4:	58025444 	.word	0x58025444
 80030e8:	58025458 	.word	0x58025458
 80030ec:	5802546c 	.word	0x5802546c
 80030f0:	58025480 	.word	0x58025480
 80030f4:	58025494 	.word	0x58025494
 80030f8:	fffe000f 	.word	0xfffe000f
 80030fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68d2      	ldr	r2, [r2, #12]
 8003102:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800310c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800311c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800312c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b6e      	ldr	r3, [pc, #440]	; (80032fc <HAL_DMA_Init+0x650>)
 8003144:	4413      	add	r3, r2
 8003146:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_DMA_Init+0x654>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f002 f9a9 	bl	80054ac <DMA_CalcBaseAndBitshift>
 800315a:	4603      	mov	r3, r0
 800315c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2201      	movs	r2, #1
 8003168:	409a      	lsls	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	e008      	b.n	8003182 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2203      	movs	r2, #3
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0b7      	b.n	80032f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a5f      	ldr	r2, [pc, #380]	; (8003304 <HAL_DMA_Init+0x658>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d072      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a5d      	ldr	r2, [pc, #372]	; (8003308 <HAL_DMA_Init+0x65c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d06d      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5c      	ldr	r2, [pc, #368]	; (800330c <HAL_DMA_Init+0x660>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d068      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5a      	ldr	r2, [pc, #360]	; (8003310 <HAL_DMA_Init+0x664>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d063      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a59      	ldr	r2, [pc, #356]	; (8003314 <HAL_DMA_Init+0x668>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d05e      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a57      	ldr	r2, [pc, #348]	; (8003318 <HAL_DMA_Init+0x66c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d059      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a56      	ldr	r2, [pc, #344]	; (800331c <HAL_DMA_Init+0x670>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d054      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a54      	ldr	r2, [pc, #336]	; (8003320 <HAL_DMA_Init+0x674>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d04f      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a53      	ldr	r2, [pc, #332]	; (8003324 <HAL_DMA_Init+0x678>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d04a      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_DMA_Init+0x67c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d045      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a50      	ldr	r2, [pc, #320]	; (800332c <HAL_DMA_Init+0x680>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d040      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a4e      	ldr	r2, [pc, #312]	; (8003330 <HAL_DMA_Init+0x684>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d03b      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a4d      	ldr	r2, [pc, #308]	; (8003334 <HAL_DMA_Init+0x688>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d036      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a4b      	ldr	r2, [pc, #300]	; (8003338 <HAL_DMA_Init+0x68c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d031      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a4a      	ldr	r2, [pc, #296]	; (800333c <HAL_DMA_Init+0x690>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d02c      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_DMA_Init+0x694>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d027      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_DMA_Init+0x698>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a45      	ldr	r2, [pc, #276]	; (8003348 <HAL_DMA_Init+0x69c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01d      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a44      	ldr	r2, [pc, #272]	; (800334c <HAL_DMA_Init+0x6a0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d018      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a42      	ldr	r2, [pc, #264]	; (8003350 <HAL_DMA_Init+0x6a4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_DMA_Init+0x6a8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a3f      	ldr	r2, [pc, #252]	; (8003358 <HAL_DMA_Init+0x6ac>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a3e      	ldr	r2, [pc, #248]	; (800335c <HAL_DMA_Init+0x6b0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_DMA_Init+0x5c6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <HAL_DMA_Init+0x6b4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_DMA_Init+0x5ca>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_DMA_Init+0x5cc>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d032      	beq.n	80032e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f002 fa43 	bl	8005708 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d102      	bne.n	8003290 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <HAL_DMA_Init+0x624>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d80c      	bhi.n	80032d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f002 fac0 	bl	800583c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	e008      	b.n	80032e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	a7fdabf8 	.word	0xa7fdabf8
 8003300:	cccccccd 	.word	0xcccccccd
 8003304:	40020010 	.word	0x40020010
 8003308:	40020028 	.word	0x40020028
 800330c:	40020040 	.word	0x40020040
 8003310:	40020058 	.word	0x40020058
 8003314:	40020070 	.word	0x40020070
 8003318:	40020088 	.word	0x40020088
 800331c:	400200a0 	.word	0x400200a0
 8003320:	400200b8 	.word	0x400200b8
 8003324:	40020410 	.word	0x40020410
 8003328:	40020428 	.word	0x40020428
 800332c:	40020440 	.word	0x40020440
 8003330:	40020458 	.word	0x40020458
 8003334:	40020470 	.word	0x40020470
 8003338:	40020488 	.word	0x40020488
 800333c:	400204a0 	.word	0x400204a0
 8003340:	400204b8 	.word	0x400204b8
 8003344:	58025408 	.word	0x58025408
 8003348:	5802541c 	.word	0x5802541c
 800334c:	58025430 	.word	0x58025430
 8003350:	58025444 	.word	0x58025444
 8003354:	58025458 	.word	0x58025458
 8003358:	5802546c 	.word	0x5802546c
 800335c:	58025480 	.word	0x58025480
 8003360:	58025494 	.word	0x58025494

08003364 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e226      	b.n	80037ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_DMA_Start_IT+0x2a>
 800338a:	2302      	movs	r3, #2
 800338c:	e21f      	b.n	80037ce <HAL_DMA_Start_IT+0x46a>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 820a 	bne.w	80037b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a68      	ldr	r2, [pc, #416]	; (8003558 <HAL_DMA_Start_IT+0x1f4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d04a      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a66      	ldr	r2, [pc, #408]	; (800355c <HAL_DMA_Start_IT+0x1f8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d045      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a65      	ldr	r2, [pc, #404]	; (8003560 <HAL_DMA_Start_IT+0x1fc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a63      	ldr	r2, [pc, #396]	; (8003564 <HAL_DMA_Start_IT+0x200>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d03b      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a62      	ldr	r2, [pc, #392]	; (8003568 <HAL_DMA_Start_IT+0x204>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d036      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a60      	ldr	r2, [pc, #384]	; (800356c <HAL_DMA_Start_IT+0x208>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5f      	ldr	r2, [pc, #380]	; (8003570 <HAL_DMA_Start_IT+0x20c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a5d      	ldr	r2, [pc, #372]	; (8003574 <HAL_DMA_Start_IT+0x210>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a5c      	ldr	r2, [pc, #368]	; (8003578 <HAL_DMA_Start_IT+0x214>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a5a      	ldr	r2, [pc, #360]	; (800357c <HAL_DMA_Start_IT+0x218>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a59      	ldr	r2, [pc, #356]	; (8003580 <HAL_DMA_Start_IT+0x21c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a57      	ldr	r2, [pc, #348]	; (8003584 <HAL_DMA_Start_IT+0x220>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a56      	ldr	r2, [pc, #344]	; (8003588 <HAL_DMA_Start_IT+0x224>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a54      	ldr	r2, [pc, #336]	; (800358c <HAL_DMA_Start_IT+0x228>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a53      	ldr	r2, [pc, #332]	; (8003590 <HAL_DMA_Start_IT+0x22c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_DMA_Start_IT+0xee>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a51      	ldr	r2, [pc, #324]	; (8003594 <HAL_DMA_Start_IT+0x230>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d108      	bne.n	8003464 <HAL_DMA_Start_IT+0x100>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e007      	b.n	8003474 <HAL_DMA_Start_IT+0x110>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f001 fe6a 	bl	8005154 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a34      	ldr	r2, [pc, #208]	; (8003558 <HAL_DMA_Start_IT+0x1f4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d04a      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a33      	ldr	r2, [pc, #204]	; (800355c <HAL_DMA_Start_IT+0x1f8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d045      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a31      	ldr	r2, [pc, #196]	; (8003560 <HAL_DMA_Start_IT+0x1fc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d040      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a30      	ldr	r2, [pc, #192]	; (8003564 <HAL_DMA_Start_IT+0x200>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d03b      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2e      	ldr	r2, [pc, #184]	; (8003568 <HAL_DMA_Start_IT+0x204>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d036      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2d      	ldr	r2, [pc, #180]	; (800356c <HAL_DMA_Start_IT+0x208>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d031      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2b      	ldr	r2, [pc, #172]	; (8003570 <HAL_DMA_Start_IT+0x20c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d02c      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <HAL_DMA_Start_IT+0x210>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d027      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a28      	ldr	r2, [pc, #160]	; (8003578 <HAL_DMA_Start_IT+0x214>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d022      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a27      	ldr	r2, [pc, #156]	; (800357c <HAL_DMA_Start_IT+0x218>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d01d      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <HAL_DMA_Start_IT+0x21c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d018      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a24      	ldr	r2, [pc, #144]	; (8003584 <HAL_DMA_Start_IT+0x220>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d013      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <HAL_DMA_Start_IT+0x224>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00e      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a21      	ldr	r2, [pc, #132]	; (800358c <HAL_DMA_Start_IT+0x228>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <HAL_DMA_Start_IT+0x22c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_DMA_Start_IT+0x1bc>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <HAL_DMA_Start_IT+0x230>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_DMA_Start_IT+0x1c0>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_DMA_Start_IT+0x1c2>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d036      	beq.n	8003598 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 021e 	bic.w	r2, r3, #30
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0216 	orr.w	r2, r2, #22
 800353c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03e      	beq.n	80035c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0208 	orr.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e035      	b.n	80035c4 <HAL_DMA_Start_IT+0x260>
 8003558:	40020010 	.word	0x40020010
 800355c:	40020028 	.word	0x40020028
 8003560:	40020040 	.word	0x40020040
 8003564:	40020058 	.word	0x40020058
 8003568:	40020070 	.word	0x40020070
 800356c:	40020088 	.word	0x40020088
 8003570:	400200a0 	.word	0x400200a0
 8003574:	400200b8 	.word	0x400200b8
 8003578:	40020410 	.word	0x40020410
 800357c:	40020428 	.word	0x40020428
 8003580:	40020440 	.word	0x40020440
 8003584:	40020458 	.word	0x40020458
 8003588:	40020470 	.word	0x40020470
 800358c:	40020488 	.word	0x40020488
 8003590:	400204a0 	.word	0x400204a0
 8003594:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 020e 	bic.w	r2, r3, #14
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 020a 	orr.w	r2, r2, #10
 80035aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0204 	orr.w	r2, r2, #4
 80035c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a83      	ldr	r2, [pc, #524]	; (80037d8 <HAL_DMA_Start_IT+0x474>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d072      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a82      	ldr	r2, [pc, #520]	; (80037dc <HAL_DMA_Start_IT+0x478>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d06d      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a80      	ldr	r2, [pc, #512]	; (80037e0 <HAL_DMA_Start_IT+0x47c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d068      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7f      	ldr	r2, [pc, #508]	; (80037e4 <HAL_DMA_Start_IT+0x480>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d063      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7d      	ldr	r2, [pc, #500]	; (80037e8 <HAL_DMA_Start_IT+0x484>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d05e      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7c      	ldr	r2, [pc, #496]	; (80037ec <HAL_DMA_Start_IT+0x488>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d059      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a7a      	ldr	r2, [pc, #488]	; (80037f0 <HAL_DMA_Start_IT+0x48c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d054      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a79      	ldr	r2, [pc, #484]	; (80037f4 <HAL_DMA_Start_IT+0x490>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d04f      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a77      	ldr	r2, [pc, #476]	; (80037f8 <HAL_DMA_Start_IT+0x494>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d04a      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a76      	ldr	r2, [pc, #472]	; (80037fc <HAL_DMA_Start_IT+0x498>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d045      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a74      	ldr	r2, [pc, #464]	; (8003800 <HAL_DMA_Start_IT+0x49c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d040      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a73      	ldr	r2, [pc, #460]	; (8003804 <HAL_DMA_Start_IT+0x4a0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d03b      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a71      	ldr	r2, [pc, #452]	; (8003808 <HAL_DMA_Start_IT+0x4a4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d036      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a70      	ldr	r2, [pc, #448]	; (800380c <HAL_DMA_Start_IT+0x4a8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d031      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a6e      	ldr	r2, [pc, #440]	; (8003810 <HAL_DMA_Start_IT+0x4ac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d02c      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6d      	ldr	r2, [pc, #436]	; (8003814 <HAL_DMA_Start_IT+0x4b0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d027      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6b      	ldr	r2, [pc, #428]	; (8003818 <HAL_DMA_Start_IT+0x4b4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d022      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6a      	ldr	r2, [pc, #424]	; (800381c <HAL_DMA_Start_IT+0x4b8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d01d      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a68      	ldr	r2, [pc, #416]	; (8003820 <HAL_DMA_Start_IT+0x4bc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d018      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a67      	ldr	r2, [pc, #412]	; (8003824 <HAL_DMA_Start_IT+0x4c0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a65      	ldr	r2, [pc, #404]	; (8003828 <HAL_DMA_Start_IT+0x4c4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a64      	ldr	r2, [pc, #400]	; (800382c <HAL_DMA_Start_IT+0x4c8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a62      	ldr	r2, [pc, #392]	; (8003830 <HAL_DMA_Start_IT+0x4cc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_Start_IT+0x350>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a61      	ldr	r2, [pc, #388]	; (8003834 <HAL_DMA_Start_IT+0x4d0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_DMA_Start_IT+0x354>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_DMA_Start_IT+0x356>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01a      	beq.n	80036f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a37      	ldr	r2, [pc, #220]	; (80037d8 <HAL_DMA_Start_IT+0x474>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d04a      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a36      	ldr	r2, [pc, #216]	; (80037dc <HAL_DMA_Start_IT+0x478>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d045      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a34      	ldr	r2, [pc, #208]	; (80037e0 <HAL_DMA_Start_IT+0x47c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d040      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a33      	ldr	r2, [pc, #204]	; (80037e4 <HAL_DMA_Start_IT+0x480>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d03b      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a31      	ldr	r2, [pc, #196]	; (80037e8 <HAL_DMA_Start_IT+0x484>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d036      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a30      	ldr	r2, [pc, #192]	; (80037ec <HAL_DMA_Start_IT+0x488>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d031      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <HAL_DMA_Start_IT+0x48c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d02c      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a2d      	ldr	r2, [pc, #180]	; (80037f4 <HAL_DMA_Start_IT+0x490>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d027      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <HAL_DMA_Start_IT+0x494>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d022      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <HAL_DMA_Start_IT+0x498>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d01d      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a28      	ldr	r2, [pc, #160]	; (8003800 <HAL_DMA_Start_IT+0x49c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d018      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a27      	ldr	r2, [pc, #156]	; (8003804 <HAL_DMA_Start_IT+0x4a0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a25      	ldr	r2, [pc, #148]	; (8003808 <HAL_DMA_Start_IT+0x4a4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a24      	ldr	r2, [pc, #144]	; (800380c <HAL_DMA_Start_IT+0x4a8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <HAL_DMA_Start_IT+0x4ac>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_DMA_Start_IT+0x430>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <HAL_DMA_Start_IT+0x4b0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <HAL_DMA_Start_IT+0x442>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e012      	b.n	80037cc <HAL_DMA_Start_IT+0x468>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e009      	b.n	80037cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
 8003818:	58025408 	.word	0x58025408
 800381c:	5802541c 	.word	0x5802541c
 8003820:	58025430 	.word	0x58025430
 8003824:	58025444 	.word	0x58025444
 8003828:	58025458 	.word	0x58025458
 800382c:	5802546c 	.word	0x5802546c
 8003830:	58025480 	.word	0x58025480
 8003834:	58025494 	.word	0x58025494

08003838 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003840:	f7fd fe2c 	bl	800149c <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e2dc      	b.n	8003e0a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d008      	beq.n	800386e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e2cd      	b.n	8003e0a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a76      	ldr	r2, [pc, #472]	; (8003a4c <HAL_DMA_Abort+0x214>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04a      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a74      	ldr	r2, [pc, #464]	; (8003a50 <HAL_DMA_Abort+0x218>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d045      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a73      	ldr	r2, [pc, #460]	; (8003a54 <HAL_DMA_Abort+0x21c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a71      	ldr	r2, [pc, #452]	; (8003a58 <HAL_DMA_Abort+0x220>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d03b      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a70      	ldr	r2, [pc, #448]	; (8003a5c <HAL_DMA_Abort+0x224>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d036      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a6e      	ldr	r2, [pc, #440]	; (8003a60 <HAL_DMA_Abort+0x228>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6d      	ldr	r2, [pc, #436]	; (8003a64 <HAL_DMA_Abort+0x22c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d02c      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6b      	ldr	r2, [pc, #428]	; (8003a68 <HAL_DMA_Abort+0x230>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6a      	ldr	r2, [pc, #424]	; (8003a6c <HAL_DMA_Abort+0x234>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a68      	ldr	r2, [pc, #416]	; (8003a70 <HAL_DMA_Abort+0x238>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01d      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a67      	ldr	r2, [pc, #412]	; (8003a74 <HAL_DMA_Abort+0x23c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a65      	ldr	r2, [pc, #404]	; (8003a78 <HAL_DMA_Abort+0x240>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a64      	ldr	r2, [pc, #400]	; (8003a7c <HAL_DMA_Abort+0x244>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a62      	ldr	r2, [pc, #392]	; (8003a80 <HAL_DMA_Abort+0x248>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a61      	ldr	r2, [pc, #388]	; (8003a84 <HAL_DMA_Abort+0x24c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_DMA_Abort+0xd6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5f      	ldr	r2, [pc, #380]	; (8003a88 <HAL_DMA_Abort+0x250>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_DMA_Abort+0xda>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_DMA_Abort+0xdc>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 021e 	bic.w	r2, r2, #30
 8003926:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003936:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e00a      	b.n	8003956 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 020e 	bic.w	r2, r2, #14
 800394e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3c      	ldr	r2, [pc, #240]	; (8003a4c <HAL_DMA_Abort+0x214>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d072      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a3a      	ldr	r2, [pc, #232]	; (8003a50 <HAL_DMA_Abort+0x218>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d06d      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a39      	ldr	r2, [pc, #228]	; (8003a54 <HAL_DMA_Abort+0x21c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d068      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a37      	ldr	r2, [pc, #220]	; (8003a58 <HAL_DMA_Abort+0x220>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d063      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a36      	ldr	r2, [pc, #216]	; (8003a5c <HAL_DMA_Abort+0x224>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d05e      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <HAL_DMA_Abort+0x228>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d059      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a33      	ldr	r2, [pc, #204]	; (8003a64 <HAL_DMA_Abort+0x22c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d054      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_DMA_Abort+0x230>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04f      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a30      	ldr	r2, [pc, #192]	; (8003a6c <HAL_DMA_Abort+0x234>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d04a      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <HAL_DMA_Abort+0x238>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d045      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <HAL_DMA_Abort+0x23c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d040      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <HAL_DMA_Abort+0x240>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d03b      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <HAL_DMA_Abort+0x244>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d036      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <HAL_DMA_Abort+0x248>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d031      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <HAL_DMA_Abort+0x24c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d02c      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <HAL_DMA_Abort+0x250>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d027      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <HAL_DMA_Abort+0x254>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_DMA_Abort+0x258>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01d      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <HAL_DMA_Abort+0x25c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_DMA_Abort+0x260>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_DMA_Abort+0x264>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_DMA_Abort+0x268>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <HAL_DMA_Abort+0x26c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_DMA_Abort+0x20e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <HAL_DMA_Abort+0x270>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d132      	bne.n	8003aac <HAL_DMA_Abort+0x274>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e031      	b.n	8003aae <HAL_DMA_Abort+0x276>
 8003a4a:	bf00      	nop
 8003a4c:	40020010 	.word	0x40020010
 8003a50:	40020028 	.word	0x40020028
 8003a54:	40020040 	.word	0x40020040
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	40020070 	.word	0x40020070
 8003a60:	40020088 	.word	0x40020088
 8003a64:	400200a0 	.word	0x400200a0
 8003a68:	400200b8 	.word	0x400200b8
 8003a6c:	40020410 	.word	0x40020410
 8003a70:	40020428 	.word	0x40020428
 8003a74:	40020440 	.word	0x40020440
 8003a78:	40020458 	.word	0x40020458
 8003a7c:	40020470 	.word	0x40020470
 8003a80:	40020488 	.word	0x40020488
 8003a84:	400204a0 	.word	0x400204a0
 8003a88:	400204b8 	.word	0x400204b8
 8003a8c:	58025408 	.word	0x58025408
 8003a90:	5802541c 	.word	0x5802541c
 8003a94:	58025430 	.word	0x58025430
 8003a98:	58025444 	.word	0x58025444
 8003a9c:	58025458 	.word	0x58025458
 8003aa0:	5802546c 	.word	0x5802546c
 8003aa4:	58025480 	.word	0x58025480
 8003aa8:	58025494 	.word	0x58025494
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6d      	ldr	r2, [pc, #436]	; (8003c7c <HAL_DMA_Abort+0x444>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6b      	ldr	r2, [pc, #428]	; (8003c80 <HAL_DMA_Abort+0x448>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6a      	ldr	r2, [pc, #424]	; (8003c84 <HAL_DMA_Abort+0x44c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a68      	ldr	r2, [pc, #416]	; (8003c88 <HAL_DMA_Abort+0x450>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a67      	ldr	r2, [pc, #412]	; (8003c8c <HAL_DMA_Abort+0x454>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <HAL_DMA_Abort+0x458>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a64      	ldr	r2, [pc, #400]	; (8003c94 <HAL_DMA_Abort+0x45c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a62      	ldr	r2, [pc, #392]	; (8003c98 <HAL_DMA_Abort+0x460>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a61      	ldr	r2, [pc, #388]	; (8003c9c <HAL_DMA_Abort+0x464>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5f      	ldr	r2, [pc, #380]	; (8003ca0 <HAL_DMA_Abort+0x468>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a5e      	ldr	r2, [pc, #376]	; (8003ca4 <HAL_DMA_Abort+0x46c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a5c      	ldr	r2, [pc, #368]	; (8003ca8 <HAL_DMA_Abort+0x470>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a5b      	ldr	r2, [pc, #364]	; (8003cac <HAL_DMA_Abort+0x474>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a59      	ldr	r2, [pc, #356]	; (8003cb0 <HAL_DMA_Abort+0x478>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <HAL_DMA_Abort+0x47c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_DMA_Abort+0x32a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a56      	ldr	r2, [pc, #344]	; (8003cb8 <HAL_DMA_Abort+0x480>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d108      	bne.n	8003b74 <HAL_DMA_Abort+0x33c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e007      	b.n	8003b84 <HAL_DMA_Abort+0x34c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003b84:	e013      	b.n	8003bae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b86:	f7fd fc89 	bl	800149c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b05      	cmp	r3, #5
 8003b92:	d90c      	bls.n	8003bae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e12d      	b.n	8003e0a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e5      	bne.n	8003b86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2f      	ldr	r2, [pc, #188]	; (8003c7c <HAL_DMA_Abort+0x444>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d04a      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <HAL_DMA_Abort+0x448>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d045      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <HAL_DMA_Abort+0x44c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d040      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <HAL_DMA_Abort+0x450>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d03b      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <HAL_DMA_Abort+0x454>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d036      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_DMA_Abort+0x458>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d031      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <HAL_DMA_Abort+0x45c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d02c      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a24      	ldr	r2, [pc, #144]	; (8003c98 <HAL_DMA_Abort+0x460>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d027      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a23      	ldr	r2, [pc, #140]	; (8003c9c <HAL_DMA_Abort+0x464>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d022      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <HAL_DMA_Abort+0x468>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01d      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a20      	ldr	r2, [pc, #128]	; (8003ca4 <HAL_DMA_Abort+0x46c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d018      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <HAL_DMA_Abort+0x470>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <HAL_DMA_Abort+0x474>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <HAL_DMA_Abort+0x478>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d009      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <HAL_DMA_Abort+0x47c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <HAL_DMA_Abort+0x422>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_DMA_Abort+0x480>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <HAL_DMA_Abort+0x426>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_DMA_Abort+0x428>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02b      	beq.n	8003cbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	223f      	movs	r2, #63	; 0x3f
 8003c74:	409a      	lsls	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	e02a      	b.n	8003cd2 <HAL_DMA_Abort+0x49a>
 8003c7c:	40020010 	.word	0x40020010
 8003c80:	40020028 	.word	0x40020028
 8003c84:	40020040 	.word	0x40020040
 8003c88:	40020058 	.word	0x40020058
 8003c8c:	40020070 	.word	0x40020070
 8003c90:	40020088 	.word	0x40020088
 8003c94:	400200a0 	.word	0x400200a0
 8003c98:	400200b8 	.word	0x400200b8
 8003c9c:	40020410 	.word	0x40020410
 8003ca0:	40020428 	.word	0x40020428
 8003ca4:	40020440 	.word	0x40020440
 8003ca8:	40020458 	.word	0x40020458
 8003cac:	40020470 	.word	0x40020470
 8003cb0:	40020488 	.word	0x40020488
 8003cb4:	400204a0 	.word	0x400204a0
 8003cb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4f      	ldr	r2, [pc, #316]	; (8003e14 <HAL_DMA_Abort+0x5dc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d072      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a4d      	ldr	r2, [pc, #308]	; (8003e18 <HAL_DMA_Abort+0x5e0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d06d      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4c      	ldr	r2, [pc, #304]	; (8003e1c <HAL_DMA_Abort+0x5e4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d068      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <HAL_DMA_Abort+0x5e8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d063      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_DMA_Abort+0x5ec>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d05e      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a47      	ldr	r2, [pc, #284]	; (8003e28 <HAL_DMA_Abort+0x5f0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d059      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a46      	ldr	r2, [pc, #280]	; (8003e2c <HAL_DMA_Abort+0x5f4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d054      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a44      	ldr	r2, [pc, #272]	; (8003e30 <HAL_DMA_Abort+0x5f8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d04f      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a43      	ldr	r2, [pc, #268]	; (8003e34 <HAL_DMA_Abort+0x5fc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d04a      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a41      	ldr	r2, [pc, #260]	; (8003e38 <HAL_DMA_Abort+0x600>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d045      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a40      	ldr	r2, [pc, #256]	; (8003e3c <HAL_DMA_Abort+0x604>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d040      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3e      	ldr	r2, [pc, #248]	; (8003e40 <HAL_DMA_Abort+0x608>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d03b      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <HAL_DMA_Abort+0x60c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d036      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a3b      	ldr	r2, [pc, #236]	; (8003e48 <HAL_DMA_Abort+0x610>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d031      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <HAL_DMA_Abort+0x614>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d02c      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a38      	ldr	r2, [pc, #224]	; (8003e50 <HAL_DMA_Abort+0x618>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d027      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a37      	ldr	r2, [pc, #220]	; (8003e54 <HAL_DMA_Abort+0x61c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a35      	ldr	r2, [pc, #212]	; (8003e58 <HAL_DMA_Abort+0x620>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01d      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a34      	ldr	r2, [pc, #208]	; (8003e5c <HAL_DMA_Abort+0x624>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a32      	ldr	r2, [pc, #200]	; (8003e60 <HAL_DMA_Abort+0x628>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a31      	ldr	r2, [pc, #196]	; (8003e64 <HAL_DMA_Abort+0x62c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <HAL_DMA_Abort+0x630>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <HAL_DMA_Abort+0x634>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_DMA_Abort+0x58a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <HAL_DMA_Abort+0x638>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_DMA_Abort+0x58e>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_DMA_Abort+0x590>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dd4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003df6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494

08003e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e237      	b.n	80042f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d004      	beq.n	8003e9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e22c      	b.n	80042f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5c      	ldr	r2, [pc, #368]	; (8004014 <HAL_DMA_Abort_IT+0x1a0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a5b      	ldr	r2, [pc, #364]	; (8004018 <HAL_DMA_Abort_IT+0x1a4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a59      	ldr	r2, [pc, #356]	; (800401c <HAL_DMA_Abort_IT+0x1a8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_DMA_Abort_IT+0x1ac>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a56      	ldr	r2, [pc, #344]	; (8004024 <HAL_DMA_Abort_IT+0x1b0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a55      	ldr	r2, [pc, #340]	; (8004028 <HAL_DMA_Abort_IT+0x1b4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a53      	ldr	r2, [pc, #332]	; (800402c <HAL_DMA_Abort_IT+0x1b8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_DMA_Abort_IT+0x1bc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a50      	ldr	r2, [pc, #320]	; (8004034 <HAL_DMA_Abort_IT+0x1c0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4f      	ldr	r2, [pc, #316]	; (8004038 <HAL_DMA_Abort_IT+0x1c4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a4d      	ldr	r2, [pc, #308]	; (800403c <HAL_DMA_Abort_IT+0x1c8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a4c      	ldr	r2, [pc, #304]	; (8004040 <HAL_DMA_Abort_IT+0x1cc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_DMA_Abort_IT+0x1d0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a49      	ldr	r2, [pc, #292]	; (8004048 <HAL_DMA_Abort_IT+0x1d4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a47      	ldr	r2, [pc, #284]	; (800404c <HAL_DMA_Abort_IT+0x1d8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_Abort_IT+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a46      	ldr	r2, [pc, #280]	; (8004050 <HAL_DMA_Abort_IT+0x1dc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <HAL_DMA_Abort_IT+0xcc>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_DMA_Abort_IT+0xce>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8086 	beq.w	8004054 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2f      	ldr	r2, [pc, #188]	; (8004014 <HAL_DMA_Abort_IT+0x1a0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04a      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <HAL_DMA_Abort_IT+0x1a4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d045      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <HAL_DMA_Abort_IT+0x1a8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d040      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <HAL_DMA_Abort_IT+0x1ac>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d03b      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a29      	ldr	r2, [pc, #164]	; (8004024 <HAL_DMA_Abort_IT+0x1b0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d036      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a28      	ldr	r2, [pc, #160]	; (8004028 <HAL_DMA_Abort_IT+0x1b4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_DMA_Abort_IT+0x1b8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02c      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a25      	ldr	r2, [pc, #148]	; (8004030 <HAL_DMA_Abort_IT+0x1bc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <HAL_DMA_Abort_IT+0x1c0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_DMA_Abort_IT+0x1c4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a20      	ldr	r2, [pc, #128]	; (800403c <HAL_DMA_Abort_IT+0x1c8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <HAL_DMA_Abort_IT+0x1cc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_DMA_Abort_IT+0x1d0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_DMA_Abort_IT+0x1d4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_DMA_Abort_IT+0x1d8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0x17c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_DMA_Abort_IT+0x1dc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d108      	bne.n	8004002 <HAL_DMA_Abort_IT+0x18e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e178      	b.n	80042f4 <HAL_DMA_Abort_IT+0x480>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e16f      	b.n	80042f4 <HAL_DMA_Abort_IT+0x480>
 8004014:	40020010 	.word	0x40020010
 8004018:	40020028 	.word	0x40020028
 800401c:	40020040 	.word	0x40020040
 8004020:	40020058 	.word	0x40020058
 8004024:	40020070 	.word	0x40020070
 8004028:	40020088 	.word	0x40020088
 800402c:	400200a0 	.word	0x400200a0
 8004030:	400200b8 	.word	0x400200b8
 8004034:	40020410 	.word	0x40020410
 8004038:	40020428 	.word	0x40020428
 800403c:	40020440 	.word	0x40020440
 8004040:	40020458 	.word	0x40020458
 8004044:	40020470 	.word	0x40020470
 8004048:	40020488 	.word	0x40020488
 800404c:	400204a0 	.word	0x400204a0
 8004050:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 020e 	bic.w	r2, r2, #14
 8004062:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a6c      	ldr	r2, [pc, #432]	; (800421c <HAL_DMA_Abort_IT+0x3a8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d04a      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6b      	ldr	r2, [pc, #428]	; (8004220 <HAL_DMA_Abort_IT+0x3ac>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d045      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a69      	ldr	r2, [pc, #420]	; (8004224 <HAL_DMA_Abort_IT+0x3b0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d040      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a68      	ldr	r2, [pc, #416]	; (8004228 <HAL_DMA_Abort_IT+0x3b4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d03b      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a66      	ldr	r2, [pc, #408]	; (800422c <HAL_DMA_Abort_IT+0x3b8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d036      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a65      	ldr	r2, [pc, #404]	; (8004230 <HAL_DMA_Abort_IT+0x3bc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d031      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a63      	ldr	r2, [pc, #396]	; (8004234 <HAL_DMA_Abort_IT+0x3c0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02c      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a62      	ldr	r2, [pc, #392]	; (8004238 <HAL_DMA_Abort_IT+0x3c4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d027      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a60      	ldr	r2, [pc, #384]	; (800423c <HAL_DMA_Abort_IT+0x3c8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d022      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a5f      	ldr	r2, [pc, #380]	; (8004240 <HAL_DMA_Abort_IT+0x3cc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d01d      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a5d      	ldr	r2, [pc, #372]	; (8004244 <HAL_DMA_Abort_IT+0x3d0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d018      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a5c      	ldr	r2, [pc, #368]	; (8004248 <HAL_DMA_Abort_IT+0x3d4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a5a      	ldr	r2, [pc, #360]	; (800424c <HAL_DMA_Abort_IT+0x3d8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00e      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a59      	ldr	r2, [pc, #356]	; (8004250 <HAL_DMA_Abort_IT+0x3dc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a57      	ldr	r2, [pc, #348]	; (8004254 <HAL_DMA_Abort_IT+0x3e0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_DMA_Abort_IT+0x290>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a56      	ldr	r2, [pc, #344]	; (8004258 <HAL_DMA_Abort_IT+0x3e4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <HAL_DMA_Abort_IT+0x2a2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e007      	b.n	8004126 <HAL_DMA_Abort_IT+0x2b2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a3c      	ldr	r2, [pc, #240]	; (800421c <HAL_DMA_Abort_IT+0x3a8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d072      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a3a      	ldr	r2, [pc, #232]	; (8004220 <HAL_DMA_Abort_IT+0x3ac>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d06d      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a39      	ldr	r2, [pc, #228]	; (8004224 <HAL_DMA_Abort_IT+0x3b0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d068      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a37      	ldr	r2, [pc, #220]	; (8004228 <HAL_DMA_Abort_IT+0x3b4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d063      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a36      	ldr	r2, [pc, #216]	; (800422c <HAL_DMA_Abort_IT+0x3b8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d05e      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a34      	ldr	r2, [pc, #208]	; (8004230 <HAL_DMA_Abort_IT+0x3bc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d059      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a33      	ldr	r2, [pc, #204]	; (8004234 <HAL_DMA_Abort_IT+0x3c0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d054      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a31      	ldr	r2, [pc, #196]	; (8004238 <HAL_DMA_Abort_IT+0x3c4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d04f      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a30      	ldr	r2, [pc, #192]	; (800423c <HAL_DMA_Abort_IT+0x3c8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d04a      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2e      	ldr	r2, [pc, #184]	; (8004240 <HAL_DMA_Abort_IT+0x3cc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d045      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <HAL_DMA_Abort_IT+0x3d0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d040      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <HAL_DMA_Abort_IT+0x3d4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d03b      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a2a      	ldr	r2, [pc, #168]	; (800424c <HAL_DMA_Abort_IT+0x3d8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d036      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a28      	ldr	r2, [pc, #160]	; (8004250 <HAL_DMA_Abort_IT+0x3dc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d031      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_DMA_Abort_IT+0x3e0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d02c      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <HAL_DMA_Abort_IT+0x3e4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d027      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a24      	ldr	r2, [pc, #144]	; (800425c <HAL_DMA_Abort_IT+0x3e8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d022      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a22      	ldr	r2, [pc, #136]	; (8004260 <HAL_DMA_Abort_IT+0x3ec>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01d      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a21      	ldr	r2, [pc, #132]	; (8004264 <HAL_DMA_Abort_IT+0x3f0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d018      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <HAL_DMA_Abort_IT+0x3f4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d013      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1e      	ldr	r2, [pc, #120]	; (800426c <HAL_DMA_Abort_IT+0x3f8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00e      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <HAL_DMA_Abort_IT+0x3fc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d009      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <HAL_DMA_Abort_IT+0x400>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_DMA_Abort_IT+0x3a2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_DMA_Abort_IT+0x404>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d132      	bne.n	800427c <HAL_DMA_Abort_IT+0x408>
 8004216:	2301      	movs	r3, #1
 8004218:	e031      	b.n	800427e <HAL_DMA_Abort_IT+0x40a>
 800421a:	bf00      	nop
 800421c:	40020010 	.word	0x40020010
 8004220:	40020028 	.word	0x40020028
 8004224:	40020040 	.word	0x40020040
 8004228:	40020058 	.word	0x40020058
 800422c:	40020070 	.word	0x40020070
 8004230:	40020088 	.word	0x40020088
 8004234:	400200a0 	.word	0x400200a0
 8004238:	400200b8 	.word	0x400200b8
 800423c:	40020410 	.word	0x40020410
 8004240:	40020428 	.word	0x40020428
 8004244:	40020440 	.word	0x40020440
 8004248:	40020458 	.word	0x40020458
 800424c:	40020470 	.word	0x40020470
 8004250:	40020488 	.word	0x40020488
 8004254:	400204a0 	.word	0x400204a0
 8004258:	400204b8 	.word	0x400204b8
 800425c:	58025408 	.word	0x58025408
 8004260:	5802541c 	.word	0x5802541c
 8004264:	58025430 	.word	0x58025430
 8004268:	58025444 	.word	0x58025444
 800426c:	58025458 	.word	0x58025458
 8004270:	5802546c 	.word	0x5802546c
 8004274:	58025480 	.word	0x58025480
 8004278:	58025494 	.word	0x58025494
 800427c:	2300      	movs	r3, #0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d028      	beq.n	80042d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004290:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2201      	movs	r2, #1
 80042a2:	409a      	lsls	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop

08004300 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800430c:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_DMA_IRQHandler+0x1ac>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a67      	ldr	r2, [pc, #412]	; (80044b0 <HAL_DMA_IRQHandler+0x1b0>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	0a9b      	lsrs	r3, r3, #10
 8004318:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a5f      	ldr	r2, [pc, #380]	; (80044b4 <HAL_DMA_IRQHandler+0x1b4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d04a      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a5d      	ldr	r2, [pc, #372]	; (80044b8 <HAL_DMA_IRQHandler+0x1b8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d045      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a5c      	ldr	r2, [pc, #368]	; (80044bc <HAL_DMA_IRQHandler+0x1bc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d040      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5a      	ldr	r2, [pc, #360]	; (80044c0 <HAL_DMA_IRQHandler+0x1c0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d03b      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a59      	ldr	r2, [pc, #356]	; (80044c4 <HAL_DMA_IRQHandler+0x1c4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d036      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a57      	ldr	r2, [pc, #348]	; (80044c8 <HAL_DMA_IRQHandler+0x1c8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d031      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a56      	ldr	r2, [pc, #344]	; (80044cc <HAL_DMA_IRQHandler+0x1cc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d02c      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a54      	ldr	r2, [pc, #336]	; (80044d0 <HAL_DMA_IRQHandler+0x1d0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d027      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a53      	ldr	r2, [pc, #332]	; (80044d4 <HAL_DMA_IRQHandler+0x1d4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a51      	ldr	r2, [pc, #324]	; (80044d8 <HAL_DMA_IRQHandler+0x1d8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01d      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a50      	ldr	r2, [pc, #320]	; (80044dc <HAL_DMA_IRQHandler+0x1dc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a4e      	ldr	r2, [pc, #312]	; (80044e0 <HAL_DMA_IRQHandler+0x1e0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4d      	ldr	r2, [pc, #308]	; (80044e4 <HAL_DMA_IRQHandler+0x1e4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a4b      	ldr	r2, [pc, #300]	; (80044e8 <HAL_DMA_IRQHandler+0x1e8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a4a      	ldr	r2, [pc, #296]	; (80044ec <HAL_DMA_IRQHandler+0x1ec>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xd2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a48      	ldr	r2, [pc, #288]	; (80044f0 <HAL_DMA_IRQHandler+0x1f0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_DMA_IRQHandler+0xd6>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_DMA_IRQHandler+0xd8>
 80043d6:	2300      	movs	r3, #0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 842b 	beq.w	8004c34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2208      	movs	r2, #8
 80043e8:	409a      	lsls	r2, r3
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80a2 	beq.w	8004538 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a2e      	ldr	r2, [pc, #184]	; (80044b4 <HAL_DMA_IRQHandler+0x1b4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d04a      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <HAL_DMA_IRQHandler+0x1b8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d045      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2b      	ldr	r2, [pc, #172]	; (80044bc <HAL_DMA_IRQHandler+0x1bc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d040      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2a      	ldr	r2, [pc, #168]	; (80044c0 <HAL_DMA_IRQHandler+0x1c0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d03b      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a28      	ldr	r2, [pc, #160]	; (80044c4 <HAL_DMA_IRQHandler+0x1c4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d036      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <HAL_DMA_IRQHandler+0x1c8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d031      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a25      	ldr	r2, [pc, #148]	; (80044cc <HAL_DMA_IRQHandler+0x1cc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d02c      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_DMA_IRQHandler+0x1d0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d027      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a22      	ldr	r2, [pc, #136]	; (80044d4 <HAL_DMA_IRQHandler+0x1d4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d022      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <HAL_DMA_IRQHandler+0x1d8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d01d      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <HAL_DMA_IRQHandler+0x1dc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d018      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <HAL_DMA_IRQHandler+0x1e0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <HAL_DMA_IRQHandler+0x1e4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <HAL_DMA_IRQHandler+0x1e8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a19      	ldr	r2, [pc, #100]	; (80044ec <HAL_DMA_IRQHandler+0x1ec>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_DMA_IRQHandler+0x194>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <HAL_DMA_IRQHandler+0x1f0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d12f      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x1f4>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e02e      	b.n	8004508 <HAL_DMA_IRQHandler+0x208>
 80044aa:	bf00      	nop
 80044ac:	24000000 	.word	0x24000000
 80044b0:	1b4e81b5 	.word	0x1b4e81b5
 80044b4:	40020010 	.word	0x40020010
 80044b8:	40020028 	.word	0x40020028
 80044bc:	40020040 	.word	0x40020040
 80044c0:	40020058 	.word	0x40020058
 80044c4:	40020070 	.word	0x40020070
 80044c8:	40020088 	.word	0x40020088
 80044cc:	400200a0 	.word	0x400200a0
 80044d0:	400200b8 	.word	0x400200b8
 80044d4:	40020410 	.word	0x40020410
 80044d8:	40020428 	.word	0x40020428
 80044dc:	40020440 	.word	0x40020440
 80044e0:	40020458 	.word	0x40020458
 80044e4:	40020470 	.word	0x40020470
 80044e8:	40020488 	.word	0x40020488
 80044ec:	400204a0 	.word	0x400204a0
 80044f0:	400204b8 	.word	0x400204b8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bf14      	ite	ne
 8004502:	2301      	movne	r3, #1
 8004504:	2300      	moveq	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0204 	bic.w	r2, r2, #4
 800451a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2208      	movs	r2, #8
 8004526:	409a      	lsls	r2, r3
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f043 0201 	orr.w	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d06e      	beq.n	800462c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a69      	ldr	r2, [pc, #420]	; (80046f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d04a      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a67      	ldr	r2, [pc, #412]	; (80046fc <HAL_DMA_IRQHandler+0x3fc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d045      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a66      	ldr	r2, [pc, #408]	; (8004700 <HAL_DMA_IRQHandler+0x400>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d040      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a64      	ldr	r2, [pc, #400]	; (8004704 <HAL_DMA_IRQHandler+0x404>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d03b      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a63      	ldr	r2, [pc, #396]	; (8004708 <HAL_DMA_IRQHandler+0x408>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d036      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a61      	ldr	r2, [pc, #388]	; (800470c <HAL_DMA_IRQHandler+0x40c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d031      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a60      	ldr	r2, [pc, #384]	; (8004710 <HAL_DMA_IRQHandler+0x410>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d02c      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a5e      	ldr	r2, [pc, #376]	; (8004714 <HAL_DMA_IRQHandler+0x414>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d027      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a5d      	ldr	r2, [pc, #372]	; (8004718 <HAL_DMA_IRQHandler+0x418>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d022      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a5b      	ldr	r2, [pc, #364]	; (800471c <HAL_DMA_IRQHandler+0x41c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01d      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a5a      	ldr	r2, [pc, #360]	; (8004720 <HAL_DMA_IRQHandler+0x420>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d018      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_DMA_IRQHandler+0x424>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a57      	ldr	r2, [pc, #348]	; (8004728 <HAL_DMA_IRQHandler+0x428>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00e      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a55      	ldr	r2, [pc, #340]	; (800472c <HAL_DMA_IRQHandler+0x42c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a54      	ldr	r2, [pc, #336]	; (8004730 <HAL_DMA_IRQHandler+0x430>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2ee>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a52      	ldr	r2, [pc, #328]	; (8004734 <HAL_DMA_IRQHandler+0x434>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10a      	bne.n	8004604 <HAL_DMA_IRQHandler+0x304>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e003      	b.n	800460c <HAL_DMA_IRQHandler+0x30c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00d      	beq.n	800462c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	2201      	movs	r2, #1
 800461a:	409a      	lsls	r2, r3
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	f043 0202 	orr.w	r2, r3, #2
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	2204      	movs	r2, #4
 8004636:	409a      	lsls	r2, r3
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 808f 	beq.w	8004760 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2c      	ldr	r2, [pc, #176]	; (80046f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d04a      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <HAL_DMA_IRQHandler+0x3fc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d045      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <HAL_DMA_IRQHandler+0x400>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d040      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a27      	ldr	r2, [pc, #156]	; (8004704 <HAL_DMA_IRQHandler+0x404>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d03b      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a26      	ldr	r2, [pc, #152]	; (8004708 <HAL_DMA_IRQHandler+0x408>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d036      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a24      	ldr	r2, [pc, #144]	; (800470c <HAL_DMA_IRQHandler+0x40c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d031      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_DMA_IRQHandler+0x410>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d02c      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a21      	ldr	r2, [pc, #132]	; (8004714 <HAL_DMA_IRQHandler+0x414>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d027      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a20      	ldr	r2, [pc, #128]	; (8004718 <HAL_DMA_IRQHandler+0x418>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1e      	ldr	r2, [pc, #120]	; (800471c <HAL_DMA_IRQHandler+0x41c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <HAL_DMA_IRQHandler+0x420>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <HAL_DMA_IRQHandler+0x424>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1a      	ldr	r2, [pc, #104]	; (8004728 <HAL_DMA_IRQHandler+0x428>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a18      	ldr	r2, [pc, #96]	; (800472c <HAL_DMA_IRQHandler+0x42c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a17      	ldr	r2, [pc, #92]	; (8004730 <HAL_DMA_IRQHandler+0x430>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x3e2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a15      	ldr	r2, [pc, #84]	; (8004734 <HAL_DMA_IRQHandler+0x434>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d12a      	bne.n	8004738 <HAL_DMA_IRQHandler+0x438>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e023      	b.n	8004740 <HAL_DMA_IRQHandler+0x440>
 80046f8:	40020010 	.word	0x40020010
 80046fc:	40020028 	.word	0x40020028
 8004700:	40020040 	.word	0x40020040
 8004704:	40020058 	.word	0x40020058
 8004708:	40020070 	.word	0x40020070
 800470c:	40020088 	.word	0x40020088
 8004710:	400200a0 	.word	0x400200a0
 8004714:	400200b8 	.word	0x400200b8
 8004718:	40020410 	.word	0x40020410
 800471c:	40020428 	.word	0x40020428
 8004720:	40020440 	.word	0x40020440
 8004724:	40020458 	.word	0x40020458
 8004728:	40020470 	.word	0x40020470
 800472c:	40020488 	.word	0x40020488
 8004730:	400204a0 	.word	0x400204a0
 8004734:	400204b8 	.word	0x400204b8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2204      	movs	r2, #4
 800474e:	409a      	lsls	r2, r3
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f043 0204 	orr.w	r2, r3, #4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	2210      	movs	r2, #16
 800476a:	409a      	lsls	r2, r3
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80a6 	beq.w	80048c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a85      	ldr	r2, [pc, #532]	; (8004990 <HAL_DMA_IRQHandler+0x690>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d04a      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a83      	ldr	r2, [pc, #524]	; (8004994 <HAL_DMA_IRQHandler+0x694>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d045      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a82      	ldr	r2, [pc, #520]	; (8004998 <HAL_DMA_IRQHandler+0x698>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d040      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a80      	ldr	r2, [pc, #512]	; (800499c <HAL_DMA_IRQHandler+0x69c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d03b      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a7f      	ldr	r2, [pc, #508]	; (80049a0 <HAL_DMA_IRQHandler+0x6a0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d036      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a7d      	ldr	r2, [pc, #500]	; (80049a4 <HAL_DMA_IRQHandler+0x6a4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d031      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7c      	ldr	r2, [pc, #496]	; (80049a8 <HAL_DMA_IRQHandler+0x6a8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d02c      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a7a      	ldr	r2, [pc, #488]	; (80049ac <HAL_DMA_IRQHandler+0x6ac>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d027      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a79      	ldr	r2, [pc, #484]	; (80049b0 <HAL_DMA_IRQHandler+0x6b0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d022      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a77      	ldr	r2, [pc, #476]	; (80049b4 <HAL_DMA_IRQHandler+0x6b4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01d      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a76      	ldr	r2, [pc, #472]	; (80049b8 <HAL_DMA_IRQHandler+0x6b8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d018      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a74      	ldr	r2, [pc, #464]	; (80049bc <HAL_DMA_IRQHandler+0x6bc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a73      	ldr	r2, [pc, #460]	; (80049c0 <HAL_DMA_IRQHandler+0x6c0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a71      	ldr	r2, [pc, #452]	; (80049c4 <HAL_DMA_IRQHandler+0x6c4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a70      	ldr	r2, [pc, #448]	; (80049c8 <HAL_DMA_IRQHandler+0x6c8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_DMA_IRQHandler+0x516>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a6e      	ldr	r2, [pc, #440]	; (80049cc <HAL_DMA_IRQHandler+0x6cc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10a      	bne.n	800482c <HAL_DMA_IRQHandler+0x52c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e009      	b.n	8004840 <HAL_DMA_IRQHandler+0x540>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d03e      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2210      	movs	r2, #16
 800484e:	409a      	lsls	r2, r3
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d018      	beq.n	8004894 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d108      	bne.n	8004882 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d024      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
 8004880:	e01f      	b.n	80048c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01b      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
 8004892:	e016      	b.n	80048c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d107      	bne.n	80048b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0208 	bic.w	r2, r2, #8
 80048b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2220      	movs	r2, #32
 80048cc:	409a      	lsls	r2, r3
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8110 	beq.w	8004af8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2c      	ldr	r2, [pc, #176]	; (8004990 <HAL_DMA_IRQHandler+0x690>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d04a      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <HAL_DMA_IRQHandler+0x694>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d045      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a29      	ldr	r2, [pc, #164]	; (8004998 <HAL_DMA_IRQHandler+0x698>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d040      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a28      	ldr	r2, [pc, #160]	; (800499c <HAL_DMA_IRQHandler+0x69c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d03b      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <HAL_DMA_IRQHandler+0x6a0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d036      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a25      	ldr	r2, [pc, #148]	; (80049a4 <HAL_DMA_IRQHandler+0x6a4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d031      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <HAL_DMA_IRQHandler+0x6a8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d02c      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a22      	ldr	r2, [pc, #136]	; (80049ac <HAL_DMA_IRQHandler+0x6ac>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d027      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a20      	ldr	r2, [pc, #128]	; (80049b0 <HAL_DMA_IRQHandler+0x6b0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d022      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <HAL_DMA_IRQHandler+0x6b4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d01d      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1d      	ldr	r2, [pc, #116]	; (80049b8 <HAL_DMA_IRQHandler+0x6b8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d018      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <HAL_DMA_IRQHandler+0x6bc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d013      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <HAL_DMA_IRQHandler+0x6c0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00e      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <HAL_DMA_IRQHandler+0x6c4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_DMA_IRQHandler+0x6c8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <HAL_DMA_IRQHandler+0x678>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_DMA_IRQHandler+0x6cc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d12b      	bne.n	80049d0 <HAL_DMA_IRQHandler+0x6d0>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	e02a      	b.n	80049e4 <HAL_DMA_IRQHandler+0x6e4>
 800498e:	bf00      	nop
 8004990:	40020010 	.word	0x40020010
 8004994:	40020028 	.word	0x40020028
 8004998:	40020040 	.word	0x40020040
 800499c:	40020058 	.word	0x40020058
 80049a0:	40020070 	.word	0x40020070
 80049a4:	40020088 	.word	0x40020088
 80049a8:	400200a0 	.word	0x400200a0
 80049ac:	400200b8 	.word	0x400200b8
 80049b0:	40020410 	.word	0x40020410
 80049b4:	40020428 	.word	0x40020428
 80049b8:	40020440 	.word	0x40020440
 80049bc:	40020458 	.word	0x40020458
 80049c0:	40020470 	.word	0x40020470
 80049c4:	40020488 	.word	0x40020488
 80049c8:	400204a0 	.word	0x400204a0
 80049cc:	400204b8 	.word	0x400204b8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8087 	beq.w	8004af8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	2220      	movs	r2, #32
 80049f4:	409a      	lsls	r2, r3
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d139      	bne.n	8004a7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0216 	bic.w	r2, r2, #22
 8004a14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <HAL_DMA_IRQHandler+0x736>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0208 	bic.w	r2, r2, #8
 8004a44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	223f      	movs	r2, #63	; 0x3f
 8004a50:	409a      	lsls	r2, r3
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 834a 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
          }
          return;
 8004a78:	e344      	b.n	8005104 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d018      	beq.n	8004aba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d02c      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	4798      	blx	r3
 8004aa6:	e027      	b.n	8004af8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d023      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
 8004ab8:	e01e      	b.n	8004af8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0210 	bic.w	r2, r2, #16
 8004ad6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8306 	beq.w	800510e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8088 	beq.w	8004c20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2204      	movs	r2, #4
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a7a      	ldr	r2, [pc, #488]	; (8004d08 <HAL_DMA_IRQHandler+0xa08>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d04a      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a79      	ldr	r2, [pc, #484]	; (8004d0c <HAL_DMA_IRQHandler+0xa0c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d045      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a77      	ldr	r2, [pc, #476]	; (8004d10 <HAL_DMA_IRQHandler+0xa10>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d040      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a76      	ldr	r2, [pc, #472]	; (8004d14 <HAL_DMA_IRQHandler+0xa14>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d03b      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a74      	ldr	r2, [pc, #464]	; (8004d18 <HAL_DMA_IRQHandler+0xa18>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d036      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a73      	ldr	r2, [pc, #460]	; (8004d1c <HAL_DMA_IRQHandler+0xa1c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d031      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a71      	ldr	r2, [pc, #452]	; (8004d20 <HAL_DMA_IRQHandler+0xa20>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d02c      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a70      	ldr	r2, [pc, #448]	; (8004d24 <HAL_DMA_IRQHandler+0xa24>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d027      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6e      	ldr	r2, [pc, #440]	; (8004d28 <HAL_DMA_IRQHandler+0xa28>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d022      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6d      	ldr	r2, [pc, #436]	; (8004d2c <HAL_DMA_IRQHandler+0xa2c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d01d      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a6b      	ldr	r2, [pc, #428]	; (8004d30 <HAL_DMA_IRQHandler+0xa30>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d018      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a6a      	ldr	r2, [pc, #424]	; (8004d34 <HAL_DMA_IRQHandler+0xa34>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d013      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a68      	ldr	r2, [pc, #416]	; (8004d38 <HAL_DMA_IRQHandler+0xa38>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00e      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a67      	ldr	r2, [pc, #412]	; (8004d3c <HAL_DMA_IRQHandler+0xa3c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a65      	ldr	r2, [pc, #404]	; (8004d40 <HAL_DMA_IRQHandler+0xa40>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x8b8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a64      	ldr	r2, [pc, #400]	; (8004d44 <HAL_DMA_IRQHandler+0xa44>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d108      	bne.n	8004bca <HAL_DMA_IRQHandler+0x8ca>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	e007      	b.n	8004bda <HAL_DMA_IRQHandler+0x8da>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d307      	bcc.n	8004bf6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f2      	bne.n	8004bda <HAL_DMA_IRQHandler+0x8da>
 8004bf4:	e000      	b.n	8004bf8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004bf6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c0e:	e003      	b.n	8004c18 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8272 	beq.w	800510e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
 8004c32:	e26c      	b.n	800510e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a43      	ldr	r2, [pc, #268]	; (8004d48 <HAL_DMA_IRQHandler+0xa48>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x984>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a42      	ldr	r2, [pc, #264]	; (8004d4c <HAL_DMA_IRQHandler+0xa4c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01d      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x984>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a40      	ldr	r2, [pc, #256]	; (8004d50 <HAL_DMA_IRQHandler+0xa50>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x984>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a3f      	ldr	r2, [pc, #252]	; (8004d54 <HAL_DMA_IRQHandler+0xa54>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x984>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3d      	ldr	r2, [pc, #244]	; (8004d58 <HAL_DMA_IRQHandler+0xa58>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x984>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <HAL_DMA_IRQHandler+0xa5c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x984>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3a      	ldr	r2, [pc, #232]	; (8004d60 <HAL_DMA_IRQHandler+0xa60>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x984>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a39      	ldr	r2, [pc, #228]	; (8004d64 <HAL_DMA_IRQHandler+0xa64>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x988>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_DMA_IRQHandler+0x98a>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 823f 	beq.w	800510e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80cd 	beq.w	8004e48 <HAL_DMA_IRQHandler+0xb48>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80c7 	beq.w	8004e48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d049      	beq.n	8004d68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8210 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf0:	e20a      	b.n	8005108 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8206 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d04:	e200      	b.n	8005108 <HAL_DMA_IRQHandler+0xe08>
 8004d06:	bf00      	nop
 8004d08:	40020010 	.word	0x40020010
 8004d0c:	40020028 	.word	0x40020028
 8004d10:	40020040 	.word	0x40020040
 8004d14:	40020058 	.word	0x40020058
 8004d18:	40020070 	.word	0x40020070
 8004d1c:	40020088 	.word	0x40020088
 8004d20:	400200a0 	.word	0x400200a0
 8004d24:	400200b8 	.word	0x400200b8
 8004d28:	40020410 	.word	0x40020410
 8004d2c:	40020428 	.word	0x40020428
 8004d30:	40020440 	.word	0x40020440
 8004d34:	40020458 	.word	0x40020458
 8004d38:	40020470 	.word	0x40020470
 8004d3c:	40020488 	.word	0x40020488
 8004d40:	400204a0 	.word	0x400204a0
 8004d44:	400204b8 	.word	0x400204b8
 8004d48:	58025408 	.word	0x58025408
 8004d4c:	5802541c 	.word	0x5802541c
 8004d50:	58025430 	.word	0x58025430
 8004d54:	58025444 	.word	0x58025444
 8004d58:	58025458 	.word	0x58025458
 8004d5c:	5802546c 	.word	0x5802546c
 8004d60:	58025480 	.word	0x58025480
 8004d64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d160      	bne.n	8004e34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <HAL_DMA_IRQHandler+0xc74>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7d      	ldr	r2, [pc, #500]	; (8004f78 <HAL_DMA_IRQHandler+0xc78>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7c      	ldr	r2, [pc, #496]	; (8004f7c <HAL_DMA_IRQHandler+0xc7c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7a      	ldr	r2, [pc, #488]	; (8004f80 <HAL_DMA_IRQHandler+0xc80>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a79      	ldr	r2, [pc, #484]	; (8004f84 <HAL_DMA_IRQHandler+0xc84>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a77      	ldr	r2, [pc, #476]	; (8004f88 <HAL_DMA_IRQHandler+0xc88>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a76      	ldr	r2, [pc, #472]	; (8004f8c <HAL_DMA_IRQHandler+0xc8c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a74      	ldr	r2, [pc, #464]	; (8004f90 <HAL_DMA_IRQHandler+0xc90>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a73      	ldr	r2, [pc, #460]	; (8004f94 <HAL_DMA_IRQHandler+0xc94>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a71      	ldr	r2, [pc, #452]	; (8004f98 <HAL_DMA_IRQHandler+0xc98>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a70      	ldr	r2, [pc, #448]	; (8004f9c <HAL_DMA_IRQHandler+0xc9c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a6e      	ldr	r2, [pc, #440]	; (8004fa0 <HAL_DMA_IRQHandler+0xca0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6d      	ldr	r2, [pc, #436]	; (8004fa4 <HAL_DMA_IRQHandler+0xca4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a6b      	ldr	r2, [pc, #428]	; (8004fa8 <HAL_DMA_IRQHandler+0xca8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a6a      	ldr	r2, [pc, #424]	; (8004fac <HAL_DMA_IRQHandler+0xcac>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xb12>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a68      	ldr	r2, [pc, #416]	; (8004fb0 <HAL_DMA_IRQHandler+0xcb0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d108      	bne.n	8004e24 <HAL_DMA_IRQHandler+0xb24>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0208 	bic.w	r2, r2, #8
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e007      	b.n	8004e34 <HAL_DMA_IRQHandler+0xb34>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0204 	bic.w	r2, r2, #4
 8004e32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8165 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e46:	e15f      	b.n	8005108 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	2202      	movs	r2, #2
 8004e52:	409a      	lsls	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80c5 	beq.w	8004fe8 <HAL_DMA_IRQHandler+0xce8>
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80bf 	beq.w	8004fe8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2202      	movs	r2, #2
 8004e74:	409a      	lsls	r2, r3
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d018      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 813a 	beq.w	800510c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea0:	e134      	b.n	800510c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8130 	beq.w	800510c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb4:	e12a      	b.n	800510c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 8089 	bne.w	8004fd4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2b      	ldr	r2, [pc, #172]	; (8004f74 <HAL_DMA_IRQHandler+0xc74>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d04a      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a29      	ldr	r2, [pc, #164]	; (8004f78 <HAL_DMA_IRQHandler+0xc78>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d045      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a28      	ldr	r2, [pc, #160]	; (8004f7c <HAL_DMA_IRQHandler+0xc7c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d040      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <HAL_DMA_IRQHandler+0xc80>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d03b      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <HAL_DMA_IRQHandler+0xc84>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d036      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <HAL_DMA_IRQHandler+0xc88>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d031      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a22      	ldr	r2, [pc, #136]	; (8004f8c <HAL_DMA_IRQHandler+0xc8c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d02c      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_DMA_IRQHandler+0xc90>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d027      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <HAL_DMA_IRQHandler+0xc94>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <HAL_DMA_IRQHandler+0xc98>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <HAL_DMA_IRQHandler+0xc9c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1a      	ldr	r2, [pc, #104]	; (8004fa0 <HAL_DMA_IRQHandler+0xca0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <HAL_DMA_IRQHandler+0xca4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <HAL_DMA_IRQHandler+0xca8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a16      	ldr	r2, [pc, #88]	; (8004fac <HAL_DMA_IRQHandler+0xcac>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xc62>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <HAL_DMA_IRQHandler+0xcb0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d128      	bne.n	8004fb4 <HAL_DMA_IRQHandler+0xcb4>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0214 	bic.w	r2, r2, #20
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e027      	b.n	8004fc4 <HAL_DMA_IRQHandler+0xcc4>
 8004f74:	40020010 	.word	0x40020010
 8004f78:	40020028 	.word	0x40020028
 8004f7c:	40020040 	.word	0x40020040
 8004f80:	40020058 	.word	0x40020058
 8004f84:	40020070 	.word	0x40020070
 8004f88:	40020088 	.word	0x40020088
 8004f8c:	400200a0 	.word	0x400200a0
 8004f90:	400200b8 	.word	0x400200b8
 8004f94:	40020410 	.word	0x40020410
 8004f98:	40020428 	.word	0x40020428
 8004f9c:	40020440 	.word	0x40020440
 8004fa0:	40020458 	.word	0x40020458
 8004fa4:	40020470 	.word	0x40020470
 8004fa8:	40020488 	.word	0x40020488
 8004fac:	400204a0 	.word	0x400204a0
 8004fb0:	400204b8 	.word	0x400204b8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 020a 	bic.w	r2, r2, #10
 8004fc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8097 	beq.w	800510c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fe6:	e091      	b.n	800510c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	409a      	lsls	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8088 	beq.w	800510e <HAL_DMA_IRQHandler+0xe0e>
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8082 	beq.w	800510e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a41      	ldr	r2, [pc, #260]	; (8005114 <HAL_DMA_IRQHandler+0xe14>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d04a      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a3f      	ldr	r2, [pc, #252]	; (8005118 <HAL_DMA_IRQHandler+0xe18>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d045      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a3e      	ldr	r2, [pc, #248]	; (800511c <HAL_DMA_IRQHandler+0xe1c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d040      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a3c      	ldr	r2, [pc, #240]	; (8005120 <HAL_DMA_IRQHandler+0xe20>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d03b      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a3b      	ldr	r2, [pc, #236]	; (8005124 <HAL_DMA_IRQHandler+0xe24>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d036      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a39      	ldr	r2, [pc, #228]	; (8005128 <HAL_DMA_IRQHandler+0xe28>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d031      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a38      	ldr	r2, [pc, #224]	; (800512c <HAL_DMA_IRQHandler+0xe2c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d02c      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a36      	ldr	r2, [pc, #216]	; (8005130 <HAL_DMA_IRQHandler+0xe30>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d027      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a35      	ldr	r2, [pc, #212]	; (8005134 <HAL_DMA_IRQHandler+0xe34>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d022      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a33      	ldr	r2, [pc, #204]	; (8005138 <HAL_DMA_IRQHandler+0xe38>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01d      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a32      	ldr	r2, [pc, #200]	; (800513c <HAL_DMA_IRQHandler+0xe3c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d018      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a30      	ldr	r2, [pc, #192]	; (8005140 <HAL_DMA_IRQHandler+0xe40>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2f      	ldr	r2, [pc, #188]	; (8005144 <HAL_DMA_IRQHandler+0xe44>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00e      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2d      	ldr	r2, [pc, #180]	; (8005148 <HAL_DMA_IRQHandler+0xe48>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a2c      	ldr	r2, [pc, #176]	; (800514c <HAL_DMA_IRQHandler+0xe4c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_DMA_IRQHandler+0xdaa>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <HAL_DMA_IRQHandler+0xe50>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d108      	bne.n	80050bc <HAL_DMA_IRQHandler+0xdbc>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 021c 	bic.w	r2, r2, #28
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e007      	b.n	80050cc <HAL_DMA_IRQHandler+0xdcc>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 020e 	bic.w	r2, r2, #14
 80050ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2201      	movs	r2, #1
 80050d6:	409a      	lsls	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	4798      	blx	r3
 8005102:	e004      	b.n	800510e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005104:	bf00      	nop
 8005106:	e002      	b.n	800510e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800510c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800510e:	3728      	adds	r7, #40	; 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40020010 	.word	0x40020010
 8005118:	40020028 	.word	0x40020028
 800511c:	40020040 	.word	0x40020040
 8005120:	40020058 	.word	0x40020058
 8005124:	40020070 	.word	0x40020070
 8005128:	40020088 	.word	0x40020088
 800512c:	400200a0 	.word	0x400200a0
 8005130:	400200b8 	.word	0x400200b8
 8005134:	40020410 	.word	0x40020410
 8005138:	40020428 	.word	0x40020428
 800513c:	40020440 	.word	0x40020440
 8005140:	40020458 	.word	0x40020458
 8005144:	40020470 	.word	0x40020470
 8005148:	40020488 	.word	0x40020488
 800514c:	400204a0 	.word	0x400204a0
 8005150:	400204b8 	.word	0x400204b8

08005154 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a7f      	ldr	r2, [pc, #508]	; (8005370 <DMA_SetConfig+0x21c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d072      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a7d      	ldr	r2, [pc, #500]	; (8005374 <DMA_SetConfig+0x220>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d06d      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a7c      	ldr	r2, [pc, #496]	; (8005378 <DMA_SetConfig+0x224>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d068      	beq.n	800525e <DMA_SetConfig+0x10a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a7a      	ldr	r2, [pc, #488]	; (800537c <DMA_SetConfig+0x228>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d063      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a79      	ldr	r2, [pc, #484]	; (8005380 <DMA_SetConfig+0x22c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d05e      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a77      	ldr	r2, [pc, #476]	; (8005384 <DMA_SetConfig+0x230>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d059      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a76      	ldr	r2, [pc, #472]	; (8005388 <DMA_SetConfig+0x234>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d054      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a74      	ldr	r2, [pc, #464]	; (800538c <DMA_SetConfig+0x238>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d04f      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a73      	ldr	r2, [pc, #460]	; (8005390 <DMA_SetConfig+0x23c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d04a      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a71      	ldr	r2, [pc, #452]	; (8005394 <DMA_SetConfig+0x240>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d045      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a70      	ldr	r2, [pc, #448]	; (8005398 <DMA_SetConfig+0x244>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d040      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a6e      	ldr	r2, [pc, #440]	; (800539c <DMA_SetConfig+0x248>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d03b      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6d      	ldr	r2, [pc, #436]	; (80053a0 <DMA_SetConfig+0x24c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d036      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a6b      	ldr	r2, [pc, #428]	; (80053a4 <DMA_SetConfig+0x250>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d031      	beq.n	800525e <DMA_SetConfig+0x10a>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a6a      	ldr	r2, [pc, #424]	; (80053a8 <DMA_SetConfig+0x254>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d02c      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a68      	ldr	r2, [pc, #416]	; (80053ac <DMA_SetConfig+0x258>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d027      	beq.n	800525e <DMA_SetConfig+0x10a>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a67      	ldr	r2, [pc, #412]	; (80053b0 <DMA_SetConfig+0x25c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a65      	ldr	r2, [pc, #404]	; (80053b4 <DMA_SetConfig+0x260>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01d      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a64      	ldr	r2, [pc, #400]	; (80053b8 <DMA_SetConfig+0x264>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <DMA_SetConfig+0x10a>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a62      	ldr	r2, [pc, #392]	; (80053bc <DMA_SetConfig+0x268>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a61      	ldr	r2, [pc, #388]	; (80053c0 <DMA_SetConfig+0x26c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a5f      	ldr	r2, [pc, #380]	; (80053c4 <DMA_SetConfig+0x270>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <DMA_SetConfig+0x10a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a5e      	ldr	r2, [pc, #376]	; (80053c8 <DMA_SetConfig+0x274>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <DMA_SetConfig+0x10a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a5c      	ldr	r2, [pc, #368]	; (80053cc <DMA_SetConfig+0x278>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <DMA_SetConfig+0x10e>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <DMA_SetConfig+0x110>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005270:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005282:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a39      	ldr	r2, [pc, #228]	; (8005370 <DMA_SetConfig+0x21c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d04a      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a38      	ldr	r2, [pc, #224]	; (8005374 <DMA_SetConfig+0x220>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d045      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a36      	ldr	r2, [pc, #216]	; (8005378 <DMA_SetConfig+0x224>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d040      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a35      	ldr	r2, [pc, #212]	; (800537c <DMA_SetConfig+0x228>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d03b      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a33      	ldr	r2, [pc, #204]	; (8005380 <DMA_SetConfig+0x22c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d036      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a32      	ldr	r2, [pc, #200]	; (8005384 <DMA_SetConfig+0x230>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d031      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a30      	ldr	r2, [pc, #192]	; (8005388 <DMA_SetConfig+0x234>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02c      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2f      	ldr	r2, [pc, #188]	; (800538c <DMA_SetConfig+0x238>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d027      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2d      	ldr	r2, [pc, #180]	; (8005390 <DMA_SetConfig+0x23c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <DMA_SetConfig+0x240>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d01d      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <DMA_SetConfig+0x244>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a29      	ldr	r2, [pc, #164]	; (800539c <DMA_SetConfig+0x248>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <DMA_SetConfig+0x24c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <DMA_SetConfig+0x250>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <DMA_SetConfig+0x254>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <DMA_SetConfig+0x1d0>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a23      	ldr	r2, [pc, #140]	; (80053ac <DMA_SetConfig+0x258>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <DMA_SetConfig+0x1d4>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <DMA_SetConfig+0x1d6>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d059      	beq.n	80053e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	223f      	movs	r2, #63	; 0x3f
 8005338:	409a      	lsls	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800534c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d138      	bne.n	80053d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800536e:	e086      	b.n	800547e <DMA_SetConfig+0x32a>
 8005370:	40020010 	.word	0x40020010
 8005374:	40020028 	.word	0x40020028
 8005378:	40020040 	.word	0x40020040
 800537c:	40020058 	.word	0x40020058
 8005380:	40020070 	.word	0x40020070
 8005384:	40020088 	.word	0x40020088
 8005388:	400200a0 	.word	0x400200a0
 800538c:	400200b8 	.word	0x400200b8
 8005390:	40020410 	.word	0x40020410
 8005394:	40020428 	.word	0x40020428
 8005398:	40020440 	.word	0x40020440
 800539c:	40020458 	.word	0x40020458
 80053a0:	40020470 	.word	0x40020470
 80053a4:	40020488 	.word	0x40020488
 80053a8:	400204a0 	.word	0x400204a0
 80053ac:	400204b8 	.word	0x400204b8
 80053b0:	58025408 	.word	0x58025408
 80053b4:	5802541c 	.word	0x5802541c
 80053b8:	58025430 	.word	0x58025430
 80053bc:	58025444 	.word	0x58025444
 80053c0:	58025458 	.word	0x58025458
 80053c4:	5802546c 	.word	0x5802546c
 80053c8:	58025480 	.word	0x58025480
 80053cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]
}
 80053e0:	e04d      	b.n	800547e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a29      	ldr	r2, [pc, #164]	; (800548c <DMA_SetConfig+0x338>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d022      	beq.n	8005432 <DMA_SetConfig+0x2de>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a27      	ldr	r2, [pc, #156]	; (8005490 <DMA_SetConfig+0x33c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01d      	beq.n	8005432 <DMA_SetConfig+0x2de>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a26      	ldr	r2, [pc, #152]	; (8005494 <DMA_SetConfig+0x340>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d018      	beq.n	8005432 <DMA_SetConfig+0x2de>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a24      	ldr	r2, [pc, #144]	; (8005498 <DMA_SetConfig+0x344>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <DMA_SetConfig+0x2de>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a23      	ldr	r2, [pc, #140]	; (800549c <DMA_SetConfig+0x348>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00e      	beq.n	8005432 <DMA_SetConfig+0x2de>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <DMA_SetConfig+0x34c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d009      	beq.n	8005432 <DMA_SetConfig+0x2de>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a20      	ldr	r2, [pc, #128]	; (80054a4 <DMA_SetConfig+0x350>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <DMA_SetConfig+0x2de>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <DMA_SetConfig+0x354>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <DMA_SetConfig+0x2e2>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <DMA_SetConfig+0x2e4>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d020      	beq.n	800547e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2201      	movs	r2, #1
 8005446:	409a      	lsls	r2, r3
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d108      	bne.n	800546e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	60da      	str	r2, [r3, #12]
}
 800546c:	e007      	b.n	800547e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	58025408 	.word	0x58025408
 8005490:	5802541c 	.word	0x5802541c
 8005494:	58025430 	.word	0x58025430
 8005498:	58025444 	.word	0x58025444
 800549c:	58025458 	.word	0x58025458
 80054a0:	5802546c 	.word	0x5802546c
 80054a4:	58025480 	.word	0x58025480
 80054a8:	58025494 	.word	0x58025494

080054ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a42      	ldr	r2, [pc, #264]	; (80055c4 <DMA_CalcBaseAndBitshift+0x118>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04a      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a41      	ldr	r2, [pc, #260]	; (80055c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d045      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	; (80055cc <DMA_CalcBaseAndBitshift+0x120>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d040      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <DMA_CalcBaseAndBitshift+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d03b      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3c      	ldr	r2, [pc, #240]	; (80055d4 <DMA_CalcBaseAndBitshift+0x128>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d036      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a3b      	ldr	r2, [pc, #236]	; (80055d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d031      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a39      	ldr	r2, [pc, #228]	; (80055dc <DMA_CalcBaseAndBitshift+0x130>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02c      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a38      	ldr	r2, [pc, #224]	; (80055e0 <DMA_CalcBaseAndBitshift+0x134>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d027      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a36      	ldr	r2, [pc, #216]	; (80055e4 <DMA_CalcBaseAndBitshift+0x138>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d022      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01d      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a33      	ldr	r2, [pc, #204]	; (80055ec <DMA_CalcBaseAndBitshift+0x140>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a32      	ldr	r2, [pc, #200]	; (80055f0 <DMA_CalcBaseAndBitshift+0x144>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a30      	ldr	r2, [pc, #192]	; (80055f4 <DMA_CalcBaseAndBitshift+0x148>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00e      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2f      	ldr	r2, [pc, #188]	; (80055f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2d      	ldr	r2, [pc, #180]	; (80055fc <DMA_CalcBaseAndBitshift+0x150>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <DMA_CalcBaseAndBitshift+0xa8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a2c      	ldr	r2, [pc, #176]	; (8005600 <DMA_CalcBaseAndBitshift+0x154>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <DMA_CalcBaseAndBitshift+0xac>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <DMA_CalcBaseAndBitshift+0xae>
 8005558:	2300      	movs	r3, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d024      	beq.n	80055a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	3b10      	subs	r3, #16
 8005566:	4a27      	ldr	r2, [pc, #156]	; (8005604 <DMA_CalcBaseAndBitshift+0x158>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	4a24      	ldr	r2, [pc, #144]	; (8005608 <DMA_CalcBaseAndBitshift+0x15c>)
 8005578:	5cd3      	ldrb	r3, [r2, r3]
 800557a:	461a      	mov	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d908      	bls.n	8005598 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <DMA_CalcBaseAndBitshift+0x160>)
 800558e:	4013      	ands	r3, r2
 8005590:	1d1a      	adds	r2, r3, #4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	659a      	str	r2, [r3, #88]	; 0x58
 8005596:	e00d      	b.n	80055b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	4b1b      	ldr	r3, [pc, #108]	; (800560c <DMA_CalcBaseAndBitshift+0x160>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6593      	str	r3, [r2, #88]	; 0x58
 80055a6:	e005      	b.n	80055b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40020010 	.word	0x40020010
 80055c8:	40020028 	.word	0x40020028
 80055cc:	40020040 	.word	0x40020040
 80055d0:	40020058 	.word	0x40020058
 80055d4:	40020070 	.word	0x40020070
 80055d8:	40020088 	.word	0x40020088
 80055dc:	400200a0 	.word	0x400200a0
 80055e0:	400200b8 	.word	0x400200b8
 80055e4:	40020410 	.word	0x40020410
 80055e8:	40020428 	.word	0x40020428
 80055ec:	40020440 	.word	0x40020440
 80055f0:	40020458 	.word	0x40020458
 80055f4:	40020470 	.word	0x40020470
 80055f8:	40020488 	.word	0x40020488
 80055fc:	400204a0 	.word	0x400204a0
 8005600:	400204b8 	.word	0x400204b8
 8005604:	aaaaaaab 	.word	0xaaaaaaab
 8005608:	0800bef4 	.word	0x0800bef4
 800560c:	fffffc00 	.word	0xfffffc00

08005610 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d120      	bne.n	8005666 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	2b03      	cmp	r3, #3
 800562a:	d858      	bhi.n	80056de <DMA_CheckFifoParam+0xce>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <DMA_CheckFifoParam+0x24>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005645 	.word	0x08005645
 8005638:	08005657 	.word	0x08005657
 800563c:	08005645 	.word	0x08005645
 8005640:	080056df 	.word	0x080056df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d048      	beq.n	80056e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005654:	e045      	b.n	80056e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800565e:	d142      	bne.n	80056e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005664:	e03f      	b.n	80056e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566e:	d123      	bne.n	80056b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	2b03      	cmp	r3, #3
 8005676:	d838      	bhi.n	80056ea <DMA_CheckFifoParam+0xda>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <DMA_CheckFifoParam+0x70>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	08005691 	.word	0x08005691
 8005684:	08005697 	.word	0x08005697
 8005688:	08005691 	.word	0x08005691
 800568c:	080056a9 	.word	0x080056a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
        break;
 8005694:	e030      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d025      	beq.n	80056ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056a6:	e022      	b.n	80056ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056b0:	d11f      	bne.n	80056f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056b6:	e01c      	b.n	80056f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d902      	bls.n	80056c6 <DMA_CheckFifoParam+0xb6>
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d003      	beq.n	80056cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056c4:	e018      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
        break;
 80056ca:	e015      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
    break;
 80056dc:	e00b      	b.n	80056f6 <DMA_CheckFifoParam+0xe6>
        break;
 80056de:	bf00      	nop
 80056e0:	e00a      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056e2:	bf00      	nop
 80056e4:	e008      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056e6:	bf00      	nop
 80056e8:	e006      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056ea:	bf00      	nop
 80056ec:	e004      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
        break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <DMA_CheckFifoParam+0xe8>
    break;
 80056f6:	bf00      	nop
    }
  }

  return status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a38      	ldr	r2, [pc, #224]	; (80057fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a36      	ldr	r2, [pc, #216]	; (8005800 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a35      	ldr	r2, [pc, #212]	; (8005804 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a33      	ldr	r2, [pc, #204]	; (8005808 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a32      	ldr	r2, [pc, #200]	; (800580c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a30      	ldr	r2, [pc, #192]	; (8005810 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2f      	ldr	r2, [pc, #188]	; (8005814 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2d      	ldr	r2, [pc, #180]	; (8005818 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01a      	beq.n	80057a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	3b08      	subs	r3, #8
 8005778:	4a28      	ldr	r2, [pc, #160]	; (800581c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4b26      	ldr	r3, [pc, #152]	; (8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a24      	ldr	r2, [pc, #144]	; (8005824 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005794:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2201      	movs	r2, #1
 800579e:	409a      	lsls	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057a4:	e024      	b.n	80057f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	3b10      	subs	r3, #16
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d806      	bhi.n	80057ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d902      	bls.n	80057ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3308      	adds	r3, #8
 80057cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a16      	ldr	r2, [pc, #88]	; (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80057e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	58025408 	.word	0x58025408
 8005800:	5802541c 	.word	0x5802541c
 8005804:	58025430 	.word	0x58025430
 8005808:	58025444 	.word	0x58025444
 800580c:	58025458 	.word	0x58025458
 8005810:	5802546c 	.word	0x5802546c
 8005814:	58025480 	.word	0x58025480
 8005818:	58025494 	.word	0x58025494
 800581c:	cccccccd 	.word	0xcccccccd
 8005820:	16009600 	.word	0x16009600
 8005824:	58025880 	.word	0x58025880
 8005828:	aaaaaaab 	.word	0xaaaaaaab
 800582c:	400204b8 	.word	0x400204b8
 8005830:	4002040f 	.word	0x4002040f
 8005834:	10008200 	.word	0x10008200
 8005838:	40020880 	.word	0x40020880

0800583c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04a      	beq.n	80058e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d847      	bhi.n	80058e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d022      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a24      	ldr	r2, [pc, #144]	; (80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d01d      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a22      	ldr	r2, [pc, #136]	; (80058fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d018      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a21      	ldr	r2, [pc, #132]	; (8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1f      	ldr	r2, [pc, #124]	; (8005904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1e      	ldr	r2, [pc, #120]	; (8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1c      	ldr	r2, [pc, #112]	; (800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1b      	ldr	r2, [pc, #108]	; (8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d101      	bne.n	80058ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4b17      	ldr	r3, [pc, #92]	; (8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058c4:	671a      	str	r2, [r3, #112]	; 0x70
 80058c6:	e009      	b.n	80058dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4b14      	ldr	r3, [pc, #80]	; (800591c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80058da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3b01      	subs	r3, #1
 80058e0:	2201      	movs	r2, #1
 80058e2:	409a      	lsls	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	58025408 	.word	0x58025408
 80058f8:	5802541c 	.word	0x5802541c
 80058fc:	58025430 	.word	0x58025430
 8005900:	58025444 	.word	0x58025444
 8005904:	58025458 	.word	0x58025458
 8005908:	5802546c 	.word	0x5802546c
 800590c:	58025480 	.word	0x58025480
 8005910:	58025494 	.word	0x58025494
 8005914:	1600963f 	.word	0x1600963f
 8005918:	58025940 	.word	0x58025940
 800591c:	1000823f 	.word	0x1000823f
 8005920:	40020940 	.word	0x40020940

08005924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005924:	b480      	push	{r7}
 8005926:	b089      	sub	sp, #36	; 0x24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005932:	4b89      	ldr	r3, [pc, #548]	; (8005b58 <HAL_GPIO_Init+0x234>)
 8005934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005936:	e194      	b.n	8005c62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2101      	movs	r1, #1
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8186 	beq.w	8005c5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d005      	beq.n	8005968 <HAL_GPIO_Init+0x44>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d130      	bne.n	80059ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	2203      	movs	r2, #3
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800599e:	2201      	movs	r2, #1
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	4013      	ands	r3, r2
 80059ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0201 	and.w	r2, r3, #1
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d017      	beq.n	8005a06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	2203      	movs	r2, #3
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d123      	bne.n	8005a5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	08da      	lsrs	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3208      	adds	r2, #8
 8005a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	220f      	movs	r2, #15
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4013      	ands	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	08da      	lsrs	r2, r3, #3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3208      	adds	r2, #8
 8005a54:	69b9      	ldr	r1, [r7, #24]
 8005a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	2203      	movs	r2, #3
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 0203 	and.w	r2, r3, #3
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80e0 	beq.w	8005c5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <HAL_GPIO_Init+0x238>)
 8005a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aa2:	4a2e      	ldr	r2, [pc, #184]	; (8005b5c <HAL_GPIO_Init+0x238>)
 8005aa4:	f043 0302 	orr.w	r3, r3, #2
 8005aa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005aac:	4b2b      	ldr	r3, [pc, #172]	; (8005b5c <HAL_GPIO_Init+0x238>)
 8005aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aba:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <HAL_GPIO_Init+0x23c>)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	089b      	lsrs	r3, r3, #2
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	220f      	movs	r2, #15
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4013      	ands	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a20      	ldr	r2, [pc, #128]	; (8005b64 <HAL_GPIO_Init+0x240>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d052      	beq.n	8005b8c <HAL_GPIO_Init+0x268>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <HAL_GPIO_Init+0x244>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d031      	beq.n	8005b52 <HAL_GPIO_Init+0x22e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <HAL_GPIO_Init+0x248>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02b      	beq.n	8005b4e <HAL_GPIO_Init+0x22a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1d      	ldr	r2, [pc, #116]	; (8005b70 <HAL_GPIO_Init+0x24c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d025      	beq.n	8005b4a <HAL_GPIO_Init+0x226>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1c      	ldr	r2, [pc, #112]	; (8005b74 <HAL_GPIO_Init+0x250>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01f      	beq.n	8005b46 <HAL_GPIO_Init+0x222>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <HAL_GPIO_Init+0x254>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d019      	beq.n	8005b42 <HAL_GPIO_Init+0x21e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1a      	ldr	r2, [pc, #104]	; (8005b7c <HAL_GPIO_Init+0x258>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_GPIO_Init+0x21a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <HAL_GPIO_Init+0x25c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00d      	beq.n	8005b3a <HAL_GPIO_Init+0x216>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a18      	ldr	r2, [pc, #96]	; (8005b84 <HAL_GPIO_Init+0x260>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <HAL_GPIO_Init+0x212>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <HAL_GPIO_Init+0x264>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <HAL_GPIO_Init+0x20e>
 8005b2e:	2309      	movs	r3, #9
 8005b30:	e02d      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b32:	230a      	movs	r3, #10
 8005b34:	e02b      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b36:	2308      	movs	r3, #8
 8005b38:	e029      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b3a:	2307      	movs	r3, #7
 8005b3c:	e027      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b3e:	2306      	movs	r3, #6
 8005b40:	e025      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b42:	2305      	movs	r3, #5
 8005b44:	e023      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b46:	2304      	movs	r3, #4
 8005b48:	e021      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e01f      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e01d      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e01b      	b.n	8005b8e <HAL_GPIO_Init+0x26a>
 8005b56:	bf00      	nop
 8005b58:	58000080 	.word	0x58000080
 8005b5c:	58024400 	.word	0x58024400
 8005b60:	58000400 	.word	0x58000400
 8005b64:	58020000 	.word	0x58020000
 8005b68:	58020400 	.word	0x58020400
 8005b6c:	58020800 	.word	0x58020800
 8005b70:	58020c00 	.word	0x58020c00
 8005b74:	58021000 	.word	0x58021000
 8005b78:	58021400 	.word	0x58021400
 8005b7c:	58021800 	.word	0x58021800
 8005b80:	58021c00 	.word	0x58021c00
 8005b84:	58022000 	.word	0x58022000
 8005b88:	58022400 	.word	0x58022400
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	f002 0203 	and.w	r2, r2, #3
 8005b94:	0092      	lsls	r2, r2, #2
 8005b96:	4093      	lsls	r3, r2
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b9e:	4938      	ldr	r1, [pc, #224]	; (8005c80 <HAL_GPIO_Init+0x35c>)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f47f ae63 	bne.w	8005938 <HAL_GPIO_Init+0x14>
  }
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	3724      	adds	r7, #36	; 0x24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	58000400 	.word	0x58000400

08005c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	807b      	strh	r3, [r7, #2]
 8005c90:	4613      	mov	r3, r2
 8005c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c94:	787b      	ldrb	r3, [r7, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ca0:	e003      	b.n	8005caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ca2:	887b      	ldrh	r3, [r7, #2]
 8005ca4:	041a      	lsls	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	619a      	str	r2, [r3, #24]
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d00a      	beq.n	8005ce2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ccc:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d001      	beq.n	8005cde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e01f      	b.n	8005d1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e01d      	b.n	8005d1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ce2:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f023 0207 	bic.w	r2, r3, #7
 8005cea:	490f      	ldr	r1, [pc, #60]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cf2:	f7fb fbd3 	bl	800149c <HAL_GetTick>
 8005cf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cf8:	e009      	b.n	8005d0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cfa:	f7fb fbcf 	bl	800149c <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d08:	d901      	bls.n	8005d0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e007      	b.n	8005d1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1a:	d1ee      	bne.n	8005cfa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	58024800 	.word	0x58024800

08005d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	; 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f000 bc48 	b.w	80065d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8088 	beq.w	8005e5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4e:	4b99      	ldr	r3, [pc, #612]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d58:	4b96      	ldr	r3, [pc, #600]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d007      	beq.n	8005d74 <HAL_RCC_OscConfig+0x48>
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	d111      	bne.n	8005d8e <HAL_RCC_OscConfig+0x62>
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d10c      	bne.n	8005d8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d06d      	beq.n	8005e5c <HAL_RCC_OscConfig+0x130>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d169      	bne.n	8005e5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f000 bc21 	b.w	80065d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d96:	d106      	bne.n	8005da6 <HAL_RCC_OscConfig+0x7a>
 8005d98:	4b86      	ldr	r3, [pc, #536]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a85      	ldr	r2, [pc, #532]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e02e      	b.n	8005e04 <HAL_RCC_OscConfig+0xd8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x9c>
 8005dae:	4b81      	ldr	r3, [pc, #516]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a80      	ldr	r2, [pc, #512]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4b7e      	ldr	r3, [pc, #504]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a7d      	ldr	r2, [pc, #500]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e01d      	b.n	8005e04 <HAL_RCC_OscConfig+0xd8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dd0:	d10c      	bne.n	8005dec <HAL_RCC_OscConfig+0xc0>
 8005dd2:	4b78      	ldr	r3, [pc, #480]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a77      	ldr	r2, [pc, #476]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	4b75      	ldr	r3, [pc, #468]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a74      	ldr	r2, [pc, #464]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e00b      	b.n	8005e04 <HAL_RCC_OscConfig+0xd8>
 8005dec:	4b71      	ldr	r3, [pc, #452]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a70      	ldr	r2, [pc, #448]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b6e      	ldr	r3, [pc, #440]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a6d      	ldr	r2, [pc, #436]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d013      	beq.n	8005e34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7fb fb46 	bl	800149c <HAL_GetTick>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e14:	f7fb fb42 	bl	800149c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b64      	cmp	r3, #100	; 0x64
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e3d4      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e26:	4b63      	ldr	r3, [pc, #396]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCC_OscConfig+0xe8>
 8005e32:	e014      	b.n	8005e5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fb fb32 	bl	800149c <HAL_GetTick>
 8005e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e3c:	f7fb fb2e 	bl	800149c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b64      	cmp	r3, #100	; 0x64
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e3c0      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e4e:	4b59      	ldr	r3, [pc, #356]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x110>
 8005e5a:	e000      	b.n	8005e5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80ca 	beq.w	8006000 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e6c:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e76:	4b4f      	ldr	r3, [pc, #316]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d007      	beq.n	8005e92 <HAL_RCC_OscConfig+0x166>
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	2b18      	cmp	r3, #24
 8005e86:	d156      	bne.n	8005f36 <HAL_RCC_OscConfig+0x20a>
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d151      	bne.n	8005f36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e92:	4b48      	ldr	r3, [pc, #288]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_RCC_OscConfig+0x17e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e392      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eaa:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 0219 	bic.w	r2, r3, #25
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	493f      	ldr	r1, [pc, #252]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fb faee 	bl	800149c <HAL_GetTick>
 8005ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec4:	f7fb faea 	bl	800149c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e37c      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed6:	4b37      	ldr	r3, [pc, #220]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	f7fb fae7 	bl	80014b4 <HAL_GetREVID>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d817      	bhi.n	8005f20 <HAL_RCC_OscConfig+0x1f4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b40      	cmp	r3, #64	; 0x40
 8005ef6:	d108      	bne.n	8005f0a <HAL_RCC_OscConfig+0x1de>
 8005ef8:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f00:	4a2c      	ldr	r2, [pc, #176]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f08:	e07a      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	031b      	lsls	r3, r3, #12
 8005f18:	4926      	ldr	r1, [pc, #152]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f1e:	e06f      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f20:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	4921      	ldr	r1, [pc, #132]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f34:	e064      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d047      	beq.n	8005fce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f3e:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 0219 	bic.w	r2, r3, #25
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	491a      	ldr	r1, [pc, #104]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fb faa4 	bl	800149c <HAL_GetTick>
 8005f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f58:	f7fb faa0 	bl	800149c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e332      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f6a:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f76:	f7fb fa9d 	bl	80014b4 <HAL_GetREVID>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d819      	bhi.n	8005fb8 <HAL_RCC_OscConfig+0x28c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d108      	bne.n	8005f9e <HAL_RCC_OscConfig+0x272>
 8005f8c:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f94:	4a07      	ldr	r2, [pc, #28]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9a:	6053      	str	r3, [r2, #4]
 8005f9c:	e030      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	031b      	lsls	r3, r3, #12
 8005fac:	4901      	ldr	r1, [pc, #4]	; (8005fb4 <HAL_RCC_OscConfig+0x288>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	604b      	str	r3, [r1, #4]
 8005fb2:	e025      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	4b9a      	ldr	r3, [pc, #616]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	4997      	ldr	r1, [pc, #604]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]
 8005fcc:	e018      	b.n	8006000 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fce:	4b95      	ldr	r3, [pc, #596]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a94      	ldr	r2, [pc, #592]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fb fa5f 	bl	800149c <HAL_GetTick>
 8005fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe2:	f7fb fa5b 	bl	800149c <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e2ed      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ff4:	4b8b      	ldr	r3, [pc, #556]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f0      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80a9 	beq.w	8006160 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600e:	4b85      	ldr	r3, [pc, #532]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006016:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006018:	4b82      	ldr	r3, [pc, #520]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b08      	cmp	r3, #8
 8006022:	d007      	beq.n	8006034 <HAL_RCC_OscConfig+0x308>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b18      	cmp	r3, #24
 8006028:	d13a      	bne.n	80060a0 <HAL_RCC_OscConfig+0x374>
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d135      	bne.n	80060a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006034:	4b7b      	ldr	r3, [pc, #492]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_RCC_OscConfig+0x320>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	2b80      	cmp	r3, #128	; 0x80
 8006046:	d001      	beq.n	800604c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e2c1      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800604c:	f7fb fa32 	bl	80014b4 <HAL_GetREVID>
 8006050:	4603      	mov	r3, r0
 8006052:	f241 0203 	movw	r2, #4099	; 0x1003
 8006056:	4293      	cmp	r3, r2
 8006058:	d817      	bhi.n	800608a <HAL_RCC_OscConfig+0x35e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	2b20      	cmp	r3, #32
 8006060:	d108      	bne.n	8006074 <HAL_RCC_OscConfig+0x348>
 8006062:	4b70      	ldr	r3, [pc, #448]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800606a:	4a6e      	ldr	r2, [pc, #440]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800606c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006070:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006072:	e075      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006074:	4b6b      	ldr	r3, [pc, #428]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	069b      	lsls	r3, r3, #26
 8006082:	4968      	ldr	r1, [pc, #416]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006084:	4313      	orrs	r3, r2
 8006086:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006088:	e06a      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800608a:	4b66      	ldr	r3, [pc, #408]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	061b      	lsls	r3, r3, #24
 8006098:	4962      	ldr	r1, [pc, #392]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800609a:	4313      	orrs	r3, r2
 800609c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800609e:	e05f      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d042      	beq.n	800612e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060a8:	4b5e      	ldr	r3, [pc, #376]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5d      	ldr	r2, [pc, #372]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fb f9f2 	bl	800149c <HAL_GetTick>
 80060b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060bc:	f7fb f9ee 	bl	800149c <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e280      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ce:	4b55      	ldr	r3, [pc, #340]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060da:	f7fb f9eb 	bl	80014b4 <HAL_GetREVID>
 80060de:	4603      	mov	r3, r0
 80060e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d817      	bhi.n	8006118 <HAL_RCC_OscConfig+0x3ec>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d108      	bne.n	8006102 <HAL_RCC_OscConfig+0x3d6>
 80060f0:	4b4c      	ldr	r3, [pc, #304]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060f8:	4a4a      	ldr	r2, [pc, #296]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80060fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060fe:	6053      	str	r3, [r2, #4]
 8006100:	e02e      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
 8006102:	4b48      	ldr	r3, [pc, #288]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	069b      	lsls	r3, r3, #26
 8006110:	4944      	ldr	r1, [pc, #272]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006112:	4313      	orrs	r3, r2
 8006114:	604b      	str	r3, [r1, #4]
 8006116:	e023      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
 8006118:	4b42      	ldr	r3, [pc, #264]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	061b      	lsls	r3, r3, #24
 8006126:	493f      	ldr	r1, [pc, #252]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006128:	4313      	orrs	r3, r2
 800612a:	60cb      	str	r3, [r1, #12]
 800612c:	e018      	b.n	8006160 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800612e:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a3c      	ldr	r2, [pc, #240]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7fb f9af 	bl	800149c <HAL_GetTick>
 800613e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006142:	f7fb f9ab 	bl	800149c <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e23d      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006154:	4b33      	ldr	r3, [pc, #204]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f0      	bne.n	8006142 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d036      	beq.n	80061da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d019      	beq.n	80061a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006174:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006178:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fb f98c 	bl	800149c <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006188:	f7fb f988 	bl	800149c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e21a      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800619a:	4b22      	ldr	r3, [pc, #136]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 800619c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x45c>
 80061a6:	e018      	b.n	80061da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ac:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061ae:	f023 0301 	bic.w	r3, r3, #1
 80061b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b4:	f7fb f972 	bl	800149c <HAL_GetTick>
 80061b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061bc:	f7fb f96e 	bl	800149c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e200      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061ce:	4b15      	ldr	r3, [pc, #84]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d039      	beq.n	800625a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01c      	beq.n	8006228 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0c      	ldr	r2, [pc, #48]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 80061f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061fa:	f7fb f94f 	bl	800149c <HAL_GetTick>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006202:	f7fb f94b 	bl	800149c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e1dd      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006214:	4b03      	ldr	r3, [pc, #12]	; (8006224 <HAL_RCC_OscConfig+0x4f8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x4d6>
 8006220:	e01b      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
 8006222:	bf00      	nop
 8006224:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006228:	4b9b      	ldr	r3, [pc, #620]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a9a      	ldr	r2, [pc, #616]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800622e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006232:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006234:	f7fb f932 	bl	800149c <HAL_GetTick>
 8006238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800623c:	f7fb f92e 	bl	800149c <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e1c0      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800624e:	4b92      	ldr	r3, [pc, #584]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f0      	bne.n	800623c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8081 	beq.w	800636a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006268:	4b8c      	ldr	r3, [pc, #560]	; (800649c <HAL_RCC_OscConfig+0x770>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a8b      	ldr	r2, [pc, #556]	; (800649c <HAL_RCC_OscConfig+0x770>)
 800626e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006274:	f7fb f912 	bl	800149c <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800627c:	f7fb f90e 	bl	800149c <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b64      	cmp	r3, #100	; 0x64
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e1a0      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628e:	4b83      	ldr	r3, [pc, #524]	; (800649c <HAL_RCC_OscConfig+0x770>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d106      	bne.n	80062b0 <HAL_RCC_OscConfig+0x584>
 80062a2:	4b7d      	ldr	r3, [pc, #500]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	4a7c      	ldr	r2, [pc, #496]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	6713      	str	r3, [r2, #112]	; 0x70
 80062ae:	e02d      	b.n	800630c <HAL_RCC_OscConfig+0x5e0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10c      	bne.n	80062d2 <HAL_RCC_OscConfig+0x5a6>
 80062b8:	4b77      	ldr	r3, [pc, #476]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	4a76      	ldr	r2, [pc, #472]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	6713      	str	r3, [r2, #112]	; 0x70
 80062c4:	4b74      	ldr	r3, [pc, #464]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c8:	4a73      	ldr	r2, [pc, #460]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062ca:	f023 0304 	bic.w	r3, r3, #4
 80062ce:	6713      	str	r3, [r2, #112]	; 0x70
 80062d0:	e01c      	b.n	800630c <HAL_RCC_OscConfig+0x5e0>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d10c      	bne.n	80062f4 <HAL_RCC_OscConfig+0x5c8>
 80062da:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a6e      	ldr	r2, [pc, #440]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062e0:	f043 0304 	orr.w	r3, r3, #4
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
 80062e6:	4b6c      	ldr	r3, [pc, #432]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	4a6b      	ldr	r2, [pc, #428]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	6713      	str	r3, [r2, #112]	; 0x70
 80062f2:	e00b      	b.n	800630c <HAL_RCC_OscConfig+0x5e0>
 80062f4:	4b68      	ldr	r3, [pc, #416]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	4a67      	ldr	r2, [pc, #412]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80062fa:	f023 0301 	bic.w	r3, r3, #1
 80062fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006300:	4b65      	ldr	r3, [pc, #404]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006304:	4a64      	ldr	r2, [pc, #400]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006306:	f023 0304 	bic.w	r3, r3, #4
 800630a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d015      	beq.n	8006340 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006314:	f7fb f8c2 	bl	800149c <HAL_GetTick>
 8006318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800631a:	e00a      	b.n	8006332 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fb f8be 	bl	800149c <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e14e      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006332:	4b59      	ldr	r3, [pc, #356]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0ee      	beq.n	800631c <HAL_RCC_OscConfig+0x5f0>
 800633e:	e014      	b.n	800636a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fb f8ac 	bl	800149c <HAL_GetTick>
 8006344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006346:	e00a      	b.n	800635e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fb f8a8 	bl	800149c <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	; 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e138      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ee      	bne.n	8006348 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 812d 	beq.w	80065ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006374:	4b48      	ldr	r3, [pc, #288]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800637c:	2b18      	cmp	r3, #24
 800637e:	f000 80bd 	beq.w	80064fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	2b02      	cmp	r3, #2
 8006388:	f040 809e 	bne.w	80064c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800638c:	4b42      	ldr	r3, [pc, #264]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a41      	ldr	r2, [pc, #260]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006398:	f7fb f880 	bl	800149c <HAL_GetTick>
 800639c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a0:	f7fb f87c 	bl	800149c <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e10e      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063b2:	4b39      	ldr	r3, [pc, #228]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063be:	4b36      	ldr	r3, [pc, #216]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80063c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063c2:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <HAL_RCC_OscConfig+0x774>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063ce:	0112      	lsls	r2, r2, #4
 80063d0:	430a      	orrs	r2, r1
 80063d2:	4931      	ldr	r1, [pc, #196]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	628b      	str	r3, [r1, #40]	; 0x28
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	3b01      	subs	r3, #1
 80063de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e6:	3b01      	subs	r3, #1
 80063e8:	025b      	lsls	r3, r3, #9
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	3b01      	subs	r3, #1
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006400:	3b01      	subs	r3, #1
 8006402:	061b      	lsls	r3, r3, #24
 8006404:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006408:	4923      	ldr	r1, [pc, #140]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800640a:	4313      	orrs	r3, r2
 800640c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	4a21      	ldr	r2, [pc, #132]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800641a:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800641c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641e:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <HAL_RCC_OscConfig+0x778>)
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006426:	00d2      	lsls	r2, r2, #3
 8006428:	491b      	ldr	r1, [pc, #108]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800642e:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	f023 020c 	bic.w	r2, r3, #12
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	4917      	ldr	r1, [pc, #92]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800643c:	4313      	orrs	r3, r2
 800643e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006440:	4b15      	ldr	r3, [pc, #84]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	f023 0202 	bic.w	r2, r3, #2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	4912      	ldr	r1, [pc, #72]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800644e:	4313      	orrs	r3, r2
 8006450:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006452:	4b11      	ldr	r3, [pc, #68]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645e:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	4a0d      	ldr	r2, [pc, #52]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006468:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800646a:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006474:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006476:	4b08      	ldr	r3, [pc, #32]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	4a07      	ldr	r2, [pc, #28]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 800647c:	f043 0301 	orr.w	r3, r3, #1
 8006480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a04      	ldr	r2, [pc, #16]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 8006488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fb f805 	bl	800149c <HAL_GetTick>
 8006492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006494:	e011      	b.n	80064ba <HAL_RCC_OscConfig+0x78e>
 8006496:	bf00      	nop
 8006498:	58024400 	.word	0x58024400
 800649c:	58024800 	.word	0x58024800
 80064a0:	fffffc0c 	.word	0xfffffc0c
 80064a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a8:	f7fa fff8 	bl	800149c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e08a      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064ba:	4b47      	ldr	r3, [pc, #284]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0x77c>
 80064c6:	e082      	b.n	80065ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c8:	4b43      	ldr	r3, [pc, #268]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a42      	ldr	r2, [pc, #264]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80064ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fa ffe2 	bl	800149c <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fa ffde 	bl	800149c <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e070      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064ee:	4b3a      	ldr	r3, [pc, #232]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x7b0>
 80064fa:	e068      	b.n	80065ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064fc:	4b36      	ldr	r3, [pc, #216]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006502:	4b35      	ldr	r3, [pc, #212]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b01      	cmp	r3, #1
 800650e:	d031      	beq.n	8006574 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f003 0203 	and.w	r2, r3, #3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800651a:	429a      	cmp	r2, r3
 800651c:	d12a      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	091b      	lsrs	r3, r3, #4
 8006522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d122      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d11a      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	0a5b      	lsrs	r3, r3, #9
 8006542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d111      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800655e:	429a      	cmp	r2, r3
 8006560:	d108      	bne.n	8006574 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	0e1b      	lsrs	r3, r3, #24
 8006566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e02b      	b.n	80065d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006578:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	08db      	lsrs	r3, r3, #3
 800657e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006582:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	429a      	cmp	r2, r3
 800658c:	d01f      	beq.n	80065ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	4a11      	ldr	r2, [pc, #68]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800659a:	f7fa ff7f 	bl	800149c <HAL_GetTick>
 800659e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80065a0:	bf00      	nop
 80065a2:	f7fa ff7b 	bl	800149c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d0f9      	beq.n	80065a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065ae:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80065b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b2:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <HAL_RCC_OscConfig+0x8b0>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065ba:	00d2      	lsls	r2, r2, #3
 80065bc:	4906      	ldr	r1, [pc, #24]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <HAL_RCC_OscConfig+0x8ac>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3730      	adds	r7, #48	; 0x30
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	58024400 	.word	0x58024400
 80065dc:	ffff0007 	.word	0xffff0007

080065e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e19c      	b.n	800692e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065f4:	4b8a      	ldr	r3, [pc, #552]	; (8006820 <HAL_RCC_ClockConfig+0x240>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d910      	bls.n	8006624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006602:	4b87      	ldr	r3, [pc, #540]	; (8006820 <HAL_RCC_ClockConfig+0x240>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f023 020f 	bic.w	r2, r3, #15
 800660a:	4985      	ldr	r1, [pc, #532]	; (8006820 <HAL_RCC_ClockConfig+0x240>)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	4313      	orrs	r3, r2
 8006610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006612:	4b83      	ldr	r3, [pc, #524]	; (8006820 <HAL_RCC_ClockConfig+0x240>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d001      	beq.n	8006624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e184      	b.n	800692e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d010      	beq.n	8006652 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	4b7b      	ldr	r3, [pc, #492]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800663c:	429a      	cmp	r2, r3
 800663e:	d908      	bls.n	8006652 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006640:	4b78      	ldr	r3, [pc, #480]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	4975      	ldr	r1, [pc, #468]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 800664e:	4313      	orrs	r3, r2
 8006650:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d010      	beq.n	8006680 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	4b70      	ldr	r3, [pc, #448]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800666a:	429a      	cmp	r2, r3
 800666c:	d908      	bls.n	8006680 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800666e:	4b6d      	ldr	r3, [pc, #436]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	496a      	ldr	r1, [pc, #424]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 800667c:	4313      	orrs	r3, r2
 800667e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	d010      	beq.n	80066ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	4b64      	ldr	r3, [pc, #400]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006698:	429a      	cmp	r2, r3
 800669a:	d908      	bls.n	80066ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800669c:	4b61      	ldr	r3, [pc, #388]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	495e      	ldr	r1, [pc, #376]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d010      	beq.n	80066dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	4b59      	ldr	r3, [pc, #356]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d908      	bls.n	80066dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066ca:	4b56      	ldr	r3, [pc, #344]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	4953      	ldr	r1, [pc, #332]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d010      	beq.n	800670a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	4b4d      	ldr	r3, [pc, #308]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d908      	bls.n	800670a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f8:	4b4a      	ldr	r3, [pc, #296]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	f023 020f 	bic.w	r2, r3, #15
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	4947      	ldr	r1, [pc, #284]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006706:	4313      	orrs	r3, r2
 8006708:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d055      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006716:	4b43      	ldr	r3, [pc, #268]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	4940      	ldr	r1, [pc, #256]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006724:	4313      	orrs	r3, r2
 8006726:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d107      	bne.n	8006740 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006730:	4b3c      	ldr	r3, [pc, #240]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d121      	bne.n	8006780 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0f6      	b.n	800692e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b03      	cmp	r3, #3
 8006746:	d107      	bne.n	8006758 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006748:	4b36      	ldr	r3, [pc, #216]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d115      	bne.n	8006780 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e0ea      	b.n	800692e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d107      	bne.n	8006770 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006760:	4b30      	ldr	r3, [pc, #192]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0de      	b.n	800692e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006770:	4b2c      	ldr	r3, [pc, #176]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0d6      	b.n	800692e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006780:	4b28      	ldr	r3, [pc, #160]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f023 0207 	bic.w	r2, r3, #7
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	4925      	ldr	r1, [pc, #148]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 800678e:	4313      	orrs	r3, r2
 8006790:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006792:	f7fa fe83 	bl	800149c <HAL_GetTick>
 8006796:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006798:	e00a      	b.n	80067b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800679a:	f7fa fe7f 	bl	800149c <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e0be      	b.n	800692e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b0:	4b1c      	ldr	r3, [pc, #112]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	429a      	cmp	r2, r3
 80067c0:	d1eb      	bne.n	800679a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d010      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	429a      	cmp	r2, r3
 80067dc:	d208      	bcs.n	80067f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f023 020f 	bic.w	r2, r3, #15
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	490e      	ldr	r1, [pc, #56]	; (8006824 <HAL_RCC_ClockConfig+0x244>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <HAL_RCC_ClockConfig+0x240>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d214      	bcs.n	8006828 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fe:	4b08      	ldr	r3, [pc, #32]	; (8006820 <HAL_RCC_ClockConfig+0x240>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f023 020f 	bic.w	r2, r3, #15
 8006806:	4906      	ldr	r1, [pc, #24]	; (8006820 <HAL_RCC_ClockConfig+0x240>)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	4313      	orrs	r3, r2
 800680c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800680e:	4b04      	ldr	r3, [pc, #16]	; (8006820 <HAL_RCC_ClockConfig+0x240>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d005      	beq.n	8006828 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e086      	b.n	800692e <HAL_RCC_ClockConfig+0x34e>
 8006820:	52002000 	.word	0x52002000
 8006824:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d010      	beq.n	8006856 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	4b3f      	ldr	r3, [pc, #252]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006840:	429a      	cmp	r2, r3
 8006842:	d208      	bcs.n	8006856 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006844:	4b3c      	ldr	r3, [pc, #240]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	4939      	ldr	r1, [pc, #228]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 8006852:	4313      	orrs	r3, r2
 8006854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d010      	beq.n	8006884 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	4b34      	ldr	r3, [pc, #208]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800686e:	429a      	cmp	r2, r3
 8006870:	d208      	bcs.n	8006884 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006872:	4b31      	ldr	r3, [pc, #196]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	492e      	ldr	r1, [pc, #184]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 8006880:	4313      	orrs	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b00      	cmp	r3, #0
 800688e:	d010      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699a      	ldr	r2, [r3, #24]
 8006894:	4b28      	ldr	r3, [pc, #160]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800689c:	429a      	cmp	r2, r3
 800689e:	d208      	bcs.n	80068b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068a0:	4b25      	ldr	r3, [pc, #148]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	4922      	ldr	r1, [pc, #136]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d010      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69da      	ldr	r2, [r3, #28]
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d208      	bcs.n	80068e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068ce:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	4917      	ldr	r1, [pc, #92]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068e0:	f000 f834 	bl	800694c <HAL_RCC_GetSysClockFreq>
 80068e4:	4602      	mov	r2, r0
 80068e6:	4b14      	ldr	r3, [pc, #80]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	0a1b      	lsrs	r3, r3, #8
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	4912      	ldr	r1, [pc, #72]	; (800693c <HAL_RCC_ClockConfig+0x35c>)
 80068f2:	5ccb      	ldrb	r3, [r1, r3]
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
 80068fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068fe:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <HAL_RCC_ClockConfig+0x358>)
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	4a0d      	ldr	r2, [pc, #52]	; (800693c <HAL_RCC_ClockConfig+0x35c>)
 8006908:	5cd3      	ldrb	r3, [r2, r3]
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
 8006914:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <HAL_RCC_ClockConfig+0x360>)
 8006916:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006918:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <HAL_RCC_ClockConfig+0x364>)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <HAL_RCC_ClockConfig+0x368>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fa fd70 	bl	8001408 <HAL_InitTick>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	58024400 	.word	0x58024400
 800693c:	0800bee4 	.word	0x0800bee4
 8006940:	24000004 	.word	0x24000004
 8006944:	24000000 	.word	0x24000000
 8006948:	24000008 	.word	0x24000008

0800694c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800694c:	b480      	push	{r7}
 800694e:	b089      	sub	sp, #36	; 0x24
 8006950:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006952:	4bb3      	ldr	r3, [pc, #716]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800695a:	2b18      	cmp	r3, #24
 800695c:	f200 8155 	bhi.w	8006c0a <HAL_RCC_GetSysClockFreq+0x2be>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	080069cd 	.word	0x080069cd
 800696c:	08006c0b 	.word	0x08006c0b
 8006970:	08006c0b 	.word	0x08006c0b
 8006974:	08006c0b 	.word	0x08006c0b
 8006978:	08006c0b 	.word	0x08006c0b
 800697c:	08006c0b 	.word	0x08006c0b
 8006980:	08006c0b 	.word	0x08006c0b
 8006984:	08006c0b 	.word	0x08006c0b
 8006988:	080069f3 	.word	0x080069f3
 800698c:	08006c0b 	.word	0x08006c0b
 8006990:	08006c0b 	.word	0x08006c0b
 8006994:	08006c0b 	.word	0x08006c0b
 8006998:	08006c0b 	.word	0x08006c0b
 800699c:	08006c0b 	.word	0x08006c0b
 80069a0:	08006c0b 	.word	0x08006c0b
 80069a4:	08006c0b 	.word	0x08006c0b
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	08006c0b 	.word	0x08006c0b
 80069b0:	08006c0b 	.word	0x08006c0b
 80069b4:	08006c0b 	.word	0x08006c0b
 80069b8:	08006c0b 	.word	0x08006c0b
 80069bc:	08006c0b 	.word	0x08006c0b
 80069c0:	08006c0b 	.word	0x08006c0b
 80069c4:	08006c0b 	.word	0x08006c0b
 80069c8:	080069ff 	.word	0x080069ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069cc:	4b94      	ldr	r3, [pc, #592]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069d8:	4b91      	ldr	r3, [pc, #580]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	08db      	lsrs	r3, r3, #3
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	4a90      	ldr	r2, [pc, #576]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069e4:	fa22 f303 	lsr.w	r3, r2, r3
 80069e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069ea:	e111      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069ec:	4b8d      	ldr	r3, [pc, #564]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069ee:	61bb      	str	r3, [r7, #24]
      break;
 80069f0:	e10e      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069f2:	4b8d      	ldr	r3, [pc, #564]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069f4:	61bb      	str	r3, [r7, #24]
      break;
 80069f6:	e10b      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069f8:	4b8c      	ldr	r3, [pc, #560]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069fa:	61bb      	str	r3, [r7, #24]
      break;
 80069fc:	e108      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069fe:	4b88      	ldr	r3, [pc, #544]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a08:	4b85      	ldr	r3, [pc, #532]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a14:	4b82      	ldr	r3, [pc, #520]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a1e:	4b80      	ldr	r3, [pc, #512]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	08db      	lsrs	r3, r3, #3
 8006a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80e1 	beq.w	8006c04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	f000 8083 	beq.w	8006b50 <HAL_RCC_GetSysClockFreq+0x204>
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	f200 80a1 	bhi.w	8006b94 <HAL_RCC_GetSysClockFreq+0x248>
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_RCC_GetSysClockFreq+0x114>
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d056      	beq.n	8006b0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a5e:	e099      	b.n	8006b94 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a60:	4b6f      	ldr	r3, [pc, #444]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d02d      	beq.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a6c:	4b6c      	ldr	r3, [pc, #432]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	4a6b      	ldr	r2, [pc, #428]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a96:	4b62      	ldr	r3, [pc, #392]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aaa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ac6:	e087      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006c34 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ada:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b0a:	e065      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006c38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1e:	4b40      	ldr	r3, [pc, #256]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b4e:	e043      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006c3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b2f      	ldr	r3, [pc, #188]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b92:	e021      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba6:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bd6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006bd8:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	0a5b      	lsrs	r3, r3, #9
 8006bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be2:	3301      	adds	r3, #1
 8006be4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bfc:	ee17 3a90 	vmov	r3, s15
 8006c00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c02:	e005      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
      break;
 8006c08:	e002      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c0c:	61bb      	str	r3, [r7, #24]
      break;
 8006c0e:	bf00      	nop
  }

  return sysclockfreq;
 8006c10:	69bb      	ldr	r3, [r7, #24]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3724      	adds	r7, #36	; 0x24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	58024400 	.word	0x58024400
 8006c24:	03d09000 	.word	0x03d09000
 8006c28:	003d0900 	.word	0x003d0900
 8006c2c:	017d7840 	.word	0x017d7840
 8006c30:	46000000 	.word	0x46000000
 8006c34:	4c742400 	.word	0x4c742400
 8006c38:	4a742400 	.word	0x4a742400
 8006c3c:	4bbebc20 	.word	0x4bbebc20

08006c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c46:	f7ff fe81 	bl	800694c <HAL_RCC_GetSysClockFreq>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	490f      	ldr	r1, [pc, #60]	; (8006c94 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c58:	5ccb      	ldrb	r3, [r1, r3]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c64:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c6e:	5cd3      	ldrb	r3, [r2, r3]
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7a:	4a07      	ldr	r2, [pc, #28]	; (8006c98 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c7e:	4a07      	ldr	r2, [pc, #28]	; (8006c9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	58024400 	.word	0x58024400
 8006c94:	0800bee4 	.word	0x0800bee4
 8006c98:	24000004 	.word	0x24000004
 8006c9c:	24000000 	.word	0x24000000

08006ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ca4:	f7ff ffcc 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	4904      	ldr	r1, [pc, #16]	; (8006cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cb6:	5ccb      	ldrb	r3, [r1, r3]
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	0800bee4 	.word	0x0800bee4

08006ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cd0:	f7ff ffb6 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	4904      	ldr	r1, [pc, #16]	; (8006cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ce2:	5ccb      	ldrb	r3, [r1, r3]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	58024400 	.word	0x58024400
 8006cf4:	0800bee4 	.word	0x0800bee4

08006cf8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cfc:	b0ca      	sub	sp, #296	; 0x128
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006d1c:	2500      	movs	r5, #0
 8006d1e:	ea54 0305 	orrs.w	r3, r4, r5
 8006d22:	d049      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d2e:	d02f      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d34:	d828      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d3a:	d01a      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d40:	d822      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d4a:	d007      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d4c:	e01c      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4e:	4bb8      	ldr	r3, [pc, #736]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d52:	4ab7      	ldr	r2, [pc, #732]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d5a:	e01a      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d60:	3308      	adds	r3, #8
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f002 fb61 	bl	800942c <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d70:	e00f      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d76:	3328      	adds	r3, #40	; 0x28
 8006d78:	2102      	movs	r1, #2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f002 fc08 	bl	8009590 <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d86:	e004      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d8e:	e000      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d9a:	4ba5      	ldr	r3, [pc, #660]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006da8:	4aa1      	ldr	r2, [pc, #644]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006daa:	430b      	orrs	r3, r1
 8006dac:	6513      	str	r3, [r2, #80]	; 0x50
 8006dae:	e003      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006dc4:	f04f 0900 	mov.w	r9, #0
 8006dc8:	ea58 0309 	orrs.w	r3, r8, r9
 8006dcc:	d047      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d82a      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006df5 	.word	0x08006df5
 8006de4:	08006e03 	.word	0x08006e03
 8006de8:	08006e19 	.word	0x08006e19
 8006dec:	08006e37 	.word	0x08006e37
 8006df0:	08006e37 	.word	0x08006e37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df4:	4b8e      	ldr	r3, [pc, #568]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a8d      	ldr	r2, [pc, #564]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e00:	e01a      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e06:	3308      	adds	r3, #8
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f002 fb0e 	bl	800942c <RCCEx_PLL2_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e16:	e00f      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	3328      	adds	r3, #40	; 0x28
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f002 fbb5 	bl	8009590 <RCCEx_PLL3_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e004      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e34:	e000      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e40:	4b7b      	ldr	r3, [pc, #492]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e44:	f023 0107 	bic.w	r1, r3, #7
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4e:	4a78      	ldr	r2, [pc, #480]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e50:	430b      	orrs	r3, r1
 8006e52:	6513      	str	r3, [r2, #80]	; 0x50
 8006e54:	e003      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006e6a:	f04f 0b00 	mov.w	fp, #0
 8006e6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e72:	d04c      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7e:	d030      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e84:	d829      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e86:	2bc0      	cmp	r3, #192	; 0xc0
 8006e88:	d02d      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e8c:	d825      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e8e:	2b80      	cmp	r3, #128	; 0x80
 8006e90:	d018      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d821      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d007      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e9e:	e01c      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea0:	4b63      	ldr	r3, [pc, #396]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	4a62      	ldr	r2, [pc, #392]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006eac:	e01c      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f002 fab8 	bl	800942c <RCCEx_PLL2_Config>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ec2:	e011      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec8:	3328      	adds	r3, #40	; 0x28
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f002 fb5f 	bl	8009590 <RCCEx_PLL3_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ed8:	e006      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ee2:	bf00      	nop
 8006ee4:	e000      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ef0:	4b4f      	ldr	r3, [pc, #316]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efe:	4a4c      	ldr	r2, [pc, #304]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6513      	str	r3, [r2, #80]	; 0x50
 8006f04:	e003      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006f1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	d053      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f3a:	d035      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f40:	d82e      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f46:	d031      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f4c:	d828      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f52:	d01a      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f58:	d822      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f62:	d007      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f64:	e01c      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f66:	4b32      	ldr	r3, [pc, #200]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	4a31      	ldr	r2, [pc, #196]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f72:	e01c      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f78:	3308      	adds	r3, #8
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f002 fa55 	bl	800942c <RCCEx_PLL2_Config>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f88:	e011      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f8e:	3328      	adds	r3, #40	; 0x28
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f002 fafc 	bl	8009590 <RCCEx_PLL3_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f9e:	e006      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10b      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fb6:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6593      	str	r3, [r2, #88]	; 0x58
 8006fcc:	e003      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006fe2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	d056      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007002:	d038      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007008:	d831      	bhi.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800700a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800700e:	d034      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007010:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007014:	d82b      	bhi.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701a:	d01d      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800701c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007020:	d825      	bhi.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d006      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800702a:	d00a      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800702c:	e01f      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800702e:	bf00      	nop
 8007030:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007034:	4ba2      	ldr	r3, [pc, #648]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	4aa1      	ldr	r2, [pc, #644]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800703a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800703e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007040:	e01c      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007046:	3308      	adds	r3, #8
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f002 f9ee 	bl	800942c <RCCEx_PLL2_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007056:	e011      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800705c:	3328      	adds	r3, #40	; 0x28
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f002 fa95 	bl	8009590 <RCCEx_PLL3_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800706c:	e006      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007074:	e002      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007076:	bf00      	nop
 8007078:	e000      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800707a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800707c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007084:	4b8e      	ldr	r3, [pc, #568]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800708c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007090:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007094:	4a8a      	ldr	r2, [pc, #552]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007096:	430b      	orrs	r3, r1
 8007098:	6593      	str	r3, [r2, #88]	; 0x58
 800709a:	e003      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80070b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070b4:	2300      	movs	r3, #0
 80070b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80070be:	460b      	mov	r3, r1
 80070c0:	4313      	orrs	r3, r2
 80070c2:	d03a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	2b30      	cmp	r3, #48	; 0x30
 80070cc:	d01f      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80070ce:	2b30      	cmp	r3, #48	; 0x30
 80070d0:	d819      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d00c      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d815      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d019      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d111      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e2:	4b77      	ldr	r3, [pc, #476]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	4a76      	ldr	r2, [pc, #472]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070ee:	e011      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f4:	3308      	adds	r3, #8
 80070f6:	2102      	movs	r1, #2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f002 f997 	bl	800942c <RCCEx_PLL2_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007104:	e006      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800710c:	e002      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800710e:	bf00      	nop
 8007110:	e000      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800711c:	4b68      	ldr	r3, [pc, #416]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800711e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007120:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712a:	4a65      	ldr	r2, [pc, #404]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712c:	430b      	orrs	r3, r1
 800712e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007130:	e003      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007146:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800714a:	2300      	movs	r3, #0
 800714c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007150:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007154:	460b      	mov	r3, r1
 8007156:	4313      	orrs	r3, r2
 8007158:	d051      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800715a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007164:	d035      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800716a:	d82e      	bhi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800716c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007170:	d031      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007172:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007176:	d828      	bhi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717c:	d01a      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800717e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007182:	d822      	bhi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718c:	d007      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800718e:	e01c      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007190:	4b4b      	ldr	r3, [pc, #300]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a4a      	ldr	r2, [pc, #296]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800719c:	e01c      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a2:	3308      	adds	r3, #8
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f002 f940 	bl	800942c <RCCEx_PLL2_Config>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071b2:	e011      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b8:	3328      	adds	r3, #40	; 0x28
 80071ba:	2100      	movs	r1, #0
 80071bc:	4618      	mov	r0, r3
 80071be:	f002 f9e7 	bl	8009590 <RCCEx_PLL3_Config>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071c8:	e006      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071d0:	e002      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071d2:	bf00      	nop
 80071d4:	e000      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071e0:	4b37      	ldr	r3, [pc, #220]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ee:	4a34      	ldr	r2, [pc, #208]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f0:	430b      	orrs	r3, r1
 80071f2:	6513      	str	r3, [r2, #80]	; 0x50
 80071f4:	e003      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800720a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800720e:	2300      	movs	r3, #0
 8007210:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007214:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007218:	460b      	mov	r3, r1
 800721a:	4313      	orrs	r3, r2
 800721c:	d056      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007228:	d033      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800722a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800722e:	d82c      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007230:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007234:	d02f      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007236:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800723a:	d826      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800723c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007240:	d02b      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007242:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007246:	d820      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800724c:	d012      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800724e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007252:	d81a      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d022      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800725c:	d115      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007262:	3308      	adds	r3, #8
 8007264:	2101      	movs	r1, #1
 8007266:	4618      	mov	r0, r3
 8007268:	f002 f8e0 	bl	800942c <RCCEx_PLL2_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007272:	e015      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007278:	3328      	adds	r3, #40	; 0x28
 800727a:	2101      	movs	r1, #1
 800727c:	4618      	mov	r0, r3
 800727e:	f002 f987 	bl	8009590 <RCCEx_PLL3_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007288:	e00a      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007290:	e006      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007292:	bf00      	nop
 8007294:	e004      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800729e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10d      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072a8:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b6:	4a02      	ldr	r2, [pc, #8]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6513      	str	r3, [r2, #80]	; 0x50
 80072bc:	e006      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80072be:	bf00      	nop
 80072c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80072d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072dc:	2300      	movs	r3, #0
 80072de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4313      	orrs	r3, r2
 80072ea:	d055      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f8:	d033      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80072fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072fe:	d82c      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007304:	d02f      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730a:	d826      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800730c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007310:	d02b      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007316:	d820      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800731c:	d012      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800731e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007322:	d81a      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d022      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800732c:	d115      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800732e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007332:	3308      	adds	r3, #8
 8007334:	2101      	movs	r1, #1
 8007336:	4618      	mov	r0, r3
 8007338:	f002 f878 	bl	800942c <RCCEx_PLL2_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007342:	e015      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007348:	3328      	adds	r3, #40	; 0x28
 800734a:	2101      	movs	r1, #1
 800734c:	4618      	mov	r0, r3
 800734e:	f002 f91f 	bl	8009590 <RCCEx_PLL3_Config>
 8007352:	4603      	mov	r3, r0
 8007354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007358:	e00a      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007360:	e006      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007362:	bf00      	nop
 8007364:	e004      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007366:	bf00      	nop
 8007368:	e002      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800736a:	bf00      	nop
 800736c:	e000      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800736e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10b      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007378:	4ba3      	ldr	r3, [pc, #652]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800737a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007388:	4a9f      	ldr	r2, [pc, #636]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738a:	430b      	orrs	r3, r1
 800738c:	6593      	str	r3, [r2, #88]	; 0x58
 800738e:	e003      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80073a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073a8:	2300      	movs	r3, #0
 80073aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073b2:	460b      	mov	r3, r1
 80073b4:	4313      	orrs	r3, r2
 80073b6:	d037      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c2:	d00e      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80073c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c8:	d816      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d018      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80073ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d2:	d111      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d4:	4b8c      	ldr	r3, [pc, #560]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	4a8b      	ldr	r2, [pc, #556]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073e0:	e00f      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e6:	3308      	adds	r3, #8
 80073e8:	2101      	movs	r1, #1
 80073ea:	4618      	mov	r0, r3
 80073ec:	f002 f81e 	bl	800942c <RCCEx_PLL2_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073f6:	e004      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073fe:	e000      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800740a:	4b7f      	ldr	r3, [pc, #508]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800740c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007418:	4a7b      	ldr	r2, [pc, #492]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741a:	430b      	orrs	r3, r1
 800741c:	6513      	str	r3, [r2, #80]	; 0x50
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007424:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007438:	2300      	movs	r3, #0
 800743a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800743e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007442:	460b      	mov	r3, r1
 8007444:	4313      	orrs	r3, r2
 8007446:	d039      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800744c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744e:	2b03      	cmp	r3, #3
 8007450:	d81c      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007495 	.word	0x08007495
 800745c:	08007469 	.word	0x08007469
 8007460:	08007477 	.word	0x08007477
 8007464:	08007495 	.word	0x08007495
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007468:	4b67      	ldr	r3, [pc, #412]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	4a66      	ldr	r2, [pc, #408]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007474:	e00f      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747a:	3308      	adds	r3, #8
 800747c:	2102      	movs	r1, #2
 800747e:	4618      	mov	r0, r3
 8007480:	f001 ffd4 	bl	800942c <RCCEx_PLL2_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800748a:	e004      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007492:	e000      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800749e:	4b5a      	ldr	r3, [pc, #360]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a2:	f023 0103 	bic.w	r1, r3, #3
 80074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ac:	4a56      	ldr	r2, [pc, #344]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ae:	430b      	orrs	r3, r1
 80074b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074b2:	e003      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80074c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074cc:	2300      	movs	r3, #0
 80074ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80074d6:	460b      	mov	r3, r1
 80074d8:	4313      	orrs	r3, r2
 80074da:	f000 809f 	beq.w	800761c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074de:	4b4b      	ldr	r3, [pc, #300]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a4a      	ldr	r2, [pc, #296]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074ea:	f7f9 ffd7 	bl	800149c <HAL_GetTick>
 80074ee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074f2:	e00b      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f4:	f7f9 ffd2 	bl	800149c <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b64      	cmp	r3, #100	; 0x64
 8007502:	d903      	bls.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800750a:	e005      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800750c:	4b3f      	ldr	r3, [pc, #252]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0ed      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800751c:	2b00      	cmp	r3, #0
 800751e:	d179      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007520:	4b39      	ldr	r3, [pc, #228]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007528:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800752c:	4053      	eors	r3, r2
 800752e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007532:	2b00      	cmp	r3, #0
 8007534:	d015      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007536:	4b34      	ldr	r3, [pc, #208]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800753e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007542:	4b31      	ldr	r3, [pc, #196]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007546:	4a30      	ldr	r2, [pc, #192]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800754c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800754e:	4b2e      	ldr	r3, [pc, #184]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007552:	4a2d      	ldr	r2, [pc, #180]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007558:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800755a:	4a2b      	ldr	r2, [pc, #172]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800755c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007560:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800756a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756e:	d118      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007570:	f7f9 ff94 	bl	800149c <HAL_GetTick>
 8007574:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007578:	e00d      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800757a:	f7f9 ff8f 	bl	800149c <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007584:	1ad2      	subs	r2, r2, r3
 8007586:	f241 3388 	movw	r3, #5000	; 0x1388
 800758a:	429a      	cmp	r2, r3
 800758c:	d903      	bls.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007594:	e005      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007596:	4b1c      	ldr	r3, [pc, #112]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0eb      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80075a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d129      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ba:	d10e      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80075bc:	4b12      	ldr	r3, [pc, #72]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075cc:	091a      	lsrs	r2, r3, #4
 80075ce:	4b10      	ldr	r3, [pc, #64]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	4a0d      	ldr	r2, [pc, #52]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d4:	430b      	orrs	r3, r1
 80075d6:	6113      	str	r3, [r2, #16]
 80075d8:	e005      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80075da:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	4a0a      	ldr	r2, [pc, #40]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80075e4:	6113      	str	r3, [r2, #16]
 80075e6:	4b08      	ldr	r3, [pc, #32]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075f6:	4a04      	ldr	r2, [pc, #16]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6713      	str	r3, [r2, #112]	; 0x70
 80075fc:	e00e      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007606:	e009      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007608:	58024400 	.word	0x58024400
 800760c:	58024800 	.word	0x58024800
 8007610:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007618:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	f002 0301 	and.w	r3, r2, #1
 8007628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800762c:	2300      	movs	r3, #0
 800762e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007632:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007636:	460b      	mov	r3, r1
 8007638:	4313      	orrs	r3, r2
 800763a:	f000 8089 	beq.w	8007750 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007644:	2b28      	cmp	r3, #40	; 0x28
 8007646:	d86b      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007648:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007729 	.word	0x08007729
 8007654:	08007721 	.word	0x08007721
 8007658:	08007721 	.word	0x08007721
 800765c:	08007721 	.word	0x08007721
 8007660:	08007721 	.word	0x08007721
 8007664:	08007721 	.word	0x08007721
 8007668:	08007721 	.word	0x08007721
 800766c:	08007721 	.word	0x08007721
 8007670:	080076f5 	.word	0x080076f5
 8007674:	08007721 	.word	0x08007721
 8007678:	08007721 	.word	0x08007721
 800767c:	08007721 	.word	0x08007721
 8007680:	08007721 	.word	0x08007721
 8007684:	08007721 	.word	0x08007721
 8007688:	08007721 	.word	0x08007721
 800768c:	08007721 	.word	0x08007721
 8007690:	0800770b 	.word	0x0800770b
 8007694:	08007721 	.word	0x08007721
 8007698:	08007721 	.word	0x08007721
 800769c:	08007721 	.word	0x08007721
 80076a0:	08007721 	.word	0x08007721
 80076a4:	08007721 	.word	0x08007721
 80076a8:	08007721 	.word	0x08007721
 80076ac:	08007721 	.word	0x08007721
 80076b0:	08007729 	.word	0x08007729
 80076b4:	08007721 	.word	0x08007721
 80076b8:	08007721 	.word	0x08007721
 80076bc:	08007721 	.word	0x08007721
 80076c0:	08007721 	.word	0x08007721
 80076c4:	08007721 	.word	0x08007721
 80076c8:	08007721 	.word	0x08007721
 80076cc:	08007721 	.word	0x08007721
 80076d0:	08007729 	.word	0x08007729
 80076d4:	08007721 	.word	0x08007721
 80076d8:	08007721 	.word	0x08007721
 80076dc:	08007721 	.word	0x08007721
 80076e0:	08007721 	.word	0x08007721
 80076e4:	08007721 	.word	0x08007721
 80076e8:	08007721 	.word	0x08007721
 80076ec:	08007721 	.word	0x08007721
 80076f0:	08007729 	.word	0x08007729
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f8:	3308      	adds	r3, #8
 80076fa:	2101      	movs	r1, #1
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fe95 	bl	800942c <RCCEx_PLL2_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007708:	e00f      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800770a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800770e:	3328      	adds	r3, #40	; 0x28
 8007710:	2101      	movs	r1, #1
 8007712:	4618      	mov	r0, r3
 8007714:	f001 ff3c 	bl	8009590 <RCCEx_PLL3_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800771e:	e004      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007726:	e000      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800772a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007732:	4bbf      	ldr	r3, [pc, #764]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007740:	4abb      	ldr	r2, [pc, #748]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007742:	430b      	orrs	r3, r1
 8007744:	6553      	str	r3, [r2, #84]	; 0x54
 8007746:	e003      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800774c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f002 0302 	and.w	r3, r2, #2
 800775c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007760:	2300      	movs	r3, #0
 8007762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007766:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800776a:	460b      	mov	r3, r1
 800776c:	4313      	orrs	r3, r2
 800776e:	d041      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007776:	2b05      	cmp	r3, #5
 8007778:	d824      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077cd 	.word	0x080077cd
 8007784:	08007799 	.word	0x08007799
 8007788:	080077af 	.word	0x080077af
 800778c:	080077cd 	.word	0x080077cd
 8007790:	080077cd 	.word	0x080077cd
 8007794:	080077cd 	.word	0x080077cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779c:	3308      	adds	r3, #8
 800779e:	2101      	movs	r1, #1
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 fe43 	bl	800942c <RCCEx_PLL2_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077ac:	e00f      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b2:	3328      	adds	r3, #40	; 0x28
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 feea 	bl	8009590 <RCCEx_PLL3_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077c2:	e004      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077ca:	e000      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80077cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077d6:	4b96      	ldr	r3, [pc, #600]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	f023 0107 	bic.w	r1, r3, #7
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e4:	4a92      	ldr	r2, [pc, #584]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077e6:	430b      	orrs	r3, r1
 80077e8:	6553      	str	r3, [r2, #84]	; 0x54
 80077ea:	e003      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f002 0304 	and.w	r3, r2, #4
 8007800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007804:	2300      	movs	r3, #0
 8007806:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800780a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800780e:	460b      	mov	r3, r1
 8007810:	4313      	orrs	r3, r2
 8007812:	d044      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800781c:	2b05      	cmp	r3, #5
 800781e:	d825      	bhi.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007820:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	08007875 	.word	0x08007875
 800782c:	08007841 	.word	0x08007841
 8007830:	08007857 	.word	0x08007857
 8007834:	08007875 	.word	0x08007875
 8007838:	08007875 	.word	0x08007875
 800783c:	08007875 	.word	0x08007875
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007844:	3308      	adds	r3, #8
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fdef 	bl	800942c <RCCEx_PLL2_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007854:	e00f      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785a:	3328      	adds	r3, #40	; 0x28
 800785c:	2101      	movs	r1, #1
 800785e:	4618      	mov	r0, r3
 8007860:	f001 fe96 	bl	8009590 <RCCEx_PLL3_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800786a:	e004      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007872:	e000      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800787e:	4b6c      	ldr	r3, [pc, #432]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007882:	f023 0107 	bic.w	r1, r3, #7
 8007886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800788e:	4a68      	ldr	r2, [pc, #416]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007890:	430b      	orrs	r3, r1
 8007892:	6593      	str	r3, [r2, #88]	; 0x58
 8007894:	e003      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800789a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f002 0320 	and.w	r3, r2, #32
 80078aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078ae:	2300      	movs	r3, #0
 80078b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078b8:	460b      	mov	r3, r1
 80078ba:	4313      	orrs	r3, r2
 80078bc:	d055      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078ca:	d033      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80078cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078d0:	d82c      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d6:	d02f      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078dc:	d826      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078e2:	d02b      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80078e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078e8:	d820      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ee:	d012      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f4:	d81a      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d022      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fe:	d115      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007904:	3308      	adds	r3, #8
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fd8f 	bl	800942c <RCCEx_PLL2_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007914:	e015      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800791a:	3328      	adds	r3, #40	; 0x28
 800791c:	2102      	movs	r1, #2
 800791e:	4618      	mov	r0, r3
 8007920:	f001 fe36 	bl	8009590 <RCCEx_PLL3_Config>
 8007924:	4603      	mov	r3, r0
 8007926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800792a:	e00a      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007932:	e006      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007934:	bf00      	nop
 8007936:	e004      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007938:	bf00      	nop
 800793a:	e002      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800793c:	bf00      	nop
 800793e:	e000      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800794a:	4b39      	ldr	r3, [pc, #228]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795a:	4a35      	ldr	r2, [pc, #212]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800795c:	430b      	orrs	r3, r1
 800795e:	6553      	str	r3, [r2, #84]	; 0x54
 8007960:	e003      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800797a:	2300      	movs	r3, #0
 800797c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007980:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007984:	460b      	mov	r3, r1
 8007986:	4313      	orrs	r3, r2
 8007988:	d058      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007992:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007996:	d033      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007998:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800799c:	d82c      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a2:	d02f      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a8:	d826      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079ae:	d02b      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079b4:	d820      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ba:	d012      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80079bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c0:	d81a      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d022      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80079c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ca:	d115      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d0:	3308      	adds	r3, #8
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 fd29 	bl	800942c <RCCEx_PLL2_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079e0:	e015      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e6:	3328      	adds	r3, #40	; 0x28
 80079e8:	2102      	movs	r1, #2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 fdd0 	bl	8009590 <RCCEx_PLL3_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079f6:	e00a      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079fe:	e006      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a00:	bf00      	nop
 8007a02:	e004      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10e      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a16:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a26:	4a02      	ldr	r2, [pc, #8]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a2c:	e006      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a2e:	bf00      	nop
 8007a30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a52:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007a56:	460b      	mov	r3, r1
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	d055      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a68:	d033      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a6e:	d82c      	bhi.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a74:	d02f      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a7a:	d826      	bhi.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a80:	d02b      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a86:	d820      	bhi.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a8c:	d012      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a92:	d81a      	bhi.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d022      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9c:	d115      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 fcc0 	bl	800942c <RCCEx_PLL2_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ab2:	e015      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab8:	3328      	adds	r3, #40	; 0x28
 8007aba:	2102      	movs	r1, #2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 fd67 	bl	8009590 <RCCEx_PLL3_Config>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ac8:	e00a      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ad0:	e006      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ad2:	bf00      	nop
 8007ad4:	e004      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ad6:	bf00      	nop
 8007ad8:	e002      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ada:	bf00      	nop
 8007adc:	e000      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ae8:	4ba1      	ldr	r3, [pc, #644]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007af8:	4a9d      	ldr	r2, [pc, #628]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007afa:	430b      	orrs	r3, r1
 8007afc:	6593      	str	r3, [r2, #88]	; 0x58
 8007afe:	e003      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f002 0308 	and.w	r3, r2, #8
 8007b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007b22:	460b      	mov	r3, r1
 8007b24:	4313      	orrs	r3, r2
 8007b26:	d01e      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b34:	d10c      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3a:	3328      	adds	r3, #40	; 0x28
 8007b3c:	2102      	movs	r1, #2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 fd26 	bl	8009590 <RCCEx_PLL3_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b50:	4b87      	ldr	r3, [pc, #540]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b60:	4a83      	ldr	r2, [pc, #524]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b62:	430b      	orrs	r3, r1
 8007b64:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f002 0310 	and.w	r3, r2, #16
 8007b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b76:	2300      	movs	r3, #0
 8007b78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b7c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007b80:	460b      	mov	r3, r1
 8007b82:	4313      	orrs	r3, r2
 8007b84:	d01e      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b92:	d10c      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b98:	3328      	adds	r3, #40	; 0x28
 8007b9a:	2102      	movs	r1, #2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 fcf7 	bl	8009590 <RCCEx_PLL3_Config>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bae:	4b70      	ldr	r3, [pc, #448]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bbe:	4a6c      	ldr	r2, [pc, #432]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bda:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007bde:	460b      	mov	r3, r1
 8007be0:	4313      	orrs	r3, r2
 8007be2:	d03e      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf0:	d022      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf6:	d81b      	bhi.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c00:	d00b      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007c02:	e015      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c08:	3308      	adds	r3, #8
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fc0d 	bl	800942c <RCCEx_PLL2_Config>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c18:	e00f      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1e:	3328      	adds	r3, #40	; 0x28
 8007c20:	2102      	movs	r1, #2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 fcb4 	bl	8009590 <RCCEx_PLL3_Config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c2e:	e004      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c36:	e000      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10b      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c42:	4b4b      	ldr	r3, [pc, #300]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c52:	4a47      	ldr	r2, [pc, #284]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c54:	430b      	orrs	r3, r1
 8007c56:	6593      	str	r3, [r2, #88]	; 0x58
 8007c58:	e003      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007c6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c70:	2300      	movs	r3, #0
 8007c72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	d03b      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c8a:	d01f      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c90:	d818      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c96:	d003      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c9c:	d007      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c9e:	e011      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca0:	4b33      	ldr	r3, [pc, #204]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	4a32      	ldr	r2, [pc, #200]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cac:	e00f      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb2:	3328      	adds	r3, #40	; 0x28
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 fc6a 	bl	8009590 <RCCEx_PLL3_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cc2:	e004      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cca:	e000      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cd6:	4b26      	ldr	r3, [pc, #152]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce6:	4a22      	ldr	r2, [pc, #136]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6553      	str	r3, [r2, #84]	; 0x54
 8007cec:	e003      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007d02:	673b      	str	r3, [r7, #112]	; 0x70
 8007d04:	2300      	movs	r3, #0
 8007d06:	677b      	str	r3, [r7, #116]	; 0x74
 8007d08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	d034      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d20:	d007      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d22:	e011      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d24:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	4a11      	ldr	r2, [pc, #68]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d30:	e00e      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d36:	3308      	adds	r3, #8
 8007d38:	2102      	movs	r1, #2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 fb76 	bl	800942c <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d46:	e003      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10d      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d66:	4a02      	ldr	r2, [pc, #8]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d6c:	e006      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007d92:	460b      	mov	r3, r1
 8007d94:	4313      	orrs	r3, r2
 8007d96:	d00c      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9c:	3328      	adds	r3, #40	; 0x28
 8007d9e:	2102      	movs	r1, #2
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 fbf5 	bl	8009590 <RCCEx_PLL3_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8007dc4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	d038      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dda:	d018      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de0:	d811      	bhi.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de6:	d014      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dec:	d80b      	bhi.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d011      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df6:	d106      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df8:	4bc3      	ldr	r3, [pc, #780]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	4ac2      	ldr	r2, [pc, #776]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e04:	e008      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e0c:	e004      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e0e:	bf00      	nop
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e20:	4bb9      	ldr	r3, [pc, #740]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e30:	4ab5      	ldr	r2, [pc, #724]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e32:	430b      	orrs	r3, r1
 8007e34:	6553      	str	r3, [r2, #84]	; 0x54
 8007e36:	e003      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007e4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e4e:	2300      	movs	r3, #0
 8007e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007e56:	460b      	mov	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	d009      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e5c:	4baa      	ldr	r3, [pc, #680]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6a:	4aa7      	ldr	r2, [pc, #668]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e7e:	2300      	movs	r3, #0
 8007e80:	657b      	str	r3, [r7, #84]	; 0x54
 8007e82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007e86:	460b      	mov	r3, r1
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	d00a      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e8c:	4b9e      	ldr	r3, [pc, #632]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e9c:	4a9a      	ldr	r2, [pc, #616]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	d009      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ebe:	4b92      	ldr	r3, [pc, #584]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ecc:	4a8e      	ldr	r2, [pc, #568]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007ede:	643b      	str	r3, [r7, #64]	; 0x40
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4313      	orrs	r3, r2
 8007eec:	d00e      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007eee:	4b86      	ldr	r3, [pc, #536]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	4a85      	ldr	r2, [pc, #532]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ef8:	6113      	str	r3, [r2, #16]
 8007efa:	4b83      	ldr	r3, [pc, #524]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007efc:	6919      	ldr	r1, [r3, #16]
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007f06:	4a80      	ldr	r2, [pc, #512]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007f22:	460b      	mov	r3, r1
 8007f24:	4313      	orrs	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f28:	4b77      	ldr	r3, [pc, #476]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f2c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f36:	4a74      	ldr	r2, [pc, #464]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007f48:	633b      	str	r3, [r7, #48]	; 0x30
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007f52:	460b      	mov	r3, r1
 8007f54:	4313      	orrs	r3, r2
 8007f56:	d00a      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f58:	4b6b      	ldr	r3, [pc, #428]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f68:	4a67      	ldr	r2, [pc, #412]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	2100      	movs	r1, #0
 8007f78:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007f84:	460b      	mov	r3, r1
 8007f86:	4313      	orrs	r3, r2
 8007f88:	d011      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8e:	3308      	adds	r3, #8
 8007f90:	2100      	movs	r1, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f001 fa4a 	bl	800942c <RCCEx_PLL2_Config>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007faa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	6239      	str	r1, [r7, #32]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	d011      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fce:	3308      	adds	r3, #8
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 fa2a 	bl	800942c <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	61b9      	str	r1, [r7, #24]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	61fb      	str	r3, [r7, #28]
 8008000:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008004:	460b      	mov	r3, r1
 8008006:	4313      	orrs	r3, r2
 8008008:	d011      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800e:	3308      	adds	r3, #8
 8008010:	2102      	movs	r1, #2
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fa0a 	bl	800942c <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800802a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800802e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	2100      	movs	r1, #0
 8008038:	6139      	str	r1, [r7, #16]
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008044:	460b      	mov	r3, r1
 8008046:	4313      	orrs	r3, r2
 8008048:	d011      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804e:	3328      	adds	r3, #40	; 0x28
 8008050:	2100      	movs	r1, #0
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fa9c 	bl	8009590 <RCCEx_PLL3_Config>
 8008058:	4603      	mov	r3, r0
 800805a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800805e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800806a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	2100      	movs	r1, #0
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008084:	460b      	mov	r3, r1
 8008086:	4313      	orrs	r3, r2
 8008088:	d011      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800808e:	3328      	adds	r3, #40	; 0x28
 8008090:	2101      	movs	r1, #1
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fa7c 	bl	8009590 <RCCEx_PLL3_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800809e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	2100      	movs	r1, #0
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	607b      	str	r3, [r7, #4]
 80080c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80080c4:	460b      	mov	r3, r1
 80080c6:	4313      	orrs	r3, r2
 80080c8:	d011      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ce:	3328      	adds	r3, #40	; 0x28
 80080d0:	2102      	movs	r1, #2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 fa5c 	bl	8009590 <RCCEx_PLL3_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80080ee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e000      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008102:	46bd      	mov	sp, r7
 8008104:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008108:	58024400 	.word	0x58024400

0800810c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b090      	sub	sp, #64	; 0x40
 8008110:	af00      	add	r7, sp, #0
 8008112:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800811a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800811e:	430b      	orrs	r3, r1
 8008120:	f040 8094 	bne.w	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008124:	4b9e      	ldr	r3, [pc, #632]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	2b04      	cmp	r3, #4
 8008132:	f200 8087 	bhi.w	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008151 	.word	0x08008151
 8008140:	08008179 	.word	0x08008179
 8008144:	080081a1 	.word	0x080081a1
 8008148:	0800823d 	.word	0x0800823d
 800814c:	080081c9 	.word	0x080081c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008150:	4b93      	ldr	r3, [pc, #588]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800815c:	d108      	bne.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800815e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008162:	4618      	mov	r0, r3
 8008164:	f001 f810 	bl	8009188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800816c:	f000 bd45 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008174:	f000 bd41 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008178:	4b89      	ldr	r3, [pc, #548]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008184:	d108      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008186:	f107 0318 	add.w	r3, r7, #24
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fd54 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008194:	f000 bd31 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800819c:	f000 bd2d 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081a0:	4b7f      	ldr	r3, [pc, #508]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ac:	d108      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ae:	f107 030c 	add.w	r3, r7, #12
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fe94 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081bc:	f000 bd1d 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c4:	f000 bd19 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081c8:	4b75      	ldr	r3, [pc, #468]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081d2:	4b73      	ldr	r3, [pc, #460]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d10c      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80081de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081e4:	4b6e      	ldr	r3, [pc, #440]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	08db      	lsrs	r3, r3, #3
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	4a6d      	ldr	r2, [pc, #436]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081f0:	fa22 f303 	lsr.w	r3, r2, r3
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f6:	e01f      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081f8:	4b69      	ldr	r3, [pc, #420]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008204:	d106      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800820c:	d102      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800820e:	4b66      	ldr	r3, [pc, #408]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008212:	e011      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008214:	4b62      	ldr	r3, [pc, #392]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008220:	d106      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008228:	d102      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800822a:	4b60      	ldr	r3, [pc, #384]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800822e:	e003      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008234:	f000 bce1 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008238:	f000 bcdf 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800823c:	4b5c      	ldr	r3, [pc, #368]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008240:	f000 bcdb 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008248:	f000 bcd7 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800824c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008250:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008254:	430b      	orrs	r3, r1
 8008256:	f040 80ad 	bne.w	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800825a:	4b51      	ldr	r3, [pc, #324]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800825c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008262:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826a:	d056      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008272:	f200 8090 	bhi.w	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	2bc0      	cmp	r3, #192	; 0xc0
 800827a:	f000 8088 	beq.w	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	2bc0      	cmp	r3, #192	; 0xc0
 8008282:	f200 8088 	bhi.w	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	2b80      	cmp	r3, #128	; 0x80
 800828a:	d032      	beq.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	f200 8081 	bhi.w	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	2b40      	cmp	r3, #64	; 0x40
 800829e:	d014      	beq.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80082a0:	e079      	b.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082a2:	4b3f      	ldr	r3, [pc, #252]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082ae:	d108      	bne.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 ff67 	bl	8009188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082be:	f000 bc9c 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082c6:	f000 bc98 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082ca:	4b35      	ldr	r3, [pc, #212]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082d6:	d108      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082d8:	f107 0318 	add.w	r3, r7, #24
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fcab 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082e6:	f000 bc88 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ee:	f000 bc84 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082f2:	4b2b      	ldr	r3, [pc, #172]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fe:	d108      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008300:	f107 030c 	add.w	r3, r7, #12
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fdeb 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800830e:	f000 bc74 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008316:	f000 bc70 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800831a:	4b21      	ldr	r3, [pc, #132]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800831c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008322:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008324:	4b1e      	ldr	r3, [pc, #120]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0304 	and.w	r3, r3, #4
 800832c:	2b04      	cmp	r3, #4
 800832e:	d10c      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008336:	4b1a      	ldr	r3, [pc, #104]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	08db      	lsrs	r3, r3, #3
 800833c:	f003 0303 	and.w	r3, r3, #3
 8008340:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008342:	fa22 f303 	lsr.w	r3, r2, r3
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008348:	e01f      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800834a:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008356:	d106      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800835e:	d102      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008360:	4b11      	ldr	r3, [pc, #68]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008364:	e011      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008366:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008372:	d106      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837a:	d102      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800837e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008380:	e003      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008386:	f000 bc38 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800838a:	f000 bc36 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800838e:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008392:	f000 bc32 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800839a:	f000 bc2e 	b.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800839e:	bf00      	nop
 80083a0:	58024400 	.word	0x58024400
 80083a4:	03d09000 	.word	0x03d09000
 80083a8:	003d0900 	.word	0x003d0900
 80083ac:	017d7840 	.word	0x017d7840
 80083b0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80083b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80083bc:	430b      	orrs	r3, r1
 80083be:	f040 809c 	bne.w	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80083c2:	4b9e      	ldr	r3, [pc, #632]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80083ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d2:	d054      	beq.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083da:	f200 808b 	bhi.w	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083e4:	f000 8083 	beq.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083ee:	f200 8081 	bhi.w	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f8:	d02f      	beq.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008400:	d878      	bhi.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800840e:	d012      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008410:	e070      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008412:	4b8a      	ldr	r3, [pc, #552]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800841e:	d107      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008424:	4618      	mov	r0, r3
 8008426:	f000 feaf 	bl	8009188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800842e:	e3e4      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008434:	e3e1      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008436:	4b81      	ldr	r3, [pc, #516]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800843e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008442:	d107      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008444:	f107 0318 	add.w	r3, r7, #24
 8008448:	4618      	mov	r0, r3
 800844a:	f000 fbf5 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008452:	e3d2      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008458:	e3cf      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800845a:	4b78      	ldr	r3, [pc, #480]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008466:	d107      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008468:	f107 030c 	add.w	r3, r7, #12
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fd37 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008476:	e3c0      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800847c:	e3bd      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800847e:	4b6f      	ldr	r3, [pc, #444]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008482:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008486:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008488:	4b6c      	ldr	r3, [pc, #432]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b04      	cmp	r3, #4
 8008492:	d10c      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800849a:	4b68      	ldr	r3, [pc, #416]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	08db      	lsrs	r3, r3, #3
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	4a66      	ldr	r2, [pc, #408]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80084a6:	fa22 f303 	lsr.w	r3, r2, r3
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ac:	e01e      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084ae:	4b63      	ldr	r3, [pc, #396]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ba:	d106      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084c2:	d102      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084c4:	4b5f      	ldr	r3, [pc, #380]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084c8:	e010      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084ca:	4b5c      	ldr	r3, [pc, #368]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d6:	d106      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084de:	d102      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084e0:	4b59      	ldr	r3, [pc, #356]	; (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e4:	e002      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80084ea:	e386      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084ec:	e385      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084ee:	4b57      	ldr	r3, [pc, #348]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f2:	e382      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f8:	e37f      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80084fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084fe:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008502:	430b      	orrs	r3, r1
 8008504:	f040 80a7 	bne.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008508:	4b4c      	ldr	r3, [pc, #304]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800850a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008510:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008518:	d055      	beq.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008520:	f200 8096 	bhi.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800852a:	f000 8084 	beq.w	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008534:	f200 808c 	bhi.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800853e:	d030      	beq.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008546:	f200 8083 	bhi.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008556:	d012      	beq.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008558:	e07a      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800855a:	4b38      	ldr	r3, [pc, #224]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008566:	d107      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fe0b 	bl	8009188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008576:	e340      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800857c:	e33d      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800857e:	4b2f      	ldr	r3, [pc, #188]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800858a:	d107      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800858c:	f107 0318 	add.w	r3, r7, #24
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fb51 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859a:	e32e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a0:	e32b      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085a2:	4b26      	ldr	r3, [pc, #152]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ae:	d107      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085b0:	f107 030c 	add.w	r3, r7, #12
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fc93 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085be:	e31c      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c4:	e319      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085c6:	4b1d      	ldr	r3, [pc, #116]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085d0:	4b1a      	ldr	r3, [pc, #104]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d10c      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80085dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085e2:	4b16      	ldr	r3, [pc, #88]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	08db      	lsrs	r3, r3, #3
 80085e8:	f003 0303 	and.w	r3, r3, #3
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80085ee:	fa22 f303 	lsr.w	r3, r2, r3
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f4:	e01e      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085f6:	4b11      	ldr	r3, [pc, #68]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008602:	d106      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800860a:	d102      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800860c:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800860e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008610:	e010      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008612:	4b0a      	ldr	r3, [pc, #40]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800861e:	d106      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008626:	d102      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008628:	4b07      	ldr	r3, [pc, #28]	; (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800862c:	e002      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008632:	e2e2      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008634:	e2e1      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800863a:	e2de      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800863c:	58024400 	.word	0x58024400
 8008640:	03d09000 	.word	0x03d09000
 8008644:	003d0900 	.word	0x003d0900
 8008648:	017d7840 	.word	0x017d7840
 800864c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008654:	e2d1      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800865e:	430b      	orrs	r3, r1
 8008660:	f040 809c 	bne.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008664:	4b93      	ldr	r3, [pc, #588]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008668:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800866c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008674:	d054      	beq.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800867c:	f200 808b 	bhi.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008686:	f000 8083 	beq.w	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008690:	f200 8081 	bhi.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869a:	d02f      	beq.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a2:	d878      	bhi.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b0:	d012      	beq.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80086b2:	e070      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086b4:	4b7f      	ldr	r3, [pc, #508]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086c0:	d107      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fd5e 	bl	8009188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d0:	e293      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d6:	e290      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d8:	4b76      	ldr	r3, [pc, #472]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086e4:	d107      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086e6:	f107 0318 	add.w	r3, r7, #24
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 faa4 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f4:	e281      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086fa:	e27e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086fc:	4b6d      	ldr	r3, [pc, #436]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008708:	d107      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800870a:	f107 030c 	add.w	r3, r7, #12
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fbe6 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008718:	e26f      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871e:	e26c      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008720:	4b64      	ldr	r3, [pc, #400]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008728:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800872a:	4b62      	ldr	r3, [pc, #392]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b04      	cmp	r3, #4
 8008734:	d10c      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800873c:	4b5d      	ldr	r3, [pc, #372]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	08db      	lsrs	r3, r3, #3
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	4a5c      	ldr	r2, [pc, #368]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008748:	fa22 f303 	lsr.w	r3, r2, r3
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874e:	e01e      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008750:	4b58      	ldr	r3, [pc, #352]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800875c:	d106      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008764:	d102      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008766:	4b55      	ldr	r3, [pc, #340]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800876a:	e010      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800876c:	4b51      	ldr	r3, [pc, #324]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008778:	d106      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800877a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008780:	d102      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008782:	4b4f      	ldr	r3, [pc, #316]	; (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008786:	e002      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800878c:	e235      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800878e:	e234      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008790:	4b4c      	ldr	r3, [pc, #304]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008794:	e231      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800879a:	e22e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800879c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80087a4:	430b      	orrs	r3, r1
 80087a6:	f040 808f 	bne.w	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80087aa:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087ba:	d06b      	beq.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087c2:	d874      	bhi.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087ca:	d056      	beq.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80087cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087d2:	d86c      	bhi.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087da:	d03b      	beq.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087e2:	d864      	bhi.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ea:	d021      	beq.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f2:	d85c      	bhi.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d004      	beq.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008800:	d004      	beq.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008802:	e054      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008804:	f7fe fa4c 	bl	8006ca0 <HAL_RCC_GetPCLK1Freq>
 8008808:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800880a:	e1f6      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800880c:	4b29      	ldr	r3, [pc, #164]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008818:	d107      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800881a:	f107 0318 	add.w	r3, r7, #24
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fa0a 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008828:	e1e7      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800882e:	e1e4      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008830:	4b20      	ldr	r3, [pc, #128]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800883c:	d107      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883e:	f107 030c 	add.w	r3, r7, #12
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fb4c 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884c:	e1d5      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008852:	e1d2      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008854:	4b17      	ldr	r3, [pc, #92]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b04      	cmp	r3, #4
 800885e:	d109      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008860:	4b14      	ldr	r3, [pc, #80]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	08db      	lsrs	r3, r3, #3
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	4a13      	ldr	r2, [pc, #76]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008872:	e1c2      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008878:	e1bf      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800887a:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008886:	d102      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008888:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800888a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800888c:	e1b5      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008892:	e1b2      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008894:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800889c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088a0:	d102      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80088a2:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a6:	e1a8      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ac:	e1a5      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088b2:	e1a2      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088b4:	58024400 	.word	0x58024400
 80088b8:	03d09000 	.word	0x03d09000
 80088bc:	003d0900 	.word	0x003d0900
 80088c0:	017d7840 	.word	0x017d7840
 80088c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80088c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088cc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80088d0:	430b      	orrs	r3, r1
 80088d2:	d173      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80088d4:	4b9c      	ldr	r3, [pc, #624]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088e4:	d02f      	beq.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ec:	d863      	bhi.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088fa:	d012      	beq.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80088fc:	e05b      	b.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088fe:	4b92      	ldr	r3, [pc, #584]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800890a:	d107      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800890c:	f107 0318 	add.w	r3, r7, #24
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f991 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800891a:	e16e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008920:	e16b      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008922:	4b89      	ldr	r3, [pc, #548]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800892a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892e:	d107      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008930:	f107 030c 	add.w	r3, r7, #12
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fad3 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893e:	e15c      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008944:	e159      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008946:	4b80      	ldr	r3, [pc, #512]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800894e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008950:	4b7d      	ldr	r3, [pc, #500]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b04      	cmp	r3, #4
 800895a:	d10c      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895e:	2b00      	cmp	r3, #0
 8008960:	d109      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008962:	4b79      	ldr	r3, [pc, #484]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	08db      	lsrs	r3, r3, #3
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	4a77      	ldr	r2, [pc, #476]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800896e:	fa22 f303 	lsr.w	r3, r2, r3
 8008972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008974:	e01e      	b.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008976:	4b74      	ldr	r3, [pc, #464]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008982:	d106      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800898a:	d102      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800898c:	4b70      	ldr	r3, [pc, #448]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008990:	e010      	b.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008992:	4b6d      	ldr	r3, [pc, #436]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800899a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800899e:	d106      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a6:	d102      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089a8:	4b6a      	ldr	r3, [pc, #424]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ac:	e002      	b.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089b2:	e122      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089b4:	e121      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ba:	e11e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80089bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80089c4:	430b      	orrs	r3, r1
 80089c6:	d133      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80089c8:	4b5f      	ldr	r3, [pc, #380]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089de:	d012      	beq.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80089e0:	e023      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089e2:	4b59      	ldr	r3, [pc, #356]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089ee:	d107      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 fbc7 	bl	8009188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089fe:	e0fc      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a04:	e0f9      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a06:	4b50      	ldr	r3, [pc, #320]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a12:	d107      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a14:	f107 0318 	add.w	r3, r7, #24
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 f90d 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a22:	e0ea      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a28:	e0e7      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a2e:	e0e4      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a34:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	f040 808d 	bne.w	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a3e:	4b42      	ldr	r3, [pc, #264]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a46:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a4e:	d06b      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a56:	d874      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5e:	d056      	beq.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a66:	d86c      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a6e:	d03b      	beq.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a76:	d864      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7e:	d021      	beq.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a86:	d85c      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a94:	d004      	beq.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008a96:	e054      	b.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a98:	f000 f8b8 	bl	8008c0c <HAL_RCCEx_GetD3PCLK1Freq>
 8008a9c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a9e:	e0ac      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aa0:	4b29      	ldr	r3, [pc, #164]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aac:	d107      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aae:	f107 0318 	add.w	r3, r7, #24
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f8c0 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008abc:	e09d      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ac2:	e09a      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ac4:	4b20      	ldr	r3, [pc, #128]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ad0:	d107      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad2:	f107 030c 	add.w	r3, r7, #12
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fa02 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ae0:	e08b      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae6:	e088      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ae8:	4b17      	ldr	r3, [pc, #92]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d109      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008af4:	4b14      	ldr	r3, [pc, #80]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	08db      	lsrs	r3, r3, #3
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	4a13      	ldr	r2, [pc, #76]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008b00:	fa22 f303 	lsr.w	r3, r2, r3
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b06:	e078      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b0c:	e075      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1a:	d102      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008b1c:	4b0c      	ldr	r3, [pc, #48]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b20:	e06b      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b26:	e068      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b28:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b34:	d102      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008b36:	4b07      	ldr	r3, [pc, #28]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b3a:	e05e      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b40:	e05b      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b46:	e058      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	03d09000 	.word	0x03d09000
 8008b50:	003d0900 	.word	0x003d0900
 8008b54:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008b60:	430b      	orrs	r3, r1
 8008b62:	d148      	bne.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b64:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b6c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b74:	d02a      	beq.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b7c:	d838      	bhi.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b8a:	d00d      	beq.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008b8c:	e030      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b8e:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b9a:	d102      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	; (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba0:	e02b      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba6:	e028      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ba8:	4b16      	ldr	r3, [pc, #88]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bb4:	d107      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fae4 	bl	8009188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc4:	e019      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bca:	e016      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bd8:	d107      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bda:	f107 0318 	add.w	r3, r7, #24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 f82a 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be8:	e007      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bee:	e004      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf4:	e001      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3740      	adds	r7, #64	; 0x40
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	58024400 	.word	0x58024400
 8008c08:	017d7840 	.word	0x017d7840

08008c0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c10:	f7fe f816 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8008c14:	4602      	mov	r2, r0
 8008c16:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	091b      	lsrs	r3, r3, #4
 8008c1c:	f003 0307 	and.w	r3, r3, #7
 8008c20:	4904      	ldr	r1, [pc, #16]	; (8008c34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c22:	5ccb      	ldrb	r3, [r1, r3]
 8008c24:	f003 031f 	and.w	r3, r3, #31
 8008c28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	58024400 	.word	0x58024400
 8008c34:	0800bee4 	.word	0x0800bee4

08008c38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b089      	sub	sp, #36	; 0x24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c40:	4ba1      	ldr	r3, [pc, #644]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c4a:	4b9f      	ldr	r3, [pc, #636]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	0b1b      	lsrs	r3, r3, #12
 8008c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c56:	4b9c      	ldr	r3, [pc, #624]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	091b      	lsrs	r3, r3, #4
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c62:	4b99      	ldr	r3, [pc, #612]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c66:	08db      	lsrs	r3, r3, #3
 8008c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	fb02 f303 	mul.w	r3, r2, r3
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 8111 	beq.w	8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	f000 8083 	beq.w	8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	f200 80a1 	bhi.w	8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d056      	beq.n	8008d50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ca2:	e099      	b.n	8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ca4:	4b88      	ldr	r3, [pc, #544]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d02d      	beq.n	8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cb0:	4b85      	ldr	r3, [pc, #532]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	08db      	lsrs	r3, r3, #3
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	4a84      	ldr	r2, [pc, #528]	; (8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cda:	4b7b      	ldr	r3, [pc, #492]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d0a:	e087      	b.n	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1e:	4b6a      	ldr	r3, [pc, #424]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d4e:	e065      	b.n	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b59      	ldr	r3, [pc, #356]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d92:	e043      	b.n	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b48      	ldr	r3, [pc, #288]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd6:	e021      	b.n	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dea:	4b37      	ldr	r3, [pc, #220]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e1c:	4b2a      	ldr	r3, [pc, #168]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	0a5b      	lsrs	r3, r3, #9
 8008e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e42:	ee17 2a90 	vmov	r2, s15
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e4a:	4b1f      	ldr	r3, [pc, #124]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	0c1b      	lsrs	r3, r3, #16
 8008e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e54:	ee07 3a90 	vmov	s15, r3
 8008e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e70:	ee17 2a90 	vmov	r2, s15
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e78:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	0e1b      	lsrs	r3, r3, #24
 8008e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e9e:	ee17 2a90 	vmov	r2, s15
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ea6:	e008      	b.n	8008eba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	609a      	str	r2, [r3, #8]
}
 8008eba:	bf00      	nop
 8008ebc:	3724      	adds	r7, #36	; 0x24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	58024400 	.word	0x58024400
 8008ecc:	03d09000 	.word	0x03d09000
 8008ed0:	46000000 	.word	0x46000000
 8008ed4:	4c742400 	.word	0x4c742400
 8008ed8:	4a742400 	.word	0x4a742400
 8008edc:	4bbebc20 	.word	0x4bbebc20

08008ee0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b089      	sub	sp, #36	; 0x24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ee8:	4ba1      	ldr	r3, [pc, #644]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eec:	f003 0303 	and.w	r3, r3, #3
 8008ef0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ef2:	4b9f      	ldr	r3, [pc, #636]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	0d1b      	lsrs	r3, r3, #20
 8008ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008efc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008efe:	4b9c      	ldr	r3, [pc, #624]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f02:	0a1b      	lsrs	r3, r3, #8
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f0a:	4b99      	ldr	r3, [pc, #612]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0e:	08db      	lsrs	r3, r3, #3
 8008f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 8111 	beq.w	8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	f000 8083 	beq.w	800903c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	f200 80a1 	bhi.w	8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d056      	beq.n	8008ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f4a:	e099      	b.n	8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f4c:	4b88      	ldr	r3, [pc, #544]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0320 	and.w	r3, r3, #32
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d02d      	beq.n	8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f58:	4b85      	ldr	r3, [pc, #532]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	08db      	lsrs	r3, r3, #3
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	4a84      	ldr	r2, [pc, #528]	; (8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f64:	fa22 f303 	lsr.w	r3, r2, r3
 8008f68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f82:	4b7b      	ldr	r3, [pc, #492]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008fb2:	e087      	b.n	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800917c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc6:	4b6a      	ldr	r3, [pc, #424]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ff6:	e065      	b.n	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900a:	4b59      	ldr	r3, [pc, #356]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901a:	ed97 6a03 	vldr	s12, [r7, #12]
 800901e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800903a:	e043      	b.n	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009046:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904e:	4b48      	ldr	r3, [pc, #288]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009062:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800907e:	e021      	b.n	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009092:	4b37      	ldr	r3, [pc, #220]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80090c4:	4b2a      	ldr	r3, [pc, #168]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c8:	0a5b      	lsrs	r3, r3, #9
 80090ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090de:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ea:	ee17 2a90 	vmov	r2, s15
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80090f2:	4b1f      	ldr	r3, [pc, #124]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	0c1b      	lsrs	r3, r3, #16
 80090f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090fc:	ee07 3a90 	vmov	s15, r3
 8009100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800910c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009118:	ee17 2a90 	vmov	r2, s15
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009120:	4b13      	ldr	r3, [pc, #76]	; (8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009124:	0e1b      	lsrs	r3, r3, #24
 8009126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800913a:	edd7 6a07 	vldr	s13, [r7, #28]
 800913e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009146:	ee17 2a90 	vmov	r2, s15
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800914e:	e008      	b.n	8009162 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	609a      	str	r2, [r3, #8]
}
 8009162:	bf00      	nop
 8009164:	3724      	adds	r7, #36	; 0x24
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	58024400 	.word	0x58024400
 8009174:	03d09000 	.word	0x03d09000
 8009178:	46000000 	.word	0x46000000
 800917c:	4c742400 	.word	0x4c742400
 8009180:	4a742400 	.word	0x4a742400
 8009184:	4bbebc20 	.word	0x4bbebc20

08009188 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009188:	b480      	push	{r7}
 800918a:	b089      	sub	sp, #36	; 0x24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009190:	4ba0      	ldr	r3, [pc, #640]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800919a:	4b9e      	ldr	r3, [pc, #632]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	091b      	lsrs	r3, r3, #4
 80091a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80091a6:	4b9b      	ldr	r3, [pc, #620]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091b0:	4b98      	ldr	r3, [pc, #608]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b4:	08db      	lsrs	r3, r3, #3
 80091b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	fb02 f303 	mul.w	r3, r2, r3
 80091c0:	ee07 3a90 	vmov	s15, r3
 80091c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 8111 	beq.w	80093f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	f000 8083 	beq.w	80092e2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	f200 80a1 	bhi.w	8009326 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d056      	beq.n	800929e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80091f0:	e099      	b.n	8009326 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091f2:	4b88      	ldr	r3, [pc, #544]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d02d      	beq.n	800925a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091fe:	4b85      	ldr	r3, [pc, #532]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	08db      	lsrs	r3, r3, #3
 8009204:	f003 0303 	and.w	r3, r3, #3
 8009208:	4a83      	ldr	r2, [pc, #524]	; (8009418 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800920a:	fa22 f303 	lsr.w	r3, r2, r3
 800920e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009228:	4b7a      	ldr	r3, [pc, #488]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009230:	ee07 3a90 	vmov	s15, r3
 8009234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009238:	ed97 6a03 	vldr	s12, [r7, #12]
 800923c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800941c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800924c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009254:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009258:	e087      	b.n	800936a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	ee07 3a90 	vmov	s15, r3
 8009260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009264:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009420 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800926c:	4b69      	ldr	r3, [pc, #420]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800926e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009274:	ee07 3a90 	vmov	s15, r3
 8009278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800927c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009280:	eddf 5a66 	vldr	s11, [pc, #408]	; 800941c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800928c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009298:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800929c:	e065      	b.n	800936a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009424 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80092ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b0:	4b58      	ldr	r3, [pc, #352]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800941c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092e0:	e043      	b.n	800936a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	ee07 3a90 	vmov	s15, r3
 80092e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009428 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80092f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f4:	4b47      	ldr	r3, [pc, #284]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009304:	ed97 6a03 	vldr	s12, [r7, #12]
 8009308:	eddf 5a44 	vldr	s11, [pc, #272]	; 800941c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800930c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800931c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009320:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009324:	e021      	b.n	800936a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009330:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009420 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009338:	4b36      	ldr	r3, [pc, #216]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009340:	ee07 3a90 	vmov	s15, r3
 8009344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009348:	ed97 6a03 	vldr	s12, [r7, #12]
 800934c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800941c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800935c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009364:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009368:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800936a:	4b2a      	ldr	r3, [pc, #168]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	0a5b      	lsrs	r3, r3, #9
 8009370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009380:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009384:	edd7 6a07 	vldr	s13, [r7, #28]
 8009388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800938c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009390:	ee17 2a90 	vmov	r2, s15
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009398:	4b1e      	ldr	r3, [pc, #120]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	0c1b      	lsrs	r3, r3, #16
 800939e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80093b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093be:	ee17 2a90 	vmov	r2, s15
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80093c6:	4b13      	ldr	r3, [pc, #76]	; (8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ca:	0e1b      	lsrs	r3, r3, #24
 80093cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d0:	ee07 3a90 	vmov	s15, r3
 80093d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80093e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ec:	ee17 2a90 	vmov	r2, s15
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80093f4:	e008      	b.n	8009408 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	609a      	str	r2, [r3, #8]
}
 8009408:	bf00      	nop
 800940a:	3724      	adds	r7, #36	; 0x24
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	58024400 	.word	0x58024400
 8009418:	03d09000 	.word	0x03d09000
 800941c:	46000000 	.word	0x46000000
 8009420:	4c742400 	.word	0x4c742400
 8009424:	4a742400 	.word	0x4a742400
 8009428:	4bbebc20 	.word	0x4bbebc20

0800942c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800943a:	4b53      	ldr	r3, [pc, #332]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 800943c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	2b03      	cmp	r3, #3
 8009444:	d101      	bne.n	800944a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e099      	b.n	800957e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800944a:	4b4f      	ldr	r3, [pc, #316]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a4e      	ldr	r2, [pc, #312]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009450:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009456:	f7f8 f821 	bl	800149c <HAL_GetTick>
 800945a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800945c:	e008      	b.n	8009470 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800945e:	f7f8 f81d 	bl	800149c <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d901      	bls.n	8009470 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e086      	b.n	800957e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009470:	4b45      	ldr	r3, [pc, #276]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1f0      	bne.n	800945e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800947c:	4b42      	ldr	r3, [pc, #264]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	031b      	lsls	r3, r3, #12
 800948a:	493f      	ldr	r1, [pc, #252]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 800948c:	4313      	orrs	r3, r2
 800948e:	628b      	str	r3, [r1, #40]	; 0x28
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	3b01      	subs	r3, #1
 8009496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	3b01      	subs	r3, #1
 80094a0:	025b      	lsls	r3, r3, #9
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	041b      	lsls	r3, r3, #16
 80094ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	061b      	lsls	r3, r3, #24
 80094bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094c0:	4931      	ldr	r1, [pc, #196]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094c6:	4b30      	ldr	r3, [pc, #192]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	492d      	ldr	r1, [pc, #180]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80094d8:	4b2b      	ldr	r3, [pc, #172]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	f023 0220 	bic.w	r2, r3, #32
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	4928      	ldr	r1, [pc, #160]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80094ea:	4b27      	ldr	r3, [pc, #156]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	4a26      	ldr	r2, [pc, #152]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 80094f0:	f023 0310 	bic.w	r3, r3, #16
 80094f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094f6:	4b24      	ldr	r3, [pc, #144]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 80094f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094fa:	4b24      	ldr	r3, [pc, #144]	; (800958c <RCCEx_PLL2_Config+0x160>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	69d2      	ldr	r2, [r2, #28]
 8009502:	00d2      	lsls	r2, r2, #3
 8009504:	4920      	ldr	r1, [pc, #128]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009506:	4313      	orrs	r3, r2
 8009508:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800950a:	4b1f      	ldr	r3, [pc, #124]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	4a1e      	ldr	r2, [pc, #120]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009510:	f043 0310 	orr.w	r3, r3, #16
 8009514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d106      	bne.n	800952a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800951c:	4b1a      	ldr	r3, [pc, #104]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	4a19      	ldr	r2, [pc, #100]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009526:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009528:	e00f      	b.n	800954a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d106      	bne.n	800953e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009530:	4b15      	ldr	r3, [pc, #84]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	4a14      	ldr	r2, [pc, #80]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800953a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800953c:	e005      	b.n	800954a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	4a11      	ldr	r2, [pc, #68]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009548:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800954a:	4b0f      	ldr	r3, [pc, #60]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a0e      	ldr	r2, [pc, #56]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009556:	f7f7 ffa1 	bl	800149c <HAL_GetTick>
 800955a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800955c:	e008      	b.n	8009570 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800955e:	f7f7 ff9d 	bl	800149c <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d901      	bls.n	8009570 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e006      	b.n	800957e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009570:	4b05      	ldr	r3, [pc, #20]	; (8009588 <RCCEx_PLL2_Config+0x15c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0f0      	beq.n	800955e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	58024400 	.word	0x58024400
 800958c:	ffff0007 	.word	0xffff0007

08009590 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800959e:	4b53      	ldr	r3, [pc, #332]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d101      	bne.n	80095ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e099      	b.n	80096e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80095ae:	4b4f      	ldr	r3, [pc, #316]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a4e      	ldr	r2, [pc, #312]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80095b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ba:	f7f7 ff6f 	bl	800149c <HAL_GetTick>
 80095be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095c0:	e008      	b.n	80095d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095c2:	f7f7 ff6b 	bl	800149c <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e086      	b.n	80096e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095d4:	4b45      	ldr	r3, [pc, #276]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1f0      	bne.n	80095c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80095e0:	4b42      	ldr	r3, [pc, #264]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	051b      	lsls	r3, r3, #20
 80095ee:	493f      	ldr	r1, [pc, #252]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	628b      	str	r3, [r1, #40]	; 0x28
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	3b01      	subs	r3, #1
 8009604:	025b      	lsls	r3, r3, #9
 8009606:	b29b      	uxth	r3, r3
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	3b01      	subs	r3, #1
 8009610:	041b      	lsls	r3, r3, #16
 8009612:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	3b01      	subs	r3, #1
 800961e:	061b      	lsls	r3, r3, #24
 8009620:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009624:	4931      	ldr	r1, [pc, #196]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009626:	4313      	orrs	r3, r2
 8009628:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800962a:	4b30      	ldr	r3, [pc, #192]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 800962c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	492d      	ldr	r1, [pc, #180]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009638:	4313      	orrs	r3, r2
 800963a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800963c:	4b2b      	ldr	r3, [pc, #172]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 800963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009640:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	4928      	ldr	r1, [pc, #160]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 800964a:	4313      	orrs	r3, r2
 800964c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800964e:	4b27      	ldr	r3, [pc, #156]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009652:	4a26      	ldr	r2, [pc, #152]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800965a:	4b24      	ldr	r3, [pc, #144]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 800965c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800965e:	4b24      	ldr	r3, [pc, #144]	; (80096f0 <RCCEx_PLL3_Config+0x160>)
 8009660:	4013      	ands	r3, r2
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	69d2      	ldr	r2, [r2, #28]
 8009666:	00d2      	lsls	r2, r2, #3
 8009668:	4920      	ldr	r1, [pc, #128]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 800966a:	4313      	orrs	r3, r2
 800966c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800966e:	4b1f      	ldr	r3, [pc, #124]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	4a1e      	ldr	r2, [pc, #120]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d106      	bne.n	800968e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009680:	4b1a      	ldr	r3, [pc, #104]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	4a19      	ldr	r2, [pc, #100]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009686:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800968a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800968c:	e00f      	b.n	80096ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d106      	bne.n	80096a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009694:	4b15      	ldr	r3, [pc, #84]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4a14      	ldr	r2, [pc, #80]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 800969a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800969e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096a0:	e005      	b.n	80096ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	4a11      	ldr	r2, [pc, #68]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80096a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80096ae:	4b0f      	ldr	r3, [pc, #60]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a0e      	ldr	r2, [pc, #56]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80096b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ba:	f7f7 feef 	bl	800149c <HAL_GetTick>
 80096be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096c0:	e008      	b.n	80096d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096c2:	f7f7 feeb 	bl	800149c <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d901      	bls.n	80096d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e006      	b.n	80096e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096d4:	4b05      	ldr	r3, [pc, #20]	; (80096ec <RCCEx_PLL3_Config+0x15c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0f0      	beq.n	80096c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	58024400 	.word	0x58024400
 80096f0:	ffff0007 	.word	0xffff0007

080096f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e042      	b.n	800978c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970c:	2b00      	cmp	r3, #0
 800970e:	d106      	bne.n	800971e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7f7 fca1 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2224      	movs	r2, #36	; 0x24
 8009722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0201 	bic.w	r2, r2, #1
 8009734:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fc9a 	bl	800a070 <UART_SetConfig>
 800973c:	4603      	mov	r3, r0
 800973e:	2b01      	cmp	r3, #1
 8009740:	d101      	bne.n	8009746 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e022      	b.n	800978c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 f9f6 	bl	800ab40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0201 	orr.w	r2, r2, #1
 8009782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 fa7d 	bl	800ac84 <UART_CheckIdleState>
 800978a:	4603      	mov	r3, r0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009794:	b480      	push	{r7}
 8009796:	b091      	sub	sp, #68	; 0x44
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d178      	bne.n	800989e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <HAL_UART_Transmit_IT+0x24>
 80097b2:	88fb      	ldrh	r3, [r7, #6]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e071      	b.n	80098a0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	88fa      	ldrh	r2, [r7, #6]
 80097c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	88fa      	ldrh	r2, [r7, #6]
 80097ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2221      	movs	r2, #33	; 0x21
 80097e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f0:	d12a      	bne.n	8009848 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097fa:	d107      	bne.n	800980c <HAL_UART_Transmit_IT+0x78>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4a29      	ldr	r2, [pc, #164]	; (80098ac <HAL_UART_Transmit_IT+0x118>)
 8009808:	679a      	str	r2, [r3, #120]	; 0x78
 800980a:	e002      	b.n	8009812 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4a28      	ldr	r2, [pc, #160]	; (80098b0 <HAL_UART_Transmit_IT+0x11c>)
 8009810:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009828:	63bb      	str	r3, [r7, #56]	; 0x38
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3308      	adds	r3, #8
 8009830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009832:	637a      	str	r2, [r7, #52]	; 0x34
 8009834:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <HAL_UART_Transmit_IT+0x7e>
 8009846:	e028      	b.n	800989a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009850:	d107      	bne.n	8009862 <HAL_UART_Transmit_IT+0xce>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d103      	bne.n	8009862 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <HAL_UART_Transmit_IT+0x120>)
 800985e:	679a      	str	r2, [r3, #120]	; 0x78
 8009860:	e002      	b.n	8009868 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4a14      	ldr	r2, [pc, #80]	; (80098b8 <HAL_UART_Transmit_IT+0x124>)
 8009866:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	613b      	str	r3, [r7, #16]
   return(result);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009886:	623b      	str	r3, [r7, #32]
 8009888:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	69f9      	ldr	r1, [r7, #28]
 800988c:	6a3a      	ldr	r2, [r7, #32]
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	61bb      	str	r3, [r7, #24]
   return(result);
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e6      	bne.n	8009868 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	e000      	b.n	80098a0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800989e:	2302      	movs	r3, #2
  }
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3744      	adds	r7, #68	; 0x44
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	0800b1fb 	.word	0x0800b1fb
 80098b0:	0800b11b 	.word	0x0800b11b
 80098b4:	0800b059 	.word	0x0800b059
 80098b8:	0800afa1 	.word	0x0800afa1

080098bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b0ba      	sub	sp, #232	; 0xe8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80098e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80098ea:	4013      	ands	r3, r2
 80098ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80098f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d11b      	bne.n	8009930 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b00      	cmp	r3, #0
 8009902:	d015      	beq.n	8009930 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009908:	f003 0320 	and.w	r3, r3, #32
 800990c:	2b00      	cmp	r3, #0
 800990e:	d105      	bne.n	800991c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d009      	beq.n	8009930 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 8377 	beq.w	800a014 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	4798      	blx	r3
      }
      return;
 800992e:	e371      	b.n	800a014 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 8123 	beq.w	8009b80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800993a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800993e:	4b8d      	ldr	r3, [pc, #564]	; (8009b74 <HAL_UART_IRQHandler+0x2b8>)
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d106      	bne.n	8009954 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009946:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800994a:	4b8b      	ldr	r3, [pc, #556]	; (8009b78 <HAL_UART_IRQHandler+0x2bc>)
 800994c:	4013      	ands	r3, r2
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 8116 	beq.w	8009b80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	d011      	beq.n	8009984 <HAL_UART_IRQHandler+0xc8>
 8009960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00b      	beq.n	8009984 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2201      	movs	r2, #1
 8009972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997a:	f043 0201 	orr.w	r2, r3, #1
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d011      	beq.n	80099b4 <HAL_UART_IRQHandler+0xf8>
 8009990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2202      	movs	r2, #2
 80099a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099aa:	f043 0204 	orr.w	r2, r3, #4
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b8:	f003 0304 	and.w	r3, r3, #4
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d011      	beq.n	80099e4 <HAL_UART_IRQHandler+0x128>
 80099c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00b      	beq.n	80099e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2204      	movs	r2, #4
 80099d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099da:	f043 0202 	orr.w	r2, r3, #2
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e8:	f003 0308 	and.w	r3, r3, #8
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d017      	beq.n	8009a20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d105      	bne.n	8009a08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a00:	4b5c      	ldr	r3, [pc, #368]	; (8009b74 <HAL_UART_IRQHandler+0x2b8>)
 8009a02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a16:	f043 0208 	orr.w	r2, r3, #8
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d012      	beq.n	8009a52 <HAL_UART_IRQHandler+0x196>
 8009a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00c      	beq.n	8009a52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a48:	f043 0220 	orr.w	r2, r3, #32
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 82dd 	beq.w	800a018 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d013      	beq.n	8009a92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d105      	bne.n	8009a82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d007      	beq.n	8009a92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa6:	2b40      	cmp	r3, #64	; 0x40
 8009aa8:	d005      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009aae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d054      	beq.n	8009b60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f001 f9f6 	bl	800aea8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac6:	2b40      	cmp	r3, #64	; 0x40
 8009ac8:	d146      	bne.n	8009b58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3308      	adds	r3, #8
 8009ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3308      	adds	r3, #8
 8009af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009af6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1d9      	bne.n	8009aca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d017      	beq.n	8009b50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b26:	4a15      	ldr	r2, [pc, #84]	; (8009b7c <HAL_UART_IRQHandler+0x2c0>)
 8009b28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fa f99f 	bl	8003e74 <HAL_DMA_Abort_IT>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d019      	beq.n	8009b70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4e:	e00f      	b.n	8009b70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fa77 	bl	800a044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b56:	e00b      	b.n	8009b70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fa73 	bl	800a044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b5e:	e007      	b.n	8009b70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fa6f 	bl	800a044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009b6e:	e253      	b.n	800a018 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b70:	bf00      	nop
    return;
 8009b72:	e251      	b.n	800a018 <HAL_UART_IRQHandler+0x75c>
 8009b74:	10000001 	.word	0x10000001
 8009b78:	04000120 	.word	0x04000120
 8009b7c:	0800af75 	.word	0x0800af75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	f040 81e7 	bne.w	8009f58 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8e:	f003 0310 	and.w	r3, r3, #16
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 81e0 	beq.w	8009f58 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b9c:	f003 0310 	and.w	r3, r3, #16
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 81d9 	beq.w	8009f58 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2210      	movs	r2, #16
 8009bac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb8:	2b40      	cmp	r3, #64	; 0x40
 8009bba:	f040 8151 	bne.w	8009e60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a96      	ldr	r2, [pc, #600]	; (8009e20 <HAL_UART_IRQHandler+0x564>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d068      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a93      	ldr	r2, [pc, #588]	; (8009e24 <HAL_UART_IRQHandler+0x568>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d061      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a91      	ldr	r2, [pc, #580]	; (8009e28 <HAL_UART_IRQHandler+0x56c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d05a      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a8e      	ldr	r2, [pc, #568]	; (8009e2c <HAL_UART_IRQHandler+0x570>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d053      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a8c      	ldr	r2, [pc, #560]	; (8009e30 <HAL_UART_IRQHandler+0x574>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d04c      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a89      	ldr	r2, [pc, #548]	; (8009e34 <HAL_UART_IRQHandler+0x578>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d045      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a87      	ldr	r2, [pc, #540]	; (8009e38 <HAL_UART_IRQHandler+0x57c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d03e      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a84      	ldr	r2, [pc, #528]	; (8009e3c <HAL_UART_IRQHandler+0x580>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d037      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a82      	ldr	r2, [pc, #520]	; (8009e40 <HAL_UART_IRQHandler+0x584>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d030      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a7f      	ldr	r2, [pc, #508]	; (8009e44 <HAL_UART_IRQHandler+0x588>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d029      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a7d      	ldr	r2, [pc, #500]	; (8009e48 <HAL_UART_IRQHandler+0x58c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d022      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a7a      	ldr	r2, [pc, #488]	; (8009e4c <HAL_UART_IRQHandler+0x590>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d01b      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a78      	ldr	r2, [pc, #480]	; (8009e50 <HAL_UART_IRQHandler+0x594>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d014      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a75      	ldr	r2, [pc, #468]	; (8009e54 <HAL_UART_IRQHandler+0x598>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00d      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a73      	ldr	r2, [pc, #460]	; (8009e58 <HAL_UART_IRQHandler+0x59c>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d006      	beq.n	8009c9e <HAL_UART_IRQHandler+0x3e2>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a70      	ldr	r2, [pc, #448]	; (8009e5c <HAL_UART_IRQHandler+0x5a0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d106      	bne.n	8009cac <HAL_UART_IRQHandler+0x3f0>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	e005      	b.n	8009cb8 <HAL_UART_IRQHandler+0x3fc>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 81ab 	beq.w	800a01c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ccc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	f080 81a3 	bcs.w	800a01c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cec:	f000 8087 	beq.w	8009dfe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1da      	bne.n	8009cf0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d4c:	f023 0301 	bic.w	r3, r3, #1
 8009d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e1      	bne.n	8009d3a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3308      	adds	r3, #8
 8009d96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e3      	bne.n	8009d76 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2220      	movs	r2, #32
 8009db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dcc:	f023 0310 	bic.w	r3, r3, #16
 8009dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dde:	65bb      	str	r3, [r7, #88]	; 0x58
 8009de0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009de6:	e841 2300 	strex	r3, r2, [r1]
 8009dea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1e4      	bne.n	8009dbc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7f9 fd1d 	bl	8003838 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2202      	movs	r2, #2
 8009e02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f91d 	bl	800a058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e1e:	e0fd      	b.n	800a01c <HAL_UART_IRQHandler+0x760>
 8009e20:	40020010 	.word	0x40020010
 8009e24:	40020028 	.word	0x40020028
 8009e28:	40020040 	.word	0x40020040
 8009e2c:	40020058 	.word	0x40020058
 8009e30:	40020070 	.word	0x40020070
 8009e34:	40020088 	.word	0x40020088
 8009e38:	400200a0 	.word	0x400200a0
 8009e3c:	400200b8 	.word	0x400200b8
 8009e40:	40020410 	.word	0x40020410
 8009e44:	40020428 	.word	0x40020428
 8009e48:	40020440 	.word	0x40020440
 8009e4c:	40020458 	.word	0x40020458
 8009e50:	40020470 	.word	0x40020470
 8009e54:	40020488 	.word	0x40020488
 8009e58:	400204a0 	.word	0x400204a0
 8009e5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 80cf 	beq.w	800a020 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009e82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80ca 	beq.w	800a020 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009eae:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e4      	bne.n	8009e8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed2:	6a3a      	ldr	r2, [r7, #32]
 8009ed4:	4b55      	ldr	r3, [pc, #340]	; (800a02c <HAL_UART_IRQHandler+0x770>)
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e3      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f023 0310 	bic.w	r3, r3, #16
 8009f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f30:	61fb      	str	r3, [r7, #28]
 8009f32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	69b9      	ldr	r1, [r7, #24]
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e4      	bne.n	8009f0e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f881 	bl	800a058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f56:	e063      	b.n	800a020 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00e      	beq.n	8009f82 <HAL_UART_IRQHandler+0x6c6>
 8009f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d008      	beq.n	8009f82 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 f9dd 	bl	800b33a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f80:	e051      	b.n	800a026 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d014      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d105      	bne.n	8009fa6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d008      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d03a      	beq.n	800a024 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
    }
    return;
 8009fb6:	e035      	b.n	800a024 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x71c>
 8009fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d003      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 f987 	bl	800b2e4 <UART_EndTransmit_IT>
    return;
 8009fd6:	e026      	b.n	800a026 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d009      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x73c>
 8009fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 f9b6 	bl	800b362 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ff6:	e016      	b.n	800a026 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d010      	beq.n	800a026 <HAL_UART_IRQHandler+0x76a>
 800a004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	da0c      	bge.n	800a026 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 f99e 	bl	800b34e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a012:	e008      	b.n	800a026 <HAL_UART_IRQHandler+0x76a>
      return;
 800a014:	bf00      	nop
 800a016:	e006      	b.n	800a026 <HAL_UART_IRQHandler+0x76a>
    return;
 800a018:	bf00      	nop
 800a01a:	e004      	b.n	800a026 <HAL_UART_IRQHandler+0x76a>
      return;
 800a01c:	bf00      	nop
 800a01e:	e002      	b.n	800a026 <HAL_UART_IRQHandler+0x76a>
      return;
 800a020:	bf00      	nop
 800a022:	e000      	b.n	800a026 <HAL_UART_IRQHandler+0x76a>
    return;
 800a024:	bf00      	nop
  }
}
 800a026:	37e8      	adds	r7, #232	; 0xe8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	effffffe 	.word	0xeffffffe

0800a030 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a074:	b092      	sub	sp, #72	; 0x48
 800a076:	af00      	add	r7, sp, #0
 800a078:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	689a      	ldr	r2, [r3, #8]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	431a      	orrs	r2, r3
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	431a      	orrs	r2, r3
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	4313      	orrs	r3, r2
 800a096:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	4bbe      	ldr	r3, [pc, #760]	; (800a398 <UART_SetConfig+0x328>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	6812      	ldr	r2, [r2, #0]
 800a0a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4ab3      	ldr	r2, [pc, #716]	; (800a39c <UART_SetConfig+0x32c>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d004      	beq.n	800a0dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	4baf      	ldr	r3, [pc, #700]	; (800a3a0 <UART_SetConfig+0x330>)
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	6812      	ldr	r2, [r2, #0]
 800a0ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	f023 010f 	bic.w	r1, r3, #15
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4aa6      	ldr	r2, [pc, #664]	; (800a3a4 <UART_SetConfig+0x334>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d177      	bne.n	800a200 <UART_SetConfig+0x190>
 800a110:	4ba5      	ldr	r3, [pc, #660]	; (800a3a8 <UART_SetConfig+0x338>)
 800a112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a118:	2b28      	cmp	r3, #40	; 0x28
 800a11a:	d86d      	bhi.n	800a1f8 <UART_SetConfig+0x188>
 800a11c:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <UART_SetConfig+0xb4>)
 800a11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a122:	bf00      	nop
 800a124:	0800a1c9 	.word	0x0800a1c9
 800a128:	0800a1f9 	.word	0x0800a1f9
 800a12c:	0800a1f9 	.word	0x0800a1f9
 800a130:	0800a1f9 	.word	0x0800a1f9
 800a134:	0800a1f9 	.word	0x0800a1f9
 800a138:	0800a1f9 	.word	0x0800a1f9
 800a13c:	0800a1f9 	.word	0x0800a1f9
 800a140:	0800a1f9 	.word	0x0800a1f9
 800a144:	0800a1d1 	.word	0x0800a1d1
 800a148:	0800a1f9 	.word	0x0800a1f9
 800a14c:	0800a1f9 	.word	0x0800a1f9
 800a150:	0800a1f9 	.word	0x0800a1f9
 800a154:	0800a1f9 	.word	0x0800a1f9
 800a158:	0800a1f9 	.word	0x0800a1f9
 800a15c:	0800a1f9 	.word	0x0800a1f9
 800a160:	0800a1f9 	.word	0x0800a1f9
 800a164:	0800a1d9 	.word	0x0800a1d9
 800a168:	0800a1f9 	.word	0x0800a1f9
 800a16c:	0800a1f9 	.word	0x0800a1f9
 800a170:	0800a1f9 	.word	0x0800a1f9
 800a174:	0800a1f9 	.word	0x0800a1f9
 800a178:	0800a1f9 	.word	0x0800a1f9
 800a17c:	0800a1f9 	.word	0x0800a1f9
 800a180:	0800a1f9 	.word	0x0800a1f9
 800a184:	0800a1e1 	.word	0x0800a1e1
 800a188:	0800a1f9 	.word	0x0800a1f9
 800a18c:	0800a1f9 	.word	0x0800a1f9
 800a190:	0800a1f9 	.word	0x0800a1f9
 800a194:	0800a1f9 	.word	0x0800a1f9
 800a198:	0800a1f9 	.word	0x0800a1f9
 800a19c:	0800a1f9 	.word	0x0800a1f9
 800a1a0:	0800a1f9 	.word	0x0800a1f9
 800a1a4:	0800a1e9 	.word	0x0800a1e9
 800a1a8:	0800a1f9 	.word	0x0800a1f9
 800a1ac:	0800a1f9 	.word	0x0800a1f9
 800a1b0:	0800a1f9 	.word	0x0800a1f9
 800a1b4:	0800a1f9 	.word	0x0800a1f9
 800a1b8:	0800a1f9 	.word	0x0800a1f9
 800a1bc:	0800a1f9 	.word	0x0800a1f9
 800a1c0:	0800a1f9 	.word	0x0800a1f9
 800a1c4:	0800a1f1 	.word	0x0800a1f1
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ce:	e222      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d6:	e21e      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a1d8:	2308      	movs	r3, #8
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1de:	e21a      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a1e0:	2310      	movs	r3, #16
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e6:	e216      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ee:	e212      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a1f0:	2340      	movs	r3, #64	; 0x40
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f6:	e20e      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a1f8:	2380      	movs	r3, #128	; 0x80
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fe:	e20a      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a69      	ldr	r2, [pc, #420]	; (800a3ac <UART_SetConfig+0x33c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d130      	bne.n	800a26c <UART_SetConfig+0x1fc>
 800a20a:	4b67      	ldr	r3, [pc, #412]	; (800a3a8 <UART_SetConfig+0x338>)
 800a20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a20e:	f003 0307 	and.w	r3, r3, #7
 800a212:	2b05      	cmp	r3, #5
 800a214:	d826      	bhi.n	800a264 <UART_SetConfig+0x1f4>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <UART_SetConfig+0x1ac>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a235 	.word	0x0800a235
 800a220:	0800a23d 	.word	0x0800a23d
 800a224:	0800a245 	.word	0x0800a245
 800a228:	0800a24d 	.word	0x0800a24d
 800a22c:	0800a255 	.word	0x0800a255
 800a230:	0800a25d 	.word	0x0800a25d
 800a234:	2300      	movs	r3, #0
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23a:	e1ec      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a23c:	2304      	movs	r3, #4
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a242:	e1e8      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a244:	2308      	movs	r3, #8
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24a:	e1e4      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a24c:	2310      	movs	r3, #16
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a252:	e1e0      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a254:	2320      	movs	r3, #32
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a25a:	e1dc      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a262:	e1d8      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a264:	2380      	movs	r3, #128	; 0x80
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a26a:	e1d4      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a4f      	ldr	r2, [pc, #316]	; (800a3b0 <UART_SetConfig+0x340>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d130      	bne.n	800a2d8 <UART_SetConfig+0x268>
 800a276:	4b4c      	ldr	r3, [pc, #304]	; (800a3a8 <UART_SetConfig+0x338>)
 800a278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	2b05      	cmp	r3, #5
 800a280:	d826      	bhi.n	800a2d0 <UART_SetConfig+0x260>
 800a282:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <UART_SetConfig+0x218>)
 800a284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a288:	0800a2a1 	.word	0x0800a2a1
 800a28c:	0800a2a9 	.word	0x0800a2a9
 800a290:	0800a2b1 	.word	0x0800a2b1
 800a294:	0800a2b9 	.word	0x0800a2b9
 800a298:	0800a2c1 	.word	0x0800a2c1
 800a29c:	0800a2c9 	.word	0x0800a2c9
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a6:	e1b6      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a2a8:	2304      	movs	r3, #4
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ae:	e1b2      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b6:	e1ae      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2be:	e1aa      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a2c0:	2320      	movs	r3, #32
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c6:	e1a6      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a2c8:	2340      	movs	r3, #64	; 0x40
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ce:	e1a2      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a2d0:	2380      	movs	r3, #128	; 0x80
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2d6:	e19e      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a35      	ldr	r2, [pc, #212]	; (800a3b4 <UART_SetConfig+0x344>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d130      	bne.n	800a344 <UART_SetConfig+0x2d4>
 800a2e2:	4b31      	ldr	r3, [pc, #196]	; (800a3a8 <UART_SetConfig+0x338>)
 800a2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	2b05      	cmp	r3, #5
 800a2ec:	d826      	bhi.n	800a33c <UART_SetConfig+0x2cc>
 800a2ee:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <UART_SetConfig+0x284>)
 800a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f4:	0800a30d 	.word	0x0800a30d
 800a2f8:	0800a315 	.word	0x0800a315
 800a2fc:	0800a31d 	.word	0x0800a31d
 800a300:	0800a325 	.word	0x0800a325
 800a304:	0800a32d 	.word	0x0800a32d
 800a308:	0800a335 	.word	0x0800a335
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a312:	e180      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a314:	2304      	movs	r3, #4
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31a:	e17c      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a31c:	2308      	movs	r3, #8
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a322:	e178      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a324:	2310      	movs	r3, #16
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32a:	e174      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a32c:	2320      	movs	r3, #32
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a332:	e170      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33a:	e16c      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a33c:	2380      	movs	r3, #128	; 0x80
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a342:	e168      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1b      	ldr	r2, [pc, #108]	; (800a3b8 <UART_SetConfig+0x348>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d142      	bne.n	800a3d4 <UART_SetConfig+0x364>
 800a34e:	4b16      	ldr	r3, [pc, #88]	; (800a3a8 <UART_SetConfig+0x338>)
 800a350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	2b05      	cmp	r3, #5
 800a358:	d838      	bhi.n	800a3cc <UART_SetConfig+0x35c>
 800a35a:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <UART_SetConfig+0x2f0>)
 800a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a360:	0800a379 	.word	0x0800a379
 800a364:	0800a381 	.word	0x0800a381
 800a368:	0800a389 	.word	0x0800a389
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a3bd 	.word	0x0800a3bd
 800a374:	0800a3c5 	.word	0x0800a3c5
 800a378:	2300      	movs	r3, #0
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37e:	e14a      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a380:	2304      	movs	r3, #4
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a386:	e146      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a388:	2308      	movs	r3, #8
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38e:	e142      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a390:	2310      	movs	r3, #16
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a396:	e13e      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a398:	cfff69f3 	.word	0xcfff69f3
 800a39c:	58000c00 	.word	0x58000c00
 800a3a0:	11fff4ff 	.word	0x11fff4ff
 800a3a4:	40011000 	.word	0x40011000
 800a3a8:	58024400 	.word	0x58024400
 800a3ac:	40004400 	.word	0x40004400
 800a3b0:	40004800 	.word	0x40004800
 800a3b4:	40004c00 	.word	0x40004c00
 800a3b8:	40005000 	.word	0x40005000
 800a3bc:	2320      	movs	r3, #32
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3c2:	e128      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a3c4:	2340      	movs	r3, #64	; 0x40
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ca:	e124      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a3cc:	2380      	movs	r3, #128	; 0x80
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d2:	e120      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4acb      	ldr	r2, [pc, #812]	; (800a708 <UART_SetConfig+0x698>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d176      	bne.n	800a4cc <UART_SetConfig+0x45c>
 800a3de:	4bcb      	ldr	r3, [pc, #812]	; (800a70c <UART_SetConfig+0x69c>)
 800a3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3e6:	2b28      	cmp	r3, #40	; 0x28
 800a3e8:	d86c      	bhi.n	800a4c4 <UART_SetConfig+0x454>
 800a3ea:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <UART_SetConfig+0x380>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a495 	.word	0x0800a495
 800a3f4:	0800a4c5 	.word	0x0800a4c5
 800a3f8:	0800a4c5 	.word	0x0800a4c5
 800a3fc:	0800a4c5 	.word	0x0800a4c5
 800a400:	0800a4c5 	.word	0x0800a4c5
 800a404:	0800a4c5 	.word	0x0800a4c5
 800a408:	0800a4c5 	.word	0x0800a4c5
 800a40c:	0800a4c5 	.word	0x0800a4c5
 800a410:	0800a49d 	.word	0x0800a49d
 800a414:	0800a4c5 	.word	0x0800a4c5
 800a418:	0800a4c5 	.word	0x0800a4c5
 800a41c:	0800a4c5 	.word	0x0800a4c5
 800a420:	0800a4c5 	.word	0x0800a4c5
 800a424:	0800a4c5 	.word	0x0800a4c5
 800a428:	0800a4c5 	.word	0x0800a4c5
 800a42c:	0800a4c5 	.word	0x0800a4c5
 800a430:	0800a4a5 	.word	0x0800a4a5
 800a434:	0800a4c5 	.word	0x0800a4c5
 800a438:	0800a4c5 	.word	0x0800a4c5
 800a43c:	0800a4c5 	.word	0x0800a4c5
 800a440:	0800a4c5 	.word	0x0800a4c5
 800a444:	0800a4c5 	.word	0x0800a4c5
 800a448:	0800a4c5 	.word	0x0800a4c5
 800a44c:	0800a4c5 	.word	0x0800a4c5
 800a450:	0800a4ad 	.word	0x0800a4ad
 800a454:	0800a4c5 	.word	0x0800a4c5
 800a458:	0800a4c5 	.word	0x0800a4c5
 800a45c:	0800a4c5 	.word	0x0800a4c5
 800a460:	0800a4c5 	.word	0x0800a4c5
 800a464:	0800a4c5 	.word	0x0800a4c5
 800a468:	0800a4c5 	.word	0x0800a4c5
 800a46c:	0800a4c5 	.word	0x0800a4c5
 800a470:	0800a4b5 	.word	0x0800a4b5
 800a474:	0800a4c5 	.word	0x0800a4c5
 800a478:	0800a4c5 	.word	0x0800a4c5
 800a47c:	0800a4c5 	.word	0x0800a4c5
 800a480:	0800a4c5 	.word	0x0800a4c5
 800a484:	0800a4c5 	.word	0x0800a4c5
 800a488:	0800a4c5 	.word	0x0800a4c5
 800a48c:	0800a4c5 	.word	0x0800a4c5
 800a490:	0800a4bd 	.word	0x0800a4bd
 800a494:	2301      	movs	r3, #1
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a49a:	e0bc      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a49c:	2304      	movs	r3, #4
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a2:	e0b8      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a4a4:	2308      	movs	r3, #8
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4aa:	e0b4      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a4ac:	2310      	movs	r3, #16
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b2:	e0b0      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a4b4:	2320      	movs	r3, #32
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ba:	e0ac      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a4bc:	2340      	movs	r3, #64	; 0x40
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c2:	e0a8      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a4c4:	2380      	movs	r3, #128	; 0x80
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ca:	e0a4      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a8f      	ldr	r2, [pc, #572]	; (800a710 <UART_SetConfig+0x6a0>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d130      	bne.n	800a538 <UART_SetConfig+0x4c8>
 800a4d6:	4b8d      	ldr	r3, [pc, #564]	; (800a70c <UART_SetConfig+0x69c>)
 800a4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4da:	f003 0307 	and.w	r3, r3, #7
 800a4de:	2b05      	cmp	r3, #5
 800a4e0:	d826      	bhi.n	800a530 <UART_SetConfig+0x4c0>
 800a4e2:	a201      	add	r2, pc, #4	; (adr r2, 800a4e8 <UART_SetConfig+0x478>)
 800a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e8:	0800a501 	.word	0x0800a501
 800a4ec:	0800a509 	.word	0x0800a509
 800a4f0:	0800a511 	.word	0x0800a511
 800a4f4:	0800a519 	.word	0x0800a519
 800a4f8:	0800a521 	.word	0x0800a521
 800a4fc:	0800a529 	.word	0x0800a529
 800a500:	2300      	movs	r3, #0
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a506:	e086      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a508:	2304      	movs	r3, #4
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50e:	e082      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a510:	2308      	movs	r3, #8
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a516:	e07e      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a518:	2310      	movs	r3, #16
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51e:	e07a      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a520:	2320      	movs	r3, #32
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a526:	e076      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a528:	2340      	movs	r3, #64	; 0x40
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52e:	e072      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a530:	2380      	movs	r3, #128	; 0x80
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a536:	e06e      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a75      	ldr	r2, [pc, #468]	; (800a714 <UART_SetConfig+0x6a4>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d130      	bne.n	800a5a4 <UART_SetConfig+0x534>
 800a542:	4b72      	ldr	r3, [pc, #456]	; (800a70c <UART_SetConfig+0x69c>)
 800a544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	2b05      	cmp	r3, #5
 800a54c:	d826      	bhi.n	800a59c <UART_SetConfig+0x52c>
 800a54e:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <UART_SetConfig+0x4e4>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a56d 	.word	0x0800a56d
 800a558:	0800a575 	.word	0x0800a575
 800a55c:	0800a57d 	.word	0x0800a57d
 800a560:	0800a585 	.word	0x0800a585
 800a564:	0800a58d 	.word	0x0800a58d
 800a568:	0800a595 	.word	0x0800a595
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a572:	e050      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a574:	2304      	movs	r3, #4
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57a:	e04c      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a57c:	2308      	movs	r3, #8
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a582:	e048      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a584:	2310      	movs	r3, #16
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58a:	e044      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a58c:	2320      	movs	r3, #32
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a592:	e040      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a594:	2340      	movs	r3, #64	; 0x40
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a59a:	e03c      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a59c:	2380      	movs	r3, #128	; 0x80
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5a2:	e038      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a5b      	ldr	r2, [pc, #364]	; (800a718 <UART_SetConfig+0x6a8>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d130      	bne.n	800a610 <UART_SetConfig+0x5a0>
 800a5ae:	4b57      	ldr	r3, [pc, #348]	; (800a70c <UART_SetConfig+0x69c>)
 800a5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d826      	bhi.n	800a608 <UART_SetConfig+0x598>
 800a5ba:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <UART_SetConfig+0x550>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a5d9 	.word	0x0800a5d9
 800a5c4:	0800a5e1 	.word	0x0800a5e1
 800a5c8:	0800a5e9 	.word	0x0800a5e9
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	2302      	movs	r3, #2
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5de:	e01a      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e6:	e016      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ee:	e012      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f6:	e00e      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a5f8:	2320      	movs	r3, #32
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fe:	e00a      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a600:	2340      	movs	r3, #64	; 0x40
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a606:	e006      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60e:	e002      	b.n	800a616 <UART_SetConfig+0x5a6>
 800a610:	2380      	movs	r3, #128	; 0x80
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a3f      	ldr	r2, [pc, #252]	; (800a718 <UART_SetConfig+0x6a8>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	f040 80f8 	bne.w	800a812 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a622:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a626:	2b20      	cmp	r3, #32
 800a628:	dc46      	bgt.n	800a6b8 <UART_SetConfig+0x648>
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	f2c0 8082 	blt.w	800a734 <UART_SetConfig+0x6c4>
 800a630:	3b02      	subs	r3, #2
 800a632:	2b1e      	cmp	r3, #30
 800a634:	d87e      	bhi.n	800a734 <UART_SetConfig+0x6c4>
 800a636:	a201      	add	r2, pc, #4	; (adr r2, 800a63c <UART_SetConfig+0x5cc>)
 800a638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63c:	0800a6bf 	.word	0x0800a6bf
 800a640:	0800a735 	.word	0x0800a735
 800a644:	0800a6c7 	.word	0x0800a6c7
 800a648:	0800a735 	.word	0x0800a735
 800a64c:	0800a735 	.word	0x0800a735
 800a650:	0800a735 	.word	0x0800a735
 800a654:	0800a6d7 	.word	0x0800a6d7
 800a658:	0800a735 	.word	0x0800a735
 800a65c:	0800a735 	.word	0x0800a735
 800a660:	0800a735 	.word	0x0800a735
 800a664:	0800a735 	.word	0x0800a735
 800a668:	0800a735 	.word	0x0800a735
 800a66c:	0800a735 	.word	0x0800a735
 800a670:	0800a735 	.word	0x0800a735
 800a674:	0800a6e7 	.word	0x0800a6e7
 800a678:	0800a735 	.word	0x0800a735
 800a67c:	0800a735 	.word	0x0800a735
 800a680:	0800a735 	.word	0x0800a735
 800a684:	0800a735 	.word	0x0800a735
 800a688:	0800a735 	.word	0x0800a735
 800a68c:	0800a735 	.word	0x0800a735
 800a690:	0800a735 	.word	0x0800a735
 800a694:	0800a735 	.word	0x0800a735
 800a698:	0800a735 	.word	0x0800a735
 800a69c:	0800a735 	.word	0x0800a735
 800a6a0:	0800a735 	.word	0x0800a735
 800a6a4:	0800a735 	.word	0x0800a735
 800a6a8:	0800a735 	.word	0x0800a735
 800a6ac:	0800a735 	.word	0x0800a735
 800a6b0:	0800a735 	.word	0x0800a735
 800a6b4:	0800a727 	.word	0x0800a727
 800a6b8:	2b40      	cmp	r3, #64	; 0x40
 800a6ba:	d037      	beq.n	800a72c <UART_SetConfig+0x6bc>
 800a6bc:	e03a      	b.n	800a734 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6be:	f7fe faa5 	bl	8008c0c <HAL_RCCEx_GetD3PCLK1Freq>
 800a6c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6c4:	e03c      	b.n	800a740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fab4 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d4:	e034      	b.n	800a740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6d6:	f107 0318 	add.w	r3, r7, #24
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fe fc00 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6e4:	e02c      	b.n	800a740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6e6:	4b09      	ldr	r3, [pc, #36]	; (800a70c <UART_SetConfig+0x69c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 0320 	and.w	r3, r3, #32
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d016      	beq.n	800a720 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6f2:	4b06      	ldr	r3, [pc, #24]	; (800a70c <UART_SetConfig+0x69c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	08db      	lsrs	r3, r3, #3
 800a6f8:	f003 0303 	and.w	r3, r3, #3
 800a6fc:	4a07      	ldr	r2, [pc, #28]	; (800a71c <UART_SetConfig+0x6ac>)
 800a6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a704:	e01c      	b.n	800a740 <UART_SetConfig+0x6d0>
 800a706:	bf00      	nop
 800a708:	40011400 	.word	0x40011400
 800a70c:	58024400 	.word	0x58024400
 800a710:	40007800 	.word	0x40007800
 800a714:	40007c00 	.word	0x40007c00
 800a718:	58000c00 	.word	0x58000c00
 800a71c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a720:	4b9d      	ldr	r3, [pc, #628]	; (800a998 <UART_SetConfig+0x928>)
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a724:	e00c      	b.n	800a740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a726:	4b9d      	ldr	r3, [pc, #628]	; (800a99c <UART_SetConfig+0x92c>)
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a72a:	e009      	b.n	800a740 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a72c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a732:	e005      	b.n	800a740 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a734:	2300      	movs	r3, #0
 800a736:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a73e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 81de 	beq.w	800ab04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	4a94      	ldr	r2, [pc, #592]	; (800a9a0 <UART_SetConfig+0x930>)
 800a74e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a752:	461a      	mov	r2, r3
 800a754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a756:	fbb3 f3f2 	udiv	r3, r3, r2
 800a75a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	4413      	add	r3, r2
 800a766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a768:	429a      	cmp	r2, r3
 800a76a:	d305      	bcc.n	800a778 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a774:	429a      	cmp	r2, r3
 800a776:	d903      	bls.n	800a780 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a77e:	e1c1      	b.n	800ab04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a782:	2200      	movs	r2, #0
 800a784:	60bb      	str	r3, [r7, #8]
 800a786:	60fa      	str	r2, [r7, #12]
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	4a84      	ldr	r2, [pc, #528]	; (800a9a0 <UART_SetConfig+0x930>)
 800a78e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a792:	b29b      	uxth	r3, r3
 800a794:	2200      	movs	r2, #0
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	607a      	str	r2, [r7, #4]
 800a79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a79e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7a2:	f7f5 fded 	bl	8000380 <__aeabi_uldivmod>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	f04f 0200 	mov.w	r2, #0
 800a7b2:	f04f 0300 	mov.w	r3, #0
 800a7b6:	020b      	lsls	r3, r1, #8
 800a7b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7bc:	0202      	lsls	r2, r0, #8
 800a7be:	6979      	ldr	r1, [r7, #20]
 800a7c0:	6849      	ldr	r1, [r1, #4]
 800a7c2:	0849      	lsrs	r1, r1, #1
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	eb12 0804 	adds.w	r8, r2, r4
 800a7ce:	eb43 0905 	adc.w	r9, r3, r5
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	469a      	mov	sl, r3
 800a7da:	4693      	mov	fp, r2
 800a7dc:	4652      	mov	r2, sl
 800a7de:	465b      	mov	r3, fp
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	f7f5 fdcc 	bl	8000380 <__aeabi_uldivmod>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7f6:	d308      	bcc.n	800a80a <UART_SetConfig+0x79a>
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7fe:	d204      	bcs.n	800a80a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a806:	60da      	str	r2, [r3, #12]
 800a808:	e17c      	b.n	800ab04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a810:	e178      	b.n	800ab04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	69db      	ldr	r3, [r3, #28]
 800a816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a81a:	f040 80c5 	bne.w	800a9a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a81e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a822:	2b20      	cmp	r3, #32
 800a824:	dc48      	bgt.n	800a8b8 <UART_SetConfig+0x848>
 800a826:	2b00      	cmp	r3, #0
 800a828:	db7b      	blt.n	800a922 <UART_SetConfig+0x8b2>
 800a82a:	2b20      	cmp	r3, #32
 800a82c:	d879      	bhi.n	800a922 <UART_SetConfig+0x8b2>
 800a82e:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <UART_SetConfig+0x7c4>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a8bf 	.word	0x0800a8bf
 800a838:	0800a8c7 	.word	0x0800a8c7
 800a83c:	0800a923 	.word	0x0800a923
 800a840:	0800a923 	.word	0x0800a923
 800a844:	0800a8cf 	.word	0x0800a8cf
 800a848:	0800a923 	.word	0x0800a923
 800a84c:	0800a923 	.word	0x0800a923
 800a850:	0800a923 	.word	0x0800a923
 800a854:	0800a8df 	.word	0x0800a8df
 800a858:	0800a923 	.word	0x0800a923
 800a85c:	0800a923 	.word	0x0800a923
 800a860:	0800a923 	.word	0x0800a923
 800a864:	0800a923 	.word	0x0800a923
 800a868:	0800a923 	.word	0x0800a923
 800a86c:	0800a923 	.word	0x0800a923
 800a870:	0800a923 	.word	0x0800a923
 800a874:	0800a8ef 	.word	0x0800a8ef
 800a878:	0800a923 	.word	0x0800a923
 800a87c:	0800a923 	.word	0x0800a923
 800a880:	0800a923 	.word	0x0800a923
 800a884:	0800a923 	.word	0x0800a923
 800a888:	0800a923 	.word	0x0800a923
 800a88c:	0800a923 	.word	0x0800a923
 800a890:	0800a923 	.word	0x0800a923
 800a894:	0800a923 	.word	0x0800a923
 800a898:	0800a923 	.word	0x0800a923
 800a89c:	0800a923 	.word	0x0800a923
 800a8a0:	0800a923 	.word	0x0800a923
 800a8a4:	0800a923 	.word	0x0800a923
 800a8a8:	0800a923 	.word	0x0800a923
 800a8ac:	0800a923 	.word	0x0800a923
 800a8b0:	0800a923 	.word	0x0800a923
 800a8b4:	0800a915 	.word	0x0800a915
 800a8b8:	2b40      	cmp	r3, #64	; 0x40
 800a8ba:	d02e      	beq.n	800a91a <UART_SetConfig+0x8aa>
 800a8bc:	e031      	b.n	800a922 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8be:	f7fc f9ef 	bl	8006ca0 <HAL_RCC_GetPCLK1Freq>
 800a8c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8c4:	e033      	b.n	800a92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8c6:	f7fc fa01 	bl	8006ccc <HAL_RCC_GetPCLK2Freq>
 800a8ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8cc:	e02f      	b.n	800a92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe f9b0 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8dc:	e027      	b.n	800a92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8de:	f107 0318 	add.w	r3, r7, #24
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe fafc 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ec:	e01f      	b.n	800a92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ee:	4b2d      	ldr	r3, [pc, #180]	; (800a9a4 <UART_SetConfig+0x934>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8fa:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <UART_SetConfig+0x934>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	08db      	lsrs	r3, r3, #3
 800a900:	f003 0303 	and.w	r3, r3, #3
 800a904:	4a24      	ldr	r2, [pc, #144]	; (800a998 <UART_SetConfig+0x928>)
 800a906:	fa22 f303 	lsr.w	r3, r2, r3
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a90c:	e00f      	b.n	800a92e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a90e:	4b22      	ldr	r3, [pc, #136]	; (800a998 <UART_SetConfig+0x928>)
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a912:	e00c      	b.n	800a92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a914:	4b21      	ldr	r3, [pc, #132]	; (800a99c <UART_SetConfig+0x92c>)
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a918:	e009      	b.n	800a92e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a91a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a920:	e005      	b.n	800a92e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a92c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 80e7 	beq.w	800ab04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93a:	4a19      	ldr	r2, [pc, #100]	; (800a9a0 <UART_SetConfig+0x930>)
 800a93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a940:	461a      	mov	r2, r3
 800a942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a944:	fbb3 f3f2 	udiv	r3, r3, r2
 800a948:	005a      	lsls	r2, r3, #1
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	085b      	lsrs	r3, r3, #1
 800a950:	441a      	add	r2, r3
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	fbb2 f3f3 	udiv	r3, r2, r3
 800a95a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	2b0f      	cmp	r3, #15
 800a960:	d916      	bls.n	800a990 <UART_SetConfig+0x920>
 800a962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a968:	d212      	bcs.n	800a990 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	f023 030f 	bic.w	r3, r3, #15
 800a972:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	085b      	lsrs	r3, r3, #1
 800a978:	b29b      	uxth	r3, r3
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	b29a      	uxth	r2, r3
 800a980:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a982:	4313      	orrs	r3, r2
 800a984:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a98c:	60da      	str	r2, [r3, #12]
 800a98e:	e0b9      	b.n	800ab04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a996:	e0b5      	b.n	800ab04 <UART_SetConfig+0xa94>
 800a998:	03d09000 	.word	0x03d09000
 800a99c:	003d0900 	.word	0x003d0900
 800a9a0:	0800befc 	.word	0x0800befc
 800a9a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9ac:	2b20      	cmp	r3, #32
 800a9ae:	dc49      	bgt.n	800aa44 <UART_SetConfig+0x9d4>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	db7c      	blt.n	800aaae <UART_SetConfig+0xa3e>
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	d87a      	bhi.n	800aaae <UART_SetConfig+0xa3e>
 800a9b8:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <UART_SetConfig+0x950>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800aa4b 	.word	0x0800aa4b
 800a9c4:	0800aa53 	.word	0x0800aa53
 800a9c8:	0800aaaf 	.word	0x0800aaaf
 800a9cc:	0800aaaf 	.word	0x0800aaaf
 800a9d0:	0800aa5b 	.word	0x0800aa5b
 800a9d4:	0800aaaf 	.word	0x0800aaaf
 800a9d8:	0800aaaf 	.word	0x0800aaaf
 800a9dc:	0800aaaf 	.word	0x0800aaaf
 800a9e0:	0800aa6b 	.word	0x0800aa6b
 800a9e4:	0800aaaf 	.word	0x0800aaaf
 800a9e8:	0800aaaf 	.word	0x0800aaaf
 800a9ec:	0800aaaf 	.word	0x0800aaaf
 800a9f0:	0800aaaf 	.word	0x0800aaaf
 800a9f4:	0800aaaf 	.word	0x0800aaaf
 800a9f8:	0800aaaf 	.word	0x0800aaaf
 800a9fc:	0800aaaf 	.word	0x0800aaaf
 800aa00:	0800aa7b 	.word	0x0800aa7b
 800aa04:	0800aaaf 	.word	0x0800aaaf
 800aa08:	0800aaaf 	.word	0x0800aaaf
 800aa0c:	0800aaaf 	.word	0x0800aaaf
 800aa10:	0800aaaf 	.word	0x0800aaaf
 800aa14:	0800aaaf 	.word	0x0800aaaf
 800aa18:	0800aaaf 	.word	0x0800aaaf
 800aa1c:	0800aaaf 	.word	0x0800aaaf
 800aa20:	0800aaaf 	.word	0x0800aaaf
 800aa24:	0800aaaf 	.word	0x0800aaaf
 800aa28:	0800aaaf 	.word	0x0800aaaf
 800aa2c:	0800aaaf 	.word	0x0800aaaf
 800aa30:	0800aaaf 	.word	0x0800aaaf
 800aa34:	0800aaaf 	.word	0x0800aaaf
 800aa38:	0800aaaf 	.word	0x0800aaaf
 800aa3c:	0800aaaf 	.word	0x0800aaaf
 800aa40:	0800aaa1 	.word	0x0800aaa1
 800aa44:	2b40      	cmp	r3, #64	; 0x40
 800aa46:	d02e      	beq.n	800aaa6 <UART_SetConfig+0xa36>
 800aa48:	e031      	b.n	800aaae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa4a:	f7fc f929 	bl	8006ca0 <HAL_RCC_GetPCLK1Freq>
 800aa4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa50:	e033      	b.n	800aaba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa52:	f7fc f93b 	bl	8006ccc <HAL_RCC_GetPCLK2Freq>
 800aa56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa58:	e02f      	b.n	800aaba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe f8ea 	bl	8008c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa68:	e027      	b.n	800aaba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa6a:	f107 0318 	add.w	r3, r7, #24
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fa36 	bl	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa78:	e01f      	b.n	800aaba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa7a:	4b2d      	ldr	r3, [pc, #180]	; (800ab30 <UART_SetConfig+0xac0>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0320 	and.w	r3, r3, #32
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d009      	beq.n	800aa9a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa86:	4b2a      	ldr	r3, [pc, #168]	; (800ab30 <UART_SetConfig+0xac0>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	08db      	lsrs	r3, r3, #3
 800aa8c:	f003 0303 	and.w	r3, r3, #3
 800aa90:	4a28      	ldr	r2, [pc, #160]	; (800ab34 <UART_SetConfig+0xac4>)
 800aa92:	fa22 f303 	lsr.w	r3, r2, r3
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa98:	e00f      	b.n	800aaba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aa9a:	4b26      	ldr	r3, [pc, #152]	; (800ab34 <UART_SetConfig+0xac4>)
 800aa9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa9e:	e00c      	b.n	800aaba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaa0:	4b25      	ldr	r3, [pc, #148]	; (800ab38 <UART_SetConfig+0xac8>)
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaa4:	e009      	b.n	800aaba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaac:	e005      	b.n	800aaba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aab8:	bf00      	nop
    }

    if (pclk != 0U)
 800aaba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d021      	beq.n	800ab04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	4a1d      	ldr	r2, [pc, #116]	; (800ab3c <UART_SetConfig+0xacc>)
 800aac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaca:	461a      	mov	r2, r3
 800aacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aace:	fbb3 f2f2 	udiv	r2, r3, r2
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	085b      	lsrs	r3, r3, #1
 800aad8:	441a      	add	r2, r3
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	2b0f      	cmp	r3, #15
 800aae8:	d909      	bls.n	800aafe <UART_SetConfig+0xa8e>
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf0:	d205      	bcs.n	800aafe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60da      	str	r2, [r3, #12]
 800aafc:	e002      	b.n	800ab04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	2200      	movs	r2, #0
 800ab18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ab20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3748      	adds	r7, #72	; 0x48
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab2e:	bf00      	nop
 800ab30:	58024400 	.word	0x58024400
 800ab34:	03d09000 	.word	0x03d09000
 800ab38:	003d0900 	.word	0x003d0900
 800ab3c:	0800befc 	.word	0x0800befc

0800ab40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4c:	f003 0301 	and.w	r3, r3, #1
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00a      	beq.n	800ab6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	430a      	orrs	r2, r1
 800ab68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6e:	f003 0302 	and.w	r3, r3, #2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00a      	beq.n	800ab8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00a      	beq.n	800abae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb2:	f003 0308 	and.w	r3, r3, #8
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd4:	f003 0310 	and.w	r3, r3, #16
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00a      	beq.n	800abf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	430a      	orrs	r2, r1
 800abf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf6:	f003 0320 	and.w	r3, r3, #32
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01a      	beq.n	800ac56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac3e:	d10a      	bne.n	800ac56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00a      	beq.n	800ac78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	430a      	orrs	r2, r1
 800ac76:	605a      	str	r2, [r3, #4]
  }
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b098      	sub	sp, #96	; 0x60
 800ac88:	af02      	add	r7, sp, #8
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac94:	f7f6 fc02 	bl	800149c <HAL_GetTick>
 800ac98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0308 	and.w	r3, r3, #8
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d12f      	bne.n	800ad08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acb0:	2200      	movs	r2, #0
 800acb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f88e 	bl	800add8 <UART_WaitOnFlagUntilTimeout>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d022      	beq.n	800ad08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acd6:	653b      	str	r3, [r7, #80]	; 0x50
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	461a      	mov	r2, r3
 800acde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ace0:	647b      	str	r3, [r7, #68]	; 0x44
 800ace2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ace6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ace8:	e841 2300 	strex	r3, r2, [r1]
 800acec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e6      	bne.n	800acc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2220      	movs	r2, #32
 800acf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e063      	b.n	800add0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0304 	and.w	r3, r3, #4
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d149      	bne.n	800adaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f857 	bl	800add8 <UART_WaitOnFlagUntilTimeout>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d03c      	beq.n	800adaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	e853 3f00 	ldrex	r3, [r3]
 800ad3c:	623b      	str	r3, [r7, #32]
   return(result);
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad4e:	633b      	str	r3, [r7, #48]	; 0x30
 800ad50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad56:	e841 2300 	strex	r3, r2, [r1]
 800ad5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1e6      	bne.n	800ad30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	3308      	adds	r3, #8
 800ad68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	e853 3f00 	ldrex	r3, [r3]
 800ad70:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f023 0301 	bic.w	r3, r3, #1
 800ad78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3308      	adds	r3, #8
 800ad80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad82:	61fa      	str	r2, [r7, #28]
 800ad84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad86:	69b9      	ldr	r1, [r7, #24]
 800ad88:	69fa      	ldr	r2, [r7, #28]
 800ad8a:	e841 2300 	strex	r3, r2, [r1]
 800ad8e:	617b      	str	r3, [r7, #20]
   return(result);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1e5      	bne.n	800ad62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e012      	b.n	800add0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2220      	movs	r2, #32
 800adae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2220      	movs	r2, #32
 800adb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3758      	adds	r7, #88	; 0x58
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	4613      	mov	r3, r2
 800ade6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade8:	e049      	b.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf0:	d045      	beq.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adf2:	f7f6 fb53 	bl	800149c <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d302      	bcc.n	800ae08 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e048      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 0304 	and.w	r3, r3, #4
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d031      	beq.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	d110      	bne.n	800ae4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2208      	movs	r2, #8
 800ae2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 f839 	bl	800aea8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2208      	movs	r2, #8
 800ae3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e029      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae58:	d111      	bne.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 f81f 	bl	800aea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e00f      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69da      	ldr	r2, [r3, #28]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4013      	ands	r3, r2
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	bf0c      	ite	eq
 800ae8e:	2301      	moveq	r3, #1
 800ae90:	2300      	movne	r3, #0
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	461a      	mov	r2, r3
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d0a6      	beq.n	800adea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b095      	sub	sp, #84	; 0x54
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aec4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aece:	643b      	str	r3, [r7, #64]	; 0x40
 800aed0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aed4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aed6:	e841 2300 	strex	r3, r2, [r1]
 800aeda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e6      	bne.n	800aeb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	3308      	adds	r3, #8
 800aee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	e853 3f00 	ldrex	r3, [r3]
 800aef0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	4b1e      	ldr	r3, [pc, #120]	; (800af70 <UART_EndRxTransfer+0xc8>)
 800aef6:	4013      	ands	r3, r2
 800aef8:	64bb      	str	r3, [r7, #72]	; 0x48
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	3308      	adds	r3, #8
 800af00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af02:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af0a:	e841 2300 	strex	r3, r2, [r1]
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1e5      	bne.n	800aee2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d118      	bne.n	800af50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	f023 0310 	bic.w	r3, r3, #16
 800af32:	647b      	str	r3, [r7, #68]	; 0x44
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	461a      	mov	r2, r3
 800af3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af3c:	61bb      	str	r3, [r7, #24]
 800af3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	6979      	ldr	r1, [r7, #20]
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	613b      	str	r3, [r7, #16]
   return(result);
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e6      	bne.n	800af1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2220      	movs	r2, #32
 800af54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	675a      	str	r2, [r3, #116]	; 0x74
}
 800af64:	bf00      	nop
 800af66:	3754      	adds	r7, #84	; 0x54
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	effffffe 	.word	0xeffffffe

0800af74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7ff f856 	bl	800a044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af98:	bf00      	nop
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b08f      	sub	sp, #60	; 0x3c
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afae:	2b21      	cmp	r3, #33	; 0x21
 800afb0:	d14c      	bne.n	800b04c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800afb8:	b29b      	uxth	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d132      	bne.n	800b024 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	61fb      	str	r3, [r7, #28]
   return(result);
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afd2:	637b      	str	r3, [r7, #52]	; 0x34
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	461a      	mov	r2, r3
 800afda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afde:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afe4:	e841 2300 	strex	r3, r2, [r1]
 800afe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e6      	bne.n	800afbe <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	60bb      	str	r3, [r7, #8]
   return(result);
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b004:	633b      	str	r3, [r7, #48]	; 0x30
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	61bb      	str	r3, [r7, #24]
 800b010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	6979      	ldr	r1, [r7, #20]
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	613b      	str	r3, [r7, #16]
   return(result);
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e6      	bne.n	800aff0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b022:	e013      	b.n	800b04c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b028:	781a      	ldrb	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b040:	b29b      	uxth	r3, r3
 800b042:	3b01      	subs	r3, #1
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b04c:	bf00      	nop
 800b04e:	373c      	adds	r7, #60	; 0x3c
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b058:	b480      	push	{r7}
 800b05a:	b091      	sub	sp, #68	; 0x44
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b066:	2b21      	cmp	r3, #33	; 0x21
 800b068:	d151      	bne.n	800b10e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b070:	b29b      	uxth	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	d132      	bne.n	800b0dc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	e853 3f00 	ldrex	r3, [r3]
 800b082:	623b      	str	r3, [r7, #32]
   return(result);
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b08a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	461a      	mov	r2, r3
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	633b      	str	r3, [r7, #48]	; 0x30
 800b096:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b09a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b09c:	e841 2300 	strex	r3, r2, [r1]
 800b0a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e6      	bne.n	800b076 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	e853 3f00 	ldrex	r3, [r3]
 800b0b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c6:	61fb      	str	r3, [r7, #28]
 800b0c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ca:	69b9      	ldr	r1, [r7, #24]
 800b0cc:	69fa      	ldr	r2, [r7, #28]
 800b0ce:	e841 2300 	strex	r3, r2, [r1]
 800b0d2:	617b      	str	r3, [r7, #20]
   return(result);
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1e6      	bne.n	800b0a8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b0da:	e018      	b.n	800b10e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0f0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f6:	1c9a      	adds	r2, r3, #2
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b102:	b29b      	uxth	r3, r3
 800b104:	3b01      	subs	r3, #1
 800b106:	b29a      	uxth	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b10e:	bf00      	nop
 800b110:	3744      	adds	r7, #68	; 0x44
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b091      	sub	sp, #68	; 0x44
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b128:	2b21      	cmp	r3, #33	; 0x21
 800b12a:	d160      	bne.n	800b1ee <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b132:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b134:	e057      	b.n	800b1e6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d133      	bne.n	800b1aa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3308      	adds	r3, #8
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	e853 3f00 	ldrex	r3, [r3]
 800b150:	623b      	str	r3, [r7, #32]
   return(result);
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b158:	63bb      	str	r3, [r7, #56]	; 0x38
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3308      	adds	r3, #8
 800b160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b162:	633a      	str	r2, [r7, #48]	; 0x30
 800b164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b16a:	e841 2300 	strex	r3, r2, [r1]
 800b16e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1e5      	bne.n	800b142 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	e853 3f00 	ldrex	r3, [r3]
 800b182:	60fb      	str	r3, [r7, #12]
   return(result);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b18a:	637b      	str	r3, [r7, #52]	; 0x34
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	461a      	mov	r2, r3
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	61fb      	str	r3, [r7, #28]
 800b196:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	69b9      	ldr	r1, [r7, #24]
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	e841 2300 	strex	r3, r2, [r1]
 800b1a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e6      	bne.n	800b176 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b1a8:	e021      	b.n	800b1ee <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d013      	beq.n	800b1e0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1bc:	781a      	ldrb	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b1e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b1e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1a4      	bne.n	800b136 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b1ec:	e7ff      	b.n	800b1ee <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b1ee:	bf00      	nop
 800b1f0:	3744      	adds	r7, #68	; 0x44
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b091      	sub	sp, #68	; 0x44
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b208:	2b21      	cmp	r3, #33	; 0x21
 800b20a:	d165      	bne.n	800b2d8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b212:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b214:	e05c      	b.n	800b2d0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d133      	bne.n	800b28a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3308      	adds	r3, #8
 800b228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	61fb      	str	r3, [r7, #28]
   return(result);
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b238:	637b      	str	r3, [r7, #52]	; 0x34
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3308      	adds	r3, #8
 800b240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b242:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b24a:	e841 2300 	strex	r3, r2, [r1]
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1e5      	bne.n	800b222 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	60bb      	str	r3, [r7, #8]
   return(result);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b26a:	633b      	str	r3, [r7, #48]	; 0x30
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	461a      	mov	r2, r3
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	61bb      	str	r3, [r7, #24]
 800b276:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	6979      	ldr	r1, [r7, #20]
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	613b      	str	r3, [r7, #16]
   return(result);
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e6      	bne.n	800b256 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b288:	e026      	b.n	800b2d8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b294:	2b00      	cmp	r3, #0
 800b296:	d018      	beq.n	800b2ca <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b29c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2ac:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b2:	1c9a      	adds	r2, r3, #2
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b2ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b2d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d19f      	bne.n	800b216 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b2d6:	e7ff      	b.n	800b2d8 <UART_TxISR_16BIT_FIFOEN+0xde>
 800b2d8:	bf00      	nop
 800b2da:	3744      	adds	r7, #68	; 0x44
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	61bb      	str	r3, [r7, #24]
 800b30c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	6979      	ldr	r1, [r7, #20]
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	613b      	str	r3, [r7, #16]
   return(result);
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e6      	bne.n	800b2ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2220      	movs	r2, #32
 800b322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7fe fe7f 	bl	800a030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b332:	bf00      	nop
 800b334:	3720      	adds	r7, #32
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b342:	bf00      	nop
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b376:	b480      	push	{r7}
 800b378:	b085      	sub	sp, #20
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b384:	2b01      	cmp	r3, #1
 800b386:	d101      	bne.n	800b38c <HAL_UARTEx_DisableFifoMode+0x16>
 800b388:	2302      	movs	r3, #2
 800b38a:	e027      	b.n	800b3dc <HAL_UARTEx_DisableFifoMode+0x66>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2224      	movs	r2, #36	; 0x24
 800b398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f022 0201 	bic.w	r2, r2, #1
 800b3b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d101      	bne.n	800b400 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	e02d      	b.n	800b45c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2224      	movs	r2, #36	; 0x24
 800b40c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f022 0201 	bic.w	r2, r2, #1
 800b426:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f84f 	bl	800b4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2220      	movs	r2, #32
 800b44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b474:	2b01      	cmp	r3, #1
 800b476:	d101      	bne.n	800b47c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b478:	2302      	movs	r3, #2
 800b47a:	e02d      	b.n	800b4d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2224      	movs	r2, #36	; 0x24
 800b488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f022 0201 	bic.w	r2, r2, #1
 800b4a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f811 	bl	800b4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d108      	bne.n	800b502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b500:	e031      	b.n	800b566 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b502:	2310      	movs	r3, #16
 800b504:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b506:	2310      	movs	r3, #16
 800b508:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	0e5b      	lsrs	r3, r3, #25
 800b512:	b2db      	uxtb	r3, r3
 800b514:	f003 0307 	and.w	r3, r3, #7
 800b518:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	0f5b      	lsrs	r3, r3, #29
 800b522:	b2db      	uxtb	r3, r3
 800b524:	f003 0307 	and.w	r3, r3, #7
 800b528:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	7b3a      	ldrb	r2, [r7, #12]
 800b52e:	4911      	ldr	r1, [pc, #68]	; (800b574 <UARTEx_SetNbDataToProcess+0x94>)
 800b530:	5c8a      	ldrb	r2, [r1, r2]
 800b532:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b536:	7b3a      	ldrb	r2, [r7, #12]
 800b538:	490f      	ldr	r1, [pc, #60]	; (800b578 <UARTEx_SetNbDataToProcess+0x98>)
 800b53a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b53c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b540:	b29a      	uxth	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	7b7a      	ldrb	r2, [r7, #13]
 800b54c:	4909      	ldr	r1, [pc, #36]	; (800b574 <UARTEx_SetNbDataToProcess+0x94>)
 800b54e:	5c8a      	ldrb	r2, [r1, r2]
 800b550:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b554:	7b7a      	ldrb	r2, [r7, #13]
 800b556:	4908      	ldr	r1, [pc, #32]	; (800b578 <UARTEx_SetNbDataToProcess+0x98>)
 800b558:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b55a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b55e:	b29a      	uxth	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b566:	bf00      	nop
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	0800bf14 	.word	0x0800bf14
 800b578:	0800bf1c 	.word	0x0800bf1c

0800b57c <__errno>:
 800b57c:	4b01      	ldr	r3, [pc, #4]	; (800b584 <__errno+0x8>)
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	24000010 	.word	0x24000010

0800b588 <__libc_init_array>:
 800b588:	b570      	push	{r4, r5, r6, lr}
 800b58a:	4d0d      	ldr	r5, [pc, #52]	; (800b5c0 <__libc_init_array+0x38>)
 800b58c:	4c0d      	ldr	r4, [pc, #52]	; (800b5c4 <__libc_init_array+0x3c>)
 800b58e:	1b64      	subs	r4, r4, r5
 800b590:	10a4      	asrs	r4, r4, #2
 800b592:	2600      	movs	r6, #0
 800b594:	42a6      	cmp	r6, r4
 800b596:	d109      	bne.n	800b5ac <__libc_init_array+0x24>
 800b598:	4d0b      	ldr	r5, [pc, #44]	; (800b5c8 <__libc_init_array+0x40>)
 800b59a:	4c0c      	ldr	r4, [pc, #48]	; (800b5cc <__libc_init_array+0x44>)
 800b59c:	f000 fc8e 	bl	800bebc <_init>
 800b5a0:	1b64      	subs	r4, r4, r5
 800b5a2:	10a4      	asrs	r4, r4, #2
 800b5a4:	2600      	movs	r6, #0
 800b5a6:	42a6      	cmp	r6, r4
 800b5a8:	d105      	bne.n	800b5b6 <__libc_init_array+0x2e>
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b0:	4798      	blx	r3
 800b5b2:	3601      	adds	r6, #1
 800b5b4:	e7ee      	b.n	800b594 <__libc_init_array+0xc>
 800b5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ba:	4798      	blx	r3
 800b5bc:	3601      	adds	r6, #1
 800b5be:	e7f2      	b.n	800b5a6 <__libc_init_array+0x1e>
 800b5c0:	0800bf60 	.word	0x0800bf60
 800b5c4:	0800bf60 	.word	0x0800bf60
 800b5c8:	0800bf60 	.word	0x0800bf60
 800b5cc:	0800bf64 	.word	0x0800bf64

0800b5d0 <memset>:
 800b5d0:	4402      	add	r2, r0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d100      	bne.n	800b5da <memset+0xa>
 800b5d8:	4770      	bx	lr
 800b5da:	f803 1b01 	strb.w	r1, [r3], #1
 800b5de:	e7f9      	b.n	800b5d4 <memset+0x4>

0800b5e0 <siprintf>:
 800b5e0:	b40e      	push	{r1, r2, r3}
 800b5e2:	b500      	push	{lr}
 800b5e4:	b09c      	sub	sp, #112	; 0x70
 800b5e6:	ab1d      	add	r3, sp, #116	; 0x74
 800b5e8:	9002      	str	r0, [sp, #8]
 800b5ea:	9006      	str	r0, [sp, #24]
 800b5ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5f0:	4809      	ldr	r0, [pc, #36]	; (800b618 <siprintf+0x38>)
 800b5f2:	9107      	str	r1, [sp, #28]
 800b5f4:	9104      	str	r1, [sp, #16]
 800b5f6:	4909      	ldr	r1, [pc, #36]	; (800b61c <siprintf+0x3c>)
 800b5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fc:	9105      	str	r1, [sp, #20]
 800b5fe:	6800      	ldr	r0, [r0, #0]
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	a902      	add	r1, sp, #8
 800b604:	f000 f868 	bl	800b6d8 <_svfiprintf_r>
 800b608:	9b02      	ldr	r3, [sp, #8]
 800b60a:	2200      	movs	r2, #0
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	b01c      	add	sp, #112	; 0x70
 800b610:	f85d eb04 	ldr.w	lr, [sp], #4
 800b614:	b003      	add	sp, #12
 800b616:	4770      	bx	lr
 800b618:	24000010 	.word	0x24000010
 800b61c:	ffff0208 	.word	0xffff0208

0800b620 <__ssputs_r>:
 800b620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b624:	688e      	ldr	r6, [r1, #8]
 800b626:	429e      	cmp	r6, r3
 800b628:	4682      	mov	sl, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	4690      	mov	r8, r2
 800b62e:	461f      	mov	r7, r3
 800b630:	d838      	bhi.n	800b6a4 <__ssputs_r+0x84>
 800b632:	898a      	ldrh	r2, [r1, #12]
 800b634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b638:	d032      	beq.n	800b6a0 <__ssputs_r+0x80>
 800b63a:	6825      	ldr	r5, [r4, #0]
 800b63c:	6909      	ldr	r1, [r1, #16]
 800b63e:	eba5 0901 	sub.w	r9, r5, r1
 800b642:	6965      	ldr	r5, [r4, #20]
 800b644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b64c:	3301      	adds	r3, #1
 800b64e:	444b      	add	r3, r9
 800b650:	106d      	asrs	r5, r5, #1
 800b652:	429d      	cmp	r5, r3
 800b654:	bf38      	it	cc
 800b656:	461d      	movcc	r5, r3
 800b658:	0553      	lsls	r3, r2, #21
 800b65a:	d531      	bpl.n	800b6c0 <__ssputs_r+0xa0>
 800b65c:	4629      	mov	r1, r5
 800b65e:	f000 fb63 	bl	800bd28 <_malloc_r>
 800b662:	4606      	mov	r6, r0
 800b664:	b950      	cbnz	r0, 800b67c <__ssputs_r+0x5c>
 800b666:	230c      	movs	r3, #12
 800b668:	f8ca 3000 	str.w	r3, [sl]
 800b66c:	89a3      	ldrh	r3, [r4, #12]
 800b66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b672:	81a3      	strh	r3, [r4, #12]
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67c:	6921      	ldr	r1, [r4, #16]
 800b67e:	464a      	mov	r2, r9
 800b680:	f000 fabe 	bl	800bc00 <memcpy>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b68a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	6126      	str	r6, [r4, #16]
 800b692:	6165      	str	r5, [r4, #20]
 800b694:	444e      	add	r6, r9
 800b696:	eba5 0509 	sub.w	r5, r5, r9
 800b69a:	6026      	str	r6, [r4, #0]
 800b69c:	60a5      	str	r5, [r4, #8]
 800b69e:	463e      	mov	r6, r7
 800b6a0:	42be      	cmp	r6, r7
 800b6a2:	d900      	bls.n	800b6a6 <__ssputs_r+0x86>
 800b6a4:	463e      	mov	r6, r7
 800b6a6:	6820      	ldr	r0, [r4, #0]
 800b6a8:	4632      	mov	r2, r6
 800b6aa:	4641      	mov	r1, r8
 800b6ac:	f000 fab6 	bl	800bc1c <memmove>
 800b6b0:	68a3      	ldr	r3, [r4, #8]
 800b6b2:	1b9b      	subs	r3, r3, r6
 800b6b4:	60a3      	str	r3, [r4, #8]
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	4433      	add	r3, r6
 800b6ba:	6023      	str	r3, [r4, #0]
 800b6bc:	2000      	movs	r0, #0
 800b6be:	e7db      	b.n	800b678 <__ssputs_r+0x58>
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	f000 fba5 	bl	800be10 <_realloc_r>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d1e1      	bne.n	800b690 <__ssputs_r+0x70>
 800b6cc:	6921      	ldr	r1, [r4, #16]
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	f000 fabe 	bl	800bc50 <_free_r>
 800b6d4:	e7c7      	b.n	800b666 <__ssputs_r+0x46>
	...

0800b6d8 <_svfiprintf_r>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	4698      	mov	r8, r3
 800b6de:	898b      	ldrh	r3, [r1, #12]
 800b6e0:	061b      	lsls	r3, r3, #24
 800b6e2:	b09d      	sub	sp, #116	; 0x74
 800b6e4:	4607      	mov	r7, r0
 800b6e6:	460d      	mov	r5, r1
 800b6e8:	4614      	mov	r4, r2
 800b6ea:	d50e      	bpl.n	800b70a <_svfiprintf_r+0x32>
 800b6ec:	690b      	ldr	r3, [r1, #16]
 800b6ee:	b963      	cbnz	r3, 800b70a <_svfiprintf_r+0x32>
 800b6f0:	2140      	movs	r1, #64	; 0x40
 800b6f2:	f000 fb19 	bl	800bd28 <_malloc_r>
 800b6f6:	6028      	str	r0, [r5, #0]
 800b6f8:	6128      	str	r0, [r5, #16]
 800b6fa:	b920      	cbnz	r0, 800b706 <_svfiprintf_r+0x2e>
 800b6fc:	230c      	movs	r3, #12
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	f04f 30ff 	mov.w	r0, #4294967295
 800b704:	e0d1      	b.n	800b8aa <_svfiprintf_r+0x1d2>
 800b706:	2340      	movs	r3, #64	; 0x40
 800b708:	616b      	str	r3, [r5, #20]
 800b70a:	2300      	movs	r3, #0
 800b70c:	9309      	str	r3, [sp, #36]	; 0x24
 800b70e:	2320      	movs	r3, #32
 800b710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b714:	f8cd 800c 	str.w	r8, [sp, #12]
 800b718:	2330      	movs	r3, #48	; 0x30
 800b71a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8c4 <_svfiprintf_r+0x1ec>
 800b71e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b722:	f04f 0901 	mov.w	r9, #1
 800b726:	4623      	mov	r3, r4
 800b728:	469a      	mov	sl, r3
 800b72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b72e:	b10a      	cbz	r2, 800b734 <_svfiprintf_r+0x5c>
 800b730:	2a25      	cmp	r2, #37	; 0x25
 800b732:	d1f9      	bne.n	800b728 <_svfiprintf_r+0x50>
 800b734:	ebba 0b04 	subs.w	fp, sl, r4
 800b738:	d00b      	beq.n	800b752 <_svfiprintf_r+0x7a>
 800b73a:	465b      	mov	r3, fp
 800b73c:	4622      	mov	r2, r4
 800b73e:	4629      	mov	r1, r5
 800b740:	4638      	mov	r0, r7
 800b742:	f7ff ff6d 	bl	800b620 <__ssputs_r>
 800b746:	3001      	adds	r0, #1
 800b748:	f000 80aa 	beq.w	800b8a0 <_svfiprintf_r+0x1c8>
 800b74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b74e:	445a      	add	r2, fp
 800b750:	9209      	str	r2, [sp, #36]	; 0x24
 800b752:	f89a 3000 	ldrb.w	r3, [sl]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 80a2 	beq.w	800b8a0 <_svfiprintf_r+0x1c8>
 800b75c:	2300      	movs	r3, #0
 800b75e:	f04f 32ff 	mov.w	r2, #4294967295
 800b762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b766:	f10a 0a01 	add.w	sl, sl, #1
 800b76a:	9304      	str	r3, [sp, #16]
 800b76c:	9307      	str	r3, [sp, #28]
 800b76e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b772:	931a      	str	r3, [sp, #104]	; 0x68
 800b774:	4654      	mov	r4, sl
 800b776:	2205      	movs	r2, #5
 800b778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77c:	4851      	ldr	r0, [pc, #324]	; (800b8c4 <_svfiprintf_r+0x1ec>)
 800b77e:	f7f4 fdaf 	bl	80002e0 <memchr>
 800b782:	9a04      	ldr	r2, [sp, #16]
 800b784:	b9d8      	cbnz	r0, 800b7be <_svfiprintf_r+0xe6>
 800b786:	06d0      	lsls	r0, r2, #27
 800b788:	bf44      	itt	mi
 800b78a:	2320      	movmi	r3, #32
 800b78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b790:	0711      	lsls	r1, r2, #28
 800b792:	bf44      	itt	mi
 800b794:	232b      	movmi	r3, #43	; 0x2b
 800b796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b79a:	f89a 3000 	ldrb.w	r3, [sl]
 800b79e:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a0:	d015      	beq.n	800b7ce <_svfiprintf_r+0xf6>
 800b7a2:	9a07      	ldr	r2, [sp, #28]
 800b7a4:	4654      	mov	r4, sl
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	f04f 0c0a 	mov.w	ip, #10
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7b2:	3b30      	subs	r3, #48	; 0x30
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d94e      	bls.n	800b856 <_svfiprintf_r+0x17e>
 800b7b8:	b1b0      	cbz	r0, 800b7e8 <_svfiprintf_r+0x110>
 800b7ba:	9207      	str	r2, [sp, #28]
 800b7bc:	e014      	b.n	800b7e8 <_svfiprintf_r+0x110>
 800b7be:	eba0 0308 	sub.w	r3, r0, r8
 800b7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	9304      	str	r3, [sp, #16]
 800b7ca:	46a2      	mov	sl, r4
 800b7cc:	e7d2      	b.n	800b774 <_svfiprintf_r+0x9c>
 800b7ce:	9b03      	ldr	r3, [sp, #12]
 800b7d0:	1d19      	adds	r1, r3, #4
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	9103      	str	r1, [sp, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	bfbb      	ittet	lt
 800b7da:	425b      	neglt	r3, r3
 800b7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b7e0:	9307      	strge	r3, [sp, #28]
 800b7e2:	9307      	strlt	r3, [sp, #28]
 800b7e4:	bfb8      	it	lt
 800b7e6:	9204      	strlt	r2, [sp, #16]
 800b7e8:	7823      	ldrb	r3, [r4, #0]
 800b7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b7ec:	d10c      	bne.n	800b808 <_svfiprintf_r+0x130>
 800b7ee:	7863      	ldrb	r3, [r4, #1]
 800b7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f2:	d135      	bne.n	800b860 <_svfiprintf_r+0x188>
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	1d1a      	adds	r2, r3, #4
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	9203      	str	r2, [sp, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	bfb8      	it	lt
 800b800:	f04f 33ff 	movlt.w	r3, #4294967295
 800b804:	3402      	adds	r4, #2
 800b806:	9305      	str	r3, [sp, #20]
 800b808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8d4 <_svfiprintf_r+0x1fc>
 800b80c:	7821      	ldrb	r1, [r4, #0]
 800b80e:	2203      	movs	r2, #3
 800b810:	4650      	mov	r0, sl
 800b812:	f7f4 fd65 	bl	80002e0 <memchr>
 800b816:	b140      	cbz	r0, 800b82a <_svfiprintf_r+0x152>
 800b818:	2340      	movs	r3, #64	; 0x40
 800b81a:	eba0 000a 	sub.w	r0, r0, sl
 800b81e:	fa03 f000 	lsl.w	r0, r3, r0
 800b822:	9b04      	ldr	r3, [sp, #16]
 800b824:	4303      	orrs	r3, r0
 800b826:	3401      	adds	r4, #1
 800b828:	9304      	str	r3, [sp, #16]
 800b82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82e:	4826      	ldr	r0, [pc, #152]	; (800b8c8 <_svfiprintf_r+0x1f0>)
 800b830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b834:	2206      	movs	r2, #6
 800b836:	f7f4 fd53 	bl	80002e0 <memchr>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d038      	beq.n	800b8b0 <_svfiprintf_r+0x1d8>
 800b83e:	4b23      	ldr	r3, [pc, #140]	; (800b8cc <_svfiprintf_r+0x1f4>)
 800b840:	bb1b      	cbnz	r3, 800b88a <_svfiprintf_r+0x1b2>
 800b842:	9b03      	ldr	r3, [sp, #12]
 800b844:	3307      	adds	r3, #7
 800b846:	f023 0307 	bic.w	r3, r3, #7
 800b84a:	3308      	adds	r3, #8
 800b84c:	9303      	str	r3, [sp, #12]
 800b84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b850:	4433      	add	r3, r6
 800b852:	9309      	str	r3, [sp, #36]	; 0x24
 800b854:	e767      	b.n	800b726 <_svfiprintf_r+0x4e>
 800b856:	fb0c 3202 	mla	r2, ip, r2, r3
 800b85a:	460c      	mov	r4, r1
 800b85c:	2001      	movs	r0, #1
 800b85e:	e7a5      	b.n	800b7ac <_svfiprintf_r+0xd4>
 800b860:	2300      	movs	r3, #0
 800b862:	3401      	adds	r4, #1
 800b864:	9305      	str	r3, [sp, #20]
 800b866:	4619      	mov	r1, r3
 800b868:	f04f 0c0a 	mov.w	ip, #10
 800b86c:	4620      	mov	r0, r4
 800b86e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b872:	3a30      	subs	r2, #48	; 0x30
 800b874:	2a09      	cmp	r2, #9
 800b876:	d903      	bls.n	800b880 <_svfiprintf_r+0x1a8>
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d0c5      	beq.n	800b808 <_svfiprintf_r+0x130>
 800b87c:	9105      	str	r1, [sp, #20]
 800b87e:	e7c3      	b.n	800b808 <_svfiprintf_r+0x130>
 800b880:	fb0c 2101 	mla	r1, ip, r1, r2
 800b884:	4604      	mov	r4, r0
 800b886:	2301      	movs	r3, #1
 800b888:	e7f0      	b.n	800b86c <_svfiprintf_r+0x194>
 800b88a:	ab03      	add	r3, sp, #12
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	462a      	mov	r2, r5
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <_svfiprintf_r+0x1f8>)
 800b892:	a904      	add	r1, sp, #16
 800b894:	4638      	mov	r0, r7
 800b896:	f3af 8000 	nop.w
 800b89a:	1c42      	adds	r2, r0, #1
 800b89c:	4606      	mov	r6, r0
 800b89e:	d1d6      	bne.n	800b84e <_svfiprintf_r+0x176>
 800b8a0:	89ab      	ldrh	r3, [r5, #12]
 800b8a2:	065b      	lsls	r3, r3, #25
 800b8a4:	f53f af2c 	bmi.w	800b700 <_svfiprintf_r+0x28>
 800b8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8aa:	b01d      	add	sp, #116	; 0x74
 800b8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b0:	ab03      	add	r3, sp, #12
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <_svfiprintf_r+0x1f8>)
 800b8b8:	a904      	add	r1, sp, #16
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	f000 f87a 	bl	800b9b4 <_printf_i>
 800b8c0:	e7eb      	b.n	800b89a <_svfiprintf_r+0x1c2>
 800b8c2:	bf00      	nop
 800b8c4:	0800bf24 	.word	0x0800bf24
 800b8c8:	0800bf2e 	.word	0x0800bf2e
 800b8cc:	00000000 	.word	0x00000000
 800b8d0:	0800b621 	.word	0x0800b621
 800b8d4:	0800bf2a 	.word	0x0800bf2a

0800b8d8 <_printf_common>:
 800b8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8dc:	4616      	mov	r6, r2
 800b8de:	4699      	mov	r9, r3
 800b8e0:	688a      	ldr	r2, [r1, #8]
 800b8e2:	690b      	ldr	r3, [r1, #16]
 800b8e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	bfb8      	it	lt
 800b8ec:	4613      	movlt	r3, r2
 800b8ee:	6033      	str	r3, [r6, #0]
 800b8f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	b10a      	cbz	r2, 800b8fe <_printf_common+0x26>
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	6033      	str	r3, [r6, #0]
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	0699      	lsls	r1, r3, #26
 800b902:	bf42      	ittt	mi
 800b904:	6833      	ldrmi	r3, [r6, #0]
 800b906:	3302      	addmi	r3, #2
 800b908:	6033      	strmi	r3, [r6, #0]
 800b90a:	6825      	ldr	r5, [r4, #0]
 800b90c:	f015 0506 	ands.w	r5, r5, #6
 800b910:	d106      	bne.n	800b920 <_printf_common+0x48>
 800b912:	f104 0a19 	add.w	sl, r4, #25
 800b916:	68e3      	ldr	r3, [r4, #12]
 800b918:	6832      	ldr	r2, [r6, #0]
 800b91a:	1a9b      	subs	r3, r3, r2
 800b91c:	42ab      	cmp	r3, r5
 800b91e:	dc26      	bgt.n	800b96e <_printf_common+0x96>
 800b920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b924:	1e13      	subs	r3, r2, #0
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	bf18      	it	ne
 800b92a:	2301      	movne	r3, #1
 800b92c:	0692      	lsls	r2, r2, #26
 800b92e:	d42b      	bmi.n	800b988 <_printf_common+0xb0>
 800b930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b934:	4649      	mov	r1, r9
 800b936:	4638      	mov	r0, r7
 800b938:	47c0      	blx	r8
 800b93a:	3001      	adds	r0, #1
 800b93c:	d01e      	beq.n	800b97c <_printf_common+0xa4>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	68e5      	ldr	r5, [r4, #12]
 800b942:	6832      	ldr	r2, [r6, #0]
 800b944:	f003 0306 	and.w	r3, r3, #6
 800b948:	2b04      	cmp	r3, #4
 800b94a:	bf08      	it	eq
 800b94c:	1aad      	subeq	r5, r5, r2
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	6922      	ldr	r2, [r4, #16]
 800b952:	bf0c      	ite	eq
 800b954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b958:	2500      	movne	r5, #0
 800b95a:	4293      	cmp	r3, r2
 800b95c:	bfc4      	itt	gt
 800b95e:	1a9b      	subgt	r3, r3, r2
 800b960:	18ed      	addgt	r5, r5, r3
 800b962:	2600      	movs	r6, #0
 800b964:	341a      	adds	r4, #26
 800b966:	42b5      	cmp	r5, r6
 800b968:	d11a      	bne.n	800b9a0 <_printf_common+0xc8>
 800b96a:	2000      	movs	r0, #0
 800b96c:	e008      	b.n	800b980 <_printf_common+0xa8>
 800b96e:	2301      	movs	r3, #1
 800b970:	4652      	mov	r2, sl
 800b972:	4649      	mov	r1, r9
 800b974:	4638      	mov	r0, r7
 800b976:	47c0      	blx	r8
 800b978:	3001      	adds	r0, #1
 800b97a:	d103      	bne.n	800b984 <_printf_common+0xac>
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295
 800b980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b984:	3501      	adds	r5, #1
 800b986:	e7c6      	b.n	800b916 <_printf_common+0x3e>
 800b988:	18e1      	adds	r1, r4, r3
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	2030      	movs	r0, #48	; 0x30
 800b98e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b992:	4422      	add	r2, r4
 800b994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b99c:	3302      	adds	r3, #2
 800b99e:	e7c7      	b.n	800b930 <_printf_common+0x58>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	47c0      	blx	r8
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	d0e6      	beq.n	800b97c <_printf_common+0xa4>
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	e7d9      	b.n	800b966 <_printf_common+0x8e>
	...

0800b9b4 <_printf_i>:
 800b9b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b8:	7e0f      	ldrb	r7, [r1, #24]
 800b9ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9bc:	2f78      	cmp	r7, #120	; 0x78
 800b9be:	4691      	mov	r9, r2
 800b9c0:	4680      	mov	r8, r0
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	469a      	mov	sl, r3
 800b9c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9ca:	d807      	bhi.n	800b9dc <_printf_i+0x28>
 800b9cc:	2f62      	cmp	r7, #98	; 0x62
 800b9ce:	d80a      	bhi.n	800b9e6 <_printf_i+0x32>
 800b9d0:	2f00      	cmp	r7, #0
 800b9d2:	f000 80d8 	beq.w	800bb86 <_printf_i+0x1d2>
 800b9d6:	2f58      	cmp	r7, #88	; 0x58
 800b9d8:	f000 80a3 	beq.w	800bb22 <_printf_i+0x16e>
 800b9dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9e4:	e03a      	b.n	800ba5c <_printf_i+0xa8>
 800b9e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9ea:	2b15      	cmp	r3, #21
 800b9ec:	d8f6      	bhi.n	800b9dc <_printf_i+0x28>
 800b9ee:	a101      	add	r1, pc, #4	; (adr r1, 800b9f4 <_printf_i+0x40>)
 800b9f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9f4:	0800ba4d 	.word	0x0800ba4d
 800b9f8:	0800ba61 	.word	0x0800ba61
 800b9fc:	0800b9dd 	.word	0x0800b9dd
 800ba00:	0800b9dd 	.word	0x0800b9dd
 800ba04:	0800b9dd 	.word	0x0800b9dd
 800ba08:	0800b9dd 	.word	0x0800b9dd
 800ba0c:	0800ba61 	.word	0x0800ba61
 800ba10:	0800b9dd 	.word	0x0800b9dd
 800ba14:	0800b9dd 	.word	0x0800b9dd
 800ba18:	0800b9dd 	.word	0x0800b9dd
 800ba1c:	0800b9dd 	.word	0x0800b9dd
 800ba20:	0800bb6d 	.word	0x0800bb6d
 800ba24:	0800ba91 	.word	0x0800ba91
 800ba28:	0800bb4f 	.word	0x0800bb4f
 800ba2c:	0800b9dd 	.word	0x0800b9dd
 800ba30:	0800b9dd 	.word	0x0800b9dd
 800ba34:	0800bb8f 	.word	0x0800bb8f
 800ba38:	0800b9dd 	.word	0x0800b9dd
 800ba3c:	0800ba91 	.word	0x0800ba91
 800ba40:	0800b9dd 	.word	0x0800b9dd
 800ba44:	0800b9dd 	.word	0x0800b9dd
 800ba48:	0800bb57 	.word	0x0800bb57
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	1d1a      	adds	r2, r3, #4
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	602a      	str	r2, [r5, #0]
 800ba54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e0a3      	b.n	800bba8 <_printf_i+0x1f4>
 800ba60:	6820      	ldr	r0, [r4, #0]
 800ba62:	6829      	ldr	r1, [r5, #0]
 800ba64:	0606      	lsls	r6, r0, #24
 800ba66:	f101 0304 	add.w	r3, r1, #4
 800ba6a:	d50a      	bpl.n	800ba82 <_printf_i+0xce>
 800ba6c:	680e      	ldr	r6, [r1, #0]
 800ba6e:	602b      	str	r3, [r5, #0]
 800ba70:	2e00      	cmp	r6, #0
 800ba72:	da03      	bge.n	800ba7c <_printf_i+0xc8>
 800ba74:	232d      	movs	r3, #45	; 0x2d
 800ba76:	4276      	negs	r6, r6
 800ba78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba7c:	485e      	ldr	r0, [pc, #376]	; (800bbf8 <_printf_i+0x244>)
 800ba7e:	230a      	movs	r3, #10
 800ba80:	e019      	b.n	800bab6 <_printf_i+0x102>
 800ba82:	680e      	ldr	r6, [r1, #0]
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba8a:	bf18      	it	ne
 800ba8c:	b236      	sxthne	r6, r6
 800ba8e:	e7ef      	b.n	800ba70 <_printf_i+0xbc>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	6820      	ldr	r0, [r4, #0]
 800ba94:	1d19      	adds	r1, r3, #4
 800ba96:	6029      	str	r1, [r5, #0]
 800ba98:	0601      	lsls	r1, r0, #24
 800ba9a:	d501      	bpl.n	800baa0 <_printf_i+0xec>
 800ba9c:	681e      	ldr	r6, [r3, #0]
 800ba9e:	e002      	b.n	800baa6 <_printf_i+0xf2>
 800baa0:	0646      	lsls	r6, r0, #25
 800baa2:	d5fb      	bpl.n	800ba9c <_printf_i+0xe8>
 800baa4:	881e      	ldrh	r6, [r3, #0]
 800baa6:	4854      	ldr	r0, [pc, #336]	; (800bbf8 <_printf_i+0x244>)
 800baa8:	2f6f      	cmp	r7, #111	; 0x6f
 800baaa:	bf0c      	ite	eq
 800baac:	2308      	moveq	r3, #8
 800baae:	230a      	movne	r3, #10
 800bab0:	2100      	movs	r1, #0
 800bab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bab6:	6865      	ldr	r5, [r4, #4]
 800bab8:	60a5      	str	r5, [r4, #8]
 800baba:	2d00      	cmp	r5, #0
 800babc:	bfa2      	ittt	ge
 800babe:	6821      	ldrge	r1, [r4, #0]
 800bac0:	f021 0104 	bicge.w	r1, r1, #4
 800bac4:	6021      	strge	r1, [r4, #0]
 800bac6:	b90e      	cbnz	r6, 800bacc <_printf_i+0x118>
 800bac8:	2d00      	cmp	r5, #0
 800baca:	d04d      	beq.n	800bb68 <_printf_i+0x1b4>
 800bacc:	4615      	mov	r5, r2
 800bace:	fbb6 f1f3 	udiv	r1, r6, r3
 800bad2:	fb03 6711 	mls	r7, r3, r1, r6
 800bad6:	5dc7      	ldrb	r7, [r0, r7]
 800bad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800badc:	4637      	mov	r7, r6
 800bade:	42bb      	cmp	r3, r7
 800bae0:	460e      	mov	r6, r1
 800bae2:	d9f4      	bls.n	800bace <_printf_i+0x11a>
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d10b      	bne.n	800bb00 <_printf_i+0x14c>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	07de      	lsls	r6, r3, #31
 800baec:	d508      	bpl.n	800bb00 <_printf_i+0x14c>
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	6861      	ldr	r1, [r4, #4]
 800baf2:	4299      	cmp	r1, r3
 800baf4:	bfde      	ittt	le
 800baf6:	2330      	movle	r3, #48	; 0x30
 800baf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bafc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb00:	1b52      	subs	r2, r2, r5
 800bb02:	6122      	str	r2, [r4, #16]
 800bb04:	f8cd a000 	str.w	sl, [sp]
 800bb08:	464b      	mov	r3, r9
 800bb0a:	aa03      	add	r2, sp, #12
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4640      	mov	r0, r8
 800bb10:	f7ff fee2 	bl	800b8d8 <_printf_common>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d14c      	bne.n	800bbb2 <_printf_i+0x1fe>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	b004      	add	sp, #16
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	4835      	ldr	r0, [pc, #212]	; (800bbf8 <_printf_i+0x244>)
 800bb24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb28:	6829      	ldr	r1, [r5, #0]
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb30:	6029      	str	r1, [r5, #0]
 800bb32:	061d      	lsls	r5, r3, #24
 800bb34:	d514      	bpl.n	800bb60 <_printf_i+0x1ac>
 800bb36:	07df      	lsls	r7, r3, #31
 800bb38:	bf44      	itt	mi
 800bb3a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb3e:	6023      	strmi	r3, [r4, #0]
 800bb40:	b91e      	cbnz	r6, 800bb4a <_printf_i+0x196>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	f023 0320 	bic.w	r3, r3, #32
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	2310      	movs	r3, #16
 800bb4c:	e7b0      	b.n	800bab0 <_printf_i+0xfc>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	f043 0320 	orr.w	r3, r3, #32
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	2378      	movs	r3, #120	; 0x78
 800bb58:	4828      	ldr	r0, [pc, #160]	; (800bbfc <_printf_i+0x248>)
 800bb5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb5e:	e7e3      	b.n	800bb28 <_printf_i+0x174>
 800bb60:	0659      	lsls	r1, r3, #25
 800bb62:	bf48      	it	mi
 800bb64:	b2b6      	uxthmi	r6, r6
 800bb66:	e7e6      	b.n	800bb36 <_printf_i+0x182>
 800bb68:	4615      	mov	r5, r2
 800bb6a:	e7bb      	b.n	800bae4 <_printf_i+0x130>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	6826      	ldr	r6, [r4, #0]
 800bb70:	6961      	ldr	r1, [r4, #20]
 800bb72:	1d18      	adds	r0, r3, #4
 800bb74:	6028      	str	r0, [r5, #0]
 800bb76:	0635      	lsls	r5, r6, #24
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	d501      	bpl.n	800bb80 <_printf_i+0x1cc>
 800bb7c:	6019      	str	r1, [r3, #0]
 800bb7e:	e002      	b.n	800bb86 <_printf_i+0x1d2>
 800bb80:	0670      	lsls	r0, r6, #25
 800bb82:	d5fb      	bpl.n	800bb7c <_printf_i+0x1c8>
 800bb84:	8019      	strh	r1, [r3, #0]
 800bb86:	2300      	movs	r3, #0
 800bb88:	6123      	str	r3, [r4, #16]
 800bb8a:	4615      	mov	r5, r2
 800bb8c:	e7ba      	b.n	800bb04 <_printf_i+0x150>
 800bb8e:	682b      	ldr	r3, [r5, #0]
 800bb90:	1d1a      	adds	r2, r3, #4
 800bb92:	602a      	str	r2, [r5, #0]
 800bb94:	681d      	ldr	r5, [r3, #0]
 800bb96:	6862      	ldr	r2, [r4, #4]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f7f4 fba0 	bl	80002e0 <memchr>
 800bba0:	b108      	cbz	r0, 800bba6 <_printf_i+0x1f2>
 800bba2:	1b40      	subs	r0, r0, r5
 800bba4:	6060      	str	r0, [r4, #4]
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb0:	e7a8      	b.n	800bb04 <_printf_i+0x150>
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	4640      	mov	r0, r8
 800bbba:	47d0      	blx	sl
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d0ab      	beq.n	800bb18 <_printf_i+0x164>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	079b      	lsls	r3, r3, #30
 800bbc4:	d413      	bmi.n	800bbee <_printf_i+0x23a>
 800bbc6:	68e0      	ldr	r0, [r4, #12]
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	4298      	cmp	r0, r3
 800bbcc:	bfb8      	it	lt
 800bbce:	4618      	movlt	r0, r3
 800bbd0:	e7a4      	b.n	800bb1c <_printf_i+0x168>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4632      	mov	r2, r6
 800bbd6:	4649      	mov	r1, r9
 800bbd8:	4640      	mov	r0, r8
 800bbda:	47d0      	blx	sl
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d09b      	beq.n	800bb18 <_printf_i+0x164>
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	68e3      	ldr	r3, [r4, #12]
 800bbe4:	9903      	ldr	r1, [sp, #12]
 800bbe6:	1a5b      	subs	r3, r3, r1
 800bbe8:	42ab      	cmp	r3, r5
 800bbea:	dcf2      	bgt.n	800bbd2 <_printf_i+0x21e>
 800bbec:	e7eb      	b.n	800bbc6 <_printf_i+0x212>
 800bbee:	2500      	movs	r5, #0
 800bbf0:	f104 0619 	add.w	r6, r4, #25
 800bbf4:	e7f5      	b.n	800bbe2 <_printf_i+0x22e>
 800bbf6:	bf00      	nop
 800bbf8:	0800bf35 	.word	0x0800bf35
 800bbfc:	0800bf46 	.word	0x0800bf46

0800bc00 <memcpy>:
 800bc00:	440a      	add	r2, r1
 800bc02:	4291      	cmp	r1, r2
 800bc04:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc08:	d100      	bne.n	800bc0c <memcpy+0xc>
 800bc0a:	4770      	bx	lr
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc16:	4291      	cmp	r1, r2
 800bc18:	d1f9      	bne.n	800bc0e <memcpy+0xe>
 800bc1a:	bd10      	pop	{r4, pc}

0800bc1c <memmove>:
 800bc1c:	4288      	cmp	r0, r1
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	eb01 0402 	add.w	r4, r1, r2
 800bc24:	d902      	bls.n	800bc2c <memmove+0x10>
 800bc26:	4284      	cmp	r4, r0
 800bc28:	4623      	mov	r3, r4
 800bc2a:	d807      	bhi.n	800bc3c <memmove+0x20>
 800bc2c:	1e43      	subs	r3, r0, #1
 800bc2e:	42a1      	cmp	r1, r4
 800bc30:	d008      	beq.n	800bc44 <memmove+0x28>
 800bc32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc3a:	e7f8      	b.n	800bc2e <memmove+0x12>
 800bc3c:	4402      	add	r2, r0
 800bc3e:	4601      	mov	r1, r0
 800bc40:	428a      	cmp	r2, r1
 800bc42:	d100      	bne.n	800bc46 <memmove+0x2a>
 800bc44:	bd10      	pop	{r4, pc}
 800bc46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc4e:	e7f7      	b.n	800bc40 <memmove+0x24>

0800bc50 <_free_r>:
 800bc50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc52:	2900      	cmp	r1, #0
 800bc54:	d044      	beq.n	800bce0 <_free_r+0x90>
 800bc56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc5a:	9001      	str	r0, [sp, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f1a1 0404 	sub.w	r4, r1, #4
 800bc62:	bfb8      	it	lt
 800bc64:	18e4      	addlt	r4, r4, r3
 800bc66:	f000 f913 	bl	800be90 <__malloc_lock>
 800bc6a:	4a1e      	ldr	r2, [pc, #120]	; (800bce4 <_free_r+0x94>)
 800bc6c:	9801      	ldr	r0, [sp, #4]
 800bc6e:	6813      	ldr	r3, [r2, #0]
 800bc70:	b933      	cbnz	r3, 800bc80 <_free_r+0x30>
 800bc72:	6063      	str	r3, [r4, #4]
 800bc74:	6014      	str	r4, [r2, #0]
 800bc76:	b003      	add	sp, #12
 800bc78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc7c:	f000 b90e 	b.w	800be9c <__malloc_unlock>
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	d908      	bls.n	800bc96 <_free_r+0x46>
 800bc84:	6825      	ldr	r5, [r4, #0]
 800bc86:	1961      	adds	r1, r4, r5
 800bc88:	428b      	cmp	r3, r1
 800bc8a:	bf01      	itttt	eq
 800bc8c:	6819      	ldreq	r1, [r3, #0]
 800bc8e:	685b      	ldreq	r3, [r3, #4]
 800bc90:	1949      	addeq	r1, r1, r5
 800bc92:	6021      	streq	r1, [r4, #0]
 800bc94:	e7ed      	b.n	800bc72 <_free_r+0x22>
 800bc96:	461a      	mov	r2, r3
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	b10b      	cbz	r3, 800bca0 <_free_r+0x50>
 800bc9c:	42a3      	cmp	r3, r4
 800bc9e:	d9fa      	bls.n	800bc96 <_free_r+0x46>
 800bca0:	6811      	ldr	r1, [r2, #0]
 800bca2:	1855      	adds	r5, r2, r1
 800bca4:	42a5      	cmp	r5, r4
 800bca6:	d10b      	bne.n	800bcc0 <_free_r+0x70>
 800bca8:	6824      	ldr	r4, [r4, #0]
 800bcaa:	4421      	add	r1, r4
 800bcac:	1854      	adds	r4, r2, r1
 800bcae:	42a3      	cmp	r3, r4
 800bcb0:	6011      	str	r1, [r2, #0]
 800bcb2:	d1e0      	bne.n	800bc76 <_free_r+0x26>
 800bcb4:	681c      	ldr	r4, [r3, #0]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	6053      	str	r3, [r2, #4]
 800bcba:	4421      	add	r1, r4
 800bcbc:	6011      	str	r1, [r2, #0]
 800bcbe:	e7da      	b.n	800bc76 <_free_r+0x26>
 800bcc0:	d902      	bls.n	800bcc8 <_free_r+0x78>
 800bcc2:	230c      	movs	r3, #12
 800bcc4:	6003      	str	r3, [r0, #0]
 800bcc6:	e7d6      	b.n	800bc76 <_free_r+0x26>
 800bcc8:	6825      	ldr	r5, [r4, #0]
 800bcca:	1961      	adds	r1, r4, r5
 800bccc:	428b      	cmp	r3, r1
 800bcce:	bf04      	itt	eq
 800bcd0:	6819      	ldreq	r1, [r3, #0]
 800bcd2:	685b      	ldreq	r3, [r3, #4]
 800bcd4:	6063      	str	r3, [r4, #4]
 800bcd6:	bf04      	itt	eq
 800bcd8:	1949      	addeq	r1, r1, r5
 800bcda:	6021      	streq	r1, [r4, #0]
 800bcdc:	6054      	str	r4, [r2, #4]
 800bcde:	e7ca      	b.n	800bc76 <_free_r+0x26>
 800bce0:	b003      	add	sp, #12
 800bce2:	bd30      	pop	{r4, r5, pc}
 800bce4:	2400030c 	.word	0x2400030c

0800bce8 <sbrk_aligned>:
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	4e0e      	ldr	r6, [pc, #56]	; (800bd24 <sbrk_aligned+0x3c>)
 800bcec:	460c      	mov	r4, r1
 800bcee:	6831      	ldr	r1, [r6, #0]
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	b911      	cbnz	r1, 800bcfa <sbrk_aligned+0x12>
 800bcf4:	f000 f8bc 	bl	800be70 <_sbrk_r>
 800bcf8:	6030      	str	r0, [r6, #0]
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f000 f8b7 	bl	800be70 <_sbrk_r>
 800bd02:	1c43      	adds	r3, r0, #1
 800bd04:	d00a      	beq.n	800bd1c <sbrk_aligned+0x34>
 800bd06:	1cc4      	adds	r4, r0, #3
 800bd08:	f024 0403 	bic.w	r4, r4, #3
 800bd0c:	42a0      	cmp	r0, r4
 800bd0e:	d007      	beq.n	800bd20 <sbrk_aligned+0x38>
 800bd10:	1a21      	subs	r1, r4, r0
 800bd12:	4628      	mov	r0, r5
 800bd14:	f000 f8ac 	bl	800be70 <_sbrk_r>
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d101      	bne.n	800bd20 <sbrk_aligned+0x38>
 800bd1c:	f04f 34ff 	mov.w	r4, #4294967295
 800bd20:	4620      	mov	r0, r4
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	24000310 	.word	0x24000310

0800bd28 <_malloc_r>:
 800bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2c:	1ccd      	adds	r5, r1, #3
 800bd2e:	f025 0503 	bic.w	r5, r5, #3
 800bd32:	3508      	adds	r5, #8
 800bd34:	2d0c      	cmp	r5, #12
 800bd36:	bf38      	it	cc
 800bd38:	250c      	movcc	r5, #12
 800bd3a:	2d00      	cmp	r5, #0
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	db01      	blt.n	800bd44 <_malloc_r+0x1c>
 800bd40:	42a9      	cmp	r1, r5
 800bd42:	d905      	bls.n	800bd50 <_malloc_r+0x28>
 800bd44:	230c      	movs	r3, #12
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	2600      	movs	r6, #0
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	4e2e      	ldr	r6, [pc, #184]	; (800be0c <_malloc_r+0xe4>)
 800bd52:	f000 f89d 	bl	800be90 <__malloc_lock>
 800bd56:	6833      	ldr	r3, [r6, #0]
 800bd58:	461c      	mov	r4, r3
 800bd5a:	bb34      	cbnz	r4, 800bdaa <_malloc_r+0x82>
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4638      	mov	r0, r7
 800bd60:	f7ff ffc2 	bl	800bce8 <sbrk_aligned>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	4604      	mov	r4, r0
 800bd68:	d14d      	bne.n	800be06 <_malloc_r+0xde>
 800bd6a:	6834      	ldr	r4, [r6, #0]
 800bd6c:	4626      	mov	r6, r4
 800bd6e:	2e00      	cmp	r6, #0
 800bd70:	d140      	bne.n	800bdf4 <_malloc_r+0xcc>
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	4631      	mov	r1, r6
 800bd76:	4638      	mov	r0, r7
 800bd78:	eb04 0803 	add.w	r8, r4, r3
 800bd7c:	f000 f878 	bl	800be70 <_sbrk_r>
 800bd80:	4580      	cmp	r8, r0
 800bd82:	d13a      	bne.n	800bdfa <_malloc_r+0xd2>
 800bd84:	6821      	ldr	r1, [r4, #0]
 800bd86:	3503      	adds	r5, #3
 800bd88:	1a6d      	subs	r5, r5, r1
 800bd8a:	f025 0503 	bic.w	r5, r5, #3
 800bd8e:	3508      	adds	r5, #8
 800bd90:	2d0c      	cmp	r5, #12
 800bd92:	bf38      	it	cc
 800bd94:	250c      	movcc	r5, #12
 800bd96:	4629      	mov	r1, r5
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f7ff ffa5 	bl	800bce8 <sbrk_aligned>
 800bd9e:	3001      	adds	r0, #1
 800bda0:	d02b      	beq.n	800bdfa <_malloc_r+0xd2>
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	442b      	add	r3, r5
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	e00e      	b.n	800bdc8 <_malloc_r+0xa0>
 800bdaa:	6822      	ldr	r2, [r4, #0]
 800bdac:	1b52      	subs	r2, r2, r5
 800bdae:	d41e      	bmi.n	800bdee <_malloc_r+0xc6>
 800bdb0:	2a0b      	cmp	r2, #11
 800bdb2:	d916      	bls.n	800bde2 <_malloc_r+0xba>
 800bdb4:	1961      	adds	r1, r4, r5
 800bdb6:	42a3      	cmp	r3, r4
 800bdb8:	6025      	str	r5, [r4, #0]
 800bdba:	bf18      	it	ne
 800bdbc:	6059      	strne	r1, [r3, #4]
 800bdbe:	6863      	ldr	r3, [r4, #4]
 800bdc0:	bf08      	it	eq
 800bdc2:	6031      	streq	r1, [r6, #0]
 800bdc4:	5162      	str	r2, [r4, r5]
 800bdc6:	604b      	str	r3, [r1, #4]
 800bdc8:	4638      	mov	r0, r7
 800bdca:	f104 060b 	add.w	r6, r4, #11
 800bdce:	f000 f865 	bl	800be9c <__malloc_unlock>
 800bdd2:	f026 0607 	bic.w	r6, r6, #7
 800bdd6:	1d23      	adds	r3, r4, #4
 800bdd8:	1af2      	subs	r2, r6, r3
 800bdda:	d0b6      	beq.n	800bd4a <_malloc_r+0x22>
 800bddc:	1b9b      	subs	r3, r3, r6
 800bdde:	50a3      	str	r3, [r4, r2]
 800bde0:	e7b3      	b.n	800bd4a <_malloc_r+0x22>
 800bde2:	6862      	ldr	r2, [r4, #4]
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	bf0c      	ite	eq
 800bde8:	6032      	streq	r2, [r6, #0]
 800bdea:	605a      	strne	r2, [r3, #4]
 800bdec:	e7ec      	b.n	800bdc8 <_malloc_r+0xa0>
 800bdee:	4623      	mov	r3, r4
 800bdf0:	6864      	ldr	r4, [r4, #4]
 800bdf2:	e7b2      	b.n	800bd5a <_malloc_r+0x32>
 800bdf4:	4634      	mov	r4, r6
 800bdf6:	6876      	ldr	r6, [r6, #4]
 800bdf8:	e7b9      	b.n	800bd6e <_malloc_r+0x46>
 800bdfa:	230c      	movs	r3, #12
 800bdfc:	603b      	str	r3, [r7, #0]
 800bdfe:	4638      	mov	r0, r7
 800be00:	f000 f84c 	bl	800be9c <__malloc_unlock>
 800be04:	e7a1      	b.n	800bd4a <_malloc_r+0x22>
 800be06:	6025      	str	r5, [r4, #0]
 800be08:	e7de      	b.n	800bdc8 <_malloc_r+0xa0>
 800be0a:	bf00      	nop
 800be0c:	2400030c 	.word	0x2400030c

0800be10 <_realloc_r>:
 800be10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be14:	4680      	mov	r8, r0
 800be16:	4614      	mov	r4, r2
 800be18:	460e      	mov	r6, r1
 800be1a:	b921      	cbnz	r1, 800be26 <_realloc_r+0x16>
 800be1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be20:	4611      	mov	r1, r2
 800be22:	f7ff bf81 	b.w	800bd28 <_malloc_r>
 800be26:	b92a      	cbnz	r2, 800be34 <_realloc_r+0x24>
 800be28:	f7ff ff12 	bl	800bc50 <_free_r>
 800be2c:	4625      	mov	r5, r4
 800be2e:	4628      	mov	r0, r5
 800be30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be34:	f000 f838 	bl	800bea8 <_malloc_usable_size_r>
 800be38:	4284      	cmp	r4, r0
 800be3a:	4607      	mov	r7, r0
 800be3c:	d802      	bhi.n	800be44 <_realloc_r+0x34>
 800be3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be42:	d812      	bhi.n	800be6a <_realloc_r+0x5a>
 800be44:	4621      	mov	r1, r4
 800be46:	4640      	mov	r0, r8
 800be48:	f7ff ff6e 	bl	800bd28 <_malloc_r>
 800be4c:	4605      	mov	r5, r0
 800be4e:	2800      	cmp	r0, #0
 800be50:	d0ed      	beq.n	800be2e <_realloc_r+0x1e>
 800be52:	42bc      	cmp	r4, r7
 800be54:	4622      	mov	r2, r4
 800be56:	4631      	mov	r1, r6
 800be58:	bf28      	it	cs
 800be5a:	463a      	movcs	r2, r7
 800be5c:	f7ff fed0 	bl	800bc00 <memcpy>
 800be60:	4631      	mov	r1, r6
 800be62:	4640      	mov	r0, r8
 800be64:	f7ff fef4 	bl	800bc50 <_free_r>
 800be68:	e7e1      	b.n	800be2e <_realloc_r+0x1e>
 800be6a:	4635      	mov	r5, r6
 800be6c:	e7df      	b.n	800be2e <_realloc_r+0x1e>
	...

0800be70 <_sbrk_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4d06      	ldr	r5, [pc, #24]	; (800be8c <_sbrk_r+0x1c>)
 800be74:	2300      	movs	r3, #0
 800be76:	4604      	mov	r4, r0
 800be78:	4608      	mov	r0, r1
 800be7a:	602b      	str	r3, [r5, #0]
 800be7c:	f7f5 f9a0 	bl	80011c0 <_sbrk>
 800be80:	1c43      	adds	r3, r0, #1
 800be82:	d102      	bne.n	800be8a <_sbrk_r+0x1a>
 800be84:	682b      	ldr	r3, [r5, #0]
 800be86:	b103      	cbz	r3, 800be8a <_sbrk_r+0x1a>
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	bd38      	pop	{r3, r4, r5, pc}
 800be8c:	24000314 	.word	0x24000314

0800be90 <__malloc_lock>:
 800be90:	4801      	ldr	r0, [pc, #4]	; (800be98 <__malloc_lock+0x8>)
 800be92:	f000 b811 	b.w	800beb8 <__retarget_lock_acquire_recursive>
 800be96:	bf00      	nop
 800be98:	24000318 	.word	0x24000318

0800be9c <__malloc_unlock>:
 800be9c:	4801      	ldr	r0, [pc, #4]	; (800bea4 <__malloc_unlock+0x8>)
 800be9e:	f000 b80c 	b.w	800beba <__retarget_lock_release_recursive>
 800bea2:	bf00      	nop
 800bea4:	24000318 	.word	0x24000318

0800bea8 <_malloc_usable_size_r>:
 800bea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beac:	1f18      	subs	r0, r3, #4
 800beae:	2b00      	cmp	r3, #0
 800beb0:	bfbc      	itt	lt
 800beb2:	580b      	ldrlt	r3, [r1, r0]
 800beb4:	18c0      	addlt	r0, r0, r3
 800beb6:	4770      	bx	lr

0800beb8 <__retarget_lock_acquire_recursive>:
 800beb8:	4770      	bx	lr

0800beba <__retarget_lock_release_recursive>:
 800beba:	4770      	bx	lr

0800bebc <_init>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr

0800bec8 <_fini>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	bf00      	nop
 800becc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bece:	bc08      	pop	{r3}
 800bed0:	469e      	mov	lr, r3
 800bed2:	4770      	bx	lr
