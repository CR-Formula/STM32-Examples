
DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800bd14  0800bd14  0001bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bd9c  0800bd9c  0001bd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800bda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  24000080  0800be18  00020080  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000298  0800be18  00020298  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016785  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002630  00000000  00000000  00036827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ef0  00000000  00000000  00038e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e18  00000000  00000000  00039d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b20  00000000  00000000  0003ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014dc3  00000000  00000000  00072680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a597  00000000  00000000  00087443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f19da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004350  00000000  00000000  001f1a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bcfc 	.word	0x0800bcfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800bcfc 	.word	0x0800bcfc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 fd7e 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f82e 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 f994 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000694:	f000 f972 	bl	800097c <MX_DMA_Init>
  MX_ADC1_Init();
 8000698:	f000 f89a 	bl	80007d0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f922 	bl	80008e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
 80006a0:	2220      	movs	r2, #32
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <main+0x54>)
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <main+0x58>)
 80006a6:	f001 f9bb 	bl	8001a20 <HAL_ADC_Start_DMA>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <main+0x30>
  		  Error_Handler();
 80006b0:	f000 fae8 	bl	8000c84 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(message, "%d -- %d\r\n", adcResultsDMA[0], adcResultsDMA[1]);
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <main+0x54>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <main+0x54>)
 80006bc:	885b      	ldrh	r3, [r3, #2]
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <main+0x5c>)
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <main+0x60>)
 80006c2:	f00a fead 	bl	800b420 <siprintf>
	  HAL_UART_Transmit_IT(&huart3, message, sizeof(message));
 80006c6:	2220      	movs	r2, #32
 80006c8:	4906      	ldr	r1, [pc, #24]	; (80006e4 <main+0x60>)
 80006ca:	4807      	ldr	r0, [pc, #28]	; (80006e8 <main+0x64>)
 80006cc:	f008 ff82 	bl	80095d4 <HAL_UART_Transmit_IT>
	  HAL_Delay(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 fdeb 	bl	80012ac <HAL_Delay>
  {
 80006d6:	e7ed      	b.n	80006b4 <main+0x30>
 80006d8:	24000220 	.word	0x24000220
 80006dc:	2400009c 	.word	0x2400009c
 80006e0:	0800bd14 	.word	0x0800bd14
 80006e4:	24000260 	.word	0x24000260
 80006e8:	24000178 	.word	0x24000178

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09c      	sub	sp, #112	; 0x70
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f6:	224c      	movs	r2, #76	; 0x4c
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00a fe88 	bl	800b410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2220      	movs	r2, #32
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00a fe82 	bl	800b410 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800070c:	2002      	movs	r0, #2
 800070e:	f005 f9f3 	bl	8005af8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <SystemClock_Config+0xd8>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	4a2a      	ldr	r2, [pc, #168]	; (80007c4 <SystemClock_Config+0xd8>)
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SystemClock_Config+0xd8>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <SystemClock_Config+0xdc>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <SystemClock_Config+0xdc>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xdc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000748:	bf00      	nop
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xdc>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000756:	d1f8      	bne.n	800074a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <SystemClock_Config+0xe0>)
 800075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <SystemClock_Config+0xe0>)
 800075e:	f023 0303 	bic.w	r3, r3, #3
 8000762:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000768:	2301      	movs	r3, #1
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2340      	movs	r3, #64	; 0x40
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000770:	2300      	movs	r3, #0
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	4618      	mov	r0, r3
 800077a:	f005 f9f7 	bl	8005b6c <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000784:	f000 fa7e 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	233f      	movs	r3, #63	; 0x3f
 800078a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2101      	movs	r1, #1
 80007ac:	4618      	mov	r0, r3
 80007ae:	f005 fe37 	bl	8006420 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007b8:	f000 fa64 	bl	8000c84 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3770      	adds	r7, #112	; 0x70
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	58000400 	.word	0x58000400
 80007c8:	58024800 	.word	0x58024800
 80007cc:	58024400 	.word	0x58024400

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f4:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <MX_ADC1_Init+0x104>)
 80007f6:	4a38      	ldr	r2, [pc, #224]	; (80008d8 <MX_ADC1_Init+0x108>)
 80007f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007fa:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <MX_ADC1_Init+0x104>)
 80007fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000800:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000808:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_ADC1_Init+0x104>)
 800080a:	2201      	movs	r2, #1
 800080c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000810:	2204      	movs	r2, #4
 8000812:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000814:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000816:	2200      	movs	r2, #0
 8000818:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <MX_ADC1_Init+0x104>)
 800081c:	2201      	movs	r2, #1
 800081e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000822:	2202      	movs	r2, #2
 8000824:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000828:	2200      	movs	r2, #0
 800082a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_ADC1_Init+0x104>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_ADC1_Init+0x104>)
 800083a:	2203      	movs	r2, #3
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000844:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000848:	2200      	movs	r2, #0
 800084a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_ADC1_Init+0x104>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000854:	481f      	ldr	r0, [pc, #124]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000856:	f000 ff41 	bl	80016dc <HAL_ADC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000860:	f000 fa10 	bl	8000c84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <MX_ADC1_Init+0x104>)
 8000870:	f001 ff4e 	bl	8002710 <HAL_ADCEx_MultiModeConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800087a:	f000 fa03 	bl	8000c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_ADC1_Init+0x10c>)
 8000880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000882:	2306      	movs	r3, #6
 8000884:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800088a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800088e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000890:	2304      	movs	r3, #4
 8000892:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_ADC1_Init+0x104>)
 80008a2:	f001 f995 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80008ac:	f000 f9ea 	bl	8000c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_ADC1_Init+0x110>)
 80008b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008b4:	230c      	movs	r3, #12
 80008b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_ADC1_Init+0x104>)
 80008be:	f001 f987 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80008c8:	f000 f9dc 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2400009c 	.word	0x2400009c
 80008d8:	40022000 	.word	0x40022000
 80008dc:	3ef08000 	.word	0x3ef08000
 80008e0:	2a000400 	.word	0x2a000400

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_USART3_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800092e:	f008 fe01 	bl	8009534 <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f9a4 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000940:	f00a fc72 	bl	800b228 <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f99b 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000952:	f00a fca7 	bl	800b2a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f992 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000962:	f00a fc28 	bl	800b1b6 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f98a 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24000178 	.word	0x24000178
 8000978:	40004800 	.word	0x40004800

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_DMA_Init+0x3c>)
 8000984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <MX_DMA_Init+0x3c>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_DMA_Init+0x3c>)
 8000994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	200b      	movs	r0, #11
 80009a6:	f002 f86c 	bl	8002a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009aa:	200b      	movs	r0, #11
 80009ac:	f002 f883 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58024400 	.word	0x58024400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b8b      	ldr	r3, [pc, #556]	; (8000c00 <MX_GPIO_Init+0x244>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a89      	ldr	r2, [pc, #548]	; (8000c00 <MX_GPIO_Init+0x244>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b87      	ldr	r3, [pc, #540]	; (8000c00 <MX_GPIO_Init+0x244>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f0:	4b83      	ldr	r3, [pc, #524]	; (8000c00 <MX_GPIO_Init+0x244>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a82      	ldr	r2, [pc, #520]	; (8000c00 <MX_GPIO_Init+0x244>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b7f      	ldr	r3, [pc, #508]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b7c      	ldr	r3, [pc, #496]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a7a      	ldr	r2, [pc, #488]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b78      	ldr	r3, [pc, #480]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b74      	ldr	r3, [pc, #464]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a73      	ldr	r2, [pc, #460]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b70      	ldr	r3, [pc, #448]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b6d      	ldr	r3, [pc, #436]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a6b      	ldr	r2, [pc, #428]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b69      	ldr	r3, [pc, #420]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a68:	4b65      	ldr	r3, [pc, #404]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	4a64      	ldr	r2, [pc, #400]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a78:	4b61      	ldr	r3, [pc, #388]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4b5e      	ldr	r3, [pc, #376]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a5c      	ldr	r2, [pc, #368]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <MX_GPIO_Init+0x244>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000aaa:	4856      	ldr	r0, [pc, #344]	; (8000c04 <MX_GPIO_Init+0x248>)
 8000aac:	f005 f80a 	bl	8005ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	4854      	ldr	r0, [pc, #336]	; (8000c08 <MX_GPIO_Init+0x24c>)
 8000ab8:	f005 f804 	bl	8005ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4852      	ldr	r0, [pc, #328]	; (8000c0c <MX_GPIO_Init+0x250>)
 8000ac2:	f004 ffff 	bl	8005ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	484d      	ldr	r0, [pc, #308]	; (8000c10 <MX_GPIO_Init+0x254>)
 8000adc:	f004 fe42 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ae0:	2332      	movs	r3, #50	; 0x32
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4845      	ldr	r0, [pc, #276]	; (8000c10 <MX_GPIO_Init+0x254>)
 8000afc:	f004 fe32 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b00:	2386      	movs	r3, #134	; 0x86
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b10:	230b      	movs	r3, #11
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	483e      	ldr	r0, [pc, #248]	; (8000c14 <MX_GPIO_Init+0x258>)
 8000b1c:	f004 fe22 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b20:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4832      	ldr	r0, [pc, #200]	; (8000c04 <MX_GPIO_Init+0x248>)
 8000b3a:	f004 fe13 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b50:	230b      	movs	r3, #11
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	482a      	ldr	r0, [pc, #168]	; (8000c04 <MX_GPIO_Init+0x248>)
 8000b5c:	f004 fe02 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4823      	ldr	r0, [pc, #140]	; (8000c08 <MX_GPIO_Init+0x24c>)
 8000b7a:	f004 fdf3 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4821      	ldr	r0, [pc, #132]	; (8000c18 <MX_GPIO_Init+0x25c>)
 8000b94:	f004 fde6 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b98:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000baa:	230a      	movs	r3, #10
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4817      	ldr	r0, [pc, #92]	; (8000c14 <MX_GPIO_Init+0x258>)
 8000bb6:	f004 fdd5 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4810      	ldr	r0, [pc, #64]	; (8000c18 <MX_GPIO_Init+0x25c>)
 8000bd8:	f004 fdc4 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_GPIO_Init+0x250>)
 8000bf4:	f004 fdb6 	bl	8005764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	58024400 	.word	0x58024400
 8000c04:	58020400 	.word	0x58020400
 8000c08:	58020c00 	.word	0x58020c00
 8000c0c:	58021000 	.word	0x58021000
 8000c10:	58020800 	.word	0x58020800
 8000c14:	58020000 	.word	0x58020000
 8000c18:	58021800 	.word	0x58021800

08000c1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_ADC_ConvCpltCallback+0x60>)
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	2320      	movs	r3, #32
 8000c2a:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	dd1d      	ble.n	8000c6e <HAL_ADC_ConvCpltCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c42:	f3bf 8f4f 	dsb	sy
}
 8000c46:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_ADC_ConvCpltCallback+0x64>)
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	3320      	adds	r3, #32
 8000c54:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3b20      	subs	r3, #32
 8000c5a:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dcf2      	bgt.n	8000c48 <HAL_ADC_ConvCpltCallback+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c62:	f3bf 8f4f 	dsb	sy
}
 8000c66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c68:	f3bf 8f6f 	isb	sy
}
 8000c6c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000c6e:	bf00      	nop
   /* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
  SCB_InvalidateDCache_by_Addr((uint32_t *) &adcResultsDMA[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
}
 8000c70:	bf00      	nop
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	24000240 	.word	0x24000240
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_MspInit+0x30>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x30>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x30>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	58024400 	.word	0x58024400

08000cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0bc      	sub	sp, #240	; 0xf0
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	22c0      	movs	r2, #192	; 0xc0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00a fb93 	bl	800b410 <memset>
  if(hadc->Instance==ADC1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a54      	ldr	r2, [pc, #336]	; (8000e40 <HAL_ADC_MspInit+0x17c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	f040 80a0 	bne.w	8000e36 <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cfa:	f04f 0300 	mov.w	r3, #0
 8000cfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d02:	2304      	movs	r3, #4
 8000d04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000d06:	2309      	movs	r3, #9
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d16:	23c0      	movs	r3, #192	; 0xc0
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 8000d1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 ff02 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000d3a:	f7ff ffa3 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d3e:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d44:	4a3f      	ldr	r2, [pc, #252]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a38      	ldr	r2, [pc, #224]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dae:	4619      	mov	r1, r3
 8000db0:	4825      	ldr	r0, [pc, #148]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000db2:	f004 fcd7 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db6:	2308      	movs	r3, #8
 8000db8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481f      	ldr	r0, [pc, #124]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000dd0:	f004 fcc8 	bl	8005764 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <HAL_ADC_MspInit+0x190>)
 8000dd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000ddc:	2209      	movs	r2, #9
 8000dde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dfa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e02:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000e1c:	f001 fe66 	bl	8002aec <HAL_DMA_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 8000e26:	f7ff ff2d 	bl	8000c84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000e2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	37f0      	adds	r7, #240	; 0xf0
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020800 	.word	0x58020800
 8000e4c:	58020000 	.word	0x58020000
 8000e50:	24000100 	.word	0x24000100
 8000e54:	40020010 	.word	0x40020010

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ba      	sub	sp, #232	; 0xe8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	22c0      	movs	r2, #192	; 0xc0
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f00a fac9 	bl	800b410 <memset>
  if(huart->Instance==USART3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <HAL_UART_MspInit+0xd8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d14e      	bne.n	8000f26 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e88:	f04f 0202 	mov.w	r2, #2
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f005 fe4a 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eaa:	f7ff feeb 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_UART_MspInit+0xdc>)
 8000eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <HAL_UART_MspInit+0xdc>)
 8000eb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_UART_MspInit+0xdc>)
 8000ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0xdc>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <HAL_UART_MspInit+0xdc>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_UART_MspInit+0xdc>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f04:	2307      	movs	r3, #7
 8000f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <HAL_UART_MspInit+0xe0>)
 8000f12:	f004 fc27 	bl	8005764 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2027      	movs	r0, #39	; 0x27
 8000f1c:	f001 fdb1 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f20:	2027      	movs	r0, #39	; 0x27
 8000f22:	f001 fdc8 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	37e8      	adds	r7, #232	; 0xe8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40004800 	.word	0x40004800
 8000f34:	58024400 	.word	0x58024400
 8000f38:	58020c00 	.word	0x58020c00

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 f970 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <DMA1_Stream0_IRQHandler+0x10>)
 8000f96:	f003 f8d3 	bl	8004140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	24000100 	.word	0x24000100

08000fa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <USART3_IRQHandler+0x10>)
 8000faa:	f008 fba7 	bl	80096fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24000178 	.word	0x24000178

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f00a f9e8 	bl	800b3bc <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	24080000 	.word	0x24080000
 8001018:	00000400 	.word	0x00000400
 800101c:	24000280 	.word	0x24000280
 8001020:	24000298 	.word	0x24000298

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <SystemInit+0xe4>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a36      	ldr	r2, [pc, #216]	; (8001108 <SystemInit+0xe4>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001038:	4b34      	ldr	r3, [pc, #208]	; (800110c <SystemInit+0xe8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	2b06      	cmp	r3, #6
 8001042:	d807      	bhi.n	8001054 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <SystemInit+0xe8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 030f 	bic.w	r3, r3, #15
 800104c:	4a2f      	ldr	r2, [pc, #188]	; (800110c <SystemInit+0xe8>)
 800104e:	f043 0307 	orr.w	r3, r3, #7
 8001052:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001054:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <SystemInit+0xec>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <SystemInit+0xec>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <SystemInit+0xec>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <SystemInit+0xec>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4929      	ldr	r1, [pc, #164]	; (8001110 <SystemInit+0xec>)
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <SystemInit+0xf0>)
 800106e:	4013      	ands	r3, r2
 8001070:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <SystemInit+0xe8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <SystemInit+0xe8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 030f 	bic.w	r3, r3, #15
 8001086:	4a21      	ldr	r2, [pc, #132]	; (800110c <SystemInit+0xe8>)
 8001088:	f043 0307 	orr.w	r3, r3, #7
 800108c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <SystemInit+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <SystemInit+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <SystemInit+0xec>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <SystemInit+0xec>)
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <SystemInit+0xf4>)
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <SystemInit+0xec>)
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <SystemInit+0xf8>)
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <SystemInit+0xec>)
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <SystemInit+0xfc>)
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <SystemInit+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <SystemInit+0xec>)
 80010ba:	4a19      	ldr	r2, [pc, #100]	; (8001120 <SystemInit+0xfc>)
 80010bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <SystemInit+0xec>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <SystemInit+0xec>)
 80010c6:	4a16      	ldr	r2, [pc, #88]	; (8001120 <SystemInit+0xfc>)
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <SystemInit+0xec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <SystemInit+0xec>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <SystemInit+0xec>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <SystemInit+0xec>)
 80010de:	2200      	movs	r2, #0
 80010e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <SystemInit+0x100>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <SystemInit+0x104>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ee:	d202      	bcs.n	80010f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <SystemInit+0x108>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SystemInit+0x10c>)
 80010f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	52002000 	.word	0x52002000
 8001110:	58024400 	.word	0x58024400
 8001114:	eaf6ed7f 	.word	0xeaf6ed7f
 8001118:	02020200 	.word	0x02020200
 800111c:	01ff0000 	.word	0x01ff0000
 8001120:	01010280 	.word	0x01010280
 8001124:	5c001000 	.word	0x5c001000
 8001128:	ffff0000 	.word	0xffff0000
 800112c:	51008108 	.word	0x51008108
 8001130:	52004000 	.word	0x52004000

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001138:	f7ff ff74 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	; (8001174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	; (8001180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f00a f931 	bl	800b3c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fa8d 	bl	8000684 <main>
  bx  lr
 800116a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001170:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001174:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001178:	0800bda4 	.word	0x0800bda4
  ldr r2, =_sbss
 800117c:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001180:	24000298 	.word	0x24000298

08001184 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC3_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118e:	2003      	movs	r0, #3
 8001190:	f001 fc6c 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001194:	f005 fafa 	bl	800678c <HAL_RCC_GetSysClockFreq>
 8001198:	4602      	mov	r2, r0
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_Init+0x68>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	4913      	ldr	r1, [pc, #76]	; (80011f4 <HAL_Init+0x6c>)
 80011a6:	5ccb      	ldrb	r3, [r1, r3]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_Init+0x68>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_Init+0x6c>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
 80011c8:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_Init+0x70>)
 80011ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_Init+0x74>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f814 	bl	8001200 <HAL_InitTick>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e002      	b.n	80011e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011e2:	f7ff fd55 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	58024400 	.word	0x58024400
 80011f4:	0800bd20 	.word	0x0800bd20
 80011f8:	24000004 	.word	0x24000004
 80011fc:	24000000 	.word	0x24000000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_InitTick+0x60>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e021      	b.n	8001258 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_InitTick+0x64>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_InitTick+0x60>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fc51 	bl	8002ad2 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f001 fc1b 	bl	8002a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x68>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2400000c 	.word	0x2400000c
 8001264:	24000000 	.word	0x24000000
 8001268:	24000008 	.word	0x24000008

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2400000c 	.word	0x2400000c
 8001290:	24000284 	.word	0x24000284

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	24000284 	.word	0x24000284

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff ffee 	bl	8001294 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffde 	bl	8001294 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2400000c 	.word	0x2400000c

080012f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetREVID+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0c1b      	lsrs	r3, r3, #16
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	5c001000 	.word	0x5c001000

0800130c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	609a      	str	r2, [r3, #8]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	609a      	str	r2, [r3, #8]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3360      	adds	r3, #96	; 0x60
 8001386:	461a      	mov	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	431a      	orrs	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	611a      	str	r2, [r3, #16]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b087      	sub	sp, #28
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3360      	adds	r3, #96	; 0x60
 80013f6:	461a      	mov	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	431a      	orrs	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	601a      	str	r2, [r3, #0]
  }
}
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001442:	b480      	push	{r7}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3330      	adds	r3, #48	; 0x30
 8001452:	461a      	mov	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	4413      	add	r3, r2
 8001460:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	211f      	movs	r1, #31
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	401a      	ands	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	0e9b      	lsrs	r3, r3, #26
 800147a:	f003 011f 	and.w	r1, r3, #31
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	431a      	orrs	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f023 0203 	bic.w	r2, r3, #3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3314      	adds	r3, #20
 80014d0:	461a      	mov	r2, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	0e5b      	lsrs	r3, r3, #25
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	4413      	add	r3, r2
 80014de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0d1b      	lsrs	r3, r3, #20
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2107      	movs	r1, #7
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	401a      	ands	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	0d1b      	lsrs	r3, r3, #20
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800150a:	bf00      	nop
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0318 	and.w	r3, r3, #24
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <LL_ADC_SetChannelSingleDiff+0x44>)
 800153c:	40d9      	lsrs	r1, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	400b      	ands	r3, r1
 8001542:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001546:	431a      	orrs	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	000fffff 	.word	0x000fffff

08001560 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 031f 	and.w	r3, r3, #31
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <LL_ADC_DisableDeepPowerDown+0x20>)
 800158a:	4013      	ands	r3, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6093      	str	r3, [r2, #8]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	5fffffc0 	.word	0x5fffffc0

080015a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015b4:	d101      	bne.n	80015ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <LL_ADC_EnableInternalRegulator+0x24>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	6fffffc0 	.word	0x6fffffc0

080015f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001604:	d101      	bne.n	800160a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <LL_ADC_Enable+0x24>)
 8001626:	4013      	ands	r3, r2
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	7fffffc0 	.word	0x7fffffc0

08001640 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <LL_ADC_IsEnabled+0x18>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <LL_ADC_IsEnabled+0x1a>
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <LL_ADC_REG_StartConversion+0x24>)
 8001676:	4013      	ands	r3, r2
 8001678:	f043 0204 	orr.w	r2, r3, #4
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	7fffffc0 	.word	0x7fffffc0

08001690 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d101      	bne.n	80016a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d101      	bne.n	80016ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e18f      	b.n	8001a16 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fadd 	bl	8000cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff3f 	bl	80015a0 <LL_ADC_IsDeepPowerDownEnabled>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff25 	bl	800157c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff5a 	bl	80015f0 <LL_ADC_IsInternalRegulatorEnabled>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d114      	bne.n	800176c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff3e 	bl	80015c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800174c:	4b87      	ldr	r3, [pc, #540]	; (800196c <HAL_ADC_Init+0x290>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	4a87      	ldr	r2, [pc, #540]	; (8001970 <HAL_ADC_Init+0x294>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	3301      	adds	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800175e:	e002      	b.n	8001766 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3b01      	subs	r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f9      	bne.n	8001760 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff3d 	bl	80015f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10d      	bne.n	8001798 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f043 0210 	orr.w	r2, r3, #16
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff77 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 80017a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f040 8129 	bne.w	8001a04 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f040 8125 	bne.w	8001a04 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017c2:	f043 0202 	orr.w	r2, r3, #2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff36 	bl	8001640 <LL_ADC_IsEnabled>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d136      	bne.n	8001848 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a65      	ldr	r2, [pc, #404]	; (8001974 <HAL_ADC_Init+0x298>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d004      	beq.n	80017ee <HAL_ADC_Init+0x112>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a63      	ldr	r2, [pc, #396]	; (8001978 <HAL_ADC_Init+0x29c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10e      	bne.n	800180c <HAL_ADC_Init+0x130>
 80017ee:	4861      	ldr	r0, [pc, #388]	; (8001974 <HAL_ADC_Init+0x298>)
 80017f0:	f7ff ff26 	bl	8001640 <LL_ADC_IsEnabled>
 80017f4:	4604      	mov	r4, r0
 80017f6:	4860      	ldr	r0, [pc, #384]	; (8001978 <HAL_ADC_Init+0x29c>)
 80017f8:	f7ff ff22 	bl	8001640 <LL_ADC_IsEnabled>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4323      	orrs	r3, r4
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e008      	b.n	800181e <HAL_ADC_Init+0x142>
 800180c:	485b      	ldr	r0, [pc, #364]	; (800197c <HAL_ADC_Init+0x2a0>)
 800180e:	f7ff ff17 	bl	8001640 <LL_ADC_IsEnabled>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a53      	ldr	r2, [pc, #332]	; (8001974 <HAL_ADC_Init+0x298>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d004      	beq.n	8001836 <HAL_ADC_Init+0x15a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a51      	ldr	r2, [pc, #324]	; (8001978 <HAL_ADC_Init+0x29c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_ADC_Init+0x15e>
 8001836:	4a52      	ldr	r2, [pc, #328]	; (8001980 <HAL_ADC_Init+0x2a4>)
 8001838:	e000      	b.n	800183c <HAL_ADC_Init+0x160>
 800183a:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_ADC_Init+0x2a8>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f7ff fd62 	bl	800130c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001848:	f7ff fd54 	bl	80012f4 <HAL_GetREVID>
 800184c:	4603      	mov	r3, r0
 800184e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001852:	4293      	cmp	r3, r2
 8001854:	d914      	bls.n	8001880 <HAL_ADC_Init+0x1a4>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d110      	bne.n	8001880 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7d5b      	ldrb	r3, [r3, #21]
 8001862:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001868:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800186e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7f1b      	ldrb	r3, [r3, #28]
 8001874:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001876:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001878:	f043 030c 	orr.w	r3, r3, #12
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	e00d      	b.n	800189c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7d5b      	ldrb	r3, [r3, #21]
 8001884:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800188a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001890:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7f1b      	ldrb	r3, [r3, #28]
 8001896:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7f1b      	ldrb	r3, [r3, #28]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d106      	bne.n	80018b2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	045b      	lsls	r3, r3, #17
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <HAL_ADC_Init+0x2ac>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	69b9      	ldr	r1, [r7, #24]
 80018de:	430b      	orrs	r3, r1
 80018e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fed2 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 80018ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fedf 	bl	80016b6 <LL_ADC_INJ_IsConversionOngoing>
 80018f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d15f      	bne.n	80019c0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d15c      	bne.n	80019c0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7d1b      	ldrb	r3, [r3, #20]
 800190a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_ADC_Init+0x2b0>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	430b      	orrs	r3, r1
 8001926:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800192e:	2b01      	cmp	r3, #1
 8001930:	d130      	bne.n	8001994 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_ADC_Init+0x2b4>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001946:	3a01      	subs	r2, #1
 8001948:	0411      	lsls	r1, r2, #16
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001954:	4311      	orrs	r1, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800195a:	430a      	orrs	r2, r1
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	e01c      	b.n	80019a4 <HAL_ADC_Init+0x2c8>
 800196a:	bf00      	nop
 800196c:	24000000 	.word	0x24000000
 8001970:	053e2d63 	.word	0x053e2d63
 8001974:	40022000 	.word	0x40022000
 8001978:	40022100 	.word	0x40022100
 800197c:	58026000 	.word	0x58026000
 8001980:	40022300 	.word	0x40022300
 8001984:	58026300 	.word	0x58026300
 8001988:	fff0c003 	.word	0xfff0c003
 800198c:	ffffbffc 	.word	0xffffbffc
 8001990:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fd76 	bl	80024ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d10c      	bne.n	80019e2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f023 010f 	bic.w	r1, r3, #15
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
 80019e0:	e007      	b.n	80019f2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 020f 	bic.w	r2, r2, #15
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
 8001a02:	e007      	b.n	8001a14 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f043 0210 	orr.w	r2, r3, #16
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop

08001a20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a55      	ldr	r2, [pc, #340]	; (8001b88 <HAL_ADC_Start_DMA+0x168>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d004      	beq.n	8001a40 <HAL_ADC_Start_DMA+0x20>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a54      	ldr	r2, [pc, #336]	; (8001b8c <HAL_ADC_Start_DMA+0x16c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_Start_DMA+0x24>
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_ADC_Start_DMA+0x170>)
 8001a42:	e000      	b.n	8001a46 <HAL_ADC_Start_DMA+0x26>
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_ADC_Start_DMA+0x174>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fd8a 	bl	8001560 <LL_ADC_GetMultimode>
 8001a4c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fe1c 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 808c 	bne.w	8001b78 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Start_DMA+0x4e>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e087      	b.n	8001b7e <HAL_ADC_Start_DMA+0x15e>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d002      	beq.n	8001a88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	d170      	bne.n	8001b6a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fbf1 	bl	8002270 <ADC_Enable>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d163      	bne.n	8001b60 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <HAL_ADC_Start_DMA+0x178>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <HAL_ADC_Start_DMA+0x16c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d002      	beq.n	8001ab8 <HAL_ADC_Start_DMA+0x98>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	e000      	b.n	8001aba <HAL_ADC_Start_DMA+0x9a>
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <HAL_ADC_Start_DMA+0x168>)
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d002      	beq.n	8001ac8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001acc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f023 0206 	bic.w	r2, r3, #6
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	659a      	str	r2, [r3, #88]	; 0x58
 8001aec:	e002      	b.n	8001af4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <HAL_ADC_Start_DMA+0x17c>)
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <HAL_ADC_Start_DMA+0x180>)
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <HAL_ADC_Start_DMA+0x184>)
 8001b0a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	221c      	movs	r2, #28
 8001b12:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0210 	orr.w	r2, r2, #16
 8001b2a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f7ff fcaf 	bl	800149a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3340      	adds	r3, #64	; 0x40
 8001b46:	4619      	mov	r1, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f001 fb2a 	bl	80031a4 <HAL_DMA_Start_IT>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fd85 	bl	8001668 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001b5e:	e00d      	b.n	8001b7c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001b68:	e008      	b.n	8001b7c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b76:	e001      	b.n	8001b7c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40022100 	.word	0x40022100
 8001b90:	40022300 	.word	0x40022300
 8001b94:	58026300 	.word	0x58026300
 8001b98:	fffff0fe 	.word	0xfffff0fe
 8001b9c:	08002385 	.word	0x08002385
 8001ba0:	0800245d 	.word	0x0800245d
 8001ba4:	08002479 	.word	0x08002479

08001ba8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b0a1      	sub	sp, #132	; 0x84
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4a9d      	ldr	r2, [pc, #628]	; (8001e60 <HAL_ADC_ConfigChannel+0x290>)
 8001bea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x2a>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e321      	b.n	800223e <HAL_ADC_ConfigChannel+0x66e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fd42 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 8306 	bne.w	8002220 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d108      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x62>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	e016      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x90>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c42:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	69d1      	ldr	r1, [r2, #28]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6859      	ldr	r1, [r3, #4]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f7ff fbe1 	bl	8001442 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fd03 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 8001c8a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fd10 	bl	80016b6 <LL_ADC_INJ_IsConversionOngoing>
 8001c96:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 80b3 	bne.w	8001e06 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 80af 	bne.w	8001e06 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f7ff fc03 	bl	80014c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_ADC_ConfigChannel+0x294>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x110>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	e01d      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x14c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x136>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	e00a      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x14c>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d027      	beq.n	8001d76 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6919      	ldr	r1, [r3, #16]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d34:	f7ff fb1e 	bl	8001374 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6919      	ldr	r1, [r3, #16]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	7e5b      	ldrb	r3, [r3, #25]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x17e>
 8001d48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d4c:	e000      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x180>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	461a      	mov	r2, r3
 8001d52:	f7ff fb48 	bl	80013e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6919      	ldr	r1, [r3, #16]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	7e1b      	ldrb	r3, [r3, #24]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x19c>
 8001d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d6a:	e000      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x19e>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f7ff fb20 	bl	80013b4 <LL_ADC_SetDataRightShift>
 8001d74:	e047      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	069b      	lsls	r3, r3, #26
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d107      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d98:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	069b      	lsls	r3, r3, #26
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d107      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dbc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	069b      	lsls	r3, r3, #26
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d107      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001de0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	069b      	lsls	r3, r3, #26
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d107      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e04:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fc18 	bl	8001640 <LL_ADC_IsEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 820d 	bne.w	8002232 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	461a      	mov	r2, r3
 8001e26:	f7ff fb77 	bl	8001518 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_ADC_ConfigChannel+0x290>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	f040 8133 	bne.w	800209c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d110      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x298>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0e9b      	lsrs	r3, r3, #26
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	bf94      	ite	ls
 8001e56:	2301      	movls	r3, #1
 8001e58:	2300      	movhi	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	e01e      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x2cc>
 8001e5e:	bf00      	nop
 8001e60:	47ff0000 	.word	0x47ff0000
 8001e64:	5c001000 	.word	0x5c001000
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001e80:	2320      	movs	r3, #32
 8001e82:	e003      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2b09      	cmp	r3, #9
 8001e94:	bf94      	ite	ls
 8001e96:	2301      	movls	r3, #1
 8001e98:	2300      	movhi	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d079      	beq.n	8001f94 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x2ec>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	069b      	lsls	r3, r3, #26
 8001eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eba:	e015      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x318>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ecc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e003      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	069b      	lsls	r3, r3, #26
 8001ee4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x338>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	3301      	adds	r3, #1
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	2101      	movs	r1, #1
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	e017      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x368>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f18:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e003      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	ea42 0103 	orr.w	r1, r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x38e>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	051b      	lsls	r3, r3, #20
 8001f5c:	e018      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x3c0>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001f76:	2320      	movs	r3, #32
 8001f78:	e003      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f90:	430b      	orrs	r3, r1
 8001f92:	e07e      	b.n	8002092 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x3e0>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0e9b      	lsrs	r3, r3, #26
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	069b      	lsls	r3, r3, #26
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fae:	e015      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x40c>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e003      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x42c>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	e017      	b.n	800202c <HAL_ADC_ConfigChannel+0x45c>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	61bb      	str	r3, [r7, #24]
  return result;
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e003      	b.n	8002020 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	ea42 0103 	orr.w	r1, r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10d      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x488>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	3301      	adds	r3, #1
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	3b1e      	subs	r3, #30
 8002050:	051b      	lsls	r3, r3, #20
 8002052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002056:	e01b      	b.n	8002090 <HAL_ADC_ConfigChannel+0x4c0>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	60fb      	str	r3, [r7, #12]
  return result;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f003 021f 	and.w	r2, r3, #31
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	3b1e      	subs	r3, #30
 800208a:	051b      	lsls	r3, r3, #20
 800208c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002090:	430b      	orrs	r3, r1
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	6892      	ldr	r2, [r2, #8]
 8002096:	4619      	mov	r1, r3
 8002098:	f7ff fa12 	bl	80014c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f280 80c6 	bge.w	8002232 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a67      	ldr	r2, [pc, #412]	; (8002248 <HAL_ADC_ConfigChannel+0x678>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_ADC_ConfigChannel+0x4ea>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a65      	ldr	r2, [pc, #404]	; (800224c <HAL_ADC_ConfigChannel+0x67c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x4ee>
 80020ba:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_ADC_ConfigChannel+0x680>)
 80020bc:	e000      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x4f0>
 80020be:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_ADC_ConfigChannel+0x684>)
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f949 	bl	8001358 <LL_ADC_GetCommonPathInternalCh>
 80020c6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5e      	ldr	r2, [pc, #376]	; (8002248 <HAL_ADC_ConfigChannel+0x678>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_ADC_ConfigChannel+0x50c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5d      	ldr	r2, [pc, #372]	; (800224c <HAL_ADC_ConfigChannel+0x67c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d10e      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x52a>
 80020dc:	485a      	ldr	r0, [pc, #360]	; (8002248 <HAL_ADC_ConfigChannel+0x678>)
 80020de:	f7ff faaf 	bl	8001640 <LL_ADC_IsEnabled>
 80020e2:	4604      	mov	r4, r0
 80020e4:	4859      	ldr	r0, [pc, #356]	; (800224c <HAL_ADC_ConfigChannel+0x67c>)
 80020e6:	f7ff faab 	bl	8001640 <LL_ADC_IsEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4323      	orrs	r3, r4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf0c      	ite	eq
 80020f2:	2301      	moveq	r3, #1
 80020f4:	2300      	movne	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	e008      	b.n	800210c <HAL_ADC_ConfigChannel+0x53c>
 80020fa:	4857      	ldr	r0, [pc, #348]	; (8002258 <HAL_ADC_ConfigChannel+0x688>)
 80020fc:	f7ff faa0 	bl	8001640 <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d07d      	beq.n	800220c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a51      	ldr	r2, [pc, #324]	; (800225c <HAL_ADC_ConfigChannel+0x68c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d130      	bne.n	800217c <HAL_ADC_ConfigChannel+0x5ac>
 800211a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d12b      	bne.n	800217c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <HAL_ADC_ConfigChannel+0x688>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 8081 	bne.w	8002232 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a44      	ldr	r2, [pc, #272]	; (8002248 <HAL_ADC_ConfigChannel+0x678>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x574>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a43      	ldr	r2, [pc, #268]	; (800224c <HAL_ADC_ConfigChannel+0x67c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x578>
 8002144:	4a42      	ldr	r2, [pc, #264]	; (8002250 <HAL_ADC_ConfigChannel+0x680>)
 8002146:	e000      	b.n	800214a <HAL_ADC_ConfigChannel+0x57a>
 8002148:	4a42      	ldr	r2, [pc, #264]	; (8002254 <HAL_ADC_ConfigChannel+0x684>)
 800214a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f7ff f8ed 	bl	8001332 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002158:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_ADC_ConfigChannel+0x690>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	4a41      	ldr	r2, [pc, #260]	; (8002264 <HAL_ADC_ConfigChannel+0x694>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800216c:	e002      	b.n	8002174 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800217a:	e05a      	b.n	8002232 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a39      	ldr	r2, [pc, #228]	; (8002268 <HAL_ADC_ConfigChannel+0x698>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d11e      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x5f4>
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d119      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a30      	ldr	r2, [pc, #192]	; (8002258 <HAL_ADC_ConfigChannel+0x688>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d14b      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <HAL_ADC_ConfigChannel+0x678>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x5de>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a28      	ldr	r2, [pc, #160]	; (800224c <HAL_ADC_ConfigChannel+0x67c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x5e2>
 80021ae:	4a28      	ldr	r2, [pc, #160]	; (8002250 <HAL_ADC_ConfigChannel+0x680>)
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x5e4>
 80021b2:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_ADC_ConfigChannel+0x684>)
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f7ff f8b8 	bl	8001332 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021c2:	e036      	b.n	8002232 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a28      	ldr	r2, [pc, #160]	; (800226c <HAL_ADC_ConfigChannel+0x69c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d131      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x662>
 80021ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d12c      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_ADC_ConfigChannel+0x688>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d127      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <HAL_ADC_ConfigChannel+0x678>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x626>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a16      	ldr	r2, [pc, #88]	; (800224c <HAL_ADC_ConfigChannel+0x67c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x62a>
 80021f6:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_ADC_ConfigChannel+0x680>)
 80021f8:	e000      	b.n	80021fc <HAL_ADC_ConfigChannel+0x62c>
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <HAL_ADC_ConfigChannel+0x684>)
 80021fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7ff f894 	bl	8001332 <LL_ADC_SetCommonPathInternalCh>
 800220a:	e012      	b.n	8002232 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800221e:	e008      	b.n	8002232 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	f043 0220 	orr.w	r2, r3, #32
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800223a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800223e:	4618      	mov	r0, r3
 8002240:	3784      	adds	r7, #132	; 0x84
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}
 8002246:	bf00      	nop
 8002248:	40022000 	.word	0x40022000
 800224c:	40022100 	.word	0x40022100
 8002250:	40022300 	.word	0x40022300
 8002254:	58026300 	.word	0x58026300
 8002258:	58026000 	.word	0x58026000
 800225c:	cb840000 	.word	0xcb840000
 8002260:	24000000 	.word	0x24000000
 8002264:	053e2d63 	.word	0x053e2d63
 8002268:	c7520000 	.word	0xc7520000
 800226c:	cfb80000 	.word	0xcfb80000

08002270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff f9df 	bl	8001640 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d16e      	bne.n	8002366 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	4b38      	ldr	r3, [pc, #224]	; (8002370 <ADC_Enable+0x100>)
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e05a      	b.n	8002368 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f9ae 	bl	8001618 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022bc:	f7fe ffea 	bl	8001294 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <ADC_Enable+0x104>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <ADC_Enable+0x66>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a29      	ldr	r2, [pc, #164]	; (8002378 <ADC_Enable+0x108>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <ADC_Enable+0x6a>
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <ADC_Enable+0x10c>)
 80022d8:	e000      	b.n	80022dc <ADC_Enable+0x6c>
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <ADC_Enable+0x110>)
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff f93f 	bl	8001560 <LL_ADC_GetMultimode>
 80022e2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <ADC_Enable+0x108>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d002      	beq.n	80022f4 <ADC_Enable+0x84>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e000      	b.n	80022f6 <ADC_Enable+0x86>
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <ADC_Enable+0x104>)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02c      	beq.n	8002358 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d130      	bne.n	8002366 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002304:	e028      	b.n	8002358 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f998 	bl	8001640 <LL_ADC_IsEnabled>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f97c 	bl	8001618 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002320:	f7fe ffb8 	bl	8001294 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d914      	bls.n	8002358 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d00d      	beq.n	8002358 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	f043 0210 	orr.w	r2, r3, #16
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d1cf      	bne.n	8002306 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	8000003f 	.word	0x8000003f
 8002374:	40022000 	.word	0x40022000
 8002378:	40022100 	.word	0x40022100
 800237c:	40022300 	.word	0x40022300
 8002380:	58026300 	.word	0x58026300

08002384 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d14b      	bne.n	8002436 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d021      	beq.n	80023fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f82d 	bl	800141c <LL_ADC_REG_IsTriggerSourceSWStart>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d032      	beq.n	800242e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d12b      	bne.n	800242e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d11f      	bne.n	800242e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
 80023fa:	e018      	b.n	800242e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d111      	bne.n	800242e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7fe fbf4 	bl	8000c1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002434:	e00e      	b.n	8002454 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff fbba 	bl	8001bbc <HAL_ADC_ErrorCallback>
}
 8002448:	e004      	b.n	8002454 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f7ff fb9c 	bl	8001ba8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	f043 0204 	orr.w	r2, r3, #4
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff fb8c 	bl	8001bbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7a      	ldr	r2, [pc, #488]	; (80026a4 <ADC_ConfigureBoostMode+0x1f8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <ADC_ConfigureBoostMode+0x1c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a79      	ldr	r2, [pc, #484]	; (80026a8 <ADC_ConfigureBoostMode+0x1fc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d109      	bne.n	80024dc <ADC_ConfigureBoostMode+0x30>
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <ADC_ConfigureBoostMode+0x200>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e008      	b.n	80024ee <ADC_ConfigureBoostMode+0x42>
 80024dc:	4b74      	ldr	r3, [pc, #464]	; (80026b0 <ADC_ConfigureBoostMode+0x204>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01c      	beq.n	800252c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80024f2:	f004 fac5 	bl	8006a80 <HAL_RCC_GetHCLKFreq>
 80024f6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002500:	d010      	beq.n	8002524 <ADC_ConfigureBoostMode+0x78>
 8002502:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002506:	d873      	bhi.n	80025f0 <ADC_ConfigureBoostMode+0x144>
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d002      	beq.n	8002514 <ADC_ConfigureBoostMode+0x68>
 800250e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002512:	d16d      	bne.n	80025f0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	60fb      	str	r3, [r7, #12]
        break;
 8002522:	e068      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	60fb      	str	r3, [r7, #12]
        break;
 800252a:	e064      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800252c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002530:	f04f 0100 	mov.w	r1, #0
 8002534:	f005 fd0a 	bl	8007f4c <HAL_RCCEx_GetPeriphCLKFreq>
 8002538:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002542:	d051      	beq.n	80025e8 <ADC_ConfigureBoostMode+0x13c>
 8002544:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002548:	d854      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 800254a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800254e:	d047      	beq.n	80025e0 <ADC_ConfigureBoostMode+0x134>
 8002550:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002554:	d84e      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 8002556:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800255a:	d03d      	beq.n	80025d8 <ADC_ConfigureBoostMode+0x12c>
 800255c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002560:	d848      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 8002562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002566:	d033      	beq.n	80025d0 <ADC_ConfigureBoostMode+0x124>
 8002568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800256c:	d842      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 800256e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002572:	d029      	beq.n	80025c8 <ADC_ConfigureBoostMode+0x11c>
 8002574:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002578:	d83c      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 800257a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800257e:	d01a      	beq.n	80025b6 <ADC_ConfigureBoostMode+0x10a>
 8002580:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002584:	d836      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 8002586:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800258a:	d014      	beq.n	80025b6 <ADC_ConfigureBoostMode+0x10a>
 800258c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002590:	d830      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 8002592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002596:	d00e      	beq.n	80025b6 <ADC_ConfigureBoostMode+0x10a>
 8002598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259c:	d82a      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 800259e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025a2:	d008      	beq.n	80025b6 <ADC_ConfigureBoostMode+0x10a>
 80025a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025a8:	d824      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x148>
 80025aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ae:	d002      	beq.n	80025b6 <ADC_ConfigureBoostMode+0x10a>
 80025b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025b4:	d11e      	bne.n	80025f4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	0c9b      	lsrs	r3, r3, #18
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	60fb      	str	r3, [r7, #12]
        break;
 80025c6:	e016      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	60fb      	str	r3, [r7, #12]
        break;
 80025ce:	e012      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	60fb      	str	r3, [r7, #12]
        break;
 80025d6:	e00e      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	60fb      	str	r3, [r7, #12]
        break;
 80025de:	e00a      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	09db      	lsrs	r3, r3, #7
 80025e4:	60fb      	str	r3, [r7, #12]
        break;
 80025e6:	e006      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	60fb      	str	r3, [r7, #12]
        break;
 80025ee:	e002      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80025f0:	bf00      	nop
 80025f2:	e000      	b.n	80025f6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80025f4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80025f6:	f7fe fe7d 	bl	80012f4 <HAL_GetREVID>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002600:	4293      	cmp	r3, r2
 8002602:	d815      	bhi.n	8002630 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <ADC_ConfigureBoostMode+0x208>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d908      	bls.n	800261e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800261c:	e03e      	b.n	800269c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800262c:	609a      	str	r2, [r3, #8]
}
 800262e:	e035      	b.n	800269c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <ADC_ConfigureBoostMode+0x20c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d808      	bhi.n	8002650 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	e025      	b.n	800269c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <ADC_ConfigureBoostMode+0x210>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d80a      	bhi.n	800266e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	e016      	b.n	800269c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <ADC_ConfigureBoostMode+0x214>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d80a      	bhi.n	800268c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	609a      	str	r2, [r3, #8]
}
 800268a:	e007      	b.n	800269c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800269a:	609a      	str	r2, [r3, #8]
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40022000 	.word	0x40022000
 80026a8:	40022100 	.word	0x40022100
 80026ac:	40022300 	.word	0x40022300
 80026b0:	58026300 	.word	0x58026300
 80026b4:	01312d00 	.word	0x01312d00
 80026b8:	005f5e10 	.word	0x005f5e10
 80026bc:	00bebc20 	.word	0x00bebc20
 80026c0:	017d7840 	.word	0x017d7840

080026c4 <LL_ADC_IsEnabled>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <LL_ADC_IsEnabled+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_IsEnabled+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_REG_IsConversionOngoing>:
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d101      	bne.n	8002702 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b09f      	sub	sp, #124	; 0x7c
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800272a:	2302      	movs	r3, #2
 800272c:	e0be      	b.n	80028ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800273a:	2300      	movs	r3, #0
 800273c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a5c      	ldr	r2, [pc, #368]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d102      	bne.n	800274e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002748:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	e001      	b.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e09d      	b.n	80028ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ffb9 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002778:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ffb3 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d17f      	bne.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800278a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800278c:	2b00      	cmp	r3, #0
 800278e:	d17c      	bne.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a47      	ldr	r2, [pc, #284]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a46      	ldr	r2, [pc, #280]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80027a4:	4b45      	ldr	r3, [pc, #276]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80027a6:	e000      	b.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80027aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d039      	beq.n	8002828 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80027b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3a      	ldr	r2, [pc, #232]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10e      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80027da:	4836      	ldr	r0, [pc, #216]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80027dc:	f7ff ff72 	bl	80026c4 <LL_ADC_IsEnabled>
 80027e0:	4604      	mov	r4, r0
 80027e2:	4835      	ldr	r0, [pc, #212]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80027e4:	f7ff ff6e 	bl	80026c4 <LL_ADC_IsEnabled>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4323      	orrs	r3, r4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e008      	b.n	800280a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80027f8:	4832      	ldr	r0, [pc, #200]	; (80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80027fa:	f7ff ff63 	bl	80026c4 <LL_ADC_IsEnabled>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d047      	beq.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002814:	4013      	ands	r3, r2
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	6811      	ldr	r1, [r2, #0]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	6892      	ldr	r2, [r2, #8]
 800281e:	430a      	orrs	r2, r1
 8002820:	431a      	orrs	r2, r3
 8002822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002824:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002826:	e03a      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002832:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d10e      	bne.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002848:	481a      	ldr	r0, [pc, #104]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800284a:	f7ff ff3b 	bl	80026c4 <LL_ADC_IsEnabled>
 800284e:	4604      	mov	r4, r0
 8002850:	4819      	ldr	r0, [pc, #100]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002852:	f7ff ff37 	bl	80026c4 <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	4323      	orrs	r3, r4
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf0c      	ite	eq
 800285e:	2301      	moveq	r3, #1
 8002860:	2300      	movne	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e008      	b.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002866:	4817      	ldr	r0, [pc, #92]	; (80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002868:	f7ff ff2c 	bl	80026c4 <LL_ADC_IsEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d010      	beq.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800287c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002882:	4013      	ands	r3, r2
 8002884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002886:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002888:	e009      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800289c:	e000      	b.n	80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800289e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	377c      	adds	r7, #124	; 0x7c
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40022100 	.word	0x40022100
 80028bc:	40022300 	.word	0x40022300
 80028c0:	58026300 	.word	0x58026300
 80028c4:	58026000 	.word	0x58026000
 80028c8:	fffff0e0 	.word	0xfffff0e0

080028cc <__NVIC_SetPriorityGrouping>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <__NVIC_SetPriorityGrouping+0x40>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x40>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00
 8002910:	05fa0000 	.word	0x05fa0000

08002914 <__NVIC_GetPriorityGrouping>:
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff29 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff40 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff90 	bl	80029c0 <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5f 	bl	800296c <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff33 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa4 	bl	8002a28 <SysTick_Config>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7fe fbce 	bl	8001294 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e316      	b.n	8003132 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a66      	ldr	r2, [pc, #408]	; (8002ca4 <HAL_DMA_Init+0x1b8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d04a      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_DMA_Init+0x1bc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d045      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a63      	ldr	r2, [pc, #396]	; (8002cac <HAL_DMA_Init+0x1c0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d040      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a62      	ldr	r2, [pc, #392]	; (8002cb0 <HAL_DMA_Init+0x1c4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d03b      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a60      	ldr	r2, [pc, #384]	; (8002cb4 <HAL_DMA_Init+0x1c8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d036      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a5f      	ldr	r2, [pc, #380]	; (8002cb8 <HAL_DMA_Init+0x1cc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d031      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a5d      	ldr	r2, [pc, #372]	; (8002cbc <HAL_DMA_Init+0x1d0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d02c      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a5c      	ldr	r2, [pc, #368]	; (8002cc0 <HAL_DMA_Init+0x1d4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d027      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_DMA_Init+0x1d8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d022      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a59      	ldr	r2, [pc, #356]	; (8002cc8 <HAL_DMA_Init+0x1dc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d01d      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_DMA_Init+0x1e0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d018      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a56      	ldr	r2, [pc, #344]	; (8002cd0 <HAL_DMA_Init+0x1e4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d013      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a54      	ldr	r2, [pc, #336]	; (8002cd4 <HAL_DMA_Init+0x1e8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00e      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a53      	ldr	r2, [pc, #332]	; (8002cd8 <HAL_DMA_Init+0x1ec>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a51      	ldr	r2, [pc, #324]	; (8002cdc <HAL_DMA_Init+0x1f0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_DMA_Init+0xb8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_DMA_Init+0x1f4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_DMA_Init+0xbc>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_DMA_Init+0xbe>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 813b 	beq.w	8002e26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a37      	ldr	r2, [pc, #220]	; (8002ca4 <HAL_DMA_Init+0x1b8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d04a      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <HAL_DMA_Init+0x1bc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d045      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a34      	ldr	r2, [pc, #208]	; (8002cac <HAL_DMA_Init+0x1c0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d040      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_DMA_Init+0x1c4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d03b      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <HAL_DMA_Init+0x1c8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d036      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <HAL_DMA_Init+0x1cc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d031      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <HAL_DMA_Init+0x1d0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d02c      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_DMA_Init+0x1d4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d027      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <HAL_DMA_Init+0x1d8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d022      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_DMA_Init+0x1dc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d01d      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_DMA_Init+0x1e0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d018      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_DMA_Init+0x1e4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <HAL_DMA_Init+0x1e8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00e      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <HAL_DMA_Init+0x1ec>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_DMA_Init+0x1f0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_DMA_Init+0x174>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_DMA_Init+0x1f4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d108      	bne.n	8002c72 <HAL_DMA_Init+0x186>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e007      	b.n	8002c82 <HAL_DMA_Init+0x196>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c82:	e02f      	b.n	8002ce4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c84:	f7fe fb06 	bl	8001294 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d928      	bls.n	8002ce4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e246      	b.n	8003132 <HAL_DMA_Init+0x646>
 8002ca4:	40020010 	.word	0x40020010
 8002ca8:	40020028 	.word	0x40020028
 8002cac:	40020040 	.word	0x40020040
 8002cb0:	40020058 	.word	0x40020058
 8002cb4:	40020070 	.word	0x40020070
 8002cb8:	40020088 	.word	0x40020088
 8002cbc:	400200a0 	.word	0x400200a0
 8002cc0:	400200b8 	.word	0x400200b8
 8002cc4:	40020410 	.word	0x40020410
 8002cc8:	40020428 	.word	0x40020428
 8002ccc:	40020440 	.word	0x40020440
 8002cd0:	40020458 	.word	0x40020458
 8002cd4:	40020470 	.word	0x40020470
 8002cd8:	40020488 	.word	0x40020488
 8002cdc:	400204a0 	.word	0x400204a0
 8002ce0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1c8      	bne.n	8002c84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4b83      	ldr	r3, [pc, #524]	; (8002f0c <HAL_DMA_Init+0x420>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002d0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d107      	bne.n	8002d48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4313      	orrs	r3, r2
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d48:	4b71      	ldr	r3, [pc, #452]	; (8002f10 <HAL_DMA_Init+0x424>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b71      	ldr	r3, [pc, #452]	; (8002f14 <HAL_DMA_Init+0x428>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d54:	d328      	bcc.n	8002da8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b28      	cmp	r3, #40	; 0x28
 8002d5c:	d903      	bls.n	8002d66 <HAL_DMA_Init+0x27a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b2e      	cmp	r3, #46	; 0x2e
 8002d64:	d917      	bls.n	8002d96 <HAL_DMA_Init+0x2aa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b3e      	cmp	r3, #62	; 0x3e
 8002d6c:	d903      	bls.n	8002d76 <HAL_DMA_Init+0x28a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b42      	cmp	r3, #66	; 0x42
 8002d74:	d90f      	bls.n	8002d96 <HAL_DMA_Init+0x2aa>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b46      	cmp	r3, #70	; 0x46
 8002d7c:	d903      	bls.n	8002d86 <HAL_DMA_Init+0x29a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b48      	cmp	r3, #72	; 0x48
 8002d84:	d907      	bls.n	8002d96 <HAL_DMA_Init+0x2aa>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b4e      	cmp	r3, #78	; 0x4e
 8002d8c:	d905      	bls.n	8002d9a <HAL_DMA_Init+0x2ae>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b52      	cmp	r3, #82	; 0x52
 8002d94:	d801      	bhi.n	8002d9a <HAL_DMA_Init+0x2ae>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_DMA_Init+0x2b0>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f023 0307 	bic.w	r3, r3, #7
 8002dbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d117      	bne.n	8002e02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f002 fb33 	bl	8005450 <DMA_CheckFifoParam>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2240      	movs	r2, #64	; 0x40
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e197      	b.n	8003132 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f002 fa6e 	bl	80052ec <DMA_CalcBaseAndBitshift>
 8002e10:	4603      	mov	r3, r0
 8002e12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	223f      	movs	r2, #63	; 0x3f
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	e0cd      	b.n	8002fc2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3b      	ldr	r2, [pc, #236]	; (8002f18 <HAL_DMA_Init+0x42c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_Init+0x38a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a39      	ldr	r2, [pc, #228]	; (8002f1c <HAL_DMA_Init+0x430>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01d      	beq.n	8002e76 <HAL_DMA_Init+0x38a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a38      	ldr	r2, [pc, #224]	; (8002f20 <HAL_DMA_Init+0x434>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d018      	beq.n	8002e76 <HAL_DMA_Init+0x38a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a36      	ldr	r2, [pc, #216]	; (8002f24 <HAL_DMA_Init+0x438>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_DMA_Init+0x38a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a35      	ldr	r2, [pc, #212]	; (8002f28 <HAL_DMA_Init+0x43c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_DMA_Init+0x38a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <HAL_DMA_Init+0x440>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_DMA_Init+0x38a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a32      	ldr	r2, [pc, #200]	; (8002f30 <HAL_DMA_Init+0x444>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_DMA_Init+0x38a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <HAL_DMA_Init+0x448>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_DMA_Init+0x38e>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_DMA_Init+0x390>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8097 	beq.w	8002fb0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <HAL_DMA_Init+0x42c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d021      	beq.n	8002ed0 <HAL_DMA_Init+0x3e4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_DMA_Init+0x430>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01c      	beq.n	8002ed0 <HAL_DMA_Init+0x3e4>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <HAL_DMA_Init+0x434>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d017      	beq.n	8002ed0 <HAL_DMA_Init+0x3e4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_DMA_Init+0x438>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d012      	beq.n	8002ed0 <HAL_DMA_Init+0x3e4>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_DMA_Init+0x43c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_DMA_Init+0x3e4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_DMA_Init+0x440>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d008      	beq.n	8002ed0 <HAL_DMA_Init+0x3e4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_DMA_Init+0x444>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <HAL_DMA_Init+0x3e4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_DMA_Init+0x448>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_DMA_Init+0x44c>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d020      	beq.n	8002f3c <HAL_DMA_Init+0x450>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d102      	bne.n	8002f08 <HAL_DMA_Init+0x41c>
 8002f02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f06:	e01a      	b.n	8002f3e <HAL_DMA_Init+0x452>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e018      	b.n	8002f3e <HAL_DMA_Init+0x452>
 8002f0c:	fe10803f 	.word	0xfe10803f
 8002f10:	5c001000 	.word	0x5c001000
 8002f14:	ffff0000 	.word	0xffff0000
 8002f18:	58025408 	.word	0x58025408
 8002f1c:	5802541c 	.word	0x5802541c
 8002f20:	58025430 	.word	0x58025430
 8002f24:	58025444 	.word	0x58025444
 8002f28:	58025458 	.word	0x58025458
 8002f2c:	5802546c 	.word	0x5802546c
 8002f30:	58025480 	.word	0x58025480
 8002f34:	58025494 	.word	0x58025494
 8002f38:	fffe000f 	.word	0xfffe000f
 8002f3c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f6c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b6e      	ldr	r3, [pc, #440]	; (800313c <HAL_DMA_Init+0x650>)
 8002f84:	4413      	add	r3, r2
 8002f86:	4a6e      	ldr	r2, [pc, #440]	; (8003140 <HAL_DMA_Init+0x654>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	009a      	lsls	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f002 f9a9 	bl	80052ec <DMA_CalcBaseAndBitshift>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	e008      	b.n	8002fc2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2240      	movs	r2, #64	; 0x40
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0b7      	b.n	8003132 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5f      	ldr	r2, [pc, #380]	; (8003144 <HAL_DMA_Init+0x658>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d072      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5d      	ldr	r2, [pc, #372]	; (8003148 <HAL_DMA_Init+0x65c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d06d      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a5c      	ldr	r2, [pc, #368]	; (800314c <HAL_DMA_Init+0x660>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d068      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5a      	ldr	r2, [pc, #360]	; (8003150 <HAL_DMA_Init+0x664>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d063      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a59      	ldr	r2, [pc, #356]	; (8003154 <HAL_DMA_Init+0x668>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d05e      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a57      	ldr	r2, [pc, #348]	; (8003158 <HAL_DMA_Init+0x66c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d059      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a56      	ldr	r2, [pc, #344]	; (800315c <HAL_DMA_Init+0x670>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d054      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a54      	ldr	r2, [pc, #336]	; (8003160 <HAL_DMA_Init+0x674>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d04f      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a53      	ldr	r2, [pc, #332]	; (8003164 <HAL_DMA_Init+0x678>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d04a      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a51      	ldr	r2, [pc, #324]	; (8003168 <HAL_DMA_Init+0x67c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d045      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_DMA_Init+0x680>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d040      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a4e      	ldr	r2, [pc, #312]	; (8003170 <HAL_DMA_Init+0x684>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03b      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a4d      	ldr	r2, [pc, #308]	; (8003174 <HAL_DMA_Init+0x688>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d036      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a4b      	ldr	r2, [pc, #300]	; (8003178 <HAL_DMA_Init+0x68c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a4a      	ldr	r2, [pc, #296]	; (800317c <HAL_DMA_Init+0x690>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d02c      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a48      	ldr	r2, [pc, #288]	; (8003180 <HAL_DMA_Init+0x694>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d027      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a47      	ldr	r2, [pc, #284]	; (8003184 <HAL_DMA_Init+0x698>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a45      	ldr	r2, [pc, #276]	; (8003188 <HAL_DMA_Init+0x69c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a44      	ldr	r2, [pc, #272]	; (800318c <HAL_DMA_Init+0x6a0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a42      	ldr	r2, [pc, #264]	; (8003190 <HAL_DMA_Init+0x6a4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a41      	ldr	r2, [pc, #260]	; (8003194 <HAL_DMA_Init+0x6a8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3f      	ldr	r2, [pc, #252]	; (8003198 <HAL_DMA_Init+0x6ac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3e      	ldr	r2, [pc, #248]	; (800319c <HAL_DMA_Init+0x6b0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_Init+0x5c6>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3c      	ldr	r2, [pc, #240]	; (80031a0 <HAL_DMA_Init+0x6b4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_DMA_Init+0x5ca>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_DMA_Init+0x5cc>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d032      	beq.n	8003122 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f002 fa43 	bl	8005548 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d102      	bne.n	80030d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <HAL_DMA_Init+0x624>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d80c      	bhi.n	8003110 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f002 fac0 	bl	800567c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	e008      	b.n	8003122 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	a7fdabf8 	.word	0xa7fdabf8
 8003140:	cccccccd 	.word	0xcccccccd
 8003144:	40020010 	.word	0x40020010
 8003148:	40020028 	.word	0x40020028
 800314c:	40020040 	.word	0x40020040
 8003150:	40020058 	.word	0x40020058
 8003154:	40020070 	.word	0x40020070
 8003158:	40020088 	.word	0x40020088
 800315c:	400200a0 	.word	0x400200a0
 8003160:	400200b8 	.word	0x400200b8
 8003164:	40020410 	.word	0x40020410
 8003168:	40020428 	.word	0x40020428
 800316c:	40020440 	.word	0x40020440
 8003170:	40020458 	.word	0x40020458
 8003174:	40020470 	.word	0x40020470
 8003178:	40020488 	.word	0x40020488
 800317c:	400204a0 	.word	0x400204a0
 8003180:	400204b8 	.word	0x400204b8
 8003184:	58025408 	.word	0x58025408
 8003188:	5802541c 	.word	0x5802541c
 800318c:	58025430 	.word	0x58025430
 8003190:	58025444 	.word	0x58025444
 8003194:	58025458 	.word	0x58025458
 8003198:	5802546c 	.word	0x5802546c
 800319c:	58025480 	.word	0x58025480
 80031a0:	58025494 	.word	0x58025494

080031a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e226      	b.n	800360e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_DMA_Start_IT+0x2a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e21f      	b.n	800360e <HAL_DMA_Start_IT+0x46a>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	f040 820a 	bne.w	80035f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a68      	ldr	r2, [pc, #416]	; (8003398 <HAL_DMA_Start_IT+0x1f4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04a      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a66      	ldr	r2, [pc, #408]	; (800339c <HAL_DMA_Start_IT+0x1f8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d045      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a65      	ldr	r2, [pc, #404]	; (80033a0 <HAL_DMA_Start_IT+0x1fc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d040      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a63      	ldr	r2, [pc, #396]	; (80033a4 <HAL_DMA_Start_IT+0x200>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d03b      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a62      	ldr	r2, [pc, #392]	; (80033a8 <HAL_DMA_Start_IT+0x204>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d036      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a60      	ldr	r2, [pc, #384]	; (80033ac <HAL_DMA_Start_IT+0x208>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d031      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a5f      	ldr	r2, [pc, #380]	; (80033b0 <HAL_DMA_Start_IT+0x20c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d02c      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_DMA_Start_IT+0x210>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d027      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_DMA_Start_IT+0x214>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5a      	ldr	r2, [pc, #360]	; (80033bc <HAL_DMA_Start_IT+0x218>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a59      	ldr	r2, [pc, #356]	; (80033c0 <HAL_DMA_Start_IT+0x21c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d018      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a57      	ldr	r2, [pc, #348]	; (80033c4 <HAL_DMA_Start_IT+0x220>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a56      	ldr	r2, [pc, #344]	; (80033c8 <HAL_DMA_Start_IT+0x224>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a54      	ldr	r2, [pc, #336]	; (80033cc <HAL_DMA_Start_IT+0x228>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a53      	ldr	r2, [pc, #332]	; (80033d0 <HAL_DMA_Start_IT+0x22c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_Start_IT+0xee>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a51      	ldr	r2, [pc, #324]	; (80033d4 <HAL_DMA_Start_IT+0x230>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d108      	bne.n	80032a4 <HAL_DMA_Start_IT+0x100>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e007      	b.n	80032b4 <HAL_DMA_Start_IT+0x110>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f001 fe6a 	bl	8004f94 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a34      	ldr	r2, [pc, #208]	; (8003398 <HAL_DMA_Start_IT+0x1f4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d04a      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a33      	ldr	r2, [pc, #204]	; (800339c <HAL_DMA_Start_IT+0x1f8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d045      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <HAL_DMA_Start_IT+0x1fc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d040      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a30      	ldr	r2, [pc, #192]	; (80033a4 <HAL_DMA_Start_IT+0x200>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d03b      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2e      	ldr	r2, [pc, #184]	; (80033a8 <HAL_DMA_Start_IT+0x204>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d036      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <HAL_DMA_Start_IT+0x208>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d031      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <HAL_DMA_Start_IT+0x20c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02c      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <HAL_DMA_Start_IT+0x210>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d027      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <HAL_DMA_Start_IT+0x214>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d022      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a27      	ldr	r2, [pc, #156]	; (80033bc <HAL_DMA_Start_IT+0x218>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d01d      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <HAL_DMA_Start_IT+0x21c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d018      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a24      	ldr	r2, [pc, #144]	; (80033c4 <HAL_DMA_Start_IT+0x220>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_DMA_Start_IT+0x224>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a21      	ldr	r2, [pc, #132]	; (80033cc <HAL_DMA_Start_IT+0x228>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <HAL_DMA_Start_IT+0x22c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_DMA_Start_IT+0x1bc>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <HAL_DMA_Start_IT+0x230>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_DMA_Start_IT+0x1c0>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_DMA_Start_IT+0x1c2>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d036      	beq.n	80033d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 021e 	bic.w	r2, r3, #30
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0216 	orr.w	r2, r2, #22
 800337c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d03e      	beq.n	8003404 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0208 	orr.w	r2, r2, #8
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e035      	b.n	8003404 <HAL_DMA_Start_IT+0x260>
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 020e 	bic.w	r2, r3, #14
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 020a 	orr.w	r2, r2, #10
 80033ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0204 	orr.w	r2, r2, #4
 8003402:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a83      	ldr	r2, [pc, #524]	; (8003618 <HAL_DMA_Start_IT+0x474>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d072      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a82      	ldr	r2, [pc, #520]	; (800361c <HAL_DMA_Start_IT+0x478>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d06d      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a80      	ldr	r2, [pc, #512]	; (8003620 <HAL_DMA_Start_IT+0x47c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d068      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a7f      	ldr	r2, [pc, #508]	; (8003624 <HAL_DMA_Start_IT+0x480>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d063      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a7d      	ldr	r2, [pc, #500]	; (8003628 <HAL_DMA_Start_IT+0x484>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d05e      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7c      	ldr	r2, [pc, #496]	; (800362c <HAL_DMA_Start_IT+0x488>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d059      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7a      	ldr	r2, [pc, #488]	; (8003630 <HAL_DMA_Start_IT+0x48c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d054      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a79      	ldr	r2, [pc, #484]	; (8003634 <HAL_DMA_Start_IT+0x490>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d04f      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a77      	ldr	r2, [pc, #476]	; (8003638 <HAL_DMA_Start_IT+0x494>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04a      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a76      	ldr	r2, [pc, #472]	; (800363c <HAL_DMA_Start_IT+0x498>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d045      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a74      	ldr	r2, [pc, #464]	; (8003640 <HAL_DMA_Start_IT+0x49c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d040      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a73      	ldr	r2, [pc, #460]	; (8003644 <HAL_DMA_Start_IT+0x4a0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a71      	ldr	r2, [pc, #452]	; (8003648 <HAL_DMA_Start_IT+0x4a4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d036      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a70      	ldr	r2, [pc, #448]	; (800364c <HAL_DMA_Start_IT+0x4a8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d031      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6e      	ldr	r2, [pc, #440]	; (8003650 <HAL_DMA_Start_IT+0x4ac>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02c      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6d      	ldr	r2, [pc, #436]	; (8003654 <HAL_DMA_Start_IT+0x4b0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d027      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6b      	ldr	r2, [pc, #428]	; (8003658 <HAL_DMA_Start_IT+0x4b4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6a      	ldr	r2, [pc, #424]	; (800365c <HAL_DMA_Start_IT+0x4b8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01d      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a68      	ldr	r2, [pc, #416]	; (8003660 <HAL_DMA_Start_IT+0x4bc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a67      	ldr	r2, [pc, #412]	; (8003664 <HAL_DMA_Start_IT+0x4c0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a65      	ldr	r2, [pc, #404]	; (8003668 <HAL_DMA_Start_IT+0x4c4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a64      	ldr	r2, [pc, #400]	; (800366c <HAL_DMA_Start_IT+0x4c8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a62      	ldr	r2, [pc, #392]	; (8003670 <HAL_DMA_Start_IT+0x4cc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_Start_IT+0x350>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a61      	ldr	r2, [pc, #388]	; (8003674 <HAL_DMA_Start_IT+0x4d0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <HAL_DMA_Start_IT+0x354>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_DMA_Start_IT+0x356>
 80034f8:	2300      	movs	r3, #0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01a      	beq.n	8003534 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003532:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a37      	ldr	r2, [pc, #220]	; (8003618 <HAL_DMA_Start_IT+0x474>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d04a      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a36      	ldr	r2, [pc, #216]	; (800361c <HAL_DMA_Start_IT+0x478>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d045      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a34      	ldr	r2, [pc, #208]	; (8003620 <HAL_DMA_Start_IT+0x47c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d040      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a33      	ldr	r2, [pc, #204]	; (8003624 <HAL_DMA_Start_IT+0x480>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d03b      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a31      	ldr	r2, [pc, #196]	; (8003628 <HAL_DMA_Start_IT+0x484>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d036      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a30      	ldr	r2, [pc, #192]	; (800362c <HAL_DMA_Start_IT+0x488>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2e      	ldr	r2, [pc, #184]	; (8003630 <HAL_DMA_Start_IT+0x48c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02c      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2d      	ldr	r2, [pc, #180]	; (8003634 <HAL_DMA_Start_IT+0x490>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d027      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <HAL_DMA_Start_IT+0x494>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d022      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2a      	ldr	r2, [pc, #168]	; (800363c <HAL_DMA_Start_IT+0x498>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01d      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_DMA_Start_IT+0x49c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d018      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_DMA_Start_IT+0x4a0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <HAL_DMA_Start_IT+0x4a4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a24      	ldr	r2, [pc, #144]	; (800364c <HAL_DMA_Start_IT+0x4a8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_DMA_Start_IT+0x4ac>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_DMA_Start_IT+0x430>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <HAL_DMA_Start_IT+0x4b0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d108      	bne.n	80035e6 <HAL_DMA_Start_IT+0x442>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e012      	b.n	800360c <HAL_DMA_Start_IT+0x468>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e009      	b.n	800360c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40020010 	.word	0x40020010
 800361c:	40020028 	.word	0x40020028
 8003620:	40020040 	.word	0x40020040
 8003624:	40020058 	.word	0x40020058
 8003628:	40020070 	.word	0x40020070
 800362c:	40020088 	.word	0x40020088
 8003630:	400200a0 	.word	0x400200a0
 8003634:	400200b8 	.word	0x400200b8
 8003638:	40020410 	.word	0x40020410
 800363c:	40020428 	.word	0x40020428
 8003640:	40020440 	.word	0x40020440
 8003644:	40020458 	.word	0x40020458
 8003648:	40020470 	.word	0x40020470
 800364c:	40020488 	.word	0x40020488
 8003650:	400204a0 	.word	0x400204a0
 8003654:	400204b8 	.word	0x400204b8
 8003658:	58025408 	.word	0x58025408
 800365c:	5802541c 	.word	0x5802541c
 8003660:	58025430 	.word	0x58025430
 8003664:	58025444 	.word	0x58025444
 8003668:	58025458 	.word	0x58025458
 800366c:	5802546c 	.word	0x5802546c
 8003670:	58025480 	.word	0x58025480
 8003674:	58025494 	.word	0x58025494

08003678 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003680:	f7fd fe08 	bl	8001294 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e2dc      	b.n	8003c4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d008      	beq.n	80036ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e2cd      	b.n	8003c4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a76      	ldr	r2, [pc, #472]	; (800388c <HAL_DMA_Abort+0x214>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04a      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a74      	ldr	r2, [pc, #464]	; (8003890 <HAL_DMA_Abort+0x218>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d045      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a73      	ldr	r2, [pc, #460]	; (8003894 <HAL_DMA_Abort+0x21c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d040      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a71      	ldr	r2, [pc, #452]	; (8003898 <HAL_DMA_Abort+0x220>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d03b      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a70      	ldr	r2, [pc, #448]	; (800389c <HAL_DMA_Abort+0x224>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d036      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <HAL_DMA_Abort+0x228>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d031      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6d      	ldr	r2, [pc, #436]	; (80038a4 <HAL_DMA_Abort+0x22c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d02c      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6b      	ldr	r2, [pc, #428]	; (80038a8 <HAL_DMA_Abort+0x230>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d027      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a6a      	ldr	r2, [pc, #424]	; (80038ac <HAL_DMA_Abort+0x234>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a68      	ldr	r2, [pc, #416]	; (80038b0 <HAL_DMA_Abort+0x238>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01d      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a67      	ldr	r2, [pc, #412]	; (80038b4 <HAL_DMA_Abort+0x23c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a65      	ldr	r2, [pc, #404]	; (80038b8 <HAL_DMA_Abort+0x240>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a64      	ldr	r2, [pc, #400]	; (80038bc <HAL_DMA_Abort+0x244>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a62      	ldr	r2, [pc, #392]	; (80038c0 <HAL_DMA_Abort+0x248>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a61      	ldr	r2, [pc, #388]	; (80038c4 <HAL_DMA_Abort+0x24c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5f      	ldr	r2, [pc, #380]	; (80038c8 <HAL_DMA_Abort+0x250>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_DMA_Abort+0xda>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_DMA_Abort+0xdc>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 021e 	bic.w	r2, r2, #30
 8003766:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003776:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e00a      	b.n	8003796 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 020e 	bic.w	r2, r2, #14
 800378e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3c      	ldr	r2, [pc, #240]	; (800388c <HAL_DMA_Abort+0x214>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d072      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a3a      	ldr	r2, [pc, #232]	; (8003890 <HAL_DMA_Abort+0x218>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d06d      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a39      	ldr	r2, [pc, #228]	; (8003894 <HAL_DMA_Abort+0x21c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d068      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a37      	ldr	r2, [pc, #220]	; (8003898 <HAL_DMA_Abort+0x220>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d063      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a36      	ldr	r2, [pc, #216]	; (800389c <HAL_DMA_Abort+0x224>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d05e      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a34      	ldr	r2, [pc, #208]	; (80038a0 <HAL_DMA_Abort+0x228>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d059      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a33      	ldr	r2, [pc, #204]	; (80038a4 <HAL_DMA_Abort+0x22c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d054      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a31      	ldr	r2, [pc, #196]	; (80038a8 <HAL_DMA_Abort+0x230>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d04f      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a30      	ldr	r2, [pc, #192]	; (80038ac <HAL_DMA_Abort+0x234>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2e      	ldr	r2, [pc, #184]	; (80038b0 <HAL_DMA_Abort+0x238>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2d      	ldr	r2, [pc, #180]	; (80038b4 <HAL_DMA_Abort+0x23c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2b      	ldr	r2, [pc, #172]	; (80038b8 <HAL_DMA_Abort+0x240>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <HAL_DMA_Abort+0x244>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <HAL_DMA_Abort+0x248>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <HAL_DMA_Abort+0x24c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a25      	ldr	r2, [pc, #148]	; (80038c8 <HAL_DMA_Abort+0x250>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a24      	ldr	r2, [pc, #144]	; (80038cc <HAL_DMA_Abort+0x254>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <HAL_DMA_Abort+0x258>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <HAL_DMA_Abort+0x25c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <HAL_DMA_Abort+0x260>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <HAL_DMA_Abort+0x264>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <HAL_DMA_Abort+0x268>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_DMA_Abort+0x26c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <HAL_DMA_Abort+0x270>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d132      	bne.n	80038ec <HAL_DMA_Abort+0x274>
 8003886:	2301      	movs	r3, #1
 8003888:	e031      	b.n	80038ee <HAL_DMA_Abort+0x276>
 800388a:	bf00      	nop
 800388c:	40020010 	.word	0x40020010
 8003890:	40020028 	.word	0x40020028
 8003894:	40020040 	.word	0x40020040
 8003898:	40020058 	.word	0x40020058
 800389c:	40020070 	.word	0x40020070
 80038a0:	40020088 	.word	0x40020088
 80038a4:	400200a0 	.word	0x400200a0
 80038a8:	400200b8 	.word	0x400200b8
 80038ac:	40020410 	.word	0x40020410
 80038b0:	40020428 	.word	0x40020428
 80038b4:	40020440 	.word	0x40020440
 80038b8:	40020458 	.word	0x40020458
 80038bc:	40020470 	.word	0x40020470
 80038c0:	40020488 	.word	0x40020488
 80038c4:	400204a0 	.word	0x400204a0
 80038c8:	400204b8 	.word	0x400204b8
 80038cc:	58025408 	.word	0x58025408
 80038d0:	5802541c 	.word	0x5802541c
 80038d4:	58025430 	.word	0x58025430
 80038d8:	58025444 	.word	0x58025444
 80038dc:	58025458 	.word	0x58025458
 80038e0:	5802546c 	.word	0x5802546c
 80038e4:	58025480 	.word	0x58025480
 80038e8:	58025494 	.word	0x58025494
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003900:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6d      	ldr	r2, [pc, #436]	; (8003abc <HAL_DMA_Abort+0x444>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6b      	ldr	r2, [pc, #428]	; (8003ac0 <HAL_DMA_Abort+0x448>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6a      	ldr	r2, [pc, #424]	; (8003ac4 <HAL_DMA_Abort+0x44c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a68      	ldr	r2, [pc, #416]	; (8003ac8 <HAL_DMA_Abort+0x450>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a67      	ldr	r2, [pc, #412]	; (8003acc <HAL_DMA_Abort+0x454>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a65      	ldr	r2, [pc, #404]	; (8003ad0 <HAL_DMA_Abort+0x458>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a64      	ldr	r2, [pc, #400]	; (8003ad4 <HAL_DMA_Abort+0x45c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a62      	ldr	r2, [pc, #392]	; (8003ad8 <HAL_DMA_Abort+0x460>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a61      	ldr	r2, [pc, #388]	; (8003adc <HAL_DMA_Abort+0x464>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5f      	ldr	r2, [pc, #380]	; (8003ae0 <HAL_DMA_Abort+0x468>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a5e      	ldr	r2, [pc, #376]	; (8003ae4 <HAL_DMA_Abort+0x46c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a5c      	ldr	r2, [pc, #368]	; (8003ae8 <HAL_DMA_Abort+0x470>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a5b      	ldr	r2, [pc, #364]	; (8003aec <HAL_DMA_Abort+0x474>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a59      	ldr	r2, [pc, #356]	; (8003af0 <HAL_DMA_Abort+0x478>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_DMA_Abort+0x47c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a56      	ldr	r2, [pc, #344]	; (8003af8 <HAL_DMA_Abort+0x480>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <HAL_DMA_Abort+0x33c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e007      	b.n	80039c4 <HAL_DMA_Abort+0x34c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039c4:	e013      	b.n	80039ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039c6:	f7fd fc65 	bl	8001294 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	d90c      	bls.n	80039ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e12d      	b.n	8003c4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e5      	bne.n	80039c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a2f      	ldr	r2, [pc, #188]	; (8003abc <HAL_DMA_Abort+0x444>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d04a      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <HAL_DMA_Abort+0x448>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d045      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <HAL_DMA_Abort+0x44c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d040      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ac8 <HAL_DMA_Abort+0x450>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d03b      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a29      	ldr	r2, [pc, #164]	; (8003acc <HAL_DMA_Abort+0x454>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d036      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <HAL_DMA_Abort+0x458>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d031      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <HAL_DMA_Abort+0x45c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d02c      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <HAL_DMA_Abort+0x460>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d027      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a23      	ldr	r2, [pc, #140]	; (8003adc <HAL_DMA_Abort+0x464>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_DMA_Abort+0x468>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01d      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <HAL_DMA_Abort+0x46c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_DMA_Abort+0x470>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_DMA_Abort+0x474>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_DMA_Abort+0x478>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_DMA_Abort+0x47c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_DMA_Abort+0x480>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Abort+0x426>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_DMA_Abort+0x428>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02b      	beq.n	8003afc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	223f      	movs	r2, #63	; 0x3f
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	e02a      	b.n	8003b12 <HAL_DMA_Abort+0x49a>
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a4f      	ldr	r2, [pc, #316]	; (8003c54 <HAL_DMA_Abort+0x5dc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d072      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a4d      	ldr	r2, [pc, #308]	; (8003c58 <HAL_DMA_Abort+0x5e0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d06d      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4c      	ldr	r2, [pc, #304]	; (8003c5c <HAL_DMA_Abort+0x5e4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d068      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4a      	ldr	r2, [pc, #296]	; (8003c60 <HAL_DMA_Abort+0x5e8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d063      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a49      	ldr	r2, [pc, #292]	; (8003c64 <HAL_DMA_Abort+0x5ec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d05e      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a47      	ldr	r2, [pc, #284]	; (8003c68 <HAL_DMA_Abort+0x5f0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d059      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a46      	ldr	r2, [pc, #280]	; (8003c6c <HAL_DMA_Abort+0x5f4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d054      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a44      	ldr	r2, [pc, #272]	; (8003c70 <HAL_DMA_Abort+0x5f8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d04f      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a43      	ldr	r2, [pc, #268]	; (8003c74 <HAL_DMA_Abort+0x5fc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d04a      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a41      	ldr	r2, [pc, #260]	; (8003c78 <HAL_DMA_Abort+0x600>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d045      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a40      	ldr	r2, [pc, #256]	; (8003c7c <HAL_DMA_Abort+0x604>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d040      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <HAL_DMA_Abort+0x608>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d03b      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <HAL_DMA_Abort+0x60c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d036      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <HAL_DMA_Abort+0x610>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d031      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <HAL_DMA_Abort+0x614>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d02c      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_DMA_Abort+0x618>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d027      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a37      	ldr	r2, [pc, #220]	; (8003c94 <HAL_DMA_Abort+0x61c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d022      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a35      	ldr	r2, [pc, #212]	; (8003c98 <HAL_DMA_Abort+0x620>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01d      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <HAL_DMA_Abort+0x624>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d018      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a32      	ldr	r2, [pc, #200]	; (8003ca0 <HAL_DMA_Abort+0x628>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <HAL_DMA_Abort+0x62c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <HAL_DMA_Abort+0x630>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2e      	ldr	r2, [pc, #184]	; (8003cac <HAL_DMA_Abort+0x634>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <HAL_DMA_Abort+0x638>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_Abort+0x58e>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_DMA_Abort+0x590>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494

08003cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e237      	b.n	8004136 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d004      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2280      	movs	r2, #128	; 0x80
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e22c      	b.n	8004136 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a5c      	ldr	r2, [pc, #368]	; (8003e54 <HAL_DMA_Abort_IT+0x1a0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04a      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <HAL_DMA_Abort_IT+0x1a4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d045      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a59      	ldr	r2, [pc, #356]	; (8003e5c <HAL_DMA_Abort_IT+0x1a8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d040      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a58      	ldr	r2, [pc, #352]	; (8003e60 <HAL_DMA_Abort_IT+0x1ac>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d03b      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a56      	ldr	r2, [pc, #344]	; (8003e64 <HAL_DMA_Abort_IT+0x1b0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d036      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a55      	ldr	r2, [pc, #340]	; (8003e68 <HAL_DMA_Abort_IT+0x1b4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d031      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a53      	ldr	r2, [pc, #332]	; (8003e6c <HAL_DMA_Abort_IT+0x1b8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02c      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a52      	ldr	r2, [pc, #328]	; (8003e70 <HAL_DMA_Abort_IT+0x1bc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d027      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a50      	ldr	r2, [pc, #320]	; (8003e74 <HAL_DMA_Abort_IT+0x1c0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a4f      	ldr	r2, [pc, #316]	; (8003e78 <HAL_DMA_Abort_IT+0x1c4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01d      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a4d      	ldr	r2, [pc, #308]	; (8003e7c <HAL_DMA_Abort_IT+0x1c8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a4c      	ldr	r2, [pc, #304]	; (8003e80 <HAL_DMA_Abort_IT+0x1cc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a4a      	ldr	r2, [pc, #296]	; (8003e84 <HAL_DMA_Abort_IT+0x1d0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a49      	ldr	r2, [pc, #292]	; (8003e88 <HAL_DMA_Abort_IT+0x1d4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a47      	ldr	r2, [pc, #284]	; (8003e8c <HAL_DMA_Abort_IT+0x1d8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a46      	ldr	r2, [pc, #280]	; (8003e90 <HAL_DMA_Abort_IT+0x1dc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_Abort_IT+0xcc>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_DMA_Abort_IT+0xce>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8086 	beq.w	8003e94 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <HAL_DMA_Abort_IT+0x1a0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d04a      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2e      	ldr	r2, [pc, #184]	; (8003e58 <HAL_DMA_Abort_IT+0x1a4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d045      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2c      	ldr	r2, [pc, #176]	; (8003e5c <HAL_DMA_Abort_IT+0x1a8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d040      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2b      	ldr	r2, [pc, #172]	; (8003e60 <HAL_DMA_Abort_IT+0x1ac>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d03b      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <HAL_DMA_Abort_IT+0x1b0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d036      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <HAL_DMA_Abort_IT+0x1b4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d031      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a26      	ldr	r2, [pc, #152]	; (8003e6c <HAL_DMA_Abort_IT+0x1b8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02c      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a25      	ldr	r2, [pc, #148]	; (8003e70 <HAL_DMA_Abort_IT+0x1bc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d027      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a23      	ldr	r2, [pc, #140]	; (8003e74 <HAL_DMA_Abort_IT+0x1c0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d022      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <HAL_DMA_Abort_IT+0x1c4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01d      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <HAL_DMA_Abort_IT+0x1c8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_DMA_Abort_IT+0x1cc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_DMA_Abort_IT+0x1d0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1c      	ldr	r2, [pc, #112]	; (8003e88 <HAL_DMA_Abort_IT+0x1d4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_DMA_Abort_IT+0x1d8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <HAL_DMA_Abort_IT+0x1dc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d108      	bne.n	8003e42 <HAL_DMA_Abort_IT+0x18e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e178      	b.n	8004134 <HAL_DMA_Abort_IT+0x480>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e16f      	b.n	8004134 <HAL_DMA_Abort_IT+0x480>
 8003e54:	40020010 	.word	0x40020010
 8003e58:	40020028 	.word	0x40020028
 8003e5c:	40020040 	.word	0x40020040
 8003e60:	40020058 	.word	0x40020058
 8003e64:	40020070 	.word	0x40020070
 8003e68:	40020088 	.word	0x40020088
 8003e6c:	400200a0 	.word	0x400200a0
 8003e70:	400200b8 	.word	0x400200b8
 8003e74:	40020410 	.word	0x40020410
 8003e78:	40020428 	.word	0x40020428
 8003e7c:	40020440 	.word	0x40020440
 8003e80:	40020458 	.word	0x40020458
 8003e84:	40020470 	.word	0x40020470
 8003e88:	40020488 	.word	0x40020488
 8003e8c:	400204a0 	.word	0x400204a0
 8003e90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 020e 	bic.w	r2, r2, #14
 8003ea2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6c      	ldr	r2, [pc, #432]	; (800405c <HAL_DMA_Abort_IT+0x3a8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6b      	ldr	r2, [pc, #428]	; (8004060 <HAL_DMA_Abort_IT+0x3ac>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a69      	ldr	r2, [pc, #420]	; (8004064 <HAL_DMA_Abort_IT+0x3b0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a68      	ldr	r2, [pc, #416]	; (8004068 <HAL_DMA_Abort_IT+0x3b4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a66      	ldr	r2, [pc, #408]	; (800406c <HAL_DMA_Abort_IT+0x3b8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a65      	ldr	r2, [pc, #404]	; (8004070 <HAL_DMA_Abort_IT+0x3bc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a63      	ldr	r2, [pc, #396]	; (8004074 <HAL_DMA_Abort_IT+0x3c0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a62      	ldr	r2, [pc, #392]	; (8004078 <HAL_DMA_Abort_IT+0x3c4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a60      	ldr	r2, [pc, #384]	; (800407c <HAL_DMA_Abort_IT+0x3c8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5f      	ldr	r2, [pc, #380]	; (8004080 <HAL_DMA_Abort_IT+0x3cc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5d      	ldr	r2, [pc, #372]	; (8004084 <HAL_DMA_Abort_IT+0x3d0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5c      	ldr	r2, [pc, #368]	; (8004088 <HAL_DMA_Abort_IT+0x3d4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5a      	ldr	r2, [pc, #360]	; (800408c <HAL_DMA_Abort_IT+0x3d8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a59      	ldr	r2, [pc, #356]	; (8004090 <HAL_DMA_Abort_IT+0x3dc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a57      	ldr	r2, [pc, #348]	; (8004094 <HAL_DMA_Abort_IT+0x3e0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a56      	ldr	r2, [pc, #344]	; (8004098 <HAL_DMA_Abort_IT+0x3e4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <HAL_DMA_Abort_IT+0x2a2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <HAL_DMA_Abort_IT+0x2b2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	; (800405c <HAL_DMA_Abort_IT+0x3a8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d072      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3a      	ldr	r2, [pc, #232]	; (8004060 <HAL_DMA_Abort_IT+0x3ac>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d06d      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a39      	ldr	r2, [pc, #228]	; (8004064 <HAL_DMA_Abort_IT+0x3b0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d068      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a37      	ldr	r2, [pc, #220]	; (8004068 <HAL_DMA_Abort_IT+0x3b4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d063      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a36      	ldr	r2, [pc, #216]	; (800406c <HAL_DMA_Abort_IT+0x3b8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d05e      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a34      	ldr	r2, [pc, #208]	; (8004070 <HAL_DMA_Abort_IT+0x3bc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d059      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a33      	ldr	r2, [pc, #204]	; (8004074 <HAL_DMA_Abort_IT+0x3c0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d054      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a31      	ldr	r2, [pc, #196]	; (8004078 <HAL_DMA_Abort_IT+0x3c4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d04f      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a30      	ldr	r2, [pc, #192]	; (800407c <HAL_DMA_Abort_IT+0x3c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d04a      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2e      	ldr	r2, [pc, #184]	; (8004080 <HAL_DMA_Abort_IT+0x3cc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d045      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2d      	ldr	r2, [pc, #180]	; (8004084 <HAL_DMA_Abort_IT+0x3d0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d040      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <HAL_DMA_Abort_IT+0x3d4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d03b      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2a      	ldr	r2, [pc, #168]	; (800408c <HAL_DMA_Abort_IT+0x3d8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d036      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a28      	ldr	r2, [pc, #160]	; (8004090 <HAL_DMA_Abort_IT+0x3dc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d031      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a27      	ldr	r2, [pc, #156]	; (8004094 <HAL_DMA_Abort_IT+0x3e0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d02c      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a25      	ldr	r2, [pc, #148]	; (8004098 <HAL_DMA_Abort_IT+0x3e4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d027      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a24      	ldr	r2, [pc, #144]	; (800409c <HAL_DMA_Abort_IT+0x3e8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d022      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <HAL_DMA_Abort_IT+0x3ec>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01d      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a21      	ldr	r2, [pc, #132]	; (80040a4 <HAL_DMA_Abort_IT+0x3f0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d018      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <HAL_DMA_Abort_IT+0x3f4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <HAL_DMA_Abort_IT+0x3f8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00e      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <HAL_DMA_Abort_IT+0x3fc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d009      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1b      	ldr	r2, [pc, #108]	; (80040b4 <HAL_DMA_Abort_IT+0x400>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a19      	ldr	r2, [pc, #100]	; (80040b8 <HAL_DMA_Abort_IT+0x404>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d132      	bne.n	80040bc <HAL_DMA_Abort_IT+0x408>
 8004056:	2301      	movs	r3, #1
 8004058:	e031      	b.n	80040be <HAL_DMA_Abort_IT+0x40a>
 800405a:	bf00      	nop
 800405c:	40020010 	.word	0x40020010
 8004060:	40020028 	.word	0x40020028
 8004064:	40020040 	.word	0x40020040
 8004068:	40020058 	.word	0x40020058
 800406c:	40020070 	.word	0x40020070
 8004070:	40020088 	.word	0x40020088
 8004074:	400200a0 	.word	0x400200a0
 8004078:	400200b8 	.word	0x400200b8
 800407c:	40020410 	.word	0x40020410
 8004080:	40020428 	.word	0x40020428
 8004084:	40020440 	.word	0x40020440
 8004088:	40020458 	.word	0x40020458
 800408c:	40020470 	.word	0x40020470
 8004090:	40020488 	.word	0x40020488
 8004094:	400204a0 	.word	0x400204a0
 8004098:	400204b8 	.word	0x400204b8
 800409c:	58025408 	.word	0x58025408
 80040a0:	5802541c 	.word	0x5802541c
 80040a4:	58025430 	.word	0x58025430
 80040a8:	58025444 	.word	0x58025444
 80040ac:	58025458 	.word	0x58025458
 80040b0:	5802546c 	.word	0x5802546c
 80040b4:	58025480 	.word	0x58025480
 80040b8:	58025494 	.word	0x58025494
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d028      	beq.n	8004114 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2201      	movs	r2, #1
 80040e2:	409a      	lsls	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004108:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004112:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop

08004140 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800414c:	4b67      	ldr	r3, [pc, #412]	; (80042ec <HAL_DMA_IRQHandler+0x1ac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a67      	ldr	r2, [pc, #412]	; (80042f0 <HAL_DMA_IRQHandler+0x1b0>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a5f      	ldr	r2, [pc, #380]	; (80042f4 <HAL_DMA_IRQHandler+0x1b4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d04a      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a5d      	ldr	r2, [pc, #372]	; (80042f8 <HAL_DMA_IRQHandler+0x1b8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d045      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a5c      	ldr	r2, [pc, #368]	; (80042fc <HAL_DMA_IRQHandler+0x1bc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d040      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a5a      	ldr	r2, [pc, #360]	; (8004300 <HAL_DMA_IRQHandler+0x1c0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d03b      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a59      	ldr	r2, [pc, #356]	; (8004304 <HAL_DMA_IRQHandler+0x1c4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d036      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a57      	ldr	r2, [pc, #348]	; (8004308 <HAL_DMA_IRQHandler+0x1c8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d031      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a56      	ldr	r2, [pc, #344]	; (800430c <HAL_DMA_IRQHandler+0x1cc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d02c      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a54      	ldr	r2, [pc, #336]	; (8004310 <HAL_DMA_IRQHandler+0x1d0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d027      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a53      	ldr	r2, [pc, #332]	; (8004314 <HAL_DMA_IRQHandler+0x1d4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a51      	ldr	r2, [pc, #324]	; (8004318 <HAL_DMA_IRQHandler+0x1d8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01d      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a50      	ldr	r2, [pc, #320]	; (800431c <HAL_DMA_IRQHandler+0x1dc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a4e      	ldr	r2, [pc, #312]	; (8004320 <HAL_DMA_IRQHandler+0x1e0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a4d      	ldr	r2, [pc, #308]	; (8004324 <HAL_DMA_IRQHandler+0x1e4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a4b      	ldr	r2, [pc, #300]	; (8004328 <HAL_DMA_IRQHandler+0x1e8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a4a      	ldr	r2, [pc, #296]	; (800432c <HAL_DMA_IRQHandler+0x1ec>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_DMA_IRQHandler+0xd2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a48      	ldr	r2, [pc, #288]	; (8004330 <HAL_DMA_IRQHandler+0x1f0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_DMA_IRQHandler+0xd6>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_DMA_IRQHandler+0xd8>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 842b 	beq.w	8004a74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2208      	movs	r2, #8
 8004228:	409a      	lsls	r2, r3
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80a2 	beq.w	8004378 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2e      	ldr	r2, [pc, #184]	; (80042f4 <HAL_DMA_IRQHandler+0x1b4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d04a      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <HAL_DMA_IRQHandler+0x1b8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d045      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a2b      	ldr	r2, [pc, #172]	; (80042fc <HAL_DMA_IRQHandler+0x1bc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d040      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <HAL_DMA_IRQHandler+0x1c0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d03b      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a28      	ldr	r2, [pc, #160]	; (8004304 <HAL_DMA_IRQHandler+0x1c4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d036      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a27      	ldr	r2, [pc, #156]	; (8004308 <HAL_DMA_IRQHandler+0x1c8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d031      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a25      	ldr	r2, [pc, #148]	; (800430c <HAL_DMA_IRQHandler+0x1cc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d02c      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a24      	ldr	r2, [pc, #144]	; (8004310 <HAL_DMA_IRQHandler+0x1d0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d027      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a22      	ldr	r2, [pc, #136]	; (8004314 <HAL_DMA_IRQHandler+0x1d4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d022      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a21      	ldr	r2, [pc, #132]	; (8004318 <HAL_DMA_IRQHandler+0x1d8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d01d      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1f      	ldr	r2, [pc, #124]	; (800431c <HAL_DMA_IRQHandler+0x1dc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d018      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <HAL_DMA_IRQHandler+0x1e0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d013      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_DMA_IRQHandler+0x1e4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00e      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <HAL_DMA_IRQHandler+0x1e8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d009      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a19      	ldr	r2, [pc, #100]	; (800432c <HAL_DMA_IRQHandler+0x1ec>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x194>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_DMA_IRQHandler+0x1f0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d12f      	bne.n	8004334 <HAL_DMA_IRQHandler+0x1f4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bf14      	ite	ne
 80042e2:	2301      	movne	r3, #1
 80042e4:	2300      	moveq	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	e02e      	b.n	8004348 <HAL_DMA_IRQHandler+0x208>
 80042ea:	bf00      	nop
 80042ec:	24000000 	.word	0x24000000
 80042f0:	1b4e81b5 	.word	0x1b4e81b5
 80042f4:	40020010 	.word	0x40020010
 80042f8:	40020028 	.word	0x40020028
 80042fc:	40020040 	.word	0x40020040
 8004300:	40020058 	.word	0x40020058
 8004304:	40020070 	.word	0x40020070
 8004308:	40020088 	.word	0x40020088
 800430c:	400200a0 	.word	0x400200a0
 8004310:	400200b8 	.word	0x400200b8
 8004314:	40020410 	.word	0x40020410
 8004318:	40020428 	.word	0x40020428
 800431c:	40020440 	.word	0x40020440
 8004320:	40020458 	.word	0x40020458
 8004324:	40020470 	.word	0x40020470
 8004328:	40020488 	.word	0x40020488
 800432c:	400204a0 	.word	0x400204a0
 8004330:	400204b8 	.word	0x400204b8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0204 	bic.w	r2, r2, #4
 800435a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	2208      	movs	r2, #8
 8004366:	409a      	lsls	r2, r3
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	fa22 f303 	lsr.w	r3, r2, r3
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d06e      	beq.n	800446c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a69      	ldr	r2, [pc, #420]	; (8004538 <HAL_DMA_IRQHandler+0x3f8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d04a      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a67      	ldr	r2, [pc, #412]	; (800453c <HAL_DMA_IRQHandler+0x3fc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d045      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a66      	ldr	r2, [pc, #408]	; (8004540 <HAL_DMA_IRQHandler+0x400>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d040      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a64      	ldr	r2, [pc, #400]	; (8004544 <HAL_DMA_IRQHandler+0x404>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d03b      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a63      	ldr	r2, [pc, #396]	; (8004548 <HAL_DMA_IRQHandler+0x408>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d036      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a61      	ldr	r2, [pc, #388]	; (800454c <HAL_DMA_IRQHandler+0x40c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d031      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a60      	ldr	r2, [pc, #384]	; (8004550 <HAL_DMA_IRQHandler+0x410>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d02c      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a5e      	ldr	r2, [pc, #376]	; (8004554 <HAL_DMA_IRQHandler+0x414>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d027      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a5d      	ldr	r2, [pc, #372]	; (8004558 <HAL_DMA_IRQHandler+0x418>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5b      	ldr	r2, [pc, #364]	; (800455c <HAL_DMA_IRQHandler+0x41c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a5a      	ldr	r2, [pc, #360]	; (8004560 <HAL_DMA_IRQHandler+0x420>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a58      	ldr	r2, [pc, #352]	; (8004564 <HAL_DMA_IRQHandler+0x424>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a57      	ldr	r2, [pc, #348]	; (8004568 <HAL_DMA_IRQHandler+0x428>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a55      	ldr	r2, [pc, #340]	; (800456c <HAL_DMA_IRQHandler+0x42c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a54      	ldr	r2, [pc, #336]	; (8004570 <HAL_DMA_IRQHandler+0x430>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_DMA_IRQHandler+0x2ee>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_DMA_IRQHandler+0x434>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10a      	bne.n	8004444 <HAL_DMA_IRQHandler+0x304>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e003      	b.n	800444c <HAL_DMA_IRQHandler+0x30c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00d      	beq.n	800446c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2201      	movs	r2, #1
 800445a:	409a      	lsls	r2, r3
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2204      	movs	r2, #4
 8004476:	409a      	lsls	r2, r3
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 808f 	beq.w	80045a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2c      	ldr	r2, [pc, #176]	; (8004538 <HAL_DMA_IRQHandler+0x3f8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d04a      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2a      	ldr	r2, [pc, #168]	; (800453c <HAL_DMA_IRQHandler+0x3fc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d045      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a29      	ldr	r2, [pc, #164]	; (8004540 <HAL_DMA_IRQHandler+0x400>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d040      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <HAL_DMA_IRQHandler+0x404>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d03b      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a26      	ldr	r2, [pc, #152]	; (8004548 <HAL_DMA_IRQHandler+0x408>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d036      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a24      	ldr	r2, [pc, #144]	; (800454c <HAL_DMA_IRQHandler+0x40c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d031      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a23      	ldr	r2, [pc, #140]	; (8004550 <HAL_DMA_IRQHandler+0x410>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d02c      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a21      	ldr	r2, [pc, #132]	; (8004554 <HAL_DMA_IRQHandler+0x414>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d027      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a20      	ldr	r2, [pc, #128]	; (8004558 <HAL_DMA_IRQHandler+0x418>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_DMA_IRQHandler+0x41c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <HAL_DMA_IRQHandler+0x420>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_DMA_IRQHandler+0x424>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <HAL_DMA_IRQHandler+0x428>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_DMA_IRQHandler+0x42c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_DMA_IRQHandler+0x430>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_DMA_IRQHandler+0x3e2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_DMA_IRQHandler+0x434>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d12a      	bne.n	8004578 <HAL_DMA_IRQHandler+0x438>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e023      	b.n	8004580 <HAL_DMA_IRQHandler+0x440>
 8004538:	40020010 	.word	0x40020010
 800453c:	40020028 	.word	0x40020028
 8004540:	40020040 	.word	0x40020040
 8004544:	40020058 	.word	0x40020058
 8004548:	40020070 	.word	0x40020070
 800454c:	40020088 	.word	0x40020088
 8004550:	400200a0 	.word	0x400200a0
 8004554:	400200b8 	.word	0x400200b8
 8004558:	40020410 	.word	0x40020410
 800455c:	40020428 	.word	0x40020428
 8004560:	40020440 	.word	0x40020440
 8004564:	40020458 	.word	0x40020458
 8004568:	40020470 	.word	0x40020470
 800456c:	40020488 	.word	0x40020488
 8004570:	400204a0 	.word	0x400204a0
 8004574:	400204b8 	.word	0x400204b8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	2204      	movs	r2, #4
 800458e:	409a      	lsls	r2, r3
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	f043 0204 	orr.w	r2, r3, #4
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	2210      	movs	r2, #16
 80045aa:	409a      	lsls	r2, r3
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80a6 	beq.w	8004702 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a85      	ldr	r2, [pc, #532]	; (80047d0 <HAL_DMA_IRQHandler+0x690>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d04a      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a83      	ldr	r2, [pc, #524]	; (80047d4 <HAL_DMA_IRQHandler+0x694>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d045      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a82      	ldr	r2, [pc, #520]	; (80047d8 <HAL_DMA_IRQHandler+0x698>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d040      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a80      	ldr	r2, [pc, #512]	; (80047dc <HAL_DMA_IRQHandler+0x69c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d03b      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a7f      	ldr	r2, [pc, #508]	; (80047e0 <HAL_DMA_IRQHandler+0x6a0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d036      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a7d      	ldr	r2, [pc, #500]	; (80047e4 <HAL_DMA_IRQHandler+0x6a4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d031      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7c      	ldr	r2, [pc, #496]	; (80047e8 <HAL_DMA_IRQHandler+0x6a8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d02c      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7a      	ldr	r2, [pc, #488]	; (80047ec <HAL_DMA_IRQHandler+0x6ac>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d027      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a79      	ldr	r2, [pc, #484]	; (80047f0 <HAL_DMA_IRQHandler+0x6b0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d022      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a77      	ldr	r2, [pc, #476]	; (80047f4 <HAL_DMA_IRQHandler+0x6b4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d01d      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a76      	ldr	r2, [pc, #472]	; (80047f8 <HAL_DMA_IRQHandler+0x6b8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d018      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a74      	ldr	r2, [pc, #464]	; (80047fc <HAL_DMA_IRQHandler+0x6bc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a73      	ldr	r2, [pc, #460]	; (8004800 <HAL_DMA_IRQHandler+0x6c0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a71      	ldr	r2, [pc, #452]	; (8004804 <HAL_DMA_IRQHandler+0x6c4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a70      	ldr	r2, [pc, #448]	; (8004808 <HAL_DMA_IRQHandler+0x6c8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_DMA_IRQHandler+0x516>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a6e      	ldr	r2, [pc, #440]	; (800480c <HAL_DMA_IRQHandler+0x6cc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10a      	bne.n	800466c <HAL_DMA_IRQHandler+0x52c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e009      	b.n	8004680 <HAL_DMA_IRQHandler+0x540>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d03e      	beq.n	8004702 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2210      	movs	r2, #16
 800468e:	409a      	lsls	r2, r3
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d018      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d024      	beq.n	8004702 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
 80046c0:	e01f      	b.n	8004702 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01b      	beq.n	8004702 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
 80046d2:	e016      	b.n	8004702 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0208 	bic.w	r2, r2, #8
 80046f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2220      	movs	r2, #32
 800470c:	409a      	lsls	r2, r3
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8110 	beq.w	8004938 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <HAL_DMA_IRQHandler+0x690>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d04a      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <HAL_DMA_IRQHandler+0x694>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d045      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <HAL_DMA_IRQHandler+0x698>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d040      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a28      	ldr	r2, [pc, #160]	; (80047dc <HAL_DMA_IRQHandler+0x69c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d03b      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <HAL_DMA_IRQHandler+0x6a0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d036      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <HAL_DMA_IRQHandler+0x6a4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d031      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <HAL_DMA_IRQHandler+0x6a8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d02c      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a22      	ldr	r2, [pc, #136]	; (80047ec <HAL_DMA_IRQHandler+0x6ac>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d027      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <HAL_DMA_IRQHandler+0x6b0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d022      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <HAL_DMA_IRQHandler+0x6b4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d01d      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <HAL_DMA_IRQHandler+0x6b8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d018      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <HAL_DMA_IRQHandler+0x6bc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <HAL_DMA_IRQHandler+0x6c0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00e      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a19      	ldr	r2, [pc, #100]	; (8004804 <HAL_DMA_IRQHandler+0x6c4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a17      	ldr	r2, [pc, #92]	; (8004808 <HAL_DMA_IRQHandler+0x6c8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x678>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a16      	ldr	r2, [pc, #88]	; (800480c <HAL_DMA_IRQHandler+0x6cc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d12b      	bne.n	8004810 <HAL_DMA_IRQHandler+0x6d0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e02a      	b.n	8004824 <HAL_DMA_IRQHandler+0x6e4>
 80047ce:	bf00      	nop
 80047d0:	40020010 	.word	0x40020010
 80047d4:	40020028 	.word	0x40020028
 80047d8:	40020040 	.word	0x40020040
 80047dc:	40020058 	.word	0x40020058
 80047e0:	40020070 	.word	0x40020070
 80047e4:	40020088 	.word	0x40020088
 80047e8:	400200a0 	.word	0x400200a0
 80047ec:	400200b8 	.word	0x400200b8
 80047f0:	40020410 	.word	0x40020410
 80047f4:	40020428 	.word	0x40020428
 80047f8:	40020440 	.word	0x40020440
 80047fc:	40020458 	.word	0x40020458
 8004800:	40020470 	.word	0x40020470
 8004804:	40020488 	.word	0x40020488
 8004808:	400204a0 	.word	0x400204a0
 800480c:	400204b8 	.word	0x400204b8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8087 	beq.w	8004938 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2220      	movs	r2, #32
 8004834:	409a      	lsls	r2, r3
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b04      	cmp	r3, #4
 8004844:	d139      	bne.n	80048ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0216 	bic.w	r2, r2, #22
 8004854:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004864:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <HAL_DMA_IRQHandler+0x736>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0208 	bic.w	r2, r2, #8
 8004884:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	223f      	movs	r2, #63	; 0x3f
 8004890:	409a      	lsls	r2, r3
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 834a 	beq.w	8004f44 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
          }
          return;
 80048b8:	e344      	b.n	8004f44 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d018      	beq.n	80048fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02c      	beq.n	8004938 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
 80048e6:	e027      	b.n	8004938 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d023      	beq.n	8004938 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
 80048f8:	e01e      	b.n	8004938 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0210 	bic.w	r2, r2, #16
 8004916:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8306 	beq.w	8004f4e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8088 	beq.w	8004a60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2204      	movs	r2, #4
 8004954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a7a      	ldr	r2, [pc, #488]	; (8004b48 <HAL_DMA_IRQHandler+0xa08>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d04a      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a79      	ldr	r2, [pc, #484]	; (8004b4c <HAL_DMA_IRQHandler+0xa0c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d045      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a77      	ldr	r2, [pc, #476]	; (8004b50 <HAL_DMA_IRQHandler+0xa10>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d040      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a76      	ldr	r2, [pc, #472]	; (8004b54 <HAL_DMA_IRQHandler+0xa14>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d03b      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a74      	ldr	r2, [pc, #464]	; (8004b58 <HAL_DMA_IRQHandler+0xa18>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d036      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a73      	ldr	r2, [pc, #460]	; (8004b5c <HAL_DMA_IRQHandler+0xa1c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d031      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a71      	ldr	r2, [pc, #452]	; (8004b60 <HAL_DMA_IRQHandler+0xa20>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02c      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a70      	ldr	r2, [pc, #448]	; (8004b64 <HAL_DMA_IRQHandler+0xa24>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d027      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6e      	ldr	r2, [pc, #440]	; (8004b68 <HAL_DMA_IRQHandler+0xa28>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d022      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6d      	ldr	r2, [pc, #436]	; (8004b6c <HAL_DMA_IRQHandler+0xa2c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d01d      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a6b      	ldr	r2, [pc, #428]	; (8004b70 <HAL_DMA_IRQHandler+0xa30>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d018      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6a      	ldr	r2, [pc, #424]	; (8004b74 <HAL_DMA_IRQHandler+0xa34>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a68      	ldr	r2, [pc, #416]	; (8004b78 <HAL_DMA_IRQHandler+0xa38>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00e      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a67      	ldr	r2, [pc, #412]	; (8004b7c <HAL_DMA_IRQHandler+0xa3c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a65      	ldr	r2, [pc, #404]	; (8004b80 <HAL_DMA_IRQHandler+0xa40>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x8b8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a64      	ldr	r2, [pc, #400]	; (8004b84 <HAL_DMA_IRQHandler+0xa44>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d108      	bne.n	8004a0a <HAL_DMA_IRQHandler+0x8ca>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e007      	b.n	8004a1a <HAL_DMA_IRQHandler+0x8da>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d307      	bcc.n	8004a36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f2      	bne.n	8004a1a <HAL_DMA_IRQHandler+0x8da>
 8004a34:	e000      	b.n	8004a38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2203      	movs	r2, #3
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a4e:	e003      	b.n	8004a58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8272 	beq.w	8004f4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
 8004a72:	e26c      	b.n	8004f4e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a43      	ldr	r2, [pc, #268]	; (8004b88 <HAL_DMA_IRQHandler+0xa48>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d022      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x984>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a42      	ldr	r2, [pc, #264]	; (8004b8c <HAL_DMA_IRQHandler+0xa4c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d01d      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x984>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a40      	ldr	r2, [pc, #256]	; (8004b90 <HAL_DMA_IRQHandler+0xa50>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d018      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x984>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3f      	ldr	r2, [pc, #252]	; (8004b94 <HAL_DMA_IRQHandler+0xa54>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x984>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3d      	ldr	r2, [pc, #244]	; (8004b98 <HAL_DMA_IRQHandler+0xa58>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00e      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x984>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a3c      	ldr	r2, [pc, #240]	; (8004b9c <HAL_DMA_IRQHandler+0xa5c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x984>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a3a      	ldr	r2, [pc, #232]	; (8004ba0 <HAL_DMA_IRQHandler+0xa60>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x984>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a39      	ldr	r2, [pc, #228]	; (8004ba4 <HAL_DMA_IRQHandler+0xa64>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d101      	bne.n	8004ac8 <HAL_DMA_IRQHandler+0x988>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <HAL_DMA_IRQHandler+0x98a>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 823f 	beq.w	8004f4e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80cd 	beq.w	8004c88 <HAL_DMA_IRQHandler+0xb48>
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80c7 	beq.w	8004c88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	2204      	movs	r2, #4
 8004b04:	409a      	lsls	r2, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d049      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8210 	beq.w	8004f48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b30:	e20a      	b.n	8004f48 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8206 	beq.w	8004f48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b44:	e200      	b.n	8004f48 <HAL_DMA_IRQHandler+0xe08>
 8004b46:	bf00      	nop
 8004b48:	40020010 	.word	0x40020010
 8004b4c:	40020028 	.word	0x40020028
 8004b50:	40020040 	.word	0x40020040
 8004b54:	40020058 	.word	0x40020058
 8004b58:	40020070 	.word	0x40020070
 8004b5c:	40020088 	.word	0x40020088
 8004b60:	400200a0 	.word	0x400200a0
 8004b64:	400200b8 	.word	0x400200b8
 8004b68:	40020410 	.word	0x40020410
 8004b6c:	40020428 	.word	0x40020428
 8004b70:	40020440 	.word	0x40020440
 8004b74:	40020458 	.word	0x40020458
 8004b78:	40020470 	.word	0x40020470
 8004b7c:	40020488 	.word	0x40020488
 8004b80:	400204a0 	.word	0x400204a0
 8004b84:	400204b8 	.word	0x400204b8
 8004b88:	58025408 	.word	0x58025408
 8004b8c:	5802541c 	.word	0x5802541c
 8004b90:	58025430 	.word	0x58025430
 8004b94:	58025444 	.word	0x58025444
 8004b98:	58025458 	.word	0x58025458
 8004b9c:	5802546c 	.word	0x5802546c
 8004ba0:	58025480 	.word	0x58025480
 8004ba4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d160      	bne.n	8004c74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a7f      	ldr	r2, [pc, #508]	; (8004db4 <HAL_DMA_IRQHandler+0xc74>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a7d      	ldr	r2, [pc, #500]	; (8004db8 <HAL_DMA_IRQHandler+0xc78>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7c      	ldr	r2, [pc, #496]	; (8004dbc <HAL_DMA_IRQHandler+0xc7c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a7a      	ldr	r2, [pc, #488]	; (8004dc0 <HAL_DMA_IRQHandler+0xc80>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a79      	ldr	r2, [pc, #484]	; (8004dc4 <HAL_DMA_IRQHandler+0xc84>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a77      	ldr	r2, [pc, #476]	; (8004dc8 <HAL_DMA_IRQHandler+0xc88>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a76      	ldr	r2, [pc, #472]	; (8004dcc <HAL_DMA_IRQHandler+0xc8c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a74      	ldr	r2, [pc, #464]	; (8004dd0 <HAL_DMA_IRQHandler+0xc90>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a73      	ldr	r2, [pc, #460]	; (8004dd4 <HAL_DMA_IRQHandler+0xc94>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a71      	ldr	r2, [pc, #452]	; (8004dd8 <HAL_DMA_IRQHandler+0xc98>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a70      	ldr	r2, [pc, #448]	; (8004ddc <HAL_DMA_IRQHandler+0xc9c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6e      	ldr	r2, [pc, #440]	; (8004de0 <HAL_DMA_IRQHandler+0xca0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6d      	ldr	r2, [pc, #436]	; (8004de4 <HAL_DMA_IRQHandler+0xca4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a6b      	ldr	r2, [pc, #428]	; (8004de8 <HAL_DMA_IRQHandler+0xca8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a6a      	ldr	r2, [pc, #424]	; (8004dec <HAL_DMA_IRQHandler+0xcac>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xb12>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a68      	ldr	r2, [pc, #416]	; (8004df0 <HAL_DMA_IRQHandler+0xcb0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d108      	bne.n	8004c64 <HAL_DMA_IRQHandler+0xb24>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0208 	bic.w	r2, r2, #8
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e007      	b.n	8004c74 <HAL_DMA_IRQHandler+0xb34>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0204 	bic.w	r2, r2, #4
 8004c72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8165 	beq.w	8004f48 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c86:	e15f      	b.n	8004f48 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	2202      	movs	r2, #2
 8004c92:	409a      	lsls	r2, r3
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80c5 	beq.w	8004e28 <HAL_DMA_IRQHandler+0xce8>
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80bf 	beq.w	8004e28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d018      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 813a 	beq.w	8004f4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce0:	e134      	b.n	8004f4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8130 	beq.w	8004f4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf4:	e12a      	b.n	8004f4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 8089 	bne.w	8004e14 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2b      	ldr	r2, [pc, #172]	; (8004db4 <HAL_DMA_IRQHandler+0xc74>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d04a      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <HAL_DMA_IRQHandler+0xc78>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d045      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_DMA_IRQHandler+0xc7c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d040      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <HAL_DMA_IRQHandler+0xc80>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d03b      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <HAL_DMA_IRQHandler+0xc84>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d036      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a23      	ldr	r2, [pc, #140]	; (8004dc8 <HAL_DMA_IRQHandler+0xc88>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d031      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_DMA_IRQHandler+0xc8c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d02c      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a20      	ldr	r2, [pc, #128]	; (8004dd0 <HAL_DMA_IRQHandler+0xc90>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d027      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_DMA_IRQHandler+0xc94>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d022      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <HAL_DMA_IRQHandler+0xc98>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01d      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_DMA_IRQHandler+0xc9c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d018      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1a      	ldr	r2, [pc, #104]	; (8004de0 <HAL_DMA_IRQHandler+0xca0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_DMA_IRQHandler+0xca4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <HAL_DMA_IRQHandler+0xca8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a16      	ldr	r2, [pc, #88]	; (8004dec <HAL_DMA_IRQHandler+0xcac>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xc62>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_DMA_IRQHandler+0xcb0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d128      	bne.n	8004df4 <HAL_DMA_IRQHandler+0xcb4>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0214 	bic.w	r2, r2, #20
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e027      	b.n	8004e04 <HAL_DMA_IRQHandler+0xcc4>
 8004db4:	40020010 	.word	0x40020010
 8004db8:	40020028 	.word	0x40020028
 8004dbc:	40020040 	.word	0x40020040
 8004dc0:	40020058 	.word	0x40020058
 8004dc4:	40020070 	.word	0x40020070
 8004dc8:	40020088 	.word	0x40020088
 8004dcc:	400200a0 	.word	0x400200a0
 8004dd0:	400200b8 	.word	0x400200b8
 8004dd4:	40020410 	.word	0x40020410
 8004dd8:	40020428 	.word	0x40020428
 8004ddc:	40020440 	.word	0x40020440
 8004de0:	40020458 	.word	0x40020458
 8004de4:	40020470 	.word	0x40020470
 8004de8:	40020488 	.word	0x40020488
 8004dec:	400204a0 	.word	0x400204a0
 8004df0:	400204b8 	.word	0x400204b8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 020a 	bic.w	r2, r2, #10
 8004e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8097 	beq.w	8004f4c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e26:	e091      	b.n	8004f4c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2208      	movs	r2, #8
 8004e32:	409a      	lsls	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8088 	beq.w	8004f4e <HAL_DMA_IRQHandler+0xe0e>
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8082 	beq.w	8004f4e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a41      	ldr	r2, [pc, #260]	; (8004f54 <HAL_DMA_IRQHandler+0xe14>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d04a      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a3f      	ldr	r2, [pc, #252]	; (8004f58 <HAL_DMA_IRQHandler+0xe18>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d045      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a3e      	ldr	r2, [pc, #248]	; (8004f5c <HAL_DMA_IRQHandler+0xe1c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d040      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3c      	ldr	r2, [pc, #240]	; (8004f60 <HAL_DMA_IRQHandler+0xe20>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d03b      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3b      	ldr	r2, [pc, #236]	; (8004f64 <HAL_DMA_IRQHandler+0xe24>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d036      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a39      	ldr	r2, [pc, #228]	; (8004f68 <HAL_DMA_IRQHandler+0xe28>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d031      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a38      	ldr	r2, [pc, #224]	; (8004f6c <HAL_DMA_IRQHandler+0xe2c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d02c      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a36      	ldr	r2, [pc, #216]	; (8004f70 <HAL_DMA_IRQHandler+0xe30>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d027      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a35      	ldr	r2, [pc, #212]	; (8004f74 <HAL_DMA_IRQHandler+0xe34>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d022      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a33      	ldr	r2, [pc, #204]	; (8004f78 <HAL_DMA_IRQHandler+0xe38>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01d      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a32      	ldr	r2, [pc, #200]	; (8004f7c <HAL_DMA_IRQHandler+0xe3c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d018      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a30      	ldr	r2, [pc, #192]	; (8004f80 <HAL_DMA_IRQHandler+0xe40>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <HAL_DMA_IRQHandler+0xe44>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <HAL_DMA_IRQHandler+0xe48>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d009      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <HAL_DMA_IRQHandler+0xe4c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_DMA_IRQHandler+0xdaa>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <HAL_DMA_IRQHandler+0xe50>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d108      	bne.n	8004efc <HAL_DMA_IRQHandler+0xdbc>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 021c 	bic.w	r2, r2, #28
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e007      	b.n	8004f0c <HAL_DMA_IRQHandler+0xdcc>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 020e 	bic.w	r2, r2, #14
 8004f0a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
 8004f42:	e004      	b.n	8004f4e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f4c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f4e:	3728      	adds	r7, #40	; 0x28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40020010 	.word	0x40020010
 8004f58:	40020028 	.word	0x40020028
 8004f5c:	40020040 	.word	0x40020040
 8004f60:	40020058 	.word	0x40020058
 8004f64:	40020070 	.word	0x40020070
 8004f68:	40020088 	.word	0x40020088
 8004f6c:	400200a0 	.word	0x400200a0
 8004f70:	400200b8 	.word	0x400200b8
 8004f74:	40020410 	.word	0x40020410
 8004f78:	40020428 	.word	0x40020428
 8004f7c:	40020440 	.word	0x40020440
 8004f80:	40020458 	.word	0x40020458
 8004f84:	40020470 	.word	0x40020470
 8004f88:	40020488 	.word	0x40020488
 8004f8c:	400204a0 	.word	0x400204a0
 8004f90:	400204b8 	.word	0x400204b8

08004f94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a7f      	ldr	r2, [pc, #508]	; (80051b0 <DMA_SetConfig+0x21c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d072      	beq.n	800509e <DMA_SetConfig+0x10a>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a7d      	ldr	r2, [pc, #500]	; (80051b4 <DMA_SetConfig+0x220>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d06d      	beq.n	800509e <DMA_SetConfig+0x10a>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a7c      	ldr	r2, [pc, #496]	; (80051b8 <DMA_SetConfig+0x224>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d068      	beq.n	800509e <DMA_SetConfig+0x10a>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a7a      	ldr	r2, [pc, #488]	; (80051bc <DMA_SetConfig+0x228>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d063      	beq.n	800509e <DMA_SetConfig+0x10a>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a79      	ldr	r2, [pc, #484]	; (80051c0 <DMA_SetConfig+0x22c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d05e      	beq.n	800509e <DMA_SetConfig+0x10a>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a77      	ldr	r2, [pc, #476]	; (80051c4 <DMA_SetConfig+0x230>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d059      	beq.n	800509e <DMA_SetConfig+0x10a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a76      	ldr	r2, [pc, #472]	; (80051c8 <DMA_SetConfig+0x234>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d054      	beq.n	800509e <DMA_SetConfig+0x10a>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a74      	ldr	r2, [pc, #464]	; (80051cc <DMA_SetConfig+0x238>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d04f      	beq.n	800509e <DMA_SetConfig+0x10a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a73      	ldr	r2, [pc, #460]	; (80051d0 <DMA_SetConfig+0x23c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d04a      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a71      	ldr	r2, [pc, #452]	; (80051d4 <DMA_SetConfig+0x240>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d045      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a70      	ldr	r2, [pc, #448]	; (80051d8 <DMA_SetConfig+0x244>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d040      	beq.n	800509e <DMA_SetConfig+0x10a>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a6e      	ldr	r2, [pc, #440]	; (80051dc <DMA_SetConfig+0x248>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d03b      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a6d      	ldr	r2, [pc, #436]	; (80051e0 <DMA_SetConfig+0x24c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d036      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a6b      	ldr	r2, [pc, #428]	; (80051e4 <DMA_SetConfig+0x250>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d031      	beq.n	800509e <DMA_SetConfig+0x10a>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6a      	ldr	r2, [pc, #424]	; (80051e8 <DMA_SetConfig+0x254>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d02c      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a68      	ldr	r2, [pc, #416]	; (80051ec <DMA_SetConfig+0x258>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d027      	beq.n	800509e <DMA_SetConfig+0x10a>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a67      	ldr	r2, [pc, #412]	; (80051f0 <DMA_SetConfig+0x25c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a65      	ldr	r2, [pc, #404]	; (80051f4 <DMA_SetConfig+0x260>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d01d      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a64      	ldr	r2, [pc, #400]	; (80051f8 <DMA_SetConfig+0x264>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <DMA_SetConfig+0x10a>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a62      	ldr	r2, [pc, #392]	; (80051fc <DMA_SetConfig+0x268>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a61      	ldr	r2, [pc, #388]	; (8005200 <DMA_SetConfig+0x26c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a5f      	ldr	r2, [pc, #380]	; (8005204 <DMA_SetConfig+0x270>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <DMA_SetConfig+0x10a>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a5e      	ldr	r2, [pc, #376]	; (8005208 <DMA_SetConfig+0x274>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <DMA_SetConfig+0x10a>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5c      	ldr	r2, [pc, #368]	; (800520c <DMA_SetConfig+0x278>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d101      	bne.n	80050a2 <DMA_SetConfig+0x10e>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <DMA_SetConfig+0x110>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00d      	beq.n	80050c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a39      	ldr	r2, [pc, #228]	; (80051b0 <DMA_SetConfig+0x21c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d04a      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a38      	ldr	r2, [pc, #224]	; (80051b4 <DMA_SetConfig+0x220>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d045      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a36      	ldr	r2, [pc, #216]	; (80051b8 <DMA_SetConfig+0x224>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d040      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a35      	ldr	r2, [pc, #212]	; (80051bc <DMA_SetConfig+0x228>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d03b      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a33      	ldr	r2, [pc, #204]	; (80051c0 <DMA_SetConfig+0x22c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d036      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a32      	ldr	r2, [pc, #200]	; (80051c4 <DMA_SetConfig+0x230>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d031      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a30      	ldr	r2, [pc, #192]	; (80051c8 <DMA_SetConfig+0x234>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d02c      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <DMA_SetConfig+0x238>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d027      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <DMA_SetConfig+0x23c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <DMA_SetConfig+0x240>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d01d      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <DMA_SetConfig+0x244>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a29      	ldr	r2, [pc, #164]	; (80051dc <DMA_SetConfig+0x248>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a27      	ldr	r2, [pc, #156]	; (80051e0 <DMA_SetConfig+0x24c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a26      	ldr	r2, [pc, #152]	; (80051e4 <DMA_SetConfig+0x250>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <DMA_SetConfig+0x254>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <DMA_SetConfig+0x1d0>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a23      	ldr	r2, [pc, #140]	; (80051ec <DMA_SetConfig+0x258>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <DMA_SetConfig+0x1d4>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <DMA_SetConfig+0x1d6>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d059      	beq.n	8005222 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	223f      	movs	r2, #63	; 0x3f
 8005178:	409a      	lsls	r2, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800518c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d138      	bne.n	8005210 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051ae:	e086      	b.n	80052be <DMA_SetConfig+0x32a>
 80051b0:	40020010 	.word	0x40020010
 80051b4:	40020028 	.word	0x40020028
 80051b8:	40020040 	.word	0x40020040
 80051bc:	40020058 	.word	0x40020058
 80051c0:	40020070 	.word	0x40020070
 80051c4:	40020088 	.word	0x40020088
 80051c8:	400200a0 	.word	0x400200a0
 80051cc:	400200b8 	.word	0x400200b8
 80051d0:	40020410 	.word	0x40020410
 80051d4:	40020428 	.word	0x40020428
 80051d8:	40020440 	.word	0x40020440
 80051dc:	40020458 	.word	0x40020458
 80051e0:	40020470 	.word	0x40020470
 80051e4:	40020488 	.word	0x40020488
 80051e8:	400204a0 	.word	0x400204a0
 80051ec:	400204b8 	.word	0x400204b8
 80051f0:	58025408 	.word	0x58025408
 80051f4:	5802541c 	.word	0x5802541c
 80051f8:	58025430 	.word	0x58025430
 80051fc:	58025444 	.word	0x58025444
 8005200:	58025458 	.word	0x58025458
 8005204:	5802546c 	.word	0x5802546c
 8005208:	58025480 	.word	0x58025480
 800520c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]
}
 8005220:	e04d      	b.n	80052be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a29      	ldr	r2, [pc, #164]	; (80052cc <DMA_SetConfig+0x338>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <DMA_SetConfig+0x2de>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <DMA_SetConfig+0x33c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01d      	beq.n	8005272 <DMA_SetConfig+0x2de>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <DMA_SetConfig+0x340>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <DMA_SetConfig+0x2de>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a24      	ldr	r2, [pc, #144]	; (80052d8 <DMA_SetConfig+0x344>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <DMA_SetConfig+0x2de>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a23      	ldr	r2, [pc, #140]	; (80052dc <DMA_SetConfig+0x348>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <DMA_SetConfig+0x2de>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <DMA_SetConfig+0x34c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <DMA_SetConfig+0x2de>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <DMA_SetConfig+0x350>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <DMA_SetConfig+0x2de>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1e      	ldr	r2, [pc, #120]	; (80052e8 <DMA_SetConfig+0x354>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d101      	bne.n	8005276 <DMA_SetConfig+0x2e2>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <DMA_SetConfig+0x2e4>
 8005276:	2300      	movs	r3, #0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d020      	beq.n	80052be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	2201      	movs	r2, #1
 8005286:	409a      	lsls	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d108      	bne.n	80052ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	60da      	str	r2, [r3, #12]
}
 80052ac:	e007      	b.n	80052be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	60da      	str	r2, [r3, #12]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	58025408 	.word	0x58025408
 80052d0:	5802541c 	.word	0x5802541c
 80052d4:	58025430 	.word	0x58025430
 80052d8:	58025444 	.word	0x58025444
 80052dc:	58025458 	.word	0x58025458
 80052e0:	5802546c 	.word	0x5802546c
 80052e4:	58025480 	.word	0x58025480
 80052e8:	58025494 	.word	0x58025494

080052ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a42      	ldr	r2, [pc, #264]	; (8005404 <DMA_CalcBaseAndBitshift+0x118>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d04a      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a41      	ldr	r2, [pc, #260]	; (8005408 <DMA_CalcBaseAndBitshift+0x11c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d045      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3f      	ldr	r2, [pc, #252]	; (800540c <DMA_CalcBaseAndBitshift+0x120>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d040      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <DMA_CalcBaseAndBitshift+0x124>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d03b      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a3c      	ldr	r2, [pc, #240]	; (8005414 <DMA_CalcBaseAndBitshift+0x128>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d036      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a3b      	ldr	r2, [pc, #236]	; (8005418 <DMA_CalcBaseAndBitshift+0x12c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d031      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a39      	ldr	r2, [pc, #228]	; (800541c <DMA_CalcBaseAndBitshift+0x130>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d02c      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a38      	ldr	r2, [pc, #224]	; (8005420 <DMA_CalcBaseAndBitshift+0x134>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d027      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a36      	ldr	r2, [pc, #216]	; (8005424 <DMA_CalcBaseAndBitshift+0x138>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d022      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a35      	ldr	r2, [pc, #212]	; (8005428 <DMA_CalcBaseAndBitshift+0x13c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d01d      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a33      	ldr	r2, [pc, #204]	; (800542c <DMA_CalcBaseAndBitshift+0x140>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a32      	ldr	r2, [pc, #200]	; (8005430 <DMA_CalcBaseAndBitshift+0x144>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a30      	ldr	r2, [pc, #192]	; (8005434 <DMA_CalcBaseAndBitshift+0x148>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00e      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <DMA_CalcBaseAndBitshift+0x14c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d009      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2d      	ldr	r2, [pc, #180]	; (800543c <DMA_CalcBaseAndBitshift+0x150>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xa8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2c      	ldr	r2, [pc, #176]	; (8005440 <DMA_CalcBaseAndBitshift+0x154>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d101      	bne.n	8005398 <DMA_CalcBaseAndBitshift+0xac>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <DMA_CalcBaseAndBitshift+0xae>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d024      	beq.n	80053e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	3b10      	subs	r3, #16
 80053a6:	4a27      	ldr	r2, [pc, #156]	; (8005444 <DMA_CalcBaseAndBitshift+0x158>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	4a24      	ldr	r2, [pc, #144]	; (8005448 <DMA_CalcBaseAndBitshift+0x15c>)
 80053b8:	5cd3      	ldrb	r3, [r2, r3]
 80053ba:	461a      	mov	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d908      	bls.n	80053d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	4b1f      	ldr	r3, [pc, #124]	; (800544c <DMA_CalcBaseAndBitshift+0x160>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	1d1a      	adds	r2, r3, #4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	659a      	str	r2, [r3, #88]	; 0x58
 80053d6:	e00d      	b.n	80053f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	4b1b      	ldr	r3, [pc, #108]	; (800544c <DMA_CalcBaseAndBitshift+0x160>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6593      	str	r3, [r2, #88]	; 0x58
 80053e6:	e005      	b.n	80053f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40020010 	.word	0x40020010
 8005408:	40020028 	.word	0x40020028
 800540c:	40020040 	.word	0x40020040
 8005410:	40020058 	.word	0x40020058
 8005414:	40020070 	.word	0x40020070
 8005418:	40020088 	.word	0x40020088
 800541c:	400200a0 	.word	0x400200a0
 8005420:	400200b8 	.word	0x400200b8
 8005424:	40020410 	.word	0x40020410
 8005428:	40020428 	.word	0x40020428
 800542c:	40020440 	.word	0x40020440
 8005430:	40020458 	.word	0x40020458
 8005434:	40020470 	.word	0x40020470
 8005438:	40020488 	.word	0x40020488
 800543c:	400204a0 	.word	0x400204a0
 8005440:	400204b8 	.word	0x400204b8
 8005444:	aaaaaaab 	.word	0xaaaaaaab
 8005448:	0800bd30 	.word	0x0800bd30
 800544c:	fffffc00 	.word	0xfffffc00

08005450 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d120      	bne.n	80054a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	2b03      	cmp	r3, #3
 800546a:	d858      	bhi.n	800551e <DMA_CheckFifoParam+0xce>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <DMA_CheckFifoParam+0x24>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	08005485 	.word	0x08005485
 8005478:	08005497 	.word	0x08005497
 800547c:	08005485 	.word	0x08005485
 8005480:	0800551f 	.word	0x0800551f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d048      	beq.n	8005522 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005494:	e045      	b.n	8005522 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800549e:	d142      	bne.n	8005526 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054a4:	e03f      	b.n	8005526 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ae:	d123      	bne.n	80054f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d838      	bhi.n	800552a <DMA_CheckFifoParam+0xda>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <DMA_CheckFifoParam+0x70>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054d7 	.word	0x080054d7
 80054c8:	080054d1 	.word	0x080054d1
 80054cc:	080054e9 	.word	0x080054e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
        break;
 80054d4:	e030      	b.n	8005538 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d025      	beq.n	800552e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054e6:	e022      	b.n	800552e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054f0:	d11f      	bne.n	8005532 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054f6:	e01c      	b.n	8005532 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d902      	bls.n	8005506 <DMA_CheckFifoParam+0xb6>
 8005500:	2b03      	cmp	r3, #3
 8005502:	d003      	beq.n	800550c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005504:	e018      	b.n	8005538 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
        break;
 800550a:	e015      	b.n	8005538 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00e      	beq.n	8005536 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
    break;
 800551c:	e00b      	b.n	8005536 <DMA_CheckFifoParam+0xe6>
        break;
 800551e:	bf00      	nop
 8005520:	e00a      	b.n	8005538 <DMA_CheckFifoParam+0xe8>
        break;
 8005522:	bf00      	nop
 8005524:	e008      	b.n	8005538 <DMA_CheckFifoParam+0xe8>
        break;
 8005526:	bf00      	nop
 8005528:	e006      	b.n	8005538 <DMA_CheckFifoParam+0xe8>
        break;
 800552a:	bf00      	nop
 800552c:	e004      	b.n	8005538 <DMA_CheckFifoParam+0xe8>
        break;
 800552e:	bf00      	nop
 8005530:	e002      	b.n	8005538 <DMA_CheckFifoParam+0xe8>
        break;
 8005532:	bf00      	nop
 8005534:	e000      	b.n	8005538 <DMA_CheckFifoParam+0xe8>
    break;
 8005536:	bf00      	nop
    }
  }

  return status;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop

08005548 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a38      	ldr	r2, [pc, #224]	; (800563c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d022      	beq.n	80055a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a36      	ldr	r2, [pc, #216]	; (8005640 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01d      	beq.n	80055a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a35      	ldr	r2, [pc, #212]	; (8005644 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d018      	beq.n	80055a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a33      	ldr	r2, [pc, #204]	; (8005648 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a32      	ldr	r2, [pc, #200]	; (800564c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a30      	ldr	r2, [pc, #192]	; (8005650 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2d      	ldr	r2, [pc, #180]	; (8005658 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01a      	beq.n	80055e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	3b08      	subs	r3, #8
 80055b8:	4a28      	ldr	r2, [pc, #160]	; (800565c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4b26      	ldr	r3, [pc, #152]	; (8005660 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	461a      	mov	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a24      	ldr	r2, [pc, #144]	; (8005664 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80055d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2201      	movs	r2, #1
 80055de:	409a      	lsls	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80055e4:	e024      	b.n	8005630 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	3b10      	subs	r3, #16
 80055ee:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d806      	bhi.n	800560e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d902      	bls.n	800560e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3308      	adds	r3, #8
 800560c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4b18      	ldr	r3, [pc, #96]	; (8005674 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a16      	ldr	r2, [pc, #88]	; (8005678 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005620:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	2201      	movs	r2, #1
 800562a:	409a      	lsls	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	58025408 	.word	0x58025408
 8005640:	5802541c 	.word	0x5802541c
 8005644:	58025430 	.word	0x58025430
 8005648:	58025444 	.word	0x58025444
 800564c:	58025458 	.word	0x58025458
 8005650:	5802546c 	.word	0x5802546c
 8005654:	58025480 	.word	0x58025480
 8005658:	58025494 	.word	0x58025494
 800565c:	cccccccd 	.word	0xcccccccd
 8005660:	16009600 	.word	0x16009600
 8005664:	58025880 	.word	0x58025880
 8005668:	aaaaaaab 	.word	0xaaaaaaab
 800566c:	400204b8 	.word	0x400204b8
 8005670:	4002040f 	.word	0x4002040f
 8005674:	10008200 	.word	0x10008200
 8005678:	40020880 	.word	0x40020880

0800567c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d04a      	beq.n	8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d847      	bhi.n	8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a25      	ldr	r2, [pc, #148]	; (8005734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d022      	beq.n	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a24      	ldr	r2, [pc, #144]	; (8005738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d01d      	beq.n	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d018      	beq.n	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a21      	ldr	r2, [pc, #132]	; (8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00e      	beq.n	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d009      	beq.n	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1c      	ldr	r2, [pc, #112]	; (800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d004      	beq.n	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d101      	bne.n	80056ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a15      	ldr	r2, [pc, #84]	; (8005758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005704:	671a      	str	r2, [r3, #112]	; 0x70
 8005706:	e009      	b.n	800571c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4b14      	ldr	r3, [pc, #80]	; (800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	461a      	mov	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a11      	ldr	r2, [pc, #68]	; (8005760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800571a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3b01      	subs	r3, #1
 8005720:	2201      	movs	r2, #1
 8005722:	409a      	lsls	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005728:	bf00      	nop
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	58025408 	.word	0x58025408
 8005738:	5802541c 	.word	0x5802541c
 800573c:	58025430 	.word	0x58025430
 8005740:	58025444 	.word	0x58025444
 8005744:	58025458 	.word	0x58025458
 8005748:	5802546c 	.word	0x5802546c
 800574c:	58025480 	.word	0x58025480
 8005750:	58025494 	.word	0x58025494
 8005754:	1600963f 	.word	0x1600963f
 8005758:	58025940 	.word	0x58025940
 800575c:	1000823f 	.word	0x1000823f
 8005760:	40020940 	.word	0x40020940

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005772:	4b89      	ldr	r3, [pc, #548]	; (8005998 <HAL_GPIO_Init+0x234>)
 8005774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005776:	e194      	b.n	8005aa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	2101      	movs	r1, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8186 	beq.w	8005a9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b01      	cmp	r3, #1
 800579a:	d005      	beq.n	80057a8 <HAL_GPIO_Init+0x44>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d130      	bne.n	800580a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057de:	2201      	movs	r2, #1
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0201 	and.w	r2, r3, #1
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b03      	cmp	r3, #3
 8005814:	d017      	beq.n	8005846 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	2203      	movs	r2, #3
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43db      	mvns	r3, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d123      	bne.n	800589a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	08da      	lsrs	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3208      	adds	r2, #8
 800585a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	220f      	movs	r2, #15
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	43db      	mvns	r3, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4013      	ands	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	08da      	lsrs	r2, r3, #3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3208      	adds	r2, #8
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	2203      	movs	r2, #3
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4013      	ands	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f003 0203 	and.w	r2, r3, #3
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80e0 	beq.w	8005a9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058dc:	4b2f      	ldr	r3, [pc, #188]	; (800599c <HAL_GPIO_Init+0x238>)
 80058de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058e2:	4a2e      	ldr	r2, [pc, #184]	; (800599c <HAL_GPIO_Init+0x238>)
 80058e4:	f043 0302 	orr.w	r3, r3, #2
 80058e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058ec:	4b2b      	ldr	r3, [pc, #172]	; (800599c <HAL_GPIO_Init+0x238>)
 80058ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058fa:	4a29      	ldr	r2, [pc, #164]	; (80059a0 <HAL_GPIO_Init+0x23c>)
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	3302      	adds	r3, #2
 8005902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	220f      	movs	r2, #15
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4013      	ands	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <HAL_GPIO_Init+0x240>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d052      	beq.n	80059cc <HAL_GPIO_Init+0x268>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <HAL_GPIO_Init+0x244>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d031      	beq.n	8005992 <HAL_GPIO_Init+0x22e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1e      	ldr	r2, [pc, #120]	; (80059ac <HAL_GPIO_Init+0x248>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d02b      	beq.n	800598e <HAL_GPIO_Init+0x22a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <HAL_GPIO_Init+0x24c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d025      	beq.n	800598a <HAL_GPIO_Init+0x226>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <HAL_GPIO_Init+0x250>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01f      	beq.n	8005986 <HAL_GPIO_Init+0x222>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <HAL_GPIO_Init+0x254>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d019      	beq.n	8005982 <HAL_GPIO_Init+0x21e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <HAL_GPIO_Init+0x258>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_GPIO_Init+0x21a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <HAL_GPIO_Init+0x25c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00d      	beq.n	800597a <HAL_GPIO_Init+0x216>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <HAL_GPIO_Init+0x260>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d007      	beq.n	8005976 <HAL_GPIO_Init+0x212>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <HAL_GPIO_Init+0x264>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d101      	bne.n	8005972 <HAL_GPIO_Init+0x20e>
 800596e:	2309      	movs	r3, #9
 8005970:	e02d      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 8005972:	230a      	movs	r3, #10
 8005974:	e02b      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 8005976:	2308      	movs	r3, #8
 8005978:	e029      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 800597a:	2307      	movs	r3, #7
 800597c:	e027      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 800597e:	2306      	movs	r3, #6
 8005980:	e025      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 8005982:	2305      	movs	r3, #5
 8005984:	e023      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 8005986:	2304      	movs	r3, #4
 8005988:	e021      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 800598a:	2303      	movs	r3, #3
 800598c:	e01f      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 800598e:	2302      	movs	r3, #2
 8005990:	e01d      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 8005992:	2301      	movs	r3, #1
 8005994:	e01b      	b.n	80059ce <HAL_GPIO_Init+0x26a>
 8005996:	bf00      	nop
 8005998:	58000080 	.word	0x58000080
 800599c:	58024400 	.word	0x58024400
 80059a0:	58000400 	.word	0x58000400
 80059a4:	58020000 	.word	0x58020000
 80059a8:	58020400 	.word	0x58020400
 80059ac:	58020800 	.word	0x58020800
 80059b0:	58020c00 	.word	0x58020c00
 80059b4:	58021000 	.word	0x58021000
 80059b8:	58021400 	.word	0x58021400
 80059bc:	58021800 	.word	0x58021800
 80059c0:	58021c00 	.word	0x58021c00
 80059c4:	58022000 	.word	0x58022000
 80059c8:	58022400 	.word	0x58022400
 80059cc:	2300      	movs	r3, #0
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	f002 0203 	and.w	r2, r2, #3
 80059d4:	0092      	lsls	r2, r2, #2
 80059d6:	4093      	lsls	r3, r2
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059de:	4938      	ldr	r1, [pc, #224]	; (8005ac0 <HAL_GPIO_Init+0x35c>)
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	3302      	adds	r3, #2
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f47f ae63 	bne.w	8005778 <HAL_GPIO_Init+0x14>
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	3724      	adds	r7, #36	; 0x24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	58000400 	.word	0x58000400

08005ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	807b      	strh	r3, [r7, #2]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ad4:	787b      	ldrb	r3, [r7, #1]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ae0:	e003      	b.n	8005aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ae2:	887b      	ldrh	r3, [r7, #2]
 8005ae4:	041a      	lsls	r2, r3, #16
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	619a      	str	r2, [r3, #24]
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
	...

08005af8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <HAL_PWREx_ConfigSupply+0x70>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d00a      	beq.n	8005b22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b0c:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <HAL_PWREx_ConfigSupply+0x70>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d001      	beq.n	8005b1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e01f      	b.n	8005b5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e01d      	b.n	8005b5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b22:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <HAL_PWREx_ConfigSupply+0x70>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f023 0207 	bic.w	r2, r3, #7
 8005b2a:	490f      	ldr	r1, [pc, #60]	; (8005b68 <HAL_PWREx_ConfigSupply+0x70>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b32:	f7fb fbaf 	bl	8001294 <HAL_GetTick>
 8005b36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b38:	e009      	b.n	8005b4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b3a:	f7fb fbab 	bl	8001294 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b48:	d901      	bls.n	8005b4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e007      	b.n	8005b5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_PWREx_ConfigSupply+0x70>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5a:	d1ee      	bne.n	8005b3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	58024800 	.word	0x58024800

08005b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f000 bc48 	b.w	8006410 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8088 	beq.w	8005c9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b8e:	4b99      	ldr	r3, [pc, #612]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b98:	4b96      	ldr	r3, [pc, #600]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d007      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x48>
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	2b18      	cmp	r3, #24
 8005ba8:	d111      	bne.n	8005bce <HAL_RCC_OscConfig+0x62>
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	4b8f      	ldr	r3, [pc, #572]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d06d      	beq.n	8005c9c <HAL_RCC_OscConfig+0x130>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d169      	bne.n	8005c9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f000 bc21 	b.w	8006410 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd6:	d106      	bne.n	8005be6 <HAL_RCC_OscConfig+0x7a>
 8005bd8:	4b86      	ldr	r3, [pc, #536]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a85      	ldr	r2, [pc, #532]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e02e      	b.n	8005c44 <HAL_RCC_OscConfig+0xd8>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10c      	bne.n	8005c08 <HAL_RCC_OscConfig+0x9c>
 8005bee:	4b81      	ldr	r3, [pc, #516]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a80      	ldr	r2, [pc, #512]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	4b7e      	ldr	r3, [pc, #504]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a7d      	ldr	r2, [pc, #500]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e01d      	b.n	8005c44 <HAL_RCC_OscConfig+0xd8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0xc0>
 8005c12:	4b78      	ldr	r3, [pc, #480]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a77      	ldr	r2, [pc, #476]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	4b75      	ldr	r3, [pc, #468]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a74      	ldr	r2, [pc, #464]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCC_OscConfig+0xd8>
 8005c2c:	4b71      	ldr	r3, [pc, #452]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a70      	ldr	r2, [pc, #448]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	4b6e      	ldr	r3, [pc, #440]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a6d      	ldr	r2, [pc, #436]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d013      	beq.n	8005c74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4c:	f7fb fb22 	bl	8001294 <HAL_GetTick>
 8005c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c54:	f7fb fb1e 	bl	8001294 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b64      	cmp	r3, #100	; 0x64
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e3d4      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c66:	4b63      	ldr	r3, [pc, #396]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCC_OscConfig+0xe8>
 8005c72:	e014      	b.n	8005c9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fb fb0e 	bl	8001294 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c7c:	f7fb fb0a 	bl	8001294 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	; 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e3c0      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c8e:	4b59      	ldr	r3, [pc, #356]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x110>
 8005c9a:	e000      	b.n	8005c9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80ca 	beq.w	8005e40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cac:	4b51      	ldr	r3, [pc, #324]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cb6:	4b4f      	ldr	r3, [pc, #316]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x166>
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	2b18      	cmp	r3, #24
 8005cc6:	d156      	bne.n	8005d76 <HAL_RCC_OscConfig+0x20a>
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d151      	bne.n	8005d76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd2:	4b48      	ldr	r3, [pc, #288]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_RCC_OscConfig+0x17e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e392      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cea:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 0219 	bic.w	r2, r3, #25
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	493f      	ldr	r1, [pc, #252]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fb faca 	bl	8001294 <HAL_GetTick>
 8005d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d04:	f7fb fac6 	bl	8001294 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e37c      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d16:	4b37      	ldr	r3, [pc, #220]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d22:	f7fb fae7 	bl	80012f4 <HAL_GetREVID>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d817      	bhi.n	8005d60 <HAL_RCC_OscConfig+0x1f4>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d108      	bne.n	8005d4a <HAL_RCC_OscConfig+0x1de>
 8005d38:	4b2e      	ldr	r3, [pc, #184]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005d40:	4a2c      	ldr	r2, [pc, #176]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d48:	e07a      	b.n	8005e40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4a:	4b2a      	ldr	r3, [pc, #168]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	031b      	lsls	r3, r3, #12
 8005d58:	4926      	ldr	r1, [pc, #152]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d5e:	e06f      	b.n	8005e40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d60:	4b24      	ldr	r3, [pc, #144]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	061b      	lsls	r3, r3, #24
 8005d6e:	4921      	ldr	r1, [pc, #132]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d74:	e064      	b.n	8005e40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d047      	beq.n	8005e0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d7e:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f023 0219 	bic.w	r2, r3, #25
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	491a      	ldr	r1, [pc, #104]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fb fa80 	bl	8001294 <HAL_GetTick>
 8005d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d98:	f7fb fa7c 	bl	8001294 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e332      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f0      	beq.n	8005d98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db6:	f7fb fa9d 	bl	80012f4 <HAL_GetREVID>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d819      	bhi.n	8005df8 <HAL_RCC_OscConfig+0x28c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d108      	bne.n	8005dde <HAL_RCC_OscConfig+0x272>
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005dd4:	4a07      	ldr	r2, [pc, #28]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dda:	6053      	str	r3, [r2, #4]
 8005ddc:	e030      	b.n	8005e40 <HAL_RCC_OscConfig+0x2d4>
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	031b      	lsls	r3, r3, #12
 8005dec:	4901      	ldr	r1, [pc, #4]	; (8005df4 <HAL_RCC_OscConfig+0x288>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	604b      	str	r3, [r1, #4]
 8005df2:	e025      	b.n	8005e40 <HAL_RCC_OscConfig+0x2d4>
 8005df4:	58024400 	.word	0x58024400
 8005df8:	4b9a      	ldr	r3, [pc, #616]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	4997      	ldr	r1, [pc, #604]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	604b      	str	r3, [r1, #4]
 8005e0c:	e018      	b.n	8005e40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e0e:	4b95      	ldr	r3, [pc, #596]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a94      	ldr	r2, [pc, #592]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1a:	f7fb fa3b 	bl	8001294 <HAL_GetTick>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e22:	f7fb fa37 	bl	8001294 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e2ed      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e34:	4b8b      	ldr	r3, [pc, #556]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f0      	bne.n	8005e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80a9 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4e:	4b85      	ldr	r3, [pc, #532]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e58:	4b82      	ldr	r3, [pc, #520]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d007      	beq.n	8005e74 <HAL_RCC_OscConfig+0x308>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b18      	cmp	r3, #24
 8005e68:	d13a      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x374>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d135      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e74:	4b7b      	ldr	r3, [pc, #492]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCC_OscConfig+0x320>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	2b80      	cmp	r3, #128	; 0x80
 8005e86:	d001      	beq.n	8005e8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e2c1      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e8c:	f7fb fa32 	bl	80012f4 <HAL_GetREVID>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d817      	bhi.n	8005eca <HAL_RCC_OscConfig+0x35e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d108      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x348>
 8005ea2:	4b70      	ldr	r3, [pc, #448]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005eaa:	4a6e      	ldr	r2, [pc, #440]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005eb2:	e075      	b.n	8005fa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eb4:	4b6b      	ldr	r3, [pc, #428]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	069b      	lsls	r3, r3, #26
 8005ec2:	4968      	ldr	r1, [pc, #416]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ec8:	e06a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eca:	4b66      	ldr	r3, [pc, #408]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	061b      	lsls	r3, r3, #24
 8005ed8:	4962      	ldr	r1, [pc, #392]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ede:	e05f      	b.n	8005fa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d042      	beq.n	8005f6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ee8:	4b5e      	ldr	r3, [pc, #376]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a5d      	ldr	r2, [pc, #372]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7fb f9ce 	bl	8001294 <HAL_GetTick>
 8005ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005efc:	f7fb f9ca 	bl	8001294 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e280      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f0e:	4b55      	ldr	r3, [pc, #340]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f1a:	f7fb f9eb 	bl	80012f4 <HAL_GetREVID>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d817      	bhi.n	8005f58 <HAL_RCC_OscConfig+0x3ec>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d108      	bne.n	8005f42 <HAL_RCC_OscConfig+0x3d6>
 8005f30:	4b4c      	ldr	r3, [pc, #304]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f38:	4a4a      	ldr	r2, [pc, #296]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f3e:	6053      	str	r3, [r2, #4]
 8005f40:	e02e      	b.n	8005fa0 <HAL_RCC_OscConfig+0x434>
 8005f42:	4b48      	ldr	r3, [pc, #288]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	069b      	lsls	r3, r3, #26
 8005f50:	4944      	ldr	r1, [pc, #272]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	604b      	str	r3, [r1, #4]
 8005f56:	e023      	b.n	8005fa0 <HAL_RCC_OscConfig+0x434>
 8005f58:	4b42      	ldr	r3, [pc, #264]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	493f      	ldr	r1, [pc, #252]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60cb      	str	r3, [r1, #12]
 8005f6c:	e018      	b.n	8005fa0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f6e:	4b3d      	ldr	r3, [pc, #244]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a3c      	ldr	r2, [pc, #240]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fb f98b 	bl	8001294 <HAL_GetTick>
 8005f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f82:	f7fb f987 	bl	8001294 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e23d      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f94:	4b33      	ldr	r3, [pc, #204]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1f0      	bne.n	8005f82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d036      	beq.n	800601a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d019      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb8:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fb f968 	bl	8001294 <HAL_GetTick>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc8:	f7fb f964 	bl	8001294 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e21a      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fda:	4b22      	ldr	r3, [pc, #136]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x45c>
 8005fe6:	e018      	b.n	800601a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe8:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fec:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fb f94e 	bl	8001294 <HAL_GetTick>
 8005ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ffc:	f7fb f94a 	bl	8001294 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e200      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800600e:	4b15      	ldr	r3, [pc, #84]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8006010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d039      	beq.n	800609a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d01c      	beq.n	8006068 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a0c      	ldr	r2, [pc, #48]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8006034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006038:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800603a:	f7fb f92b 	bl	8001294 <HAL_GetTick>
 800603e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006042:	f7fb f927 	bl	8001294 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e1dd      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006054:	4b03      	ldr	r3, [pc, #12]	; (8006064 <HAL_RCC_OscConfig+0x4f8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x4d6>
 8006060:	e01b      	b.n	800609a <HAL_RCC_OscConfig+0x52e>
 8006062:	bf00      	nop
 8006064:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006068:	4b9b      	ldr	r3, [pc, #620]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a9a      	ldr	r2, [pc, #616]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800606e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006072:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006074:	f7fb f90e 	bl	8001294 <HAL_GetTick>
 8006078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800607c:	f7fb f90a 	bl	8001294 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e1c0      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800608e:	4b92      	ldr	r3, [pc, #584]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8081 	beq.w	80061aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060a8:	4b8c      	ldr	r3, [pc, #560]	; (80062dc <HAL_RCC_OscConfig+0x770>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a8b      	ldr	r2, [pc, #556]	; (80062dc <HAL_RCC_OscConfig+0x770>)
 80060ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060b4:	f7fb f8ee 	bl	8001294 <HAL_GetTick>
 80060b8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060bc:	f7fb f8ea 	bl	8001294 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	; 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e1a0      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060ce:	4b83      	ldr	r3, [pc, #524]	; (80062dc <HAL_RCC_OscConfig+0x770>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d106      	bne.n	80060f0 <HAL_RCC_OscConfig+0x584>
 80060e2:	4b7d      	ldr	r3, [pc, #500]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	4a7c      	ldr	r2, [pc, #496]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	6713      	str	r3, [r2, #112]	; 0x70
 80060ee:	e02d      	b.n	800614c <HAL_RCC_OscConfig+0x5e0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10c      	bne.n	8006112 <HAL_RCC_OscConfig+0x5a6>
 80060f8:	4b77      	ldr	r3, [pc, #476]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fc:	4a76      	ldr	r2, [pc, #472]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80060fe:	f023 0301 	bic.w	r3, r3, #1
 8006102:	6713      	str	r3, [r2, #112]	; 0x70
 8006104:	4b74      	ldr	r3, [pc, #464]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006108:	4a73      	ldr	r2, [pc, #460]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800610a:	f023 0304 	bic.w	r3, r3, #4
 800610e:	6713      	str	r3, [r2, #112]	; 0x70
 8006110:	e01c      	b.n	800614c <HAL_RCC_OscConfig+0x5e0>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b05      	cmp	r3, #5
 8006118:	d10c      	bne.n	8006134 <HAL_RCC_OscConfig+0x5c8>
 800611a:	4b6f      	ldr	r3, [pc, #444]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	4a6e      	ldr	r2, [pc, #440]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006120:	f043 0304 	orr.w	r3, r3, #4
 8006124:	6713      	str	r3, [r2, #112]	; 0x70
 8006126:	4b6c      	ldr	r3, [pc, #432]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	4a6b      	ldr	r2, [pc, #428]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	6713      	str	r3, [r2, #112]	; 0x70
 8006132:	e00b      	b.n	800614c <HAL_RCC_OscConfig+0x5e0>
 8006134:	4b68      	ldr	r3, [pc, #416]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	4a67      	ldr	r2, [pc, #412]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	6713      	str	r3, [r2, #112]	; 0x70
 8006140:	4b65      	ldr	r3, [pc, #404]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	4a64      	ldr	r2, [pc, #400]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006146:	f023 0304 	bic.w	r3, r3, #4
 800614a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006154:	f7fb f89e 	bl	8001294 <HAL_GetTick>
 8006158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800615a:	e00a      	b.n	8006172 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615c:	f7fb f89a 	bl	8001294 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f241 3288 	movw	r2, #5000	; 0x1388
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e14e      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006172:	4b59      	ldr	r3, [pc, #356]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0ee      	beq.n	800615c <HAL_RCC_OscConfig+0x5f0>
 800617e:	e014      	b.n	80061aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fb f888 	bl	8001294 <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006186:	e00a      	b.n	800619e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006188:	f7fb f884 	bl	8001294 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	; 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e138      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800619e:	4b4e      	ldr	r3, [pc, #312]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1ee      	bne.n	8006188 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 812d 	beq.w	800640e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80061b4:	4b48      	ldr	r3, [pc, #288]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061bc:	2b18      	cmp	r3, #24
 80061be:	f000 80bd 	beq.w	800633c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	f040 809e 	bne.w	8006308 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061cc:	4b42      	ldr	r3, [pc, #264]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a41      	ldr	r2, [pc, #260]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80061d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fb f85c 	bl	8001294 <HAL_GetTick>
 80061dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e0:	f7fb f858 	bl	8001294 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e10e      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061f2:	4b39      	ldr	r3, [pc, #228]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061fe:	4b36      	ldr	r3, [pc, #216]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006202:	4b37      	ldr	r3, [pc, #220]	; (80062e0 <HAL_RCC_OscConfig+0x774>)
 8006204:	4013      	ands	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800620e:	0112      	lsls	r2, r2, #4
 8006210:	430a      	orrs	r2, r1
 8006212:	4931      	ldr	r1, [pc, #196]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	628b      	str	r3, [r1, #40]	; 0x28
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	3b01      	subs	r3, #1
 800621e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006226:	3b01      	subs	r3, #1
 8006228:	025b      	lsls	r3, r3, #9
 800622a:	b29b      	uxth	r3, r3
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	3b01      	subs	r3, #1
 8006234:	041b      	lsls	r3, r3, #16
 8006236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006240:	3b01      	subs	r3, #1
 8006242:	061b      	lsls	r3, r3, #24
 8006244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006248:	4923      	ldr	r1, [pc, #140]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800624a:	4313      	orrs	r3, r2
 800624c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800625a:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800625c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625e:	4b21      	ldr	r3, [pc, #132]	; (80062e4 <HAL_RCC_OscConfig+0x778>)
 8006260:	4013      	ands	r3, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006266:	00d2      	lsls	r2, r2, #3
 8006268:	491b      	ldr	r1, [pc, #108]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800626a:	4313      	orrs	r3, r2
 800626c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800626e:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	f023 020c 	bic.w	r2, r3, #12
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	4917      	ldr	r1, [pc, #92]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800627c:	4313      	orrs	r3, r2
 800627e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006280:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	f023 0202 	bic.w	r2, r3, #2
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628c:	4912      	ldr	r1, [pc, #72]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 800628e:	4313      	orrs	r3, r2
 8006290:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	4a10      	ldr	r2, [pc, #64]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80062a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80062b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80062b6:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80062bc:	f043 0301 	orr.w	r3, r3, #1
 80062c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062c2:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <HAL_RCC_OscConfig+0x76c>)
 80062c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ce:	f7fa ffe1 	bl	8001294 <HAL_GetTick>
 80062d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062d4:	e011      	b.n	80062fa <HAL_RCC_OscConfig+0x78e>
 80062d6:	bf00      	nop
 80062d8:	58024400 	.word	0x58024400
 80062dc:	58024800 	.word	0x58024800
 80062e0:	fffffc0c 	.word	0xfffffc0c
 80062e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e8:	f7fa ffd4 	bl	8001294 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e08a      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062fa:	4b47      	ldr	r3, [pc, #284]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0f0      	beq.n	80062e8 <HAL_RCC_OscConfig+0x77c>
 8006306:	e082      	b.n	800640e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006308:	4b43      	ldr	r3, [pc, #268]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a42      	ldr	r2, [pc, #264]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 800630e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fa ffbe 	bl	8001294 <HAL_GetTick>
 8006318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800631c:	f7fa ffba 	bl	8001294 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e070      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800632e:	4b3a      	ldr	r3, [pc, #232]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f0      	bne.n	800631c <HAL_RCC_OscConfig+0x7b0>
 800633a:	e068      	b.n	800640e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800633c:	4b36      	ldr	r3, [pc, #216]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006342:	4b35      	ldr	r3, [pc, #212]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	2b01      	cmp	r3, #1
 800634e:	d031      	beq.n	80063b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f003 0203 	and.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800635a:	429a      	cmp	r2, r3
 800635c:	d12a      	bne.n	80063b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636a:	429a      	cmp	r2, r3
 800636c:	d122      	bne.n	80063b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800637a:	429a      	cmp	r2, r3
 800637c:	d11a      	bne.n	80063b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	0a5b      	lsrs	r3, r3, #9
 8006382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800638c:	429a      	cmp	r2, r3
 800638e:	d111      	bne.n	80063b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	0c1b      	lsrs	r3, r3, #16
 8006394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800639e:	429a      	cmp	r2, r3
 80063a0:	d108      	bne.n	80063b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	0e1b      	lsrs	r3, r3, #24
 80063a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d001      	beq.n	80063b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e02b      	b.n	8006410 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80063b8:	4b17      	ldr	r3, [pc, #92]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	08db      	lsrs	r3, r3, #3
 80063be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d01f      	beq.n	800640e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	4a11      	ldr	r2, [pc, #68]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063da:	f7fa ff5b 	bl	8001294 <HAL_GetTick>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80063e0:	bf00      	nop
 80063e2:	f7fa ff57 	bl	8001294 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d0f9      	beq.n	80063e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063ee:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 80063f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <HAL_RCC_OscConfig+0x8b0>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063fa:	00d2      	lsls	r2, r2, #3
 80063fc:	4906      	ldr	r1, [pc, #24]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006402:	4b05      	ldr	r3, [pc, #20]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	4a04      	ldr	r2, [pc, #16]	; (8006418 <HAL_RCC_OscConfig+0x8ac>)
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3730      	adds	r7, #48	; 0x30
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	58024400 	.word	0x58024400
 800641c:	ffff0007 	.word	0xffff0007

08006420 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e19c      	b.n	800676e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006434:	4b8a      	ldr	r3, [pc, #552]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d910      	bls.n	8006464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	4b87      	ldr	r3, [pc, #540]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 020f 	bic.w	r2, r3, #15
 800644a:	4985      	ldr	r1, [pc, #532]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	4313      	orrs	r3, r2
 8006450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006452:	4b83      	ldr	r3, [pc, #524]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d001      	beq.n	8006464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e184      	b.n	800676e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	4b7b      	ldr	r3, [pc, #492]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800647c:	429a      	cmp	r2, r3
 800647e:	d908      	bls.n	8006492 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006480:	4b78      	ldr	r3, [pc, #480]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	4975      	ldr	r1, [pc, #468]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 800648e:	4313      	orrs	r3, r2
 8006490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d010      	beq.n	80064c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	4b70      	ldr	r3, [pc, #448]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d908      	bls.n	80064c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064ae:	4b6d      	ldr	r3, [pc, #436]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	496a      	ldr	r1, [pc, #424]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d010      	beq.n	80064ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	4b64      	ldr	r3, [pc, #400]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064d8:	429a      	cmp	r2, r3
 80064da:	d908      	bls.n	80064ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064dc:	4b61      	ldr	r3, [pc, #388]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	495e      	ldr	r1, [pc, #376]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d010      	beq.n	800651c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	4b59      	ldr	r3, [pc, #356]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006506:	429a      	cmp	r2, r3
 8006508:	d908      	bls.n	800651c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800650a:	4b56      	ldr	r3, [pc, #344]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	4953      	ldr	r1, [pc, #332]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006518:	4313      	orrs	r3, r2
 800651a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d010      	beq.n	800654a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	4b4d      	ldr	r3, [pc, #308]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	429a      	cmp	r2, r3
 8006536:	d908      	bls.n	800654a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006538:	4b4a      	ldr	r3, [pc, #296]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f023 020f 	bic.w	r2, r3, #15
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4947      	ldr	r1, [pc, #284]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006546:	4313      	orrs	r3, r2
 8006548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d055      	beq.n	8006602 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006556:	4b43      	ldr	r3, [pc, #268]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	4940      	ldr	r1, [pc, #256]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006564:	4313      	orrs	r3, r2
 8006566:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d107      	bne.n	8006580 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006570:	4b3c      	ldr	r3, [pc, #240]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d121      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0f6      	b.n	800676e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d107      	bne.n	8006598 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006588:	4b36      	ldr	r3, [pc, #216]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d115      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e0ea      	b.n	800676e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d107      	bne.n	80065b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065a0:	4b30      	ldr	r3, [pc, #192]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0de      	b.n	800676e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065b0:	4b2c      	ldr	r3, [pc, #176]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0d6      	b.n	800676e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065c0:	4b28      	ldr	r3, [pc, #160]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f023 0207 	bic.w	r2, r3, #7
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	4925      	ldr	r1, [pc, #148]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d2:	f7fa fe5f 	bl	8001294 <HAL_GetTick>
 80065d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d8:	e00a      	b.n	80065f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065da:	f7fa fe5b 	bl	8001294 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0be      	b.n	800676e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f0:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	429a      	cmp	r2, r3
 8006600:	d1eb      	bne.n	80065da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d010      	beq.n	8006630 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	429a      	cmp	r2, r3
 800661c:	d208      	bcs.n	8006630 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f023 020f 	bic.w	r2, r3, #15
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	490e      	ldr	r1, [pc, #56]	; (8006664 <HAL_RCC_ClockConfig+0x244>)
 800662c:	4313      	orrs	r3, r2
 800662e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d214      	bcs.n	8006668 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663e:	4b08      	ldr	r3, [pc, #32]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f023 020f 	bic.w	r2, r3, #15
 8006646:	4906      	ldr	r1, [pc, #24]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	4313      	orrs	r3, r2
 800664c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664e:	4b04      	ldr	r3, [pc, #16]	; (8006660 <HAL_RCC_ClockConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d005      	beq.n	8006668 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e086      	b.n	800676e <HAL_RCC_ClockConfig+0x34e>
 8006660:	52002000 	.word	0x52002000
 8006664:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d010      	beq.n	8006696 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	4b3f      	ldr	r3, [pc, #252]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006680:	429a      	cmp	r2, r3
 8006682:	d208      	bcs.n	8006696 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006684:	4b3c      	ldr	r3, [pc, #240]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	4939      	ldr	r1, [pc, #228]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 8006692:	4313      	orrs	r3, r2
 8006694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d010      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	4b34      	ldr	r3, [pc, #208]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d208      	bcs.n	80066c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066b2:	4b31      	ldr	r3, [pc, #196]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	492e      	ldr	r1, [pc, #184]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d010      	beq.n	80066f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699a      	ldr	r2, [r3, #24]
 80066d4:	4b28      	ldr	r3, [pc, #160]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066dc:	429a      	cmp	r2, r3
 80066de:	d208      	bcs.n	80066f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066e0:	4b25      	ldr	r3, [pc, #148]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	4922      	ldr	r1, [pc, #136]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d010      	beq.n	8006720 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800670a:	429a      	cmp	r2, r3
 800670c:	d208      	bcs.n	8006720 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800670e:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	4917      	ldr	r1, [pc, #92]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 800671c:	4313      	orrs	r3, r2
 800671e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006720:	f000 f834 	bl	800678c <HAL_RCC_GetSysClockFreq>
 8006724:	4602      	mov	r2, r0
 8006726:	4b14      	ldr	r3, [pc, #80]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	4912      	ldr	r1, [pc, #72]	; (800677c <HAL_RCC_ClockConfig+0x35c>)
 8006732:	5ccb      	ldrb	r3, [r1, r3]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
 800673c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800673e:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <HAL_RCC_ClockConfig+0x358>)
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	4a0d      	ldr	r2, [pc, #52]	; (800677c <HAL_RCC_ClockConfig+0x35c>)
 8006748:	5cd3      	ldrb	r3, [r2, r3]
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	4a0a      	ldr	r2, [pc, #40]	; (8006780 <HAL_RCC_ClockConfig+0x360>)
 8006756:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006758:	4a0a      	ldr	r2, [pc, #40]	; (8006784 <HAL_RCC_ClockConfig+0x364>)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800675e:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <HAL_RCC_ClockConfig+0x368>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fa fd4c 	bl	8001200 <HAL_InitTick>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400
 800677c:	0800bd20 	.word	0x0800bd20
 8006780:	24000004 	.word	0x24000004
 8006784:	24000000 	.word	0x24000000
 8006788:	24000008 	.word	0x24000008

0800678c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800678c:	b480      	push	{r7}
 800678e:	b089      	sub	sp, #36	; 0x24
 8006790:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006792:	4bb3      	ldr	r3, [pc, #716]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800679a:	2b18      	cmp	r3, #24
 800679c:	f200 8155 	bhi.w	8006a4a <HAL_RCC_GetSysClockFreq+0x2be>
 80067a0:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	0800680d 	.word	0x0800680d
 80067ac:	08006a4b 	.word	0x08006a4b
 80067b0:	08006a4b 	.word	0x08006a4b
 80067b4:	08006a4b 	.word	0x08006a4b
 80067b8:	08006a4b 	.word	0x08006a4b
 80067bc:	08006a4b 	.word	0x08006a4b
 80067c0:	08006a4b 	.word	0x08006a4b
 80067c4:	08006a4b 	.word	0x08006a4b
 80067c8:	08006833 	.word	0x08006833
 80067cc:	08006a4b 	.word	0x08006a4b
 80067d0:	08006a4b 	.word	0x08006a4b
 80067d4:	08006a4b 	.word	0x08006a4b
 80067d8:	08006a4b 	.word	0x08006a4b
 80067dc:	08006a4b 	.word	0x08006a4b
 80067e0:	08006a4b 	.word	0x08006a4b
 80067e4:	08006a4b 	.word	0x08006a4b
 80067e8:	08006839 	.word	0x08006839
 80067ec:	08006a4b 	.word	0x08006a4b
 80067f0:	08006a4b 	.word	0x08006a4b
 80067f4:	08006a4b 	.word	0x08006a4b
 80067f8:	08006a4b 	.word	0x08006a4b
 80067fc:	08006a4b 	.word	0x08006a4b
 8006800:	08006a4b 	.word	0x08006a4b
 8006804:	08006a4b 	.word	0x08006a4b
 8006808:	0800683f 	.word	0x0800683f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800680c:	4b94      	ldr	r3, [pc, #592]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006818:	4b91      	ldr	r3, [pc, #580]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	08db      	lsrs	r3, r3, #3
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	4a90      	ldr	r2, [pc, #576]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
 8006828:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800682a:	e111      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800682c:	4b8d      	ldr	r3, [pc, #564]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800682e:	61bb      	str	r3, [r7, #24]
      break;
 8006830:	e10e      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006832:	4b8d      	ldr	r3, [pc, #564]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006834:	61bb      	str	r3, [r7, #24]
      break;
 8006836:	e10b      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006838:	4b8c      	ldr	r3, [pc, #560]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800683a:	61bb      	str	r3, [r7, #24]
      break;
 800683c:	e108      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800683e:	4b88      	ldr	r3, [pc, #544]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006848:	4b85      	ldr	r3, [pc, #532]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	091b      	lsrs	r3, r3, #4
 800684e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006852:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006854:	4b82      	ldr	r3, [pc, #520]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800685e:	4b80      	ldr	r3, [pc, #512]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	08db      	lsrs	r3, r3, #3
 8006864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 80e1 	beq.w	8006a44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b02      	cmp	r3, #2
 8006886:	f000 8083 	beq.w	8006990 <HAL_RCC_GetSysClockFreq+0x204>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b02      	cmp	r3, #2
 800688e:	f200 80a1 	bhi.w	80069d4 <HAL_RCC_GetSysClockFreq+0x248>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_RCC_GetSysClockFreq+0x114>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d056      	beq.n	800694c <HAL_RCC_GetSysClockFreq+0x1c0>
 800689e:	e099      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068a0:	4b6f      	ldr	r3, [pc, #444]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d02d      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068ac:	4b6c      	ldr	r3, [pc, #432]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	08db      	lsrs	r3, r3, #3
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	4a6b      	ldr	r2, [pc, #428]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068b8:	fa22 f303 	lsr.w	r3, r2, r3
 80068bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d6:	4b62      	ldr	r3, [pc, #392]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006902:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006906:	e087      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691a:	4b51      	ldr	r3, [pc, #324]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	ed97 6a02 	vldr	s12, [r7, #8]
 800692e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006946:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800694a:	e065      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800695a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695e:	4b40      	ldr	r3, [pc, #256]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006972:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800698e:	e043      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006a7c <HAL_RCC_GetSysClockFreq+0x2f0>
 800699e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a2:	4b2f      	ldr	r3, [pc, #188]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069d2:	e021      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006a78 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e6:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006a18:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1c:	0a5b      	lsrs	r3, r3, #9
 8006a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a22:	3301      	adds	r3, #1
 8006a24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a3c:	ee17 3a90 	vmov	r3, s15
 8006a40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006a42:	e005      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61bb      	str	r3, [r7, #24]
      break;
 8006a48:	e002      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a4c:	61bb      	str	r3, [r7, #24]
      break;
 8006a4e:	bf00      	nop
  }

  return sysclockfreq;
 8006a50:	69bb      	ldr	r3, [r7, #24]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3724      	adds	r7, #36	; 0x24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
 8006a64:	03d09000 	.word	0x03d09000
 8006a68:	003d0900 	.word	0x003d0900
 8006a6c:	017d7840 	.word	0x017d7840
 8006a70:	46000000 	.word	0x46000000
 8006a74:	4c742400 	.word	0x4c742400
 8006a78:	4a742400 	.word	0x4a742400
 8006a7c:	4bbebc20 	.word	0x4bbebc20

08006a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a86:	f7ff fe81 	bl	800678c <HAL_RCC_GetSysClockFreq>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	0a1b      	lsrs	r3, r3, #8
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	490f      	ldr	r1, [pc, #60]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a98:	5ccb      	ldrb	r3, [r1, r3]
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006aae:	5cd3      	ldrb	r3, [r2, r3]
 8006ab0:	f003 031f 	and.w	r3, r3, #31
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aba:	4a07      	ldr	r2, [pc, #28]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006abc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006abe:	4a07      	ldr	r2, [pc, #28]	; (8006adc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ac4:	4b04      	ldr	r3, [pc, #16]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	0800bd20 	.word	0x0800bd20
 8006ad8:	24000004 	.word	0x24000004
 8006adc:	24000000 	.word	0x24000000

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ae4:	f7ff ffcc 	bl	8006a80 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	091b      	lsrs	r3, r3, #4
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4904      	ldr	r1, [pc, #16]	; (8006b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006af6:	5ccb      	ldrb	r3, [r1, r3]
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	58024400 	.word	0x58024400
 8006b08:	0800bd20 	.word	0x0800bd20

08006b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b10:	f7ff ffb6 	bl	8006a80 <HAL_RCC_GetHCLKFreq>
 8006b14:	4602      	mov	r2, r0
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	0a1b      	lsrs	r3, r3, #8
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	4904      	ldr	r1, [pc, #16]	; (8006b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b22:	5ccb      	ldrb	r3, [r1, r3]
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	58024400 	.word	0x58024400
 8006b34:	0800bd20 	.word	0x0800bd20

08006b38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b3c:	b0ca      	sub	sp, #296	; 0x128
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	ea54 0305 	orrs.w	r3, r4, r5
 8006b62:	d049      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b6e:	d02f      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b74:	d828      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b7a:	d01a      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b80:	d822      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b8a:	d007      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b8c:	e01c      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8e:	4bb8      	ldr	r3, [pc, #736]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	4ab7      	ldr	r2, [pc, #732]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b9a:	e01a      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 fb61 	bl	800926c <RCCEx_PLL2_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bb0:	e00f      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb6:	3328      	adds	r3, #40	; 0x28
 8006bb8:	2102      	movs	r1, #2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f002 fc08 	bl	80093d0 <RCCEx_PLL3_Config>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bc6:	e004      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bce:	e000      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bda:	4ba5      	ldr	r3, [pc, #660]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bde:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be8:	4aa1      	ldr	r2, [pc, #644]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bea:	430b      	orrs	r3, r1
 8006bec:	6513      	str	r3, [r2, #80]	; 0x50
 8006bee:	e003      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006c04:	f04f 0900 	mov.w	r9, #0
 8006c08:	ea58 0309 	orrs.w	r3, r8, r9
 8006c0c:	d047      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d82a      	bhi.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c35 	.word	0x08006c35
 8006c24:	08006c43 	.word	0x08006c43
 8006c28:	08006c59 	.word	0x08006c59
 8006c2c:	08006c77 	.word	0x08006c77
 8006c30:	08006c77 	.word	0x08006c77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c34:	4b8e      	ldr	r3, [pc, #568]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	4a8d      	ldr	r2, [pc, #564]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c40:	e01a      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c46:	3308      	adds	r3, #8
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f002 fb0e 	bl	800926c <RCCEx_PLL2_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c56:	e00f      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5c:	3328      	adds	r3, #40	; 0x28
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f002 fbb5 	bl	80093d0 <RCCEx_PLL3_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c6c:	e004      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c74:	e000      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c80:	4b7b      	ldr	r3, [pc, #492]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c84:	f023 0107 	bic.w	r1, r3, #7
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	4a78      	ldr	r2, [pc, #480]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6513      	str	r3, [r2, #80]	; 0x50
 8006c94:	e003      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006caa:	f04f 0b00 	mov.w	fp, #0
 8006cae:	ea5a 030b 	orrs.w	r3, sl, fp
 8006cb2:	d04c      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbe:	d030      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc4:	d829      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc8:	d02d      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cca:	2bc0      	cmp	r3, #192	; 0xc0
 8006ccc:	d825      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d018      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006cd2:	2b80      	cmp	r3, #128	; 0x80
 8006cd4:	d821      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	d007      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006cde:	e01c      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce0:	4b63      	ldr	r3, [pc, #396]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4a62      	ldr	r2, [pc, #392]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006cec:	e01c      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f002 fab8 	bl	800926c <RCCEx_PLL2_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d02:	e011      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d08:	3328      	adds	r3, #40	; 0x28
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f002 fb5f 	bl	80093d0 <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d30:	4b4f      	ldr	r3, [pc, #316]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d34:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	4a4c      	ldr	r2, [pc, #304]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6513      	str	r3, [r2, #80]	; 0x50
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006d5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	d053      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d7a:	d035      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006d7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d80:	d82e      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d86:	d031      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006d88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d8c:	d828      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d92:	d01a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d98:	d822      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006da2:	d007      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006da4:	e01c      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da6:	4b32      	ldr	r3, [pc, #200]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	4a31      	ldr	r2, [pc, #196]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006db2:	e01c      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db8:	3308      	adds	r3, #8
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f002 fa55 	bl	800926c <RCCEx_PLL2_Config>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006dc8:	e011      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dce:	3328      	adds	r3, #40	; 0x28
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f002 fafc 	bl	80093d0 <RCCEx_PLL3_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dde:	e006      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006de6:	e002      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006de8:	bf00      	nop
 8006dea:	e000      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006df6:	4b1e      	ldr	r3, [pc, #120]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e06:	4a1a      	ldr	r2, [pc, #104]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006e22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006e30:	460b      	mov	r3, r1
 8006e32:	4313      	orrs	r3, r2
 8006e34:	d056      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e42:	d038      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e48:	d831      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e4e:	d034      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006e50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e54:	d82b      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e5a:	d01d      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e60:	d825      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d006      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006e66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e6a:	d00a      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e6c:	e01f      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e6e:	bf00      	nop
 8006e70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e74:	4ba2      	ldr	r3, [pc, #648]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	4aa1      	ldr	r2, [pc, #644]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e80:	e01c      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e86:	3308      	adds	r3, #8
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f002 f9ee 	bl	800926c <RCCEx_PLL2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e96:	e011      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e9c:	3328      	adds	r3, #40	; 0x28
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f002 fa95 	bl	80093d0 <RCCEx_PLL3_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006eac:	e006      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006eb4:	e002      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10b      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ec4:	4b8e      	ldr	r3, [pc, #568]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ed4:	4a8a      	ldr	r2, [pc, #552]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8006eda:	e003      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006edc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ee0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006efa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d03a      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0a:	2b30      	cmp	r3, #48	; 0x30
 8006f0c:	d01f      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006f0e:	2b30      	cmp	r3, #48	; 0x30
 8006f10:	d819      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d00c      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d815      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d019      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d111      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f22:	4b77      	ldr	r3, [pc, #476]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	4a76      	ldr	r2, [pc, #472]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f2e:	e011      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f34:	3308      	adds	r3, #8
 8006f36:	2102      	movs	r1, #2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f002 f997 	bl	800926c <RCCEx_PLL2_Config>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f44:	e006      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f4c:	e002      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f4e:	bf00      	nop
 8006f50:	e000      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f5c:	4b68      	ldr	r3, [pc, #416]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f60:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	4a65      	ldr	r2, [pc, #404]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f70:	e003      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006f86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4313      	orrs	r3, r2
 8006f98:	d051      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa4:	d035      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006faa:	d82e      	bhi.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fb0:	d031      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fb6:	d828      	bhi.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fbc:	d01a      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc2:	d822      	bhi.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fcc:	d007      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006fce:	e01c      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd0:	4b4b      	ldr	r3, [pc, #300]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	4a4a      	ldr	r2, [pc, #296]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006fdc:	e01c      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f002 f940 	bl	800926c <RCCEx_PLL2_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ff2:	e011      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff8:	3328      	adds	r3, #40	; 0x28
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f002 f9e7 	bl	80093d0 <RCCEx_PLL3_Config>
 8007002:	4603      	mov	r3, r0
 8007004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007008:	e006      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007010:	e002      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007020:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007024:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800702e:	4a34      	ldr	r2, [pc, #208]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007030:	430b      	orrs	r3, r1
 8007032:	6513      	str	r3, [r2, #80]	; 0x50
 8007034:	e003      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800703a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800704a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800704e:	2300      	movs	r3, #0
 8007050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007054:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007058:	460b      	mov	r3, r1
 800705a:	4313      	orrs	r3, r2
 800705c:	d056      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007068:	d033      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800706a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800706e:	d82c      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007074:	d02f      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007076:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800707a:	d826      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800707c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007080:	d02b      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007086:	d820      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800708c:	d012      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800708e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007092:	d81a      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d022      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709c:	d115      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800709e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a2:	3308      	adds	r3, #8
 80070a4:	2101      	movs	r1, #1
 80070a6:	4618      	mov	r0, r3
 80070a8:	f002 f8e0 	bl	800926c <RCCEx_PLL2_Config>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070b2:	e015      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b8:	3328      	adds	r3, #40	; 0x28
 80070ba:	2101      	movs	r1, #1
 80070bc:	4618      	mov	r0, r3
 80070be:	f002 f987 	bl	80093d0 <RCCEx_PLL3_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070c8:	e00a      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070d0:	e006      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070d2:	bf00      	nop
 80070d4:	e004      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070d6:	bf00      	nop
 80070d8:	e002      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070da:	bf00      	nop
 80070dc:	e000      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10d      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f6:	4a02      	ldr	r2, [pc, #8]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6513      	str	r3, [r2, #80]	; 0x50
 80070fc:	e006      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80070fe:	bf00      	nop
 8007100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800710c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800711c:	2300      	movs	r3, #0
 800711e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007122:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007126:	460b      	mov	r3, r1
 8007128:	4313      	orrs	r3, r2
 800712a:	d055      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007130:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007138:	d033      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800713a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800713e:	d82c      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007144:	d02f      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714a:	d826      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800714c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007150:	d02b      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007156:	d820      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715c:	d012      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800715e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007162:	d81a      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d022      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800716c:	d115      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007172:	3308      	adds	r3, #8
 8007174:	2101      	movs	r1, #1
 8007176:	4618      	mov	r0, r3
 8007178:	f002 f878 	bl	800926c <RCCEx_PLL2_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007182:	e015      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007188:	3328      	adds	r3, #40	; 0x28
 800718a:	2101      	movs	r1, #1
 800718c:	4618      	mov	r0, r3
 800718e:	f002 f91f 	bl	80093d0 <RCCEx_PLL3_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007198:	e00a      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071a0:	e006      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071a2:	bf00      	nop
 80071a4:	e004      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071a6:	bf00      	nop
 80071a8:	e002      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071b8:	4ba3      	ldr	r3, [pc, #652]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071bc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071c8:	4a9f      	ldr	r2, [pc, #636]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ca:	430b      	orrs	r3, r1
 80071cc:	6593      	str	r3, [r2, #88]	; 0x58
 80071ce:	e003      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80071e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80071f2:	460b      	mov	r3, r1
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d037      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007202:	d00e      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007208:	d816      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d018      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800720e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007212:	d111      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007214:	4b8c      	ldr	r3, [pc, #560]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a8b      	ldr	r2, [pc, #556]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800721a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800721e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007220:	e00f      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007226:	3308      	adds	r3, #8
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f002 f81e 	bl	800926c <RCCEx_PLL2_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007236:	e004      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800724a:	4b7f      	ldr	r3, [pc, #508]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800724c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	4a7b      	ldr	r2, [pc, #492]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6513      	str	r3, [r2, #80]	; 0x50
 800725e:	e003      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007278:	2300      	movs	r3, #0
 800727a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800727e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	d039      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728e:	2b03      	cmp	r3, #3
 8007290:	d81c      	bhi.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072d5 	.word	0x080072d5
 800729c:	080072a9 	.word	0x080072a9
 80072a0:	080072b7 	.word	0x080072b7
 80072a4:	080072d5 	.word	0x080072d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a8:	4b67      	ldr	r3, [pc, #412]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	4a66      	ldr	r2, [pc, #408]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072b4:	e00f      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ba:	3308      	adds	r3, #8
 80072bc:	2102      	movs	r1, #2
 80072be:	4618      	mov	r0, r3
 80072c0:	f001 ffd4 	bl	800926c <RCCEx_PLL2_Config>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072ca:	e004      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072d2:	e000      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80072d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072de:	4b5a      	ldr	r3, [pc, #360]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e2:	f023 0103 	bic.w	r1, r3, #3
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ec:	4a56      	ldr	r2, [pc, #344]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ee:	430b      	orrs	r3, r1
 80072f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072f2:	e003      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800730c:	2300      	movs	r3, #0
 800730e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007312:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007316:	460b      	mov	r3, r1
 8007318:	4313      	orrs	r3, r2
 800731a:	f000 809f 	beq.w	800745c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800731e:	4b4b      	ldr	r3, [pc, #300]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a4a      	ldr	r2, [pc, #296]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007328:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800732a:	f7f9 ffb3 	bl	8001294 <HAL_GetTick>
 800732e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007332:	e00b      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007334:	f7f9 ffae 	bl	8001294 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b64      	cmp	r3, #100	; 0x64
 8007342:	d903      	bls.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800734a:	e005      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800734c:	4b3f      	ldr	r3, [pc, #252]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0ed      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800735c:	2b00      	cmp	r3, #0
 800735e:	d179      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007360:	4b39      	ldr	r3, [pc, #228]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800736c:	4053      	eors	r3, r2
 800736e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007372:	2b00      	cmp	r3, #0
 8007374:	d015      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007376:	4b34      	ldr	r3, [pc, #208]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800737e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007382:	4b31      	ldr	r3, [pc, #196]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	4a30      	ldr	r2, [pc, #192]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800738c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800738e:	4b2e      	ldr	r3, [pc, #184]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	4a2d      	ldr	r2, [pc, #180]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007398:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800739a:	4a2b      	ldr	r2, [pc, #172]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800739c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ae:	d118      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b0:	f7f9 ff70 	bl	8001294 <HAL_GetTick>
 80073b4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073b8:	e00d      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ba:	f7f9 ff6b 	bl	8001294 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073c4:	1ad2      	subs	r2, r2, r3
 80073c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d903      	bls.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80073d4:	e005      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073d6:	4b1c      	ldr	r3, [pc, #112]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0eb      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80073e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d129      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80073f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073fa:	d10e      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80073fc:	4b12      	ldr	r3, [pc, #72]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800740c:	091a      	lsrs	r2, r3, #4
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007410:	4013      	ands	r3, r2
 8007412:	4a0d      	ldr	r2, [pc, #52]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007414:	430b      	orrs	r3, r1
 8007416:	6113      	str	r3, [r2, #16]
 8007418:	e005      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	4a0a      	ldr	r2, [pc, #40]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007420:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007424:	6113      	str	r3, [r2, #16]
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007428:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007436:	4a04      	ldr	r2, [pc, #16]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007438:	430b      	orrs	r3, r1
 800743a:	6713      	str	r3, [r2, #112]	; 0x70
 800743c:	e00e      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800743e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007446:	e009      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007448:	58024400 	.word	0x58024400
 800744c:	58024800 	.word	0x58024800
 8007450:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007458:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800745c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f002 0301 	and.w	r3, r2, #1
 8007468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800746c:	2300      	movs	r3, #0
 800746e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007472:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007476:	460b      	mov	r3, r1
 8007478:	4313      	orrs	r3, r2
 800747a:	f000 8089 	beq.w	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800747e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007484:	2b28      	cmp	r3, #40	; 0x28
 8007486:	d86b      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	08007569 	.word	0x08007569
 8007494:	08007561 	.word	0x08007561
 8007498:	08007561 	.word	0x08007561
 800749c:	08007561 	.word	0x08007561
 80074a0:	08007561 	.word	0x08007561
 80074a4:	08007561 	.word	0x08007561
 80074a8:	08007561 	.word	0x08007561
 80074ac:	08007561 	.word	0x08007561
 80074b0:	08007535 	.word	0x08007535
 80074b4:	08007561 	.word	0x08007561
 80074b8:	08007561 	.word	0x08007561
 80074bc:	08007561 	.word	0x08007561
 80074c0:	08007561 	.word	0x08007561
 80074c4:	08007561 	.word	0x08007561
 80074c8:	08007561 	.word	0x08007561
 80074cc:	08007561 	.word	0x08007561
 80074d0:	0800754b 	.word	0x0800754b
 80074d4:	08007561 	.word	0x08007561
 80074d8:	08007561 	.word	0x08007561
 80074dc:	08007561 	.word	0x08007561
 80074e0:	08007561 	.word	0x08007561
 80074e4:	08007561 	.word	0x08007561
 80074e8:	08007561 	.word	0x08007561
 80074ec:	08007561 	.word	0x08007561
 80074f0:	08007569 	.word	0x08007569
 80074f4:	08007561 	.word	0x08007561
 80074f8:	08007561 	.word	0x08007561
 80074fc:	08007561 	.word	0x08007561
 8007500:	08007561 	.word	0x08007561
 8007504:	08007561 	.word	0x08007561
 8007508:	08007561 	.word	0x08007561
 800750c:	08007561 	.word	0x08007561
 8007510:	08007569 	.word	0x08007569
 8007514:	08007561 	.word	0x08007561
 8007518:	08007561 	.word	0x08007561
 800751c:	08007561 	.word	0x08007561
 8007520:	08007561 	.word	0x08007561
 8007524:	08007561 	.word	0x08007561
 8007528:	08007561 	.word	0x08007561
 800752c:	08007561 	.word	0x08007561
 8007530:	08007569 	.word	0x08007569
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007538:	3308      	adds	r3, #8
 800753a:	2101      	movs	r1, #1
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fe95 	bl	800926c <RCCEx_PLL2_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007548:	e00f      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800754e:	3328      	adds	r3, #40	; 0x28
 8007550:	2101      	movs	r1, #1
 8007552:	4618      	mov	r0, r3
 8007554:	f001 ff3c 	bl	80093d0 <RCCEx_PLL3_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800755e:	e004      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007566:	e000      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007572:	4bbf      	ldr	r3, [pc, #764]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007576:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800757e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007580:	4abb      	ldr	r2, [pc, #748]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007582:	430b      	orrs	r3, r1
 8007584:	6553      	str	r3, [r2, #84]	; 0x54
 8007586:	e003      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800758c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f002 0302 	and.w	r3, r2, #2
 800759c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075a0:	2300      	movs	r3, #0
 80075a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80075aa:	460b      	mov	r3, r1
 80075ac:	4313      	orrs	r3, r2
 80075ae:	d041      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	d824      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	0800760d 	.word	0x0800760d
 80075c4:	080075d9 	.word	0x080075d9
 80075c8:	080075ef 	.word	0x080075ef
 80075cc:	0800760d 	.word	0x0800760d
 80075d0:	0800760d 	.word	0x0800760d
 80075d4:	0800760d 	.word	0x0800760d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075dc:	3308      	adds	r3, #8
 80075de:	2101      	movs	r1, #1
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 fe43 	bl	800926c <RCCEx_PLL2_Config>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80075ec:	e00f      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f2:	3328      	adds	r3, #40	; 0x28
 80075f4:	2101      	movs	r1, #1
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 feea 	bl	80093d0 <RCCEx_PLL3_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007602:	e004      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800760a:	e000      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800760c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007616:	4b96      	ldr	r3, [pc, #600]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761a:	f023 0107 	bic.w	r1, r3, #7
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007624:	4a92      	ldr	r2, [pc, #584]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007626:	430b      	orrs	r3, r1
 8007628:	6553      	str	r3, [r2, #84]	; 0x54
 800762a:	e003      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f002 0304 	and.w	r3, r2, #4
 8007640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007644:	2300      	movs	r3, #0
 8007646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800764a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800764e:	460b      	mov	r3, r1
 8007650:	4313      	orrs	r3, r2
 8007652:	d044      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800765c:	2b05      	cmp	r3, #5
 800765e:	d825      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007660:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007666:	bf00      	nop
 8007668:	080076b5 	.word	0x080076b5
 800766c:	08007681 	.word	0x08007681
 8007670:	08007697 	.word	0x08007697
 8007674:	080076b5 	.word	0x080076b5
 8007678:	080076b5 	.word	0x080076b5
 800767c:	080076b5 	.word	0x080076b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007684:	3308      	adds	r3, #8
 8007686:	2101      	movs	r1, #1
 8007688:	4618      	mov	r0, r3
 800768a:	f001 fdef 	bl	800926c <RCCEx_PLL2_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007694:	e00f      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769a:	3328      	adds	r3, #40	; 0x28
 800769c:	2101      	movs	r1, #1
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 fe96 	bl	80093d0 <RCCEx_PLL3_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076aa:	e004      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076b2:	e000      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80076b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10b      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076be:	4b6c      	ldr	r3, [pc, #432]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c2:	f023 0107 	bic.w	r1, r3, #7
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ce:	4a68      	ldr	r2, [pc, #416]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076d0:	430b      	orrs	r3, r1
 80076d2:	6593      	str	r3, [r2, #88]	; 0x58
 80076d4:	e003      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f002 0320 	and.w	r3, r2, #32
 80076ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076ee:	2300      	movs	r3, #0
 80076f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076f8:	460b      	mov	r3, r1
 80076fa:	4313      	orrs	r3, r2
 80076fc:	d055      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80076fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800770a:	d033      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800770c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007710:	d82c      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007716:	d02f      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771c:	d826      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800771e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007722:	d02b      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007724:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007728:	d820      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800772a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772e:	d012      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007734:	d81a      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d022      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800773a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800773e:	d115      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007744:	3308      	adds	r3, #8
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f001 fd8f 	bl	800926c <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007754:	e015      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775a:	3328      	adds	r3, #40	; 0x28
 800775c:	2102      	movs	r1, #2
 800775e:	4618      	mov	r0, r3
 8007760:	f001 fe36 	bl	80093d0 <RCCEx_PLL3_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800776a:	e00a      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007772:	e006      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007774:	bf00      	nop
 8007776:	e004      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007778:	bf00      	nop
 800777a:	e002      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800777c:	bf00      	nop
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10b      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800778a:	4b39      	ldr	r3, [pc, #228]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800778c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779a:	4a35      	ldr	r2, [pc, #212]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800779c:	430b      	orrs	r3, r1
 800779e:	6553      	str	r3, [r2, #84]	; 0x54
 80077a0:	e003      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80077b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077ba:	2300      	movs	r3, #0
 80077bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4313      	orrs	r3, r2
 80077c8:	d058      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077d6:	d033      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80077d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077dc:	d82c      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e2:	d02f      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80077e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e8:	d826      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077ee:	d02b      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80077f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077f4:	d820      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fa:	d012      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80077fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007800:	d81a      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d022      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780a:	d115      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007810:	3308      	adds	r3, #8
 8007812:	2100      	movs	r1, #0
 8007814:	4618      	mov	r0, r3
 8007816:	f001 fd29 	bl	800926c <RCCEx_PLL2_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007820:	e015      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007826:	3328      	adds	r3, #40	; 0x28
 8007828:	2102      	movs	r1, #2
 800782a:	4618      	mov	r0, r3
 800782c:	f001 fdd0 	bl	80093d0 <RCCEx_PLL3_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007836:	e00a      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800783e:	e006      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007840:	bf00      	nop
 8007842:	e004      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007844:	bf00      	nop
 8007846:	e002      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800784c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800784e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10e      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007866:	4a02      	ldr	r2, [pc, #8]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007868:	430b      	orrs	r3, r1
 800786a:	6593      	str	r3, [r2, #88]	; 0x58
 800786c:	e006      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800786e:	bf00      	nop
 8007870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800787c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800788c:	2300      	movs	r3, #0
 800788e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007892:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007896:	460b      	mov	r3, r1
 8007898:	4313      	orrs	r3, r2
 800789a:	d055      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078a8:	d033      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80078aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078ae:	d82c      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b4:	d02f      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80078b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ba:	d826      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078c0:	d02b      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80078c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078c6:	d820      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078cc:	d012      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80078ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078d2:	d81a      	bhi.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d022      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80078d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078dc:	d115      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e2:	3308      	adds	r3, #8
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 fcc0 	bl	800926c <RCCEx_PLL2_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80078f2:	e015      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f8:	3328      	adds	r3, #40	; 0x28
 80078fa:	2102      	movs	r1, #2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 fd67 	bl	80093d0 <RCCEx_PLL3_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007908:	e00a      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007910:	e006      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007912:	bf00      	nop
 8007914:	e004      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007916:	bf00      	nop
 8007918:	e002      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800791a:	bf00      	nop
 800791c:	e000      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800791e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10b      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007928:	4ba1      	ldr	r3, [pc, #644]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800792a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007934:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007938:	4a9d      	ldr	r2, [pc, #628]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800793a:	430b      	orrs	r3, r1
 800793c:	6593      	str	r3, [r2, #88]	; 0x58
 800793e:	e003      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	f002 0308 	and.w	r3, r2, #8
 8007954:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007958:	2300      	movs	r3, #0
 800795a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800795e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007962:	460b      	mov	r3, r1
 8007964:	4313      	orrs	r3, r2
 8007966:	d01e      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007974:	d10c      	bne.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797a:	3328      	adds	r3, #40	; 0x28
 800797c:	2102      	movs	r1, #2
 800797e:	4618      	mov	r0, r3
 8007980:	f001 fd26 	bl	80093d0 <RCCEx_PLL3_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007990:	4b87      	ldr	r3, [pc, #540]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007994:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a0:	4a83      	ldr	r2, [pc, #524]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079a2:	430b      	orrs	r3, r1
 80079a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f002 0310 	and.w	r3, r2, #16
 80079b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079b6:	2300      	movs	r3, #0
 80079b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80079c0:	460b      	mov	r3, r1
 80079c2:	4313      	orrs	r3, r2
 80079c4:	d01e      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d2:	d10c      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	3328      	adds	r3, #40	; 0x28
 80079da:	2102      	movs	r1, #2
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 fcf7 	bl	80093d0 <RCCEx_PLL3_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079ee:	4b70      	ldr	r3, [pc, #448]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079fe:	4a6c      	ldr	r2, [pc, #432]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a00:	430b      	orrs	r3, r1
 8007a02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a14:	2300      	movs	r3, #0
 8007a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4313      	orrs	r3, r2
 8007a22:	d03e      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a30:	d022      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a36:	d81b      	bhi.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a40:	d00b      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007a42:	e015      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a48:	3308      	adds	r3, #8
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 fc0d 	bl	800926c <RCCEx_PLL2_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a58:	e00f      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5e:	3328      	adds	r3, #40	; 0x28
 8007a60:	2102      	movs	r1, #2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 fcb4 	bl	80093d0 <RCCEx_PLL3_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a6e:	e004      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a76:	e000      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10b      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a82:	4b4b      	ldr	r3, [pc, #300]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a92:	4a47      	ldr	r2, [pc, #284]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a94:	430b      	orrs	r3, r1
 8007a96:	6593      	str	r3, [r2, #88]	; 0x58
 8007a98:	e003      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007aae:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ab4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d03b      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aca:	d01f      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007acc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ad0:	d818      	bhi.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad6:	d003      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007adc:	d007      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007ade:	e011      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae0:	4b33      	ldr	r3, [pc, #204]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	4a32      	ldr	r2, [pc, #200]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007aec:	e00f      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af2:	3328      	adds	r3, #40	; 0x28
 8007af4:	2101      	movs	r1, #1
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 fc6a 	bl	80093d0 <RCCEx_PLL3_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b02:	e004      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b0a:	e000      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b16:	4b26      	ldr	r3, [pc, #152]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b26:	4a22      	ldr	r2, [pc, #136]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6553      	str	r3, [r2, #84]	; 0x54
 8007b2c:	e003      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007b42:	673b      	str	r3, [r7, #112]	; 0x70
 8007b44:	2300      	movs	r3, #0
 8007b46:	677b      	str	r3, [r7, #116]	; 0x74
 8007b48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	d034      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b60:	d007      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007b62:	e011      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b64:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b70:	e00e      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b76:	3308      	adds	r3, #8
 8007b78:	2102      	movs	r1, #2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 fb76 	bl	800926c <RCCEx_PLL2_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b86:	e003      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10d      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba6:	4a02      	ldr	r2, [pc, #8]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bac:	e006      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007bae:	bf00      	nop
 8007bb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007bc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bca:	2300      	movs	r3, #0
 8007bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	d00c      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bdc:	3328      	adds	r3, #40	; 0x28
 8007bde:	2102      	movs	r1, #2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 fbf5 	bl	80093d0 <RCCEx_PLL3_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8007c00:	2300      	movs	r3, #0
 8007c02:	667b      	str	r3, [r7, #100]	; 0x64
 8007c04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	d038      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c1a:	d018      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c20:	d811      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c26:	d014      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c2c:	d80b      	bhi.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d011      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c36:	d106      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c38:	4bc3      	ldr	r3, [pc, #780]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	4ac2      	ldr	r2, [pc, #776]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c44:	e008      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c4c:	e004      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10b      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c60:	4bb9      	ldr	r3, [pc, #740]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c70:	4ab5      	ldr	r2, [pc, #724]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c72:	430b      	orrs	r3, r1
 8007c74:	6553      	str	r3, [r2, #84]	; 0x54
 8007c76:	e003      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c8e:	2300      	movs	r3, #0
 8007c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007c96:	460b      	mov	r3, r1
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	d009      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c9c:	4baa      	ldr	r3, [pc, #680]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	4aa7      	ldr	r2, [pc, #668]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cac:	430b      	orrs	r3, r1
 8007cae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8007cc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d00a      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ccc:	4b9e      	ldr	r3, [pc, #632]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007cdc:	4a9a      	ldr	r2, [pc, #616]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	d009      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cfe:	4b92      	ldr	r3, [pc, #584]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d02:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0c:	4a8e      	ldr	r2, [pc, #568]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d20:	2300      	movs	r3, #0
 8007d22:	647b      	str	r3, [r7, #68]	; 0x44
 8007d24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	d00e      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d2e:	4b86      	ldr	r3, [pc, #536]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	4a85      	ldr	r2, [pc, #532]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d38:	6113      	str	r3, [r2, #16]
 8007d3a:	4b83      	ldr	r3, [pc, #524]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d3c:	6919      	ldr	r1, [r3, #16]
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d46:	4a80      	ldr	r2, [pc, #512]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007d62:	460b      	mov	r3, r1
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d009      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d68:	4b77      	ldr	r3, [pc, #476]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	4a74      	ldr	r2, [pc, #464]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007d92:	460b      	mov	r3, r1
 8007d94:	4313      	orrs	r3, r2
 8007d96:	d00a      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d98:	4b6b      	ldr	r3, [pc, #428]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da8:	4a67      	ldr	r2, [pc, #412]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007daa:	430b      	orrs	r3, r1
 8007dac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	2100      	movs	r1, #0
 8007db8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	d011      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dce:	3308      	adds	r3, #8
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f001 fa4a 	bl	800926c <RCCEx_PLL2_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	2100      	movs	r1, #0
 8007df8:	6239      	str	r1, [r7, #32]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007e00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e04:	460b      	mov	r3, r1
 8007e06:	4313      	orrs	r3, r2
 8007e08:	d011      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0e:	3308      	adds	r3, #8
 8007e10:	2101      	movs	r1, #1
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fa2a 	bl	800926c <RCCEx_PLL2_Config>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	2100      	movs	r1, #0
 8007e38:	61b9      	str	r1, [r7, #24]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e44:	460b      	mov	r3, r1
 8007e46:	4313      	orrs	r3, r2
 8007e48:	d011      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e4e:	3308      	adds	r3, #8
 8007e50:	2102      	movs	r1, #2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f001 fa0a 	bl	800926c <RCCEx_PLL2_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	2100      	movs	r1, #0
 8007e78:	6139      	str	r1, [r7, #16]
 8007e7a:	f003 0308 	and.w	r3, r3, #8
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e84:	460b      	mov	r3, r1
 8007e86:	4313      	orrs	r3, r2
 8007e88:	d011      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8e:	3328      	adds	r3, #40	; 0x28
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 fa9c 	bl	80093d0 <RCCEx_PLL3_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	f003 0310 	and.w	r3, r3, #16
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	d011      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ece:	3328      	adds	r3, #40	; 0x28
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 fa7c 	bl	80093d0 <RCCEx_PLL3_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6039      	str	r1, [r7, #0]
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	607b      	str	r3, [r7, #4]
 8007f00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f04:	460b      	mov	r3, r1
 8007f06:	4313      	orrs	r3, r2
 8007f08:	d011      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f0e:	3328      	adds	r3, #40	; 0x28
 8007f10:	2102      	movs	r1, #2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fa5c 	bl	80093d0 <RCCEx_PLL3_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007f2e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	e000      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007f42:	46bd      	mov	sp, r7
 8007f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f48:	58024400 	.word	0x58024400

08007f4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b090      	sub	sp, #64	; 0x40
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f5a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	f040 8094 	bne.w	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f64:	4b9e      	ldr	r3, [pc, #632]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	f200 8087 	bhi.w	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007f76:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08007f91 	.word	0x08007f91
 8007f80:	08007fb9 	.word	0x08007fb9
 8007f84:	08007fe1 	.word	0x08007fe1
 8007f88:	0800807d 	.word	0x0800807d
 8007f8c:	08008009 	.word	0x08008009
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f90:	4b93      	ldr	r3, [pc, #588]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f9c:	d108      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 f810 	bl	8008fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fac:	f000 bd45 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fb4:	f000 bd41 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fb8:	4b89      	ldr	r3, [pc, #548]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fc4:	d108      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fc6:	f107 0318 	add.w	r3, r7, #24
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fd54 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd4:	f000 bd31 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fdc:	f000 bd2d 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fe0:	4b7f      	ldr	r3, [pc, #508]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fec:	d108      	bne.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fee:	f107 030c 	add.w	r3, r7, #12
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fe94 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ffc:	f000 bd1d 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008004:	f000 bd19 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008008:	4b75      	ldr	r3, [pc, #468]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800800a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008010:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008012:	4b73      	ldr	r3, [pc, #460]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	2b04      	cmp	r3, #4
 800801c:	d10c      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800801e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008020:	2b00      	cmp	r3, #0
 8008022:	d109      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008024:	4b6e      	ldr	r3, [pc, #440]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	08db      	lsrs	r3, r3, #3
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	4a6d      	ldr	r2, [pc, #436]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008030:	fa22 f303 	lsr.w	r3, r2, r3
 8008034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008036:	e01f      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008038:	4b69      	ldr	r3, [pc, #420]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008044:	d106      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800804c:	d102      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800804e:	4b66      	ldr	r3, [pc, #408]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008052:	e011      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008054:	4b62      	ldr	r3, [pc, #392]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800805c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008060:	d106      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008068:	d102      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800806a:	4b60      	ldr	r3, [pc, #384]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800806e:	e003      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008074:	f000 bce1 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008078:	f000 bcdf 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800807c:	4b5c      	ldr	r3, [pc, #368]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008080:	f000 bcdb 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008088:	f000 bcd7 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800808c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008090:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008094:	430b      	orrs	r3, r1
 8008096:	f040 80ad 	bne.w	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800809a:	4b51      	ldr	r3, [pc, #324]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800809c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80080a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	d056      	beq.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b2:	f200 8090 	bhi.w	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	2bc0      	cmp	r3, #192	; 0xc0
 80080ba:	f000 8088 	beq.w	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	2bc0      	cmp	r3, #192	; 0xc0
 80080c2:	f200 8088 	bhi.w	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	2b80      	cmp	r3, #128	; 0x80
 80080ca:	d032      	beq.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	2b80      	cmp	r3, #128	; 0x80
 80080d0:	f200 8081 	bhi.w	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2b40      	cmp	r3, #64	; 0x40
 80080de:	d014      	beq.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80080e0:	e079      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080e2:	4b3f      	ldr	r3, [pc, #252]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ee:	d108      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 ff67 	bl	8008fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fe:	f000 bc9c 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008106:	f000 bc98 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800810a:	4b35      	ldr	r3, [pc, #212]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008116:	d108      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008118:	f107 0318 	add.w	r3, r7, #24
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fcab 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008126:	f000 bc88 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800812e:	f000 bc84 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008132:	4b2b      	ldr	r3, [pc, #172]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800813a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800813e:	d108      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008140:	f107 030c 	add.w	r3, r7, #12
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fdeb 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814e:	f000 bc74 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008156:	f000 bc70 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800815a:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800815c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008162:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008164:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b04      	cmp	r3, #4
 800816e:	d10c      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008176:	4b1a      	ldr	r3, [pc, #104]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	08db      	lsrs	r3, r3, #3
 800817c:	f003 0303 	and.w	r3, r3, #3
 8008180:	4a18      	ldr	r2, [pc, #96]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008182:	fa22 f303 	lsr.w	r3, r2, r3
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008188:	e01f      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800818a:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008196:	d106      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800819e:	d102      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a4:	e011      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081a6:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b2:	d106      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80081b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ba:	d102      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081bc:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c0:	e003      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081c6:	f000 bc38 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081ca:	f000 bc36 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081ce:	4b08      	ldr	r3, [pc, #32]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d2:	f000 bc32 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081da:	f000 bc2e 	b.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081de:	bf00      	nop
 80081e0:	58024400 	.word	0x58024400
 80081e4:	03d09000 	.word	0x03d09000
 80081e8:	003d0900 	.word	0x003d0900
 80081ec:	017d7840 	.word	0x017d7840
 80081f0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80081f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80081fc:	430b      	orrs	r3, r1
 80081fe:	f040 809c 	bne.w	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008202:	4b9e      	ldr	r3, [pc, #632]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008206:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800820a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008212:	d054      	beq.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800821a:	f200 808b 	bhi.w	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008224:	f000 8083 	beq.w	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800822e:	f200 8081 	bhi.w	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008238:	d02f      	beq.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008240:	d878      	bhi.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800824e:	d012      	beq.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008250:	e070      	b.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008252:	4b8a      	ldr	r3, [pc, #552]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800825e:	d107      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008264:	4618      	mov	r0, r3
 8008266:	f000 feaf 	bl	8008fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800826e:	e3e4      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008274:	e3e1      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008276:	4b81      	ldr	r3, [pc, #516]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800827e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008282:	d107      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008284:	f107 0318 	add.w	r3, r7, #24
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fbf5 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008292:	e3d2      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008298:	e3cf      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800829a:	4b78      	ldr	r3, [pc, #480]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a6:	d107      	bne.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082a8:	f107 030c 	add.w	r3, r7, #12
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fd37 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b6:	e3c0      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082bc:	e3bd      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082be:	4b6f      	ldr	r3, [pc, #444]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082c8:	4b6c      	ldr	r3, [pc, #432]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d10c      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80082d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d109      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082da:	4b68      	ldr	r3, [pc, #416]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	08db      	lsrs	r3, r3, #3
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	4a66      	ldr	r2, [pc, #408]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082e6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ec:	e01e      	b.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082ee:	4b63      	ldr	r3, [pc, #396]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fa:	d106      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008302:	d102      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008304:	4b5f      	ldr	r3, [pc, #380]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008308:	e010      	b.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800830a:	4b5c      	ldr	r3, [pc, #368]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008316:	d106      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800831e:	d102      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008320:	4b59      	ldr	r3, [pc, #356]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008324:	e002      	b.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800832a:	e386      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800832c:	e385      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800832e:	4b57      	ldr	r3, [pc, #348]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008332:	e382      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008338:	e37f      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800833a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800833e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008342:	430b      	orrs	r3, r1
 8008344:	f040 80a7 	bne.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008348:	4b4c      	ldr	r3, [pc, #304]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008350:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008358:	d055      	beq.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008360:	f200 8096 	bhi.w	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800836a:	f000 8084 	beq.w	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008374:	f200 808c 	bhi.w	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800837e:	d030      	beq.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008386:	f200 8083 	bhi.w	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008396:	d012      	beq.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008398:	e07a      	b.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800839a:	4b38      	ldr	r3, [pc, #224]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083a6:	d107      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 fe0b 	bl	8008fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b6:	e340      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083bc:	e33d      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083be:	4b2f      	ldr	r3, [pc, #188]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083ca:	d107      	bne.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083cc:	f107 0318 	add.w	r3, r7, #24
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fb51 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083da:	e32e      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e0:	e32b      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083e2:	4b26      	ldr	r3, [pc, #152]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ee:	d107      	bne.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f0:	f107 030c 	add.w	r3, r7, #12
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fc93 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083fe:	e31c      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008404:	e319      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008406:	4b1d      	ldr	r3, [pc, #116]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800840e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008410:	4b1a      	ldr	r3, [pc, #104]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b04      	cmp	r3, #4
 800841a:	d10c      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	2b00      	cmp	r3, #0
 8008420:	d109      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008422:	4b16      	ldr	r3, [pc, #88]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	08db      	lsrs	r3, r3, #3
 8008428:	f003 0303 	and.w	r3, r3, #3
 800842c:	4a14      	ldr	r2, [pc, #80]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800842e:	fa22 f303 	lsr.w	r3, r2, r3
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008434:	e01e      	b.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008436:	4b11      	ldr	r3, [pc, #68]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008442:	d106      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800844a:	d102      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800844c:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008450:	e010      	b.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800845e:	d106      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008466:	d102      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008468:	4b07      	ldr	r3, [pc, #28]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800846a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800846c:	e002      	b.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008472:	e2e2      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008474:	e2e1      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800847a:	e2de      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800847c:	58024400 	.word	0x58024400
 8008480:	03d09000 	.word	0x03d09000
 8008484:	003d0900 	.word	0x003d0900
 8008488:	017d7840 	.word	0x017d7840
 800848c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008494:	e2d1      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800849a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800849e:	430b      	orrs	r3, r1
 80084a0:	f040 809c 	bne.w	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80084a4:	4b93      	ldr	r3, [pc, #588]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80084ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084b4:	d054      	beq.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084bc:	f200 808b 	bhi.w	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084c6:	f000 8083 	beq.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084d0:	f200 8081 	bhi.w	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084da:	d02f      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e2:	d878      	bhi.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f0:	d012      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80084f2:	e070      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084f4:	4b7f      	ldr	r3, [pc, #508]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008500:	d107      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fd5e 	bl	8008fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008510:	e293      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008516:	e290      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008518:	4b76      	ldr	r3, [pc, #472]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008524:	d107      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008526:	f107 0318 	add.w	r3, r7, #24
 800852a:	4618      	mov	r0, r3
 800852c:	f000 faa4 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008534:	e281      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800853a:	e27e      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800853c:	4b6d      	ldr	r3, [pc, #436]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008548:	d107      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800854a:	f107 030c 	add.w	r3, r7, #12
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fbe6 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008558:	e26f      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855e:	e26c      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008560:	4b64      	ldr	r3, [pc, #400]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008564:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008568:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800856a:	4b62      	ldr	r3, [pc, #392]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0304 	and.w	r3, r3, #4
 8008572:	2b04      	cmp	r3, #4
 8008574:	d10c      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	2b00      	cmp	r3, #0
 800857a:	d109      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800857c:	4b5d      	ldr	r3, [pc, #372]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	08db      	lsrs	r3, r3, #3
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	4a5c      	ldr	r2, [pc, #368]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800858e:	e01e      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008590:	4b58      	ldr	r3, [pc, #352]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859c:	d106      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085a4:	d102      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085a6:	4b55      	ldr	r3, [pc, #340]	; (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085aa:	e010      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085ac:	4b51      	ldr	r3, [pc, #324]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085b8:	d106      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80085ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085c0:	d102      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085c2:	4b4f      	ldr	r3, [pc, #316]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c6:	e002      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085cc:	e235      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085ce:	e234      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085d0:	4b4c      	ldr	r3, [pc, #304]	; (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d4:	e231      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085da:	e22e      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80085dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80085e4:	430b      	orrs	r3, r1
 80085e6:	f040 808f 	bne.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80085ea:	4b42      	ldr	r3, [pc, #264]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80085f2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085fa:	d06b      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008602:	d874      	bhi.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800860a:	d056      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008612:	d86c      	bhi.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800861a:	d03b      	beq.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008622:	d864      	bhi.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862a:	d021      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008632:	d85c      	bhi.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008640:	d004      	beq.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008642:	e054      	b.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008644:	f7fe fa4c 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 8008648:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800864a:	e1f6      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800864c:	4b29      	ldr	r3, [pc, #164]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008658:	d107      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865a:	f107 0318 	add.w	r3, r7, #24
 800865e:	4618      	mov	r0, r3
 8008660:	f000 fa0a 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008668:	e1e7      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800866e:	e1e4      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008670:	4b20      	ldr	r3, [pc, #128]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800867c:	d107      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867e:	f107 030c 	add.w	r3, r7, #12
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fb4c 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800868c:	e1d5      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008692:	e1d2      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b04      	cmp	r3, #4
 800869e:	d109      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086a0:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	08db      	lsrs	r3, r3, #3
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	4a13      	ldr	r2, [pc, #76]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80086ac:	fa22 f303 	lsr.w	r3, r2, r3
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086b2:	e1c2      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b8:	e1bf      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c6:	d102      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086cc:	e1b5      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d2:	e1b2      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086d4:	4b07      	ldr	r3, [pc, #28]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e0:	d102      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80086e2:	4b07      	ldr	r3, [pc, #28]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e6:	e1a8      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ec:	e1a5      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f2:	e1a2      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086f4:	58024400 	.word	0x58024400
 80086f8:	03d09000 	.word	0x03d09000
 80086fc:	003d0900 	.word	0x003d0900
 8008700:	017d7840 	.word	0x017d7840
 8008704:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008710:	430b      	orrs	r3, r1
 8008712:	d173      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008714:	4b9c      	ldr	r3, [pc, #624]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800871c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008724:	d02f      	beq.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800872c:	d863      	bhi.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	2b00      	cmp	r3, #0
 8008732:	d004      	beq.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873a:	d012      	beq.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800873c:	e05b      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800873e:	4b92      	ldr	r3, [pc, #584]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800874a:	d107      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800874c:	f107 0318 	add.w	r3, r7, #24
 8008750:	4618      	mov	r0, r3
 8008752:	f000 f991 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800875a:	e16e      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008760:	e16b      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008762:	4b89      	ldr	r3, [pc, #548]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800876a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800876e:	d107      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008770:	f107 030c 	add.w	r3, r7, #12
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fad3 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800877e:	e15c      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008784:	e159      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008786:	4b80      	ldr	r3, [pc, #512]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800878e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008790:	4b7d      	ldr	r3, [pc, #500]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b04      	cmp	r3, #4
 800879a:	d10c      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d109      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087a2:	4b79      	ldr	r3, [pc, #484]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	08db      	lsrs	r3, r3, #3
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	4a77      	ldr	r2, [pc, #476]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80087ae:	fa22 f303 	lsr.w	r3, r2, r3
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b4:	e01e      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087b6:	4b74      	ldr	r3, [pc, #464]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c2:	d106      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ca:	d102      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087cc:	4b70      	ldr	r3, [pc, #448]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d0:	e010      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087d2:	4b6d      	ldr	r3, [pc, #436]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087de:	d106      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80087e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e6:	d102      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087e8:	4b6a      	ldr	r3, [pc, #424]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80087f2:	e122      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087f4:	e121      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087fa:	e11e      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008800:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008804:	430b      	orrs	r3, r1
 8008806:	d133      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008808:	4b5f      	ldr	r3, [pc, #380]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800880a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008810:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881e:	d012      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008820:	e023      	b.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008822:	4b59      	ldr	r3, [pc, #356]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800882e:	d107      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fbc7 	bl	8008fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800883e:	e0fc      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008844:	e0f9      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008846:	4b50      	ldr	r3, [pc, #320]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800884e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008852:	d107      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008854:	f107 0318 	add.w	r3, r7, #24
 8008858:	4618      	mov	r0, r3
 800885a:	f000 f90d 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008862:	e0ea      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008868:	e0e7      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800886e:	e0e4      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008874:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008878:	430b      	orrs	r3, r1
 800887a:	f040 808d 	bne.w	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800887e:	4b42      	ldr	r3, [pc, #264]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008882:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008886:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800888e:	d06b      	beq.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008896:	d874      	bhi.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889e:	d056      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a6:	d86c      	bhi.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088ae:	d03b      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088b6:	d864      	bhi.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088be:	d021      	beq.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088c6:	d85c      	bhi.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088d4:	d004      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80088d6:	e054      	b.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80088d8:	f000 f8b8 	bl	8008a4c <HAL_RCCEx_GetD3PCLK1Freq>
 80088dc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088de:	e0ac      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e0:	4b29      	ldr	r3, [pc, #164]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088ec:	d107      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ee:	f107 0318 	add.w	r3, r7, #24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f8c0 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fc:	e09d      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008902:	e09a      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008904:	4b20      	ldr	r3, [pc, #128]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800890c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008910:	d107      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008912:	f107 030c 	add.w	r3, r7, #12
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fa02 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008920:	e08b      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008926:	e088      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008928:	4b17      	ldr	r3, [pc, #92]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b04      	cmp	r3, #4
 8008932:	d109      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008934:	4b14      	ldr	r3, [pc, #80]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	08db      	lsrs	r3, r3, #3
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	4a13      	ldr	r2, [pc, #76]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008946:	e078      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800894c:	e075      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800894e:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800895a:	d102      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800895c:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008960:	e06b      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008966:	e068      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008968:	4b07      	ldr	r3, [pc, #28]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008974:	d102      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008976:	4b07      	ldr	r3, [pc, #28]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008978:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800897a:	e05e      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008980:	e05b      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008986:	e058      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	003d0900 	.word	0x003d0900
 8008994:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800899c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80089a0:	430b      	orrs	r3, r1
 80089a2:	d148      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80089a4:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b4:	d02a      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089bc:	d838      	bhi.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d004      	beq.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089ca:	d00d      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80089cc:	e030      	b.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089ce:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089da:	d102      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e0:	e02b      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e6:	e028      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089e8:	4b16      	ldr	r3, [pc, #88]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089f4:	d107      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fae4 	bl	8008fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a04:	e019      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a0a:	e016      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a18:	d107      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1a:	f107 0318 	add.w	r3, r7, #24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f82a 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a28:	e007      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a2e:	e004      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a34:	e001      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3740      	adds	r7, #64	; 0x40
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	58024400 	.word	0x58024400
 8008a48:	017d7840 	.word	0x017d7840

08008a4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a50:	f7fe f816 	bl	8006a80 <HAL_RCC_GetHCLKFreq>
 8008a54:	4602      	mov	r2, r0
 8008a56:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	091b      	lsrs	r3, r3, #4
 8008a5c:	f003 0307 	and.w	r3, r3, #7
 8008a60:	4904      	ldr	r1, [pc, #16]	; (8008a74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a62:	5ccb      	ldrb	r3, [r1, r3]
 8008a64:	f003 031f 	and.w	r3, r3, #31
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	58024400 	.word	0x58024400
 8008a74:	0800bd20 	.word	0x0800bd20

08008a78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b089      	sub	sp, #36	; 0x24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a80:	4ba1      	ldr	r3, [pc, #644]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a84:	f003 0303 	and.w	r3, r3, #3
 8008a88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008a8a:	4b9f      	ldr	r3, [pc, #636]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	0b1b      	lsrs	r3, r3, #12
 8008a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a96:	4b9c      	ldr	r3, [pc, #624]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	091b      	lsrs	r3, r3, #4
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008aa2:	4b99      	ldr	r3, [pc, #612]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa6:	08db      	lsrs	r3, r3, #3
 8008aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	fb02 f303 	mul.w	r3, r2, r3
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8111 	beq.w	8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	f000 8083 	beq.w	8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	f200 80a1 	bhi.w	8008c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d056      	beq.n	8008b90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ae2:	e099      	b.n	8008c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ae4:	4b88      	ldr	r3, [pc, #544]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0320 	and.w	r3, r3, #32
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d02d      	beq.n	8008b4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008af0:	4b85      	ldr	r3, [pc, #532]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	08db      	lsrs	r3, r3, #3
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	4a84      	ldr	r2, [pc, #528]	; (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008afc:	fa22 f303 	lsr.w	r3, r2, r3
 8008b00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	ee07 3a90 	vmov	s15, r3
 8008b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	4b7b      	ldr	r3, [pc, #492]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b4a:	e087      	b.n	8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5e:	4b6a      	ldr	r3, [pc, #424]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b8e:	e065      	b.n	8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba2:	4b59      	ldr	r3, [pc, #356]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bd2:	e043      	b.n	8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be6:	4b48      	ldr	r3, [pc, #288]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c16:	e021      	b.n	8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2a:	4b37      	ldr	r3, [pc, #220]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008c5c:	4b2a      	ldr	r3, [pc, #168]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	0a5b      	lsrs	r3, r3, #9
 8008c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c82:	ee17 2a90 	vmov	r2, s15
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008c8a:	4b1f      	ldr	r3, [pc, #124]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c94:	ee07 3a90 	vmov	s15, r3
 8008c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb0:	ee17 2a90 	vmov	r2, s15
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008cb8:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	0e1b      	lsrs	r3, r3, #24
 8008cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cde:	ee17 2a90 	vmov	r2, s15
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ce6:	e008      	b.n	8008cfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	609a      	str	r2, [r3, #8]
}
 8008cfa:	bf00      	nop
 8008cfc:	3724      	adds	r7, #36	; 0x24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	58024400 	.word	0x58024400
 8008d0c:	03d09000 	.word	0x03d09000
 8008d10:	46000000 	.word	0x46000000
 8008d14:	4c742400 	.word	0x4c742400
 8008d18:	4a742400 	.word	0x4a742400
 8008d1c:	4bbebc20 	.word	0x4bbebc20

08008d20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b089      	sub	sp, #36	; 0x24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d28:	4ba1      	ldr	r3, [pc, #644]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	f003 0303 	and.w	r3, r3, #3
 8008d30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008d32:	4b9f      	ldr	r3, [pc, #636]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	0d1b      	lsrs	r3, r3, #20
 8008d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d3e:	4b9c      	ldr	r3, [pc, #624]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	0a1b      	lsrs	r3, r3, #8
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008d4a:	4b99      	ldr	r3, [pc, #612]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4e:	08db      	lsrs	r3, r3, #3
 8008d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 8111 	beq.w	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	f000 8083 	beq.w	8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	f200 80a1 	bhi.w	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d056      	beq.n	8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d8a:	e099      	b.n	8008ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d8c:	4b88      	ldr	r3, [pc, #544]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d02d      	beq.n	8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d98:	4b85      	ldr	r3, [pc, #532]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	08db      	lsrs	r3, r3, #3
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	4a84      	ldr	r2, [pc, #528]	; (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008da4:	fa22 f303 	lsr.w	r3, r2, r3
 8008da8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	ee07 3a90 	vmov	s15, r3
 8008db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc2:	4b7b      	ldr	r3, [pc, #492]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008df2:	e087      	b.n	8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e06:	4b6a      	ldr	r3, [pc, #424]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e36:	e065      	b.n	8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4a:	4b59      	ldr	r3, [pc, #356]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e7a:	e043      	b.n	8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e8e:	4b48      	ldr	r3, [pc, #288]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ebe:	e021      	b.n	8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed2:	4b37      	ldr	r3, [pc, #220]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008f04:	4b2a      	ldr	r3, [pc, #168]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	0a5b      	lsrs	r3, r3, #9
 8008f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2a:	ee17 2a90 	vmov	r2, s15
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008f32:	4b1f      	ldr	r3, [pc, #124]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	0c1b      	lsrs	r3, r3, #16
 8008f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f58:	ee17 2a90 	vmov	r2, s15
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008f60:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	0e1b      	lsrs	r3, r3, #24
 8008f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f86:	ee17 2a90 	vmov	r2, s15
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	609a      	str	r2, [r3, #8]
}
 8008fa2:	bf00      	nop
 8008fa4:	3724      	adds	r7, #36	; 0x24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	03d09000 	.word	0x03d09000
 8008fb8:	46000000 	.word	0x46000000
 8008fbc:	4c742400 	.word	0x4c742400
 8008fc0:	4a742400 	.word	0x4a742400
 8008fc4:	4bbebc20 	.word	0x4bbebc20

08008fc8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b089      	sub	sp, #36	; 0x24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fd0:	4ba0      	ldr	r3, [pc, #640]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008fda:	4b9e      	ldr	r3, [pc, #632]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fde:	091b      	lsrs	r3, r3, #4
 8008fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fe4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008fe6:	4b9b      	ldr	r3, [pc, #620]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ff0:	4b98      	ldr	r3, [pc, #608]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff4:	08db      	lsrs	r3, r3, #3
 8008ff6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	fb02 f303 	mul.w	r3, r2, r3
 8009000:	ee07 3a90 	vmov	s15, r3
 8009004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009008:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 8111 	beq.w	8009236 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	2b02      	cmp	r3, #2
 8009018:	f000 8083 	beq.w	8009122 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	2b02      	cmp	r3, #2
 8009020:	f200 80a1 	bhi.w	8009166 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d056      	beq.n	80090de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009030:	e099      	b.n	8009166 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009032:	4b88      	ldr	r3, [pc, #544]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d02d      	beq.n	800909a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800903e:	4b85      	ldr	r3, [pc, #532]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	08db      	lsrs	r3, r3, #3
 8009044:	f003 0303 	and.w	r3, r3, #3
 8009048:	4a83      	ldr	r2, [pc, #524]	; (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800904a:	fa22 f303 	lsr.w	r3, r2, r3
 800904e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	ee07 3a90 	vmov	s15, r3
 8009056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	ee07 3a90 	vmov	s15, r3
 8009060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009068:	4b7a      	ldr	r3, [pc, #488]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009070:	ee07 3a90 	vmov	s15, r3
 8009074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009078:	ed97 6a03 	vldr	s12, [r7, #12]
 800907c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800925c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009094:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009098:	e087      	b.n	80091aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	ee07 3a90 	vmov	s15, r3
 80090a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009260 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ac:	4b69      	ldr	r3, [pc, #420]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800925c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090dc:	e065      	b.n	80091aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009264 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80090ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f0:	4b58      	ldr	r3, [pc, #352]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f8:	ee07 3a90 	vmov	s15, r3
 80090fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009100:	ed97 6a03 	vldr	s12, [r7, #12]
 8009104:	eddf 5a55 	vldr	s11, [pc, #340]	; 800925c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009120:	e043      	b.n	80091aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	ee07 3a90 	vmov	s15, r3
 8009128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009268 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009134:	4b47      	ldr	r3, [pc, #284]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009144:	ed97 6a03 	vldr	s12, [r7, #12]
 8009148:	eddf 5a44 	vldr	s11, [pc, #272]	; 800925c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800914c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009164:	e021      	b.n	80091aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	ee07 3a90 	vmov	s15, r3
 800916c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009170:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009260 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009178:	4b36      	ldr	r3, [pc, #216]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800917a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009188:	ed97 6a03 	vldr	s12, [r7, #12]
 800918c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800925c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80091aa:	4b2a      	ldr	r3, [pc, #168]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	0a5b      	lsrs	r3, r3, #9
 80091b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b4:	ee07 3a90 	vmov	s15, r3
 80091b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d0:	ee17 2a90 	vmov	r2, s15
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80091d8:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091dc:	0c1b      	lsrs	r3, r3, #16
 80091de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091fe:	ee17 2a90 	vmov	r2, s15
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009206:	4b13      	ldr	r3, [pc, #76]	; (8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	0e1b      	lsrs	r3, r3, #24
 800920c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800921c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009220:	edd7 6a07 	vldr	s13, [r7, #28]
 8009224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800922c:	ee17 2a90 	vmov	r2, s15
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009234:	e008      	b.n	8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	609a      	str	r2, [r3, #8]
}
 8009248:	bf00      	nop
 800924a:	3724      	adds	r7, #36	; 0x24
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	58024400 	.word	0x58024400
 8009258:	03d09000 	.word	0x03d09000
 800925c:	46000000 	.word	0x46000000
 8009260:	4c742400 	.word	0x4c742400
 8009264:	4a742400 	.word	0x4a742400
 8009268:	4bbebc20 	.word	0x4bbebc20

0800926c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800927a:	4b53      	ldr	r3, [pc, #332]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 800927c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927e:	f003 0303 	and.w	r3, r3, #3
 8009282:	2b03      	cmp	r3, #3
 8009284:	d101      	bne.n	800928a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e099      	b.n	80093be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800928a:	4b4f      	ldr	r3, [pc, #316]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a4e      	ldr	r2, [pc, #312]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009290:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009296:	f7f7 fffd 	bl	8001294 <HAL_GetTick>
 800929a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800929c:	e008      	b.n	80092b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800929e:	f7f7 fff9 	bl	8001294 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d901      	bls.n	80092b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e086      	b.n	80093be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092b0:	4b45      	ldr	r3, [pc, #276]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1f0      	bne.n	800929e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80092bc:	4b42      	ldr	r3, [pc, #264]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	031b      	lsls	r3, r3, #12
 80092ca:	493f      	ldr	r1, [pc, #252]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 80092cc:	4313      	orrs	r3, r2
 80092ce:	628b      	str	r3, [r1, #40]	; 0x28
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	3b01      	subs	r3, #1
 80092e0:	025b      	lsls	r3, r3, #9
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	041b      	lsls	r3, r3, #16
 80092ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	061b      	lsls	r3, r3, #24
 80092fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009300:	4931      	ldr	r1, [pc, #196]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009306:	4b30      	ldr	r3, [pc, #192]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	492d      	ldr	r1, [pc, #180]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009314:	4313      	orrs	r3, r2
 8009316:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009318:	4b2b      	ldr	r3, [pc, #172]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	f023 0220 	bic.w	r2, r3, #32
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	4928      	ldr	r1, [pc, #160]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009326:	4313      	orrs	r3, r2
 8009328:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800932a:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	4a26      	ldr	r2, [pc, #152]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009330:	f023 0310 	bic.w	r3, r3, #16
 8009334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009336:	4b24      	ldr	r3, [pc, #144]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800933a:	4b24      	ldr	r3, [pc, #144]	; (80093cc <RCCEx_PLL2_Config+0x160>)
 800933c:	4013      	ands	r3, r2
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	69d2      	ldr	r2, [r2, #28]
 8009342:	00d2      	lsls	r2, r2, #3
 8009344:	4920      	ldr	r1, [pc, #128]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009346:	4313      	orrs	r3, r2
 8009348:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800934a:	4b1f      	ldr	r3, [pc, #124]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	4a1e      	ldr	r2, [pc, #120]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009350:	f043 0310 	orr.w	r3, r3, #16
 8009354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800935c:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	4a19      	ldr	r2, [pc, #100]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009366:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009368:	e00f      	b.n	800938a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d106      	bne.n	800937e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009370:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	4a14      	ldr	r2, [pc, #80]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800937a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800937c:	e005      	b.n	800938a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800937e:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	4a11      	ldr	r2, [pc, #68]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009388:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800938a:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a0e      	ldr	r2, [pc, #56]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 8009390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009396:	f7f7 ff7d 	bl	8001294 <HAL_GetTick>
 800939a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800939c:	e008      	b.n	80093b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800939e:	f7f7 ff79 	bl	8001294 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d901      	bls.n	80093b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e006      	b.n	80093be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093b0:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <RCCEx_PLL2_Config+0x15c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0f0      	beq.n	800939e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	58024400 	.word	0x58024400
 80093cc:	ffff0007 	.word	0xffff0007

080093d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093de:	4b53      	ldr	r3, [pc, #332]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d101      	bne.n	80093ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e099      	b.n	8009522 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80093ee:	4b4f      	ldr	r3, [pc, #316]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a4e      	ldr	r2, [pc, #312]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80093f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fa:	f7f7 ff4b 	bl	8001294 <HAL_GetTick>
 80093fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009400:	e008      	b.n	8009414 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009402:	f7f7 ff47 	bl	8001294 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	2b02      	cmp	r3, #2
 800940e:	d901      	bls.n	8009414 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e086      	b.n	8009522 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009414:	4b45      	ldr	r3, [pc, #276]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1f0      	bne.n	8009402 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009420:	4b42      	ldr	r3, [pc, #264]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	051b      	lsls	r3, r3, #20
 800942e:	493f      	ldr	r1, [pc, #252]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 8009430:	4313      	orrs	r3, r2
 8009432:	628b      	str	r3, [r1, #40]	; 0x28
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	3b01      	subs	r3, #1
 800943a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	3b01      	subs	r3, #1
 8009444:	025b      	lsls	r3, r3, #9
 8009446:	b29b      	uxth	r3, r3
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	3b01      	subs	r3, #1
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	3b01      	subs	r3, #1
 800945e:	061b      	lsls	r3, r3, #24
 8009460:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009464:	4931      	ldr	r1, [pc, #196]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 8009466:	4313      	orrs	r3, r2
 8009468:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800946a:	4b30      	ldr	r3, [pc, #192]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	492d      	ldr	r1, [pc, #180]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 8009478:	4313      	orrs	r3, r2
 800947a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800947c:	4b2b      	ldr	r3, [pc, #172]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	4928      	ldr	r1, [pc, #160]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 800948a:	4313      	orrs	r3, r2
 800948c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800948e:	4b27      	ldr	r3, [pc, #156]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 8009490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009492:	4a26      	ldr	r2, [pc, #152]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 8009494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800949a:	4b24      	ldr	r3, [pc, #144]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 800949c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800949e:	4b24      	ldr	r3, [pc, #144]	; (8009530 <RCCEx_PLL3_Config+0x160>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	69d2      	ldr	r2, [r2, #28]
 80094a6:	00d2      	lsls	r2, r2, #3
 80094a8:	4920      	ldr	r1, [pc, #128]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80094ae:	4b1f      	ldr	r3, [pc, #124]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	4a1e      	ldr	r2, [pc, #120]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d106      	bne.n	80094ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094c0:	4b1a      	ldr	r3, [pc, #104]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	4a19      	ldr	r2, [pc, #100]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094cc:	e00f      	b.n	80094ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d106      	bne.n	80094e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094d4:	4b15      	ldr	r3, [pc, #84]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	4a14      	ldr	r2, [pc, #80]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094e0:	e005      	b.n	80094ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094e2:	4b12      	ldr	r3, [pc, #72]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	4a11      	ldr	r2, [pc, #68]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a0e      	ldr	r2, [pc, #56]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 80094f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094fa:	f7f7 fecb 	bl	8001294 <HAL_GetTick>
 80094fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009500:	e008      	b.n	8009514 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009502:	f7f7 fec7 	bl	8001294 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d901      	bls.n	8009514 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e006      	b.n	8009522 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009514:	4b05      	ldr	r3, [pc, #20]	; (800952c <RCCEx_PLL3_Config+0x15c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0f0      	beq.n	8009502 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	58024400 	.word	0x58024400
 8009530:	ffff0007 	.word	0xffff0007

08009534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e042      	b.n	80095cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954c:	2b00      	cmp	r3, #0
 800954e:	d106      	bne.n	800955e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7f7 fc7d 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2224      	movs	r2, #36	; 0x24
 8009562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fc9a 	bl	8009eb0 <UART_SetConfig>
 800957c:	4603      	mov	r3, r0
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e022      	b.n	80095cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 f9f6 	bl	800a980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689a      	ldr	r2, [r3, #8]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0201 	orr.w	r2, r2, #1
 80095c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 fa7d 	bl	800aac4 <UART_CheckIdleState>
 80095ca:	4603      	mov	r3, r0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b091      	sub	sp, #68	; 0x44
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d178      	bne.n	80096de <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <HAL_UART_Transmit_IT+0x24>
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e071      	b.n	80096e0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	88fa      	ldrh	r2, [r7, #6]
 8009606:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	88fa      	ldrh	r2, [r7, #6]
 800960e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2221      	movs	r2, #33	; 0x21
 8009624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800962c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009630:	d12a      	bne.n	8009688 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963a:	d107      	bne.n	800964c <HAL_UART_Transmit_IT+0x78>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d103      	bne.n	800964c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4a29      	ldr	r2, [pc, #164]	; (80096ec <HAL_UART_Transmit_IT+0x118>)
 8009648:	679a      	str	r2, [r3, #120]	; 0x78
 800964a:	e002      	b.n	8009652 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4a28      	ldr	r2, [pc, #160]	; (80096f0 <HAL_UART_Transmit_IT+0x11c>)
 8009650:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009668:	63bb      	str	r3, [r7, #56]	; 0x38
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009672:	637a      	str	r2, [r7, #52]	; 0x34
 8009674:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <HAL_UART_Transmit_IT+0x7e>
 8009686:	e028      	b.n	80096da <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009690:	d107      	bne.n	80096a2 <HAL_UART_Transmit_IT+0xce>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4a15      	ldr	r2, [pc, #84]	; (80096f4 <HAL_UART_Transmit_IT+0x120>)
 800969e:	679a      	str	r2, [r3, #120]	; 0x78
 80096a0:	e002      	b.n	80096a8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4a14      	ldr	r2, [pc, #80]	; (80096f8 <HAL_UART_Transmit_IT+0x124>)
 80096a6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	613b      	str	r3, [r7, #16]
   return(result);
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c6:	623b      	str	r3, [r7, #32]
 80096c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	69f9      	ldr	r1, [r7, #28]
 80096cc:	6a3a      	ldr	r2, [r7, #32]
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e6      	bne.n	80096a8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	e000      	b.n	80096e0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80096de:	2302      	movs	r3, #2
  }
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3744      	adds	r7, #68	; 0x44
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	0800b03b 	.word	0x0800b03b
 80096f0:	0800af5b 	.word	0x0800af5b
 80096f4:	0800ae99 	.word	0x0800ae99
 80096f8:	0800ade1 	.word	0x0800ade1

080096fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b0ba      	sub	sp, #232	; 0xe8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009722:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009726:	f640 030f 	movw	r3, #2063	; 0x80f
 800972a:	4013      	ands	r3, r2
 800972c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009734:	2b00      	cmp	r3, #0
 8009736:	d11b      	bne.n	8009770 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b00      	cmp	r3, #0
 8009742:	d015      	beq.n	8009770 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	d105      	bne.n	800975c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 8377 	beq.w	8009e54 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
      }
      return;
 800976e:	e371      	b.n	8009e54 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 8123 	beq.w	80099c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800977a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800977e:	4b8d      	ldr	r3, [pc, #564]	; (80099b4 <HAL_UART_IRQHandler+0x2b8>)
 8009780:	4013      	ands	r3, r2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009786:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800978a:	4b8b      	ldr	r3, [pc, #556]	; (80099b8 <HAL_UART_IRQHandler+0x2bc>)
 800978c:	4013      	ands	r3, r2
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 8116 	beq.w	80099c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d011      	beq.n	80097c4 <HAL_UART_IRQHandler+0xc8>
 80097a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2201      	movs	r2, #1
 80097b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ba:	f043 0201 	orr.w	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c8:	f003 0302 	and.w	r3, r3, #2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d011      	beq.n	80097f4 <HAL_UART_IRQHandler+0xf8>
 80097d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2202      	movs	r2, #2
 80097e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ea:	f043 0204 	orr.w	r2, r3, #4
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d011      	beq.n	8009824 <HAL_UART_IRQHandler+0x128>
 8009800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2204      	movs	r2, #4
 8009812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800981a:	f043 0202 	orr.w	r2, r3, #2
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009828:	f003 0308 	and.w	r3, r3, #8
 800982c:	2b00      	cmp	r3, #0
 800982e:	d017      	beq.n	8009860 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800983c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009840:	4b5c      	ldr	r3, [pc, #368]	; (80099b4 <HAL_UART_IRQHandler+0x2b8>)
 8009842:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2208      	movs	r2, #8
 800984e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009856:	f043 0208 	orr.w	r2, r3, #8
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009868:	2b00      	cmp	r3, #0
 800986a:	d012      	beq.n	8009892 <HAL_UART_IRQHandler+0x196>
 800986c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00c      	beq.n	8009892 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009888:	f043 0220 	orr.w	r2, r3, #32
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 82dd 	beq.w	8009e58 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800989e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d013      	beq.n	80098d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d105      	bne.n	80098c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d007      	beq.n	80098d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e6:	2b40      	cmp	r3, #64	; 0x40
 80098e8:	d005      	beq.n	80098f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d054      	beq.n	80099a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 f9f6 	bl	800ace8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009906:	2b40      	cmp	r3, #64	; 0x40
 8009908:	d146      	bne.n	8009998 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3308      	adds	r3, #8
 8009932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800993a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800994e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1d9      	bne.n	800990a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800995c:	2b00      	cmp	r3, #0
 800995e:	d017      	beq.n	8009990 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009966:	4a15      	ldr	r2, [pc, #84]	; (80099bc <HAL_UART_IRQHandler+0x2c0>)
 8009968:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009970:	4618      	mov	r0, r3
 8009972:	f7fa f99f 	bl	8003cb4 <HAL_DMA_Abort_IT>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d019      	beq.n	80099b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800998a:	4610      	mov	r0, r2
 800998c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800998e:	e00f      	b.n	80099b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fa77 	bl	8009e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009996:	e00b      	b.n	80099b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fa73 	bl	8009e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800999e:	e007      	b.n	80099b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fa6f 	bl	8009e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80099ae:	e253      	b.n	8009e58 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099b0:	bf00      	nop
    return;
 80099b2:	e251      	b.n	8009e58 <HAL_UART_IRQHandler+0x75c>
 80099b4:	10000001 	.word	0x10000001
 80099b8:	04000120 	.word	0x04000120
 80099bc:	0800adb5 	.word	0x0800adb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	f040 81e7 	bne.w	8009d98 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ce:	f003 0310 	and.w	r3, r3, #16
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 81e0 	beq.w	8009d98 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 81d9 	beq.w	8009d98 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2210      	movs	r2, #16
 80099ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f8:	2b40      	cmp	r3, #64	; 0x40
 80099fa:	f040 8151 	bne.w	8009ca0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a96      	ldr	r2, [pc, #600]	; (8009c60 <HAL_UART_IRQHandler+0x564>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d068      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a93      	ldr	r2, [pc, #588]	; (8009c64 <HAL_UART_IRQHandler+0x568>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d061      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a91      	ldr	r2, [pc, #580]	; (8009c68 <HAL_UART_IRQHandler+0x56c>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d05a      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a8e      	ldr	r2, [pc, #568]	; (8009c6c <HAL_UART_IRQHandler+0x570>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d053      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a8c      	ldr	r2, [pc, #560]	; (8009c70 <HAL_UART_IRQHandler+0x574>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d04c      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a89      	ldr	r2, [pc, #548]	; (8009c74 <HAL_UART_IRQHandler+0x578>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d045      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a87      	ldr	r2, [pc, #540]	; (8009c78 <HAL_UART_IRQHandler+0x57c>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d03e      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a84      	ldr	r2, [pc, #528]	; (8009c7c <HAL_UART_IRQHandler+0x580>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d037      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a82      	ldr	r2, [pc, #520]	; (8009c80 <HAL_UART_IRQHandler+0x584>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d030      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a7f      	ldr	r2, [pc, #508]	; (8009c84 <HAL_UART_IRQHandler+0x588>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d029      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a7d      	ldr	r2, [pc, #500]	; (8009c88 <HAL_UART_IRQHandler+0x58c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d022      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a7a      	ldr	r2, [pc, #488]	; (8009c8c <HAL_UART_IRQHandler+0x590>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d01b      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a78      	ldr	r2, [pc, #480]	; (8009c90 <HAL_UART_IRQHandler+0x594>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d014      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a75      	ldr	r2, [pc, #468]	; (8009c94 <HAL_UART_IRQHandler+0x598>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d00d      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a73      	ldr	r2, [pc, #460]	; (8009c98 <HAL_UART_IRQHandler+0x59c>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d006      	beq.n	8009ade <HAL_UART_IRQHandler+0x3e2>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a70      	ldr	r2, [pc, #448]	; (8009c9c <HAL_UART_IRQHandler+0x5a0>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d106      	bne.n	8009aec <HAL_UART_IRQHandler+0x3f0>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	e005      	b.n	8009af8 <HAL_UART_IRQHandler+0x3fc>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 81ab 	beq.w	8009e5c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b10:	429a      	cmp	r2, r3
 8009b12:	f080 81a3 	bcs.w	8009e5c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b2c:	f000 8087 	beq.w	8009c3e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1da      	bne.n	8009b30 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b8c:	f023 0301 	bic.w	r3, r3, #1
 8009b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e1      	bne.n	8009b7a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3308      	adds	r3, #8
 8009bbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009bdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e3      	bne.n	8009bb6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0c:	f023 0310 	bic.w	r3, r3, #16
 8009c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e4      	bne.n	8009bfc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7f9 fd1d 	bl	8003678 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2202      	movs	r2, #2
 8009c42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f91d 	bl	8009e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c5e:	e0fd      	b.n	8009e5c <HAL_UART_IRQHandler+0x760>
 8009c60:	40020010 	.word	0x40020010
 8009c64:	40020028 	.word	0x40020028
 8009c68:	40020040 	.word	0x40020040
 8009c6c:	40020058 	.word	0x40020058
 8009c70:	40020070 	.word	0x40020070
 8009c74:	40020088 	.word	0x40020088
 8009c78:	400200a0 	.word	0x400200a0
 8009c7c:	400200b8 	.word	0x400200b8
 8009c80:	40020410 	.word	0x40020410
 8009c84:	40020428 	.word	0x40020428
 8009c88:	40020440 	.word	0x40020440
 8009c8c:	40020458 	.word	0x40020458
 8009c90:	40020470 	.word	0x40020470
 8009c94:	40020488 	.word	0x40020488
 8009c98:	400204a0 	.word	0x400204a0
 8009c9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 80cf 	beq.w	8009e60 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80ca 	beq.w	8009e60 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cee:	647b      	str	r3, [r7, #68]	; 0x44
 8009cf0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cf6:	e841 2300 	strex	r3, r2, [r1]
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1e4      	bne.n	8009ccc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3308      	adds	r3, #8
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	623b      	str	r3, [r7, #32]
   return(result);
 8009d12:	6a3a      	ldr	r2, [r7, #32]
 8009d14:	4b55      	ldr	r3, [pc, #340]	; (8009e6c <HAL_UART_IRQHandler+0x770>)
 8009d16:	4013      	ands	r3, r2
 8009d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	3308      	adds	r3, #8
 8009d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d26:	633a      	str	r2, [r7, #48]	; 0x30
 8009d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e3      	bne.n	8009d02 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f023 0310 	bic.w	r3, r3, #16
 8009d62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d70:	61fb      	str	r3, [r7, #28]
 8009d72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	69b9      	ldr	r1, [r7, #24]
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e4      	bne.n	8009d4e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2202      	movs	r2, #2
 8009d88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f881 	bl	8009e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d96:	e063      	b.n	8009e60 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00e      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x6c6>
 8009da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d008      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009db8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 f9dd 	bl	800b17a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dc0:	e051      	b.n	8009e66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d014      	beq.n	8009df8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d105      	bne.n	8009de6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d008      	beq.n	8009df8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d03a      	beq.n	8009e64 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
    }
    return;
 8009df6:	e035      	b.n	8009e64 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d009      	beq.n	8009e18 <HAL_UART_IRQHandler+0x71c>
 8009e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d003      	beq.n	8009e18 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f987 	bl	800b124 <UART_EndTransmit_IT>
    return;
 8009e16:	e026      	b.n	8009e66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d009      	beq.n	8009e38 <HAL_UART_IRQHandler+0x73c>
 8009e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 f9b6 	bl	800b1a2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e36:	e016      	b.n	8009e66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d010      	beq.n	8009e66 <HAL_UART_IRQHandler+0x76a>
 8009e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	da0c      	bge.n	8009e66 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f001 f99e 	bl	800b18e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e52:	e008      	b.n	8009e66 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e54:	bf00      	nop
 8009e56:	e006      	b.n	8009e66 <HAL_UART_IRQHandler+0x76a>
    return;
 8009e58:	bf00      	nop
 8009e5a:	e004      	b.n	8009e66 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e5c:	bf00      	nop
 8009e5e:	e002      	b.n	8009e66 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e60:	bf00      	nop
 8009e62:	e000      	b.n	8009e66 <HAL_UART_IRQHandler+0x76a>
    return;
 8009e64:	bf00      	nop
  }
}
 8009e66:	37e8      	adds	r7, #232	; 0xe8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	effffffe 	.word	0xeffffffe

08009e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009eb4:	b092      	sub	sp, #72	; 0x48
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4bbe      	ldr	r3, [pc, #760]	; (800a1d8 <UART_SetConfig+0x328>)
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	6812      	ldr	r2, [r2, #0]
 8009ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ee8:	430b      	orrs	r3, r1
 8009eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4ab3      	ldr	r2, [pc, #716]	; (800a1dc <UART_SetConfig+0x32c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d004      	beq.n	8009f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689a      	ldr	r2, [r3, #8]
 8009f22:	4baf      	ldr	r3, [pc, #700]	; (800a1e0 <UART_SetConfig+0x330>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	6812      	ldr	r2, [r2, #0]
 8009f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f2c:	430b      	orrs	r3, r1
 8009f2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	f023 010f 	bic.w	r1, r3, #15
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4aa6      	ldr	r2, [pc, #664]	; (800a1e4 <UART_SetConfig+0x334>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d177      	bne.n	800a040 <UART_SetConfig+0x190>
 8009f50:	4ba5      	ldr	r3, [pc, #660]	; (800a1e8 <UART_SetConfig+0x338>)
 8009f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f58:	2b28      	cmp	r3, #40	; 0x28
 8009f5a:	d86d      	bhi.n	800a038 <UART_SetConfig+0x188>
 8009f5c:	a201      	add	r2, pc, #4	; (adr r2, 8009f64 <UART_SetConfig+0xb4>)
 8009f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f62:	bf00      	nop
 8009f64:	0800a009 	.word	0x0800a009
 8009f68:	0800a039 	.word	0x0800a039
 8009f6c:	0800a039 	.word	0x0800a039
 8009f70:	0800a039 	.word	0x0800a039
 8009f74:	0800a039 	.word	0x0800a039
 8009f78:	0800a039 	.word	0x0800a039
 8009f7c:	0800a039 	.word	0x0800a039
 8009f80:	0800a039 	.word	0x0800a039
 8009f84:	0800a011 	.word	0x0800a011
 8009f88:	0800a039 	.word	0x0800a039
 8009f8c:	0800a039 	.word	0x0800a039
 8009f90:	0800a039 	.word	0x0800a039
 8009f94:	0800a039 	.word	0x0800a039
 8009f98:	0800a039 	.word	0x0800a039
 8009f9c:	0800a039 	.word	0x0800a039
 8009fa0:	0800a039 	.word	0x0800a039
 8009fa4:	0800a019 	.word	0x0800a019
 8009fa8:	0800a039 	.word	0x0800a039
 8009fac:	0800a039 	.word	0x0800a039
 8009fb0:	0800a039 	.word	0x0800a039
 8009fb4:	0800a039 	.word	0x0800a039
 8009fb8:	0800a039 	.word	0x0800a039
 8009fbc:	0800a039 	.word	0x0800a039
 8009fc0:	0800a039 	.word	0x0800a039
 8009fc4:	0800a021 	.word	0x0800a021
 8009fc8:	0800a039 	.word	0x0800a039
 8009fcc:	0800a039 	.word	0x0800a039
 8009fd0:	0800a039 	.word	0x0800a039
 8009fd4:	0800a039 	.word	0x0800a039
 8009fd8:	0800a039 	.word	0x0800a039
 8009fdc:	0800a039 	.word	0x0800a039
 8009fe0:	0800a039 	.word	0x0800a039
 8009fe4:	0800a029 	.word	0x0800a029
 8009fe8:	0800a039 	.word	0x0800a039
 8009fec:	0800a039 	.word	0x0800a039
 8009ff0:	0800a039 	.word	0x0800a039
 8009ff4:	0800a039 	.word	0x0800a039
 8009ff8:	0800a039 	.word	0x0800a039
 8009ffc:	0800a039 	.word	0x0800a039
 800a000:	0800a039 	.word	0x0800a039
 800a004:	0800a031 	.word	0x0800a031
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00e:	e222      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a010:	2304      	movs	r3, #4
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a016:	e21e      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a018:	2308      	movs	r3, #8
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01e:	e21a      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a020:	2310      	movs	r3, #16
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a026:	e216      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a028:	2320      	movs	r3, #32
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02e:	e212      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a030:	2340      	movs	r3, #64	; 0x40
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a036:	e20e      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a038:	2380      	movs	r3, #128	; 0x80
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03e:	e20a      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a69      	ldr	r2, [pc, #420]	; (800a1ec <UART_SetConfig+0x33c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d130      	bne.n	800a0ac <UART_SetConfig+0x1fc>
 800a04a:	4b67      	ldr	r3, [pc, #412]	; (800a1e8 <UART_SetConfig+0x338>)
 800a04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04e:	f003 0307 	and.w	r3, r3, #7
 800a052:	2b05      	cmp	r3, #5
 800a054:	d826      	bhi.n	800a0a4 <UART_SetConfig+0x1f4>
 800a056:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <UART_SetConfig+0x1ac>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a075 	.word	0x0800a075
 800a060:	0800a07d 	.word	0x0800a07d
 800a064:	0800a085 	.word	0x0800a085
 800a068:	0800a08d 	.word	0x0800a08d
 800a06c:	0800a095 	.word	0x0800a095
 800a070:	0800a09d 	.word	0x0800a09d
 800a074:	2300      	movs	r3, #0
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a07a:	e1ec      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a07c:	2304      	movs	r3, #4
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a082:	e1e8      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a084:	2308      	movs	r3, #8
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08a:	e1e4      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a08c:	2310      	movs	r3, #16
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a092:	e1e0      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a094:	2320      	movs	r3, #32
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a09a:	e1dc      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a09c:	2340      	movs	r3, #64	; 0x40
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0a2:	e1d8      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a0a4:	2380      	movs	r3, #128	; 0x80
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0aa:	e1d4      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a4f      	ldr	r2, [pc, #316]	; (800a1f0 <UART_SetConfig+0x340>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d130      	bne.n	800a118 <UART_SetConfig+0x268>
 800a0b6:	4b4c      	ldr	r3, [pc, #304]	; (800a1e8 <UART_SetConfig+0x338>)
 800a0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b05      	cmp	r3, #5
 800a0c0:	d826      	bhi.n	800a110 <UART_SetConfig+0x260>
 800a0c2:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <UART_SetConfig+0x218>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0e1 	.word	0x0800a0e1
 800a0cc:	0800a0e9 	.word	0x0800a0e9
 800a0d0:	0800a0f1 	.word	0x0800a0f1
 800a0d4:	0800a0f9 	.word	0x0800a0f9
 800a0d8:	0800a101 	.word	0x0800a101
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0e6:	e1b6      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ee:	e1b2      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a0f0:	2308      	movs	r3, #8
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e1ae      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e1aa      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a100:	2320      	movs	r3, #32
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a106:	e1a6      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a108:	2340      	movs	r3, #64	; 0x40
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a10e:	e1a2      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a110:	2380      	movs	r3, #128	; 0x80
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a116:	e19e      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a35      	ldr	r2, [pc, #212]	; (800a1f4 <UART_SetConfig+0x344>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d130      	bne.n	800a184 <UART_SetConfig+0x2d4>
 800a122:	4b31      	ldr	r3, [pc, #196]	; (800a1e8 <UART_SetConfig+0x338>)
 800a124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	d826      	bhi.n	800a17c <UART_SetConfig+0x2cc>
 800a12e:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <UART_SetConfig+0x284>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a14d 	.word	0x0800a14d
 800a138:	0800a155 	.word	0x0800a155
 800a13c:	0800a15d 	.word	0x0800a15d
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a175 	.word	0x0800a175
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a152:	e180      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a154:	2304      	movs	r3, #4
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a15a:	e17c      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a15c:	2308      	movs	r3, #8
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a162:	e178      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a164:	2310      	movs	r3, #16
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16a:	e174      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a16c:	2320      	movs	r3, #32
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a172:	e170      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a174:	2340      	movs	r3, #64	; 0x40
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17a:	e16c      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a17c:	2380      	movs	r3, #128	; 0x80
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a182:	e168      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a1b      	ldr	r2, [pc, #108]	; (800a1f8 <UART_SetConfig+0x348>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d142      	bne.n	800a214 <UART_SetConfig+0x364>
 800a18e:	4b16      	ldr	r3, [pc, #88]	; (800a1e8 <UART_SetConfig+0x338>)
 800a190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	2b05      	cmp	r3, #5
 800a198:	d838      	bhi.n	800a20c <UART_SetConfig+0x35c>
 800a19a:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <UART_SetConfig+0x2f0>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1b9 	.word	0x0800a1b9
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1fd 	.word	0x0800a1fd
 800a1b4:	0800a205 	.word	0x0800a205
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1be:	e14a      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c6:	e146      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ce:	e142      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d6:	e13e      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a1d8:	cfff69f3 	.word	0xcfff69f3
 800a1dc:	58000c00 	.word	0x58000c00
 800a1e0:	11fff4ff 	.word	0x11fff4ff
 800a1e4:	40011000 	.word	0x40011000
 800a1e8:	58024400 	.word	0x58024400
 800a1ec:	40004400 	.word	0x40004400
 800a1f0:	40004800 	.word	0x40004800
 800a1f4:	40004c00 	.word	0x40004c00
 800a1f8:	40005000 	.word	0x40005000
 800a1fc:	2320      	movs	r3, #32
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a202:	e128      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a204:	2340      	movs	r3, #64	; 0x40
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a20a:	e124      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a20c:	2380      	movs	r3, #128	; 0x80
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a212:	e120      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4acb      	ldr	r2, [pc, #812]	; (800a548 <UART_SetConfig+0x698>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d176      	bne.n	800a30c <UART_SetConfig+0x45c>
 800a21e:	4bcb      	ldr	r3, [pc, #812]	; (800a54c <UART_SetConfig+0x69c>)
 800a220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a226:	2b28      	cmp	r3, #40	; 0x28
 800a228:	d86c      	bhi.n	800a304 <UART_SetConfig+0x454>
 800a22a:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <UART_SetConfig+0x380>)
 800a22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a230:	0800a2d5 	.word	0x0800a2d5
 800a234:	0800a305 	.word	0x0800a305
 800a238:	0800a305 	.word	0x0800a305
 800a23c:	0800a305 	.word	0x0800a305
 800a240:	0800a305 	.word	0x0800a305
 800a244:	0800a305 	.word	0x0800a305
 800a248:	0800a305 	.word	0x0800a305
 800a24c:	0800a305 	.word	0x0800a305
 800a250:	0800a2dd 	.word	0x0800a2dd
 800a254:	0800a305 	.word	0x0800a305
 800a258:	0800a305 	.word	0x0800a305
 800a25c:	0800a305 	.word	0x0800a305
 800a260:	0800a305 	.word	0x0800a305
 800a264:	0800a305 	.word	0x0800a305
 800a268:	0800a305 	.word	0x0800a305
 800a26c:	0800a305 	.word	0x0800a305
 800a270:	0800a2e5 	.word	0x0800a2e5
 800a274:	0800a305 	.word	0x0800a305
 800a278:	0800a305 	.word	0x0800a305
 800a27c:	0800a305 	.word	0x0800a305
 800a280:	0800a305 	.word	0x0800a305
 800a284:	0800a305 	.word	0x0800a305
 800a288:	0800a305 	.word	0x0800a305
 800a28c:	0800a305 	.word	0x0800a305
 800a290:	0800a2ed 	.word	0x0800a2ed
 800a294:	0800a305 	.word	0x0800a305
 800a298:	0800a305 	.word	0x0800a305
 800a29c:	0800a305 	.word	0x0800a305
 800a2a0:	0800a305 	.word	0x0800a305
 800a2a4:	0800a305 	.word	0x0800a305
 800a2a8:	0800a305 	.word	0x0800a305
 800a2ac:	0800a305 	.word	0x0800a305
 800a2b0:	0800a2f5 	.word	0x0800a2f5
 800a2b4:	0800a305 	.word	0x0800a305
 800a2b8:	0800a305 	.word	0x0800a305
 800a2bc:	0800a305 	.word	0x0800a305
 800a2c0:	0800a305 	.word	0x0800a305
 800a2c4:	0800a305 	.word	0x0800a305
 800a2c8:	0800a305 	.word	0x0800a305
 800a2cc:	0800a305 	.word	0x0800a305
 800a2d0:	0800a2fd 	.word	0x0800a2fd
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2da:	e0bc      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a2dc:	2304      	movs	r3, #4
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2e2:	e0b8      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a2e4:	2308      	movs	r3, #8
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ea:	e0b4      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f2:	e0b0      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a2f4:	2320      	movs	r3, #32
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fa:	e0ac      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a2fc:	2340      	movs	r3, #64	; 0x40
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a302:	e0a8      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a304:	2380      	movs	r3, #128	; 0x80
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e0a4      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a8f      	ldr	r2, [pc, #572]	; (800a550 <UART_SetConfig+0x6a0>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d130      	bne.n	800a378 <UART_SetConfig+0x4c8>
 800a316:	4b8d      	ldr	r3, [pc, #564]	; (800a54c <UART_SetConfig+0x69c>)
 800a318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31a:	f003 0307 	and.w	r3, r3, #7
 800a31e:	2b05      	cmp	r3, #5
 800a320:	d826      	bhi.n	800a370 <UART_SetConfig+0x4c0>
 800a322:	a201      	add	r2, pc, #4	; (adr r2, 800a328 <UART_SetConfig+0x478>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a341 	.word	0x0800a341
 800a32c:	0800a349 	.word	0x0800a349
 800a330:	0800a351 	.word	0x0800a351
 800a334:	0800a359 	.word	0x0800a359
 800a338:	0800a361 	.word	0x0800a361
 800a33c:	0800a369 	.word	0x0800a369
 800a340:	2300      	movs	r3, #0
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a346:	e086      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a348:	2304      	movs	r3, #4
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a34e:	e082      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a350:	2308      	movs	r3, #8
 800a352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a356:	e07e      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a358:	2310      	movs	r3, #16
 800a35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a35e:	e07a      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a360:	2320      	movs	r3, #32
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a366:	e076      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a368:	2340      	movs	r3, #64	; 0x40
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36e:	e072      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a370:	2380      	movs	r3, #128	; 0x80
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a376:	e06e      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a75      	ldr	r2, [pc, #468]	; (800a554 <UART_SetConfig+0x6a4>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d130      	bne.n	800a3e4 <UART_SetConfig+0x534>
 800a382:	4b72      	ldr	r3, [pc, #456]	; (800a54c <UART_SetConfig+0x69c>)
 800a384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b05      	cmp	r3, #5
 800a38c:	d826      	bhi.n	800a3dc <UART_SetConfig+0x52c>
 800a38e:	a201      	add	r2, pc, #4	; (adr r2, 800a394 <UART_SetConfig+0x4e4>)
 800a390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a394:	0800a3ad 	.word	0x0800a3ad
 800a398:	0800a3b5 	.word	0x0800a3b5
 800a39c:	0800a3bd 	.word	0x0800a3bd
 800a3a0:	0800a3c5 	.word	0x0800a3c5
 800a3a4:	0800a3cd 	.word	0x0800a3cd
 800a3a8:	0800a3d5 	.word	0x0800a3d5
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b2:	e050      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ba:	e04c      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a3bc:	2308      	movs	r3, #8
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3c2:	e048      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ca:	e044      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a3cc:	2320      	movs	r3, #32
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d2:	e040      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3da:	e03c      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a3dc:	2380      	movs	r3, #128	; 0x80
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e2:	e038      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a5b      	ldr	r2, [pc, #364]	; (800a558 <UART_SetConfig+0x6a8>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d130      	bne.n	800a450 <UART_SetConfig+0x5a0>
 800a3ee:	4b57      	ldr	r3, [pc, #348]	; (800a54c <UART_SetConfig+0x69c>)
 800a3f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	2b05      	cmp	r3, #5
 800a3f8:	d826      	bhi.n	800a448 <UART_SetConfig+0x598>
 800a3fa:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <UART_SetConfig+0x550>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a419 	.word	0x0800a419
 800a404:	0800a421 	.word	0x0800a421
 800a408:	0800a429 	.word	0x0800a429
 800a40c:	0800a431 	.word	0x0800a431
 800a410:	0800a439 	.word	0x0800a439
 800a414:	0800a441 	.word	0x0800a441
 800a418:	2302      	movs	r3, #2
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41e:	e01a      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a420:	2304      	movs	r3, #4
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a426:	e016      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a428:	2308      	movs	r3, #8
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a42e:	e012      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a430:	2310      	movs	r3, #16
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a436:	e00e      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a438:	2320      	movs	r3, #32
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a43e:	e00a      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a440:	2340      	movs	r3, #64	; 0x40
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a446:	e006      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a448:	2380      	movs	r3, #128	; 0x80
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44e:	e002      	b.n	800a456 <UART_SetConfig+0x5a6>
 800a450:	2380      	movs	r3, #128	; 0x80
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a3f      	ldr	r2, [pc, #252]	; (800a558 <UART_SetConfig+0x6a8>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	f040 80f8 	bne.w	800a652 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a462:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a466:	2b20      	cmp	r3, #32
 800a468:	dc46      	bgt.n	800a4f8 <UART_SetConfig+0x648>
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	f2c0 8082 	blt.w	800a574 <UART_SetConfig+0x6c4>
 800a470:	3b02      	subs	r3, #2
 800a472:	2b1e      	cmp	r3, #30
 800a474:	d87e      	bhi.n	800a574 <UART_SetConfig+0x6c4>
 800a476:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <UART_SetConfig+0x5cc>)
 800a478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47c:	0800a4ff 	.word	0x0800a4ff
 800a480:	0800a575 	.word	0x0800a575
 800a484:	0800a507 	.word	0x0800a507
 800a488:	0800a575 	.word	0x0800a575
 800a48c:	0800a575 	.word	0x0800a575
 800a490:	0800a575 	.word	0x0800a575
 800a494:	0800a517 	.word	0x0800a517
 800a498:	0800a575 	.word	0x0800a575
 800a49c:	0800a575 	.word	0x0800a575
 800a4a0:	0800a575 	.word	0x0800a575
 800a4a4:	0800a575 	.word	0x0800a575
 800a4a8:	0800a575 	.word	0x0800a575
 800a4ac:	0800a575 	.word	0x0800a575
 800a4b0:	0800a575 	.word	0x0800a575
 800a4b4:	0800a527 	.word	0x0800a527
 800a4b8:	0800a575 	.word	0x0800a575
 800a4bc:	0800a575 	.word	0x0800a575
 800a4c0:	0800a575 	.word	0x0800a575
 800a4c4:	0800a575 	.word	0x0800a575
 800a4c8:	0800a575 	.word	0x0800a575
 800a4cc:	0800a575 	.word	0x0800a575
 800a4d0:	0800a575 	.word	0x0800a575
 800a4d4:	0800a575 	.word	0x0800a575
 800a4d8:	0800a575 	.word	0x0800a575
 800a4dc:	0800a575 	.word	0x0800a575
 800a4e0:	0800a575 	.word	0x0800a575
 800a4e4:	0800a575 	.word	0x0800a575
 800a4e8:	0800a575 	.word	0x0800a575
 800a4ec:	0800a575 	.word	0x0800a575
 800a4f0:	0800a575 	.word	0x0800a575
 800a4f4:	0800a567 	.word	0x0800a567
 800a4f8:	2b40      	cmp	r3, #64	; 0x40
 800a4fa:	d037      	beq.n	800a56c <UART_SetConfig+0x6bc>
 800a4fc:	e03a      	b.n	800a574 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4fe:	f7fe faa5 	bl	8008a4c <HAL_RCCEx_GetD3PCLK1Freq>
 800a502:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a504:	e03c      	b.n	800a580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fab4 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a514:	e034      	b.n	800a580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a516:	f107 0318 	add.w	r3, r7, #24
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe fc00 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a524:	e02c      	b.n	800a580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a526:	4b09      	ldr	r3, [pc, #36]	; (800a54c <UART_SetConfig+0x69c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d016      	beq.n	800a560 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a532:	4b06      	ldr	r3, [pc, #24]	; (800a54c <UART_SetConfig+0x69c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	08db      	lsrs	r3, r3, #3
 800a538:	f003 0303 	and.w	r3, r3, #3
 800a53c:	4a07      	ldr	r2, [pc, #28]	; (800a55c <UART_SetConfig+0x6ac>)
 800a53e:	fa22 f303 	lsr.w	r3, r2, r3
 800a542:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a544:	e01c      	b.n	800a580 <UART_SetConfig+0x6d0>
 800a546:	bf00      	nop
 800a548:	40011400 	.word	0x40011400
 800a54c:	58024400 	.word	0x58024400
 800a550:	40007800 	.word	0x40007800
 800a554:	40007c00 	.word	0x40007c00
 800a558:	58000c00 	.word	0x58000c00
 800a55c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a560:	4b9d      	ldr	r3, [pc, #628]	; (800a7d8 <UART_SetConfig+0x928>)
 800a562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a564:	e00c      	b.n	800a580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a566:	4b9d      	ldr	r3, [pc, #628]	; (800a7dc <UART_SetConfig+0x92c>)
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a56a:	e009      	b.n	800a580 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a56c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a572:	e005      	b.n	800a580 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a574:	2300      	movs	r3, #0
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a57e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 81de 	beq.w	800a944 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	4a94      	ldr	r2, [pc, #592]	; (800a7e0 <UART_SetConfig+0x930>)
 800a58e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a592:	461a      	mov	r2, r3
 800a594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a596:	fbb3 f3f2 	udiv	r3, r3, r2
 800a59a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	4413      	add	r3, r2
 800a5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d305      	bcc.n	800a5b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d903      	bls.n	800a5c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5be:	e1c1      	b.n	800a944 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	60bb      	str	r3, [r7, #8]
 800a5c6:	60fa      	str	r2, [r7, #12]
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	4a84      	ldr	r2, [pc, #528]	; (800a7e0 <UART_SetConfig+0x930>)
 800a5ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	603b      	str	r3, [r7, #0]
 800a5d8:	607a      	str	r2, [r7, #4]
 800a5da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5e2:	f7f5 fecd 	bl	8000380 <__aeabi_uldivmod>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f04f 0200 	mov.w	r2, #0
 800a5f2:	f04f 0300 	mov.w	r3, #0
 800a5f6:	020b      	lsls	r3, r1, #8
 800a5f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5fc:	0202      	lsls	r2, r0, #8
 800a5fe:	6979      	ldr	r1, [r7, #20]
 800a600:	6849      	ldr	r1, [r1, #4]
 800a602:	0849      	lsrs	r1, r1, #1
 800a604:	2000      	movs	r0, #0
 800a606:	460c      	mov	r4, r1
 800a608:	4605      	mov	r5, r0
 800a60a:	eb12 0804 	adds.w	r8, r2, r4
 800a60e:	eb43 0905 	adc.w	r9, r3, r5
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	469a      	mov	sl, r3
 800a61a:	4693      	mov	fp, r2
 800a61c:	4652      	mov	r2, sl
 800a61e:	465b      	mov	r3, fp
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f5 feac 	bl	8000380 <__aeabi_uldivmod>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4613      	mov	r3, r2
 800a62e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a636:	d308      	bcc.n	800a64a <UART_SetConfig+0x79a>
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a63e:	d204      	bcs.n	800a64a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a646:	60da      	str	r2, [r3, #12]
 800a648:	e17c      	b.n	800a944 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a650:	e178      	b.n	800a944 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65a:	f040 80c5 	bne.w	800a7e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a65e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a662:	2b20      	cmp	r3, #32
 800a664:	dc48      	bgt.n	800a6f8 <UART_SetConfig+0x848>
 800a666:	2b00      	cmp	r3, #0
 800a668:	db7b      	blt.n	800a762 <UART_SetConfig+0x8b2>
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	d879      	bhi.n	800a762 <UART_SetConfig+0x8b2>
 800a66e:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <UART_SetConfig+0x7c4>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a6ff 	.word	0x0800a6ff
 800a678:	0800a707 	.word	0x0800a707
 800a67c:	0800a763 	.word	0x0800a763
 800a680:	0800a763 	.word	0x0800a763
 800a684:	0800a70f 	.word	0x0800a70f
 800a688:	0800a763 	.word	0x0800a763
 800a68c:	0800a763 	.word	0x0800a763
 800a690:	0800a763 	.word	0x0800a763
 800a694:	0800a71f 	.word	0x0800a71f
 800a698:	0800a763 	.word	0x0800a763
 800a69c:	0800a763 	.word	0x0800a763
 800a6a0:	0800a763 	.word	0x0800a763
 800a6a4:	0800a763 	.word	0x0800a763
 800a6a8:	0800a763 	.word	0x0800a763
 800a6ac:	0800a763 	.word	0x0800a763
 800a6b0:	0800a763 	.word	0x0800a763
 800a6b4:	0800a72f 	.word	0x0800a72f
 800a6b8:	0800a763 	.word	0x0800a763
 800a6bc:	0800a763 	.word	0x0800a763
 800a6c0:	0800a763 	.word	0x0800a763
 800a6c4:	0800a763 	.word	0x0800a763
 800a6c8:	0800a763 	.word	0x0800a763
 800a6cc:	0800a763 	.word	0x0800a763
 800a6d0:	0800a763 	.word	0x0800a763
 800a6d4:	0800a763 	.word	0x0800a763
 800a6d8:	0800a763 	.word	0x0800a763
 800a6dc:	0800a763 	.word	0x0800a763
 800a6e0:	0800a763 	.word	0x0800a763
 800a6e4:	0800a763 	.word	0x0800a763
 800a6e8:	0800a763 	.word	0x0800a763
 800a6ec:	0800a763 	.word	0x0800a763
 800a6f0:	0800a763 	.word	0x0800a763
 800a6f4:	0800a755 	.word	0x0800a755
 800a6f8:	2b40      	cmp	r3, #64	; 0x40
 800a6fa:	d02e      	beq.n	800a75a <UART_SetConfig+0x8aa>
 800a6fc:	e031      	b.n	800a762 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6fe:	f7fc f9ef 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 800a702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a704:	e033      	b.n	800a76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a706:	f7fc fa01 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 800a70a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a70c:	e02f      	b.n	800a76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a70e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe f9b0 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a71c:	e027      	b.n	800a76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a71e:	f107 0318 	add.w	r3, r7, #24
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fafc 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a72c:	e01f      	b.n	800a76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a72e:	4b2d      	ldr	r3, [pc, #180]	; (800a7e4 <UART_SetConfig+0x934>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0320 	and.w	r3, r3, #32
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a73a:	4b2a      	ldr	r3, [pc, #168]	; (800a7e4 <UART_SetConfig+0x934>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	08db      	lsrs	r3, r3, #3
 800a740:	f003 0303 	and.w	r3, r3, #3
 800a744:	4a24      	ldr	r2, [pc, #144]	; (800a7d8 <UART_SetConfig+0x928>)
 800a746:	fa22 f303 	lsr.w	r3, r2, r3
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a74c:	e00f      	b.n	800a76e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a74e:	4b22      	ldr	r3, [pc, #136]	; (800a7d8 <UART_SetConfig+0x928>)
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a752:	e00c      	b.n	800a76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a754:	4b21      	ldr	r3, [pc, #132]	; (800a7dc <UART_SetConfig+0x92c>)
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a758:	e009      	b.n	800a76e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a75a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a760:	e005      	b.n	800a76e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a76c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 80e7 	beq.w	800a944 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77a:	4a19      	ldr	r2, [pc, #100]	; (800a7e0 <UART_SetConfig+0x930>)
 800a77c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a780:	461a      	mov	r2, r3
 800a782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a784:	fbb3 f3f2 	udiv	r3, r3, r2
 800a788:	005a      	lsls	r2, r3, #1
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	085b      	lsrs	r3, r3, #1
 800a790:	441a      	add	r2, r3
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	2b0f      	cmp	r3, #15
 800a7a0:	d916      	bls.n	800a7d0 <UART_SetConfig+0x920>
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a8:	d212      	bcs.n	800a7d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	f023 030f 	bic.w	r3, r3, #15
 800a7b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	085b      	lsrs	r3, r3, #1
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a7cc:	60da      	str	r2, [r3, #12]
 800a7ce:	e0b9      	b.n	800a944 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a7d6:	e0b5      	b.n	800a944 <UART_SetConfig+0xa94>
 800a7d8:	03d09000 	.word	0x03d09000
 800a7dc:	003d0900 	.word	0x003d0900
 800a7e0:	0800bd38 	.word	0x0800bd38
 800a7e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7ec:	2b20      	cmp	r3, #32
 800a7ee:	dc49      	bgt.n	800a884 <UART_SetConfig+0x9d4>
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	db7c      	blt.n	800a8ee <UART_SetConfig+0xa3e>
 800a7f4:	2b20      	cmp	r3, #32
 800a7f6:	d87a      	bhi.n	800a8ee <UART_SetConfig+0xa3e>
 800a7f8:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <UART_SetConfig+0x950>)
 800a7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fe:	bf00      	nop
 800a800:	0800a88b 	.word	0x0800a88b
 800a804:	0800a893 	.word	0x0800a893
 800a808:	0800a8ef 	.word	0x0800a8ef
 800a80c:	0800a8ef 	.word	0x0800a8ef
 800a810:	0800a89b 	.word	0x0800a89b
 800a814:	0800a8ef 	.word	0x0800a8ef
 800a818:	0800a8ef 	.word	0x0800a8ef
 800a81c:	0800a8ef 	.word	0x0800a8ef
 800a820:	0800a8ab 	.word	0x0800a8ab
 800a824:	0800a8ef 	.word	0x0800a8ef
 800a828:	0800a8ef 	.word	0x0800a8ef
 800a82c:	0800a8ef 	.word	0x0800a8ef
 800a830:	0800a8ef 	.word	0x0800a8ef
 800a834:	0800a8ef 	.word	0x0800a8ef
 800a838:	0800a8ef 	.word	0x0800a8ef
 800a83c:	0800a8ef 	.word	0x0800a8ef
 800a840:	0800a8bb 	.word	0x0800a8bb
 800a844:	0800a8ef 	.word	0x0800a8ef
 800a848:	0800a8ef 	.word	0x0800a8ef
 800a84c:	0800a8ef 	.word	0x0800a8ef
 800a850:	0800a8ef 	.word	0x0800a8ef
 800a854:	0800a8ef 	.word	0x0800a8ef
 800a858:	0800a8ef 	.word	0x0800a8ef
 800a85c:	0800a8ef 	.word	0x0800a8ef
 800a860:	0800a8ef 	.word	0x0800a8ef
 800a864:	0800a8ef 	.word	0x0800a8ef
 800a868:	0800a8ef 	.word	0x0800a8ef
 800a86c:	0800a8ef 	.word	0x0800a8ef
 800a870:	0800a8ef 	.word	0x0800a8ef
 800a874:	0800a8ef 	.word	0x0800a8ef
 800a878:	0800a8ef 	.word	0x0800a8ef
 800a87c:	0800a8ef 	.word	0x0800a8ef
 800a880:	0800a8e1 	.word	0x0800a8e1
 800a884:	2b40      	cmp	r3, #64	; 0x40
 800a886:	d02e      	beq.n	800a8e6 <UART_SetConfig+0xa36>
 800a888:	e031      	b.n	800a8ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a88a:	f7fc f929 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 800a88e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a890:	e033      	b.n	800a8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a892:	f7fc f93b 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 800a896:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a898:	e02f      	b.n	800a8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe f8ea 	bl	8008a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8a8:	e027      	b.n	800a8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8aa:	f107 0318 	add.w	r3, r7, #24
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fa36 	bl	8008d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8b8:	e01f      	b.n	800a8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ba:	4b2d      	ldr	r3, [pc, #180]	; (800a970 <UART_SetConfig+0xac0>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0320 	and.w	r3, r3, #32
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d009      	beq.n	800a8da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8c6:	4b2a      	ldr	r3, [pc, #168]	; (800a970 <UART_SetConfig+0xac0>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	08db      	lsrs	r3, r3, #3
 800a8cc:	f003 0303 	and.w	r3, r3, #3
 800a8d0:	4a28      	ldr	r2, [pc, #160]	; (800a974 <UART_SetConfig+0xac4>)
 800a8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8d8:	e00f      	b.n	800a8fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a8da:	4b26      	ldr	r3, [pc, #152]	; (800a974 <UART_SetConfig+0xac4>)
 800a8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8de:	e00c      	b.n	800a8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8e0:	4b25      	ldr	r3, [pc, #148]	; (800a978 <UART_SetConfig+0xac8>)
 800a8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e4:	e009      	b.n	800a8fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ec:	e005      	b.n	800a8fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a8f8:	bf00      	nop
    }

    if (pclk != 0U)
 800a8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d021      	beq.n	800a944 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	4a1d      	ldr	r2, [pc, #116]	; (800a97c <UART_SetConfig+0xacc>)
 800a906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a90a:	461a      	mov	r2, r3
 800a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	085b      	lsrs	r3, r3, #1
 800a918:	441a      	add	r2, r3
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a922:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a926:	2b0f      	cmp	r3, #15
 800a928:	d909      	bls.n	800a93e <UART_SetConfig+0xa8e>
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a930:	d205      	bcs.n	800a93e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	b29a      	uxth	r2, r3
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	60da      	str	r2, [r3, #12]
 800a93c:	e002      	b.n	800a944 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2201      	movs	r2, #1
 800a948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	2201      	movs	r2, #1
 800a950:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2200      	movs	r2, #0
 800a958:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2200      	movs	r2, #0
 800a95e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a960:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a964:	4618      	mov	r0, r3
 800a966:	3748      	adds	r7, #72	; 0x48
 800a968:	46bd      	mov	sp, r7
 800a96a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a96e:	bf00      	nop
 800a970:	58024400 	.word	0x58024400
 800a974:	03d09000 	.word	0x03d09000
 800a978:	003d0900 	.word	0x003d0900
 800a97c:	0800bd38 	.word	0x0800bd38

0800a980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00a      	beq.n	800a9aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	f003 0302 	and.w	r3, r3, #2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d0:	f003 0304 	and.w	r3, r3, #4
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00a      	beq.n	800a9ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa14:	f003 0310 	and.w	r3, r3, #16
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	f003 0320 	and.w	r3, r3, #32
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d01a      	beq.n	800aa96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa7e:	d10a      	bne.n	800aa96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	430a      	orrs	r2, r1
 800aab6:	605a      	str	r2, [r3, #4]
  }
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b098      	sub	sp, #96	; 0x60
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aad4:	f7f6 fbde 	bl	8001294 <HAL_GetTick>
 800aad8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0308 	and.w	r3, r3, #8
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d12f      	bne.n	800ab48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f88e 	bl	800ac18 <UART_WaitOnFlagUntilTimeout>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d022      	beq.n	800ab48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0a:	e853 3f00 	ldrex	r3, [r3]
 800ab0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab16:	653b      	str	r3, [r7, #80]	; 0x50
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab20:	647b      	str	r3, [r7, #68]	; 0x44
 800ab22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e6      	bne.n	800ab02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e063      	b.n	800ac10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	d149      	bne.n	800abea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f857 	bl	800ac18 <UART_WaitOnFlagUntilTimeout>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d03c      	beq.n	800abea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab7e:	6a3b      	ldr	r3, [r7, #32]
 800ab80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab8e:	633b      	str	r3, [r7, #48]	; 0x30
 800ab90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab96:	e841 2300 	strex	r3, r2, [r1]
 800ab9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1e6      	bne.n	800ab70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3308      	adds	r3, #8
 800aba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	e853 3f00 	ldrex	r3, [r3]
 800abb0:	60fb      	str	r3, [r7, #12]
   return(result);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f023 0301 	bic.w	r3, r3, #1
 800abb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3308      	adds	r3, #8
 800abc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abc2:	61fa      	str	r2, [r7, #28]
 800abc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc6:	69b9      	ldr	r1, [r7, #24]
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	e841 2300 	strex	r3, r2, [r1]
 800abce:	617b      	str	r3, [r7, #20]
   return(result);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1e5      	bne.n	800aba2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2220      	movs	r2, #32
 800abda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e012      	b.n	800ac10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3758      	adds	r7, #88	; 0x58
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	603b      	str	r3, [r7, #0]
 800ac24:	4613      	mov	r3, r2
 800ac26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac28:	e049      	b.n	800acbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac30:	d045      	beq.n	800acbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac32:	f7f6 fb2f 	bl	8001294 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	69ba      	ldr	r2, [r7, #24]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d302      	bcc.n	800ac48 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e048      	b.n	800acde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0304 	and.w	r3, r3, #4
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d031      	beq.n	800acbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	69db      	ldr	r3, [r3, #28]
 800ac60:	f003 0308 	and.w	r3, r3, #8
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d110      	bne.n	800ac8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2208      	movs	r2, #8
 800ac6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 f839 	bl	800ace8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2208      	movs	r2, #8
 800ac7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e029      	b.n	800acde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac98:	d111      	bne.n	800acbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 f81f 	bl	800ace8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2220      	movs	r2, #32
 800acae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e00f      	b.n	800acde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	69da      	ldr	r2, [r3, #28]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	4013      	ands	r3, r2
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	429a      	cmp	r2, r3
 800accc:	bf0c      	ite	eq
 800acce:	2301      	moveq	r3, #1
 800acd0:	2300      	movne	r3, #0
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	461a      	mov	r2, r3
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d0a6      	beq.n	800ac2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ace8:	b480      	push	{r7}
 800acea:	b095      	sub	sp, #84	; 0x54
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf8:	e853 3f00 	ldrex	r3, [r3]
 800acfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad0e:	643b      	str	r3, [r7, #64]	; 0x40
 800ad10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad16:	e841 2300 	strex	r3, r2, [r1]
 800ad1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1e6      	bne.n	800acf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3308      	adds	r3, #8
 800ad28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad32:	69fa      	ldr	r2, [r7, #28]
 800ad34:	4b1e      	ldr	r3, [pc, #120]	; (800adb0 <UART_EndRxTransfer+0xc8>)
 800ad36:	4013      	ands	r3, r2
 800ad38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e5      	bne.n	800ad22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d118      	bne.n	800ad90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	e853 3f00 	ldrex	r3, [r3]
 800ad6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f023 0310 	bic.w	r3, r3, #16
 800ad72:	647b      	str	r3, [r7, #68]	; 0x44
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad7c:	61bb      	str	r3, [r7, #24]
 800ad7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	6979      	ldr	r1, [r7, #20]
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	613b      	str	r3, [r7, #16]
   return(result);
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e6      	bne.n	800ad5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ada4:	bf00      	nop
 800ada6:	3754      	adds	r7, #84	; 0x54
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	effffffe 	.word	0xeffffffe

0800adb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f7ff f856 	bl	8009e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800add8:	bf00      	nop
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b08f      	sub	sp, #60	; 0x3c
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adee:	2b21      	cmp	r3, #33	; 0x21
 800adf0:	d14c      	bne.n	800ae8c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d132      	bne.n	800ae64 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	e853 3f00 	ldrex	r3, [r3]
 800ae0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae12:	637b      	str	r3, [r7, #52]	; 0x34
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae1e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae24:	e841 2300 	strex	r3, r2, [r1]
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e6      	bne.n	800adfe <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	e853 3f00 	ldrex	r3, [r3]
 800ae3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	61bb      	str	r3, [r7, #24]
 800ae50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae52:	6979      	ldr	r1, [r7, #20]
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	e841 2300 	strex	r3, r2, [r1]
 800ae5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1e6      	bne.n	800ae30 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ae62:	e013      	b.n	800ae8c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae68:	781a      	ldrb	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	3b01      	subs	r3, #1
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ae8c:	bf00      	nop
 800ae8e:	373c      	adds	r7, #60	; 0x3c
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b091      	sub	sp, #68	; 0x44
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea6:	2b21      	cmp	r3, #33	; 0x21
 800aea8:	d151      	bne.n	800af4e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d132      	bne.n	800af1c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	623b      	str	r3, [r7, #32]
   return(result);
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aeca:	63bb      	str	r3, [r7, #56]	; 0x38
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	633b      	str	r3, [r7, #48]	; 0x30
 800aed6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e6      	bne.n	800aeb6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aefc:	637b      	str	r3, [r7, #52]	; 0x34
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af06:	61fb      	str	r3, [r7, #28]
 800af08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	69b9      	ldr	r1, [r7, #24]
 800af0c:	69fa      	ldr	r2, [r7, #28]
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	617b      	str	r3, [r7, #20]
   return(result);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e6      	bne.n	800aee8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800af1a:	e018      	b.n	800af4e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800af22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af30:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af36:	1c9a      	adds	r2, r3, #2
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800af42:	b29b      	uxth	r3, r3
 800af44:	3b01      	subs	r3, #1
 800af46:	b29a      	uxth	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800af4e:	bf00      	nop
 800af50:	3744      	adds	r7, #68	; 0x44
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b091      	sub	sp, #68	; 0x44
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af68:	2b21      	cmp	r3, #33	; 0x21
 800af6a:	d160      	bne.n	800b02e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af72:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800af74:	e057      	b.n	800b026 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d133      	bne.n	800afea <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3308      	adds	r3, #8
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	e853 3f00 	ldrex	r3, [r3]
 800af90:	623b      	str	r3, [r7, #32]
   return(result);
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800af98:	63bb      	str	r3, [r7, #56]	; 0x38
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3308      	adds	r3, #8
 800afa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afa2:	633a      	str	r2, [r7, #48]	; 0x30
 800afa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afaa:	e841 2300 	strex	r3, r2, [r1]
 800afae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1e5      	bne.n	800af82 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	e853 3f00 	ldrex	r3, [r3]
 800afc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afca:	637b      	str	r3, [r7, #52]	; 0x34
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd4:	61fb      	str	r3, [r7, #28]
 800afd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	69b9      	ldr	r1, [r7, #24]
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	617b      	str	r3, [r7, #20]
   return(result);
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e6      	bne.n	800afb6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800afe8:	e021      	b.n	800b02e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d013      	beq.n	800b020 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affc:	781a      	ldrb	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b014:	b29b      	uxth	r3, r3
 800b016:	3b01      	subs	r3, #1
 800b018:	b29a      	uxth	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b020:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b022:	3b01      	subs	r3, #1
 800b024:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b026:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1a4      	bne.n	800af76 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b02c:	e7ff      	b.n	800b02e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b02e:	bf00      	nop
 800b030:	3744      	adds	r7, #68	; 0x44
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b091      	sub	sp, #68	; 0x44
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b048:	2b21      	cmp	r3, #33	; 0x21
 800b04a:	d165      	bne.n	800b118 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b052:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b054:	e05c      	b.n	800b110 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d133      	bne.n	800b0ca <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3308      	adds	r3, #8
 800b068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	61fb      	str	r3, [r7, #28]
   return(result);
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b078:	637b      	str	r3, [r7, #52]	; 0x34
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3308      	adds	r3, #8
 800b080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b082:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b084:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e5      	bne.n	800b062 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	e853 3f00 	ldrex	r3, [r3]
 800b0a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0aa:	633b      	str	r3, [r7, #48]	; 0x30
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	61bb      	str	r3, [r7, #24]
 800b0b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b8:	6979      	ldr	r1, [r7, #20]
 800b0ba:	69ba      	ldr	r2, [r7, #24]
 800b0bc:	e841 2300 	strex	r3, r2, [r1]
 800b0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1e6      	bne.n	800b096 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b0c8:	e026      	b.n	800b118 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d018      	beq.n	800b10a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0dc:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0ec:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f2:	1c9a      	adds	r2, r3, #2
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	3b01      	subs	r3, #1
 800b102:	b29a      	uxth	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b10a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b10c:	3b01      	subs	r3, #1
 800b10e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b110:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b112:	2b00      	cmp	r3, #0
 800b114:	d19f      	bne.n	800b056 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b116:	e7ff      	b.n	800b118 <UART_TxISR_16BIT_FIFOEN+0xde>
 800b118:	bf00      	nop
 800b11a:	3744      	adds	r7, #68	; 0x44
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b088      	sub	sp, #32
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	60bb      	str	r3, [r7, #8]
   return(result);
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b140:	61fb      	str	r3, [r7, #28]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	61bb      	str	r3, [r7, #24]
 800b14c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6979      	ldr	r1, [r7, #20]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	613b      	str	r3, [r7, #16]
   return(result);
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e6      	bne.n	800b12c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2220      	movs	r2, #32
 800b162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7fe fe7f 	bl	8009e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b172:	bf00      	nop
 800b174:	3720      	adds	r7, #32
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b182:	bf00      	nop
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1aa:	bf00      	nop
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b085      	sub	sp, #20
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d101      	bne.n	800b1cc <HAL_UARTEx_DisableFifoMode+0x16>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	e027      	b.n	800b21c <HAL_UARTEx_DisableFifoMode+0x66>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2224      	movs	r2, #36	; 0x24
 800b1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f022 0201 	bic.w	r2, r2, #1
 800b1f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b1fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2220      	movs	r2, #32
 800b20e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e02d      	b.n	800b29c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2224      	movs	r2, #36	; 0x24
 800b24c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f022 0201 	bic.w	r2, r2, #1
 800b266:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f84f 	bl	800b320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2220      	movs	r2, #32
 800b28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e02d      	b.n	800b318 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2224      	movs	r2, #36	; 0x24
 800b2c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f022 0201 	bic.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f811 	bl	800b320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2220      	movs	r2, #32
 800b30a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d108      	bne.n	800b342 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b340:	e031      	b.n	800b3a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b342:	2310      	movs	r3, #16
 800b344:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b346:	2310      	movs	r3, #16
 800b348:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	0e5b      	lsrs	r3, r3, #25
 800b352:	b2db      	uxtb	r3, r3
 800b354:	f003 0307 	and.w	r3, r3, #7
 800b358:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	0f5b      	lsrs	r3, r3, #29
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 0307 	and.w	r3, r3, #7
 800b368:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b36a:	7bbb      	ldrb	r3, [r7, #14]
 800b36c:	7b3a      	ldrb	r2, [r7, #12]
 800b36e:	4911      	ldr	r1, [pc, #68]	; (800b3b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b370:	5c8a      	ldrb	r2, [r1, r2]
 800b372:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b376:	7b3a      	ldrb	r2, [r7, #12]
 800b378:	490f      	ldr	r1, [pc, #60]	; (800b3b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b37a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b37c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b380:	b29a      	uxth	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	7b7a      	ldrb	r2, [r7, #13]
 800b38c:	4909      	ldr	r1, [pc, #36]	; (800b3b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b38e:	5c8a      	ldrb	r2, [r1, r2]
 800b390:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b394:	7b7a      	ldrb	r2, [r7, #13]
 800b396:	4908      	ldr	r1, [pc, #32]	; (800b3b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b398:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b39a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3a6:	bf00      	nop
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	0800bd50 	.word	0x0800bd50
 800b3b8:	0800bd58 	.word	0x0800bd58

0800b3bc <__errno>:
 800b3bc:	4b01      	ldr	r3, [pc, #4]	; (800b3c4 <__errno+0x8>)
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	24000010 	.word	0x24000010

0800b3c8 <__libc_init_array>:
 800b3c8:	b570      	push	{r4, r5, r6, lr}
 800b3ca:	4d0d      	ldr	r5, [pc, #52]	; (800b400 <__libc_init_array+0x38>)
 800b3cc:	4c0d      	ldr	r4, [pc, #52]	; (800b404 <__libc_init_array+0x3c>)
 800b3ce:	1b64      	subs	r4, r4, r5
 800b3d0:	10a4      	asrs	r4, r4, #2
 800b3d2:	2600      	movs	r6, #0
 800b3d4:	42a6      	cmp	r6, r4
 800b3d6:	d109      	bne.n	800b3ec <__libc_init_array+0x24>
 800b3d8:	4d0b      	ldr	r5, [pc, #44]	; (800b408 <__libc_init_array+0x40>)
 800b3da:	4c0c      	ldr	r4, [pc, #48]	; (800b40c <__libc_init_array+0x44>)
 800b3dc:	f000 fc8e 	bl	800bcfc <_init>
 800b3e0:	1b64      	subs	r4, r4, r5
 800b3e2:	10a4      	asrs	r4, r4, #2
 800b3e4:	2600      	movs	r6, #0
 800b3e6:	42a6      	cmp	r6, r4
 800b3e8:	d105      	bne.n	800b3f6 <__libc_init_array+0x2e>
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f0:	4798      	blx	r3
 800b3f2:	3601      	adds	r6, #1
 800b3f4:	e7ee      	b.n	800b3d4 <__libc_init_array+0xc>
 800b3f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3fa:	4798      	blx	r3
 800b3fc:	3601      	adds	r6, #1
 800b3fe:	e7f2      	b.n	800b3e6 <__libc_init_array+0x1e>
 800b400:	0800bd9c 	.word	0x0800bd9c
 800b404:	0800bd9c 	.word	0x0800bd9c
 800b408:	0800bd9c 	.word	0x0800bd9c
 800b40c:	0800bda0 	.word	0x0800bda0

0800b410 <memset>:
 800b410:	4402      	add	r2, r0
 800b412:	4603      	mov	r3, r0
 800b414:	4293      	cmp	r3, r2
 800b416:	d100      	bne.n	800b41a <memset+0xa>
 800b418:	4770      	bx	lr
 800b41a:	f803 1b01 	strb.w	r1, [r3], #1
 800b41e:	e7f9      	b.n	800b414 <memset+0x4>

0800b420 <siprintf>:
 800b420:	b40e      	push	{r1, r2, r3}
 800b422:	b500      	push	{lr}
 800b424:	b09c      	sub	sp, #112	; 0x70
 800b426:	ab1d      	add	r3, sp, #116	; 0x74
 800b428:	9002      	str	r0, [sp, #8]
 800b42a:	9006      	str	r0, [sp, #24]
 800b42c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b430:	4809      	ldr	r0, [pc, #36]	; (800b458 <siprintf+0x38>)
 800b432:	9107      	str	r1, [sp, #28]
 800b434:	9104      	str	r1, [sp, #16]
 800b436:	4909      	ldr	r1, [pc, #36]	; (800b45c <siprintf+0x3c>)
 800b438:	f853 2b04 	ldr.w	r2, [r3], #4
 800b43c:	9105      	str	r1, [sp, #20]
 800b43e:	6800      	ldr	r0, [r0, #0]
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	a902      	add	r1, sp, #8
 800b444:	f000 f868 	bl	800b518 <_svfiprintf_r>
 800b448:	9b02      	ldr	r3, [sp, #8]
 800b44a:	2200      	movs	r2, #0
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	b01c      	add	sp, #112	; 0x70
 800b450:	f85d eb04 	ldr.w	lr, [sp], #4
 800b454:	b003      	add	sp, #12
 800b456:	4770      	bx	lr
 800b458:	24000010 	.word	0x24000010
 800b45c:	ffff0208 	.word	0xffff0208

0800b460 <__ssputs_r>:
 800b460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b464:	688e      	ldr	r6, [r1, #8]
 800b466:	429e      	cmp	r6, r3
 800b468:	4682      	mov	sl, r0
 800b46a:	460c      	mov	r4, r1
 800b46c:	4690      	mov	r8, r2
 800b46e:	461f      	mov	r7, r3
 800b470:	d838      	bhi.n	800b4e4 <__ssputs_r+0x84>
 800b472:	898a      	ldrh	r2, [r1, #12]
 800b474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b478:	d032      	beq.n	800b4e0 <__ssputs_r+0x80>
 800b47a:	6825      	ldr	r5, [r4, #0]
 800b47c:	6909      	ldr	r1, [r1, #16]
 800b47e:	eba5 0901 	sub.w	r9, r5, r1
 800b482:	6965      	ldr	r5, [r4, #20]
 800b484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b488:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b48c:	3301      	adds	r3, #1
 800b48e:	444b      	add	r3, r9
 800b490:	106d      	asrs	r5, r5, #1
 800b492:	429d      	cmp	r5, r3
 800b494:	bf38      	it	cc
 800b496:	461d      	movcc	r5, r3
 800b498:	0553      	lsls	r3, r2, #21
 800b49a:	d531      	bpl.n	800b500 <__ssputs_r+0xa0>
 800b49c:	4629      	mov	r1, r5
 800b49e:	f000 fb63 	bl	800bb68 <_malloc_r>
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	b950      	cbnz	r0, 800b4bc <__ssputs_r+0x5c>
 800b4a6:	230c      	movs	r3, #12
 800b4a8:	f8ca 3000 	str.w	r3, [sl]
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4bc:	6921      	ldr	r1, [r4, #16]
 800b4be:	464a      	mov	r2, r9
 800b4c0:	f000 fabe 	bl	800ba40 <memcpy>
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ce:	81a3      	strh	r3, [r4, #12]
 800b4d0:	6126      	str	r6, [r4, #16]
 800b4d2:	6165      	str	r5, [r4, #20]
 800b4d4:	444e      	add	r6, r9
 800b4d6:	eba5 0509 	sub.w	r5, r5, r9
 800b4da:	6026      	str	r6, [r4, #0]
 800b4dc:	60a5      	str	r5, [r4, #8]
 800b4de:	463e      	mov	r6, r7
 800b4e0:	42be      	cmp	r6, r7
 800b4e2:	d900      	bls.n	800b4e6 <__ssputs_r+0x86>
 800b4e4:	463e      	mov	r6, r7
 800b4e6:	6820      	ldr	r0, [r4, #0]
 800b4e8:	4632      	mov	r2, r6
 800b4ea:	4641      	mov	r1, r8
 800b4ec:	f000 fab6 	bl	800ba5c <memmove>
 800b4f0:	68a3      	ldr	r3, [r4, #8]
 800b4f2:	1b9b      	subs	r3, r3, r6
 800b4f4:	60a3      	str	r3, [r4, #8]
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	4433      	add	r3, r6
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	e7db      	b.n	800b4b8 <__ssputs_r+0x58>
 800b500:	462a      	mov	r2, r5
 800b502:	f000 fba5 	bl	800bc50 <_realloc_r>
 800b506:	4606      	mov	r6, r0
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1e1      	bne.n	800b4d0 <__ssputs_r+0x70>
 800b50c:	6921      	ldr	r1, [r4, #16]
 800b50e:	4650      	mov	r0, sl
 800b510:	f000 fabe 	bl	800ba90 <_free_r>
 800b514:	e7c7      	b.n	800b4a6 <__ssputs_r+0x46>
	...

0800b518 <_svfiprintf_r>:
 800b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	4698      	mov	r8, r3
 800b51e:	898b      	ldrh	r3, [r1, #12]
 800b520:	061b      	lsls	r3, r3, #24
 800b522:	b09d      	sub	sp, #116	; 0x74
 800b524:	4607      	mov	r7, r0
 800b526:	460d      	mov	r5, r1
 800b528:	4614      	mov	r4, r2
 800b52a:	d50e      	bpl.n	800b54a <_svfiprintf_r+0x32>
 800b52c:	690b      	ldr	r3, [r1, #16]
 800b52e:	b963      	cbnz	r3, 800b54a <_svfiprintf_r+0x32>
 800b530:	2140      	movs	r1, #64	; 0x40
 800b532:	f000 fb19 	bl	800bb68 <_malloc_r>
 800b536:	6028      	str	r0, [r5, #0]
 800b538:	6128      	str	r0, [r5, #16]
 800b53a:	b920      	cbnz	r0, 800b546 <_svfiprintf_r+0x2e>
 800b53c:	230c      	movs	r3, #12
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	f04f 30ff 	mov.w	r0, #4294967295
 800b544:	e0d1      	b.n	800b6ea <_svfiprintf_r+0x1d2>
 800b546:	2340      	movs	r3, #64	; 0x40
 800b548:	616b      	str	r3, [r5, #20]
 800b54a:	2300      	movs	r3, #0
 800b54c:	9309      	str	r3, [sp, #36]	; 0x24
 800b54e:	2320      	movs	r3, #32
 800b550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b554:	f8cd 800c 	str.w	r8, [sp, #12]
 800b558:	2330      	movs	r3, #48	; 0x30
 800b55a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b704 <_svfiprintf_r+0x1ec>
 800b55e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b562:	f04f 0901 	mov.w	r9, #1
 800b566:	4623      	mov	r3, r4
 800b568:	469a      	mov	sl, r3
 800b56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b56e:	b10a      	cbz	r2, 800b574 <_svfiprintf_r+0x5c>
 800b570:	2a25      	cmp	r2, #37	; 0x25
 800b572:	d1f9      	bne.n	800b568 <_svfiprintf_r+0x50>
 800b574:	ebba 0b04 	subs.w	fp, sl, r4
 800b578:	d00b      	beq.n	800b592 <_svfiprintf_r+0x7a>
 800b57a:	465b      	mov	r3, fp
 800b57c:	4622      	mov	r2, r4
 800b57e:	4629      	mov	r1, r5
 800b580:	4638      	mov	r0, r7
 800b582:	f7ff ff6d 	bl	800b460 <__ssputs_r>
 800b586:	3001      	adds	r0, #1
 800b588:	f000 80aa 	beq.w	800b6e0 <_svfiprintf_r+0x1c8>
 800b58c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b58e:	445a      	add	r2, fp
 800b590:	9209      	str	r2, [sp, #36]	; 0x24
 800b592:	f89a 3000 	ldrb.w	r3, [sl]
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 80a2 	beq.w	800b6e0 <_svfiprintf_r+0x1c8>
 800b59c:	2300      	movs	r3, #0
 800b59e:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a6:	f10a 0a01 	add.w	sl, sl, #1
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	9307      	str	r3, [sp, #28]
 800b5ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b5b4:	4654      	mov	r4, sl
 800b5b6:	2205      	movs	r2, #5
 800b5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5bc:	4851      	ldr	r0, [pc, #324]	; (800b704 <_svfiprintf_r+0x1ec>)
 800b5be:	f7f4 fe8f 	bl	80002e0 <memchr>
 800b5c2:	9a04      	ldr	r2, [sp, #16]
 800b5c4:	b9d8      	cbnz	r0, 800b5fe <_svfiprintf_r+0xe6>
 800b5c6:	06d0      	lsls	r0, r2, #27
 800b5c8:	bf44      	itt	mi
 800b5ca:	2320      	movmi	r3, #32
 800b5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d0:	0711      	lsls	r1, r2, #28
 800b5d2:	bf44      	itt	mi
 800b5d4:	232b      	movmi	r3, #43	; 0x2b
 800b5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5da:	f89a 3000 	ldrb.w	r3, [sl]
 800b5de:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e0:	d015      	beq.n	800b60e <_svfiprintf_r+0xf6>
 800b5e2:	9a07      	ldr	r2, [sp, #28]
 800b5e4:	4654      	mov	r4, sl
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f04f 0c0a 	mov.w	ip, #10
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5f2:	3b30      	subs	r3, #48	; 0x30
 800b5f4:	2b09      	cmp	r3, #9
 800b5f6:	d94e      	bls.n	800b696 <_svfiprintf_r+0x17e>
 800b5f8:	b1b0      	cbz	r0, 800b628 <_svfiprintf_r+0x110>
 800b5fa:	9207      	str	r2, [sp, #28]
 800b5fc:	e014      	b.n	800b628 <_svfiprintf_r+0x110>
 800b5fe:	eba0 0308 	sub.w	r3, r0, r8
 800b602:	fa09 f303 	lsl.w	r3, r9, r3
 800b606:	4313      	orrs	r3, r2
 800b608:	9304      	str	r3, [sp, #16]
 800b60a:	46a2      	mov	sl, r4
 800b60c:	e7d2      	b.n	800b5b4 <_svfiprintf_r+0x9c>
 800b60e:	9b03      	ldr	r3, [sp, #12]
 800b610:	1d19      	adds	r1, r3, #4
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	9103      	str	r1, [sp, #12]
 800b616:	2b00      	cmp	r3, #0
 800b618:	bfbb      	ittet	lt
 800b61a:	425b      	neglt	r3, r3
 800b61c:	f042 0202 	orrlt.w	r2, r2, #2
 800b620:	9307      	strge	r3, [sp, #28]
 800b622:	9307      	strlt	r3, [sp, #28]
 800b624:	bfb8      	it	lt
 800b626:	9204      	strlt	r2, [sp, #16]
 800b628:	7823      	ldrb	r3, [r4, #0]
 800b62a:	2b2e      	cmp	r3, #46	; 0x2e
 800b62c:	d10c      	bne.n	800b648 <_svfiprintf_r+0x130>
 800b62e:	7863      	ldrb	r3, [r4, #1]
 800b630:	2b2a      	cmp	r3, #42	; 0x2a
 800b632:	d135      	bne.n	800b6a0 <_svfiprintf_r+0x188>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	1d1a      	adds	r2, r3, #4
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	9203      	str	r2, [sp, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	bfb8      	it	lt
 800b640:	f04f 33ff 	movlt.w	r3, #4294967295
 800b644:	3402      	adds	r4, #2
 800b646:	9305      	str	r3, [sp, #20]
 800b648:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b714 <_svfiprintf_r+0x1fc>
 800b64c:	7821      	ldrb	r1, [r4, #0]
 800b64e:	2203      	movs	r2, #3
 800b650:	4650      	mov	r0, sl
 800b652:	f7f4 fe45 	bl	80002e0 <memchr>
 800b656:	b140      	cbz	r0, 800b66a <_svfiprintf_r+0x152>
 800b658:	2340      	movs	r3, #64	; 0x40
 800b65a:	eba0 000a 	sub.w	r0, r0, sl
 800b65e:	fa03 f000 	lsl.w	r0, r3, r0
 800b662:	9b04      	ldr	r3, [sp, #16]
 800b664:	4303      	orrs	r3, r0
 800b666:	3401      	adds	r4, #1
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b66e:	4826      	ldr	r0, [pc, #152]	; (800b708 <_svfiprintf_r+0x1f0>)
 800b670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b674:	2206      	movs	r2, #6
 800b676:	f7f4 fe33 	bl	80002e0 <memchr>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d038      	beq.n	800b6f0 <_svfiprintf_r+0x1d8>
 800b67e:	4b23      	ldr	r3, [pc, #140]	; (800b70c <_svfiprintf_r+0x1f4>)
 800b680:	bb1b      	cbnz	r3, 800b6ca <_svfiprintf_r+0x1b2>
 800b682:	9b03      	ldr	r3, [sp, #12]
 800b684:	3307      	adds	r3, #7
 800b686:	f023 0307 	bic.w	r3, r3, #7
 800b68a:	3308      	adds	r3, #8
 800b68c:	9303      	str	r3, [sp, #12]
 800b68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b690:	4433      	add	r3, r6
 800b692:	9309      	str	r3, [sp, #36]	; 0x24
 800b694:	e767      	b.n	800b566 <_svfiprintf_r+0x4e>
 800b696:	fb0c 3202 	mla	r2, ip, r2, r3
 800b69a:	460c      	mov	r4, r1
 800b69c:	2001      	movs	r0, #1
 800b69e:	e7a5      	b.n	800b5ec <_svfiprintf_r+0xd4>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	3401      	adds	r4, #1
 800b6a4:	9305      	str	r3, [sp, #20]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	f04f 0c0a 	mov.w	ip, #10
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6b2:	3a30      	subs	r2, #48	; 0x30
 800b6b4:	2a09      	cmp	r2, #9
 800b6b6:	d903      	bls.n	800b6c0 <_svfiprintf_r+0x1a8>
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0c5      	beq.n	800b648 <_svfiprintf_r+0x130>
 800b6bc:	9105      	str	r1, [sp, #20]
 800b6be:	e7c3      	b.n	800b648 <_svfiprintf_r+0x130>
 800b6c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e7f0      	b.n	800b6ac <_svfiprintf_r+0x194>
 800b6ca:	ab03      	add	r3, sp, #12
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	462a      	mov	r2, r5
 800b6d0:	4b0f      	ldr	r3, [pc, #60]	; (800b710 <_svfiprintf_r+0x1f8>)
 800b6d2:	a904      	add	r1, sp, #16
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f3af 8000 	nop.w
 800b6da:	1c42      	adds	r2, r0, #1
 800b6dc:	4606      	mov	r6, r0
 800b6de:	d1d6      	bne.n	800b68e <_svfiprintf_r+0x176>
 800b6e0:	89ab      	ldrh	r3, [r5, #12]
 800b6e2:	065b      	lsls	r3, r3, #25
 800b6e4:	f53f af2c 	bmi.w	800b540 <_svfiprintf_r+0x28>
 800b6e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ea:	b01d      	add	sp, #116	; 0x74
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	ab03      	add	r3, sp, #12
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	462a      	mov	r2, r5
 800b6f6:	4b06      	ldr	r3, [pc, #24]	; (800b710 <_svfiprintf_r+0x1f8>)
 800b6f8:	a904      	add	r1, sp, #16
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	f000 f87a 	bl	800b7f4 <_printf_i>
 800b700:	e7eb      	b.n	800b6da <_svfiprintf_r+0x1c2>
 800b702:	bf00      	nop
 800b704:	0800bd60 	.word	0x0800bd60
 800b708:	0800bd6a 	.word	0x0800bd6a
 800b70c:	00000000 	.word	0x00000000
 800b710:	0800b461 	.word	0x0800b461
 800b714:	0800bd66 	.word	0x0800bd66

0800b718 <_printf_common>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	4616      	mov	r6, r2
 800b71e:	4699      	mov	r9, r3
 800b720:	688a      	ldr	r2, [r1, #8]
 800b722:	690b      	ldr	r3, [r1, #16]
 800b724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b728:	4293      	cmp	r3, r2
 800b72a:	bfb8      	it	lt
 800b72c:	4613      	movlt	r3, r2
 800b72e:	6033      	str	r3, [r6, #0]
 800b730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b734:	4607      	mov	r7, r0
 800b736:	460c      	mov	r4, r1
 800b738:	b10a      	cbz	r2, 800b73e <_printf_common+0x26>
 800b73a:	3301      	adds	r3, #1
 800b73c:	6033      	str	r3, [r6, #0]
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	0699      	lsls	r1, r3, #26
 800b742:	bf42      	ittt	mi
 800b744:	6833      	ldrmi	r3, [r6, #0]
 800b746:	3302      	addmi	r3, #2
 800b748:	6033      	strmi	r3, [r6, #0]
 800b74a:	6825      	ldr	r5, [r4, #0]
 800b74c:	f015 0506 	ands.w	r5, r5, #6
 800b750:	d106      	bne.n	800b760 <_printf_common+0x48>
 800b752:	f104 0a19 	add.w	sl, r4, #25
 800b756:	68e3      	ldr	r3, [r4, #12]
 800b758:	6832      	ldr	r2, [r6, #0]
 800b75a:	1a9b      	subs	r3, r3, r2
 800b75c:	42ab      	cmp	r3, r5
 800b75e:	dc26      	bgt.n	800b7ae <_printf_common+0x96>
 800b760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b764:	1e13      	subs	r3, r2, #0
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	bf18      	it	ne
 800b76a:	2301      	movne	r3, #1
 800b76c:	0692      	lsls	r2, r2, #26
 800b76e:	d42b      	bmi.n	800b7c8 <_printf_common+0xb0>
 800b770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b774:	4649      	mov	r1, r9
 800b776:	4638      	mov	r0, r7
 800b778:	47c0      	blx	r8
 800b77a:	3001      	adds	r0, #1
 800b77c:	d01e      	beq.n	800b7bc <_printf_common+0xa4>
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	68e5      	ldr	r5, [r4, #12]
 800b782:	6832      	ldr	r2, [r6, #0]
 800b784:	f003 0306 	and.w	r3, r3, #6
 800b788:	2b04      	cmp	r3, #4
 800b78a:	bf08      	it	eq
 800b78c:	1aad      	subeq	r5, r5, r2
 800b78e:	68a3      	ldr	r3, [r4, #8]
 800b790:	6922      	ldr	r2, [r4, #16]
 800b792:	bf0c      	ite	eq
 800b794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b798:	2500      	movne	r5, #0
 800b79a:	4293      	cmp	r3, r2
 800b79c:	bfc4      	itt	gt
 800b79e:	1a9b      	subgt	r3, r3, r2
 800b7a0:	18ed      	addgt	r5, r5, r3
 800b7a2:	2600      	movs	r6, #0
 800b7a4:	341a      	adds	r4, #26
 800b7a6:	42b5      	cmp	r5, r6
 800b7a8:	d11a      	bne.n	800b7e0 <_printf_common+0xc8>
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	e008      	b.n	800b7c0 <_printf_common+0xa8>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	4652      	mov	r2, sl
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	47c0      	blx	r8
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d103      	bne.n	800b7c4 <_printf_common+0xac>
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c4:	3501      	adds	r5, #1
 800b7c6:	e7c6      	b.n	800b756 <_printf_common+0x3e>
 800b7c8:	18e1      	adds	r1, r4, r3
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	2030      	movs	r0, #48	; 0x30
 800b7ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7d2:	4422      	add	r2, r4
 800b7d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7dc:	3302      	adds	r3, #2
 800b7de:	e7c7      	b.n	800b770 <_printf_common+0x58>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	4622      	mov	r2, r4
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	47c0      	blx	r8
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d0e6      	beq.n	800b7bc <_printf_common+0xa4>
 800b7ee:	3601      	adds	r6, #1
 800b7f0:	e7d9      	b.n	800b7a6 <_printf_common+0x8e>
	...

0800b7f4 <_printf_i>:
 800b7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f8:	7e0f      	ldrb	r7, [r1, #24]
 800b7fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7fc:	2f78      	cmp	r7, #120	; 0x78
 800b7fe:	4691      	mov	r9, r2
 800b800:	4680      	mov	r8, r0
 800b802:	460c      	mov	r4, r1
 800b804:	469a      	mov	sl, r3
 800b806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b80a:	d807      	bhi.n	800b81c <_printf_i+0x28>
 800b80c:	2f62      	cmp	r7, #98	; 0x62
 800b80e:	d80a      	bhi.n	800b826 <_printf_i+0x32>
 800b810:	2f00      	cmp	r7, #0
 800b812:	f000 80d8 	beq.w	800b9c6 <_printf_i+0x1d2>
 800b816:	2f58      	cmp	r7, #88	; 0x58
 800b818:	f000 80a3 	beq.w	800b962 <_printf_i+0x16e>
 800b81c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b824:	e03a      	b.n	800b89c <_printf_i+0xa8>
 800b826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b82a:	2b15      	cmp	r3, #21
 800b82c:	d8f6      	bhi.n	800b81c <_printf_i+0x28>
 800b82e:	a101      	add	r1, pc, #4	; (adr r1, 800b834 <_printf_i+0x40>)
 800b830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b834:	0800b88d 	.word	0x0800b88d
 800b838:	0800b8a1 	.word	0x0800b8a1
 800b83c:	0800b81d 	.word	0x0800b81d
 800b840:	0800b81d 	.word	0x0800b81d
 800b844:	0800b81d 	.word	0x0800b81d
 800b848:	0800b81d 	.word	0x0800b81d
 800b84c:	0800b8a1 	.word	0x0800b8a1
 800b850:	0800b81d 	.word	0x0800b81d
 800b854:	0800b81d 	.word	0x0800b81d
 800b858:	0800b81d 	.word	0x0800b81d
 800b85c:	0800b81d 	.word	0x0800b81d
 800b860:	0800b9ad 	.word	0x0800b9ad
 800b864:	0800b8d1 	.word	0x0800b8d1
 800b868:	0800b98f 	.word	0x0800b98f
 800b86c:	0800b81d 	.word	0x0800b81d
 800b870:	0800b81d 	.word	0x0800b81d
 800b874:	0800b9cf 	.word	0x0800b9cf
 800b878:	0800b81d 	.word	0x0800b81d
 800b87c:	0800b8d1 	.word	0x0800b8d1
 800b880:	0800b81d 	.word	0x0800b81d
 800b884:	0800b81d 	.word	0x0800b81d
 800b888:	0800b997 	.word	0x0800b997
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	1d1a      	adds	r2, r3, #4
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	602a      	str	r2, [r5, #0]
 800b894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b89c:	2301      	movs	r3, #1
 800b89e:	e0a3      	b.n	800b9e8 <_printf_i+0x1f4>
 800b8a0:	6820      	ldr	r0, [r4, #0]
 800b8a2:	6829      	ldr	r1, [r5, #0]
 800b8a4:	0606      	lsls	r6, r0, #24
 800b8a6:	f101 0304 	add.w	r3, r1, #4
 800b8aa:	d50a      	bpl.n	800b8c2 <_printf_i+0xce>
 800b8ac:	680e      	ldr	r6, [r1, #0]
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	2e00      	cmp	r6, #0
 800b8b2:	da03      	bge.n	800b8bc <_printf_i+0xc8>
 800b8b4:	232d      	movs	r3, #45	; 0x2d
 800b8b6:	4276      	negs	r6, r6
 800b8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8bc:	485e      	ldr	r0, [pc, #376]	; (800ba38 <_printf_i+0x244>)
 800b8be:	230a      	movs	r3, #10
 800b8c0:	e019      	b.n	800b8f6 <_printf_i+0x102>
 800b8c2:	680e      	ldr	r6, [r1, #0]
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8ca:	bf18      	it	ne
 800b8cc:	b236      	sxthne	r6, r6
 800b8ce:	e7ef      	b.n	800b8b0 <_printf_i+0xbc>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	6820      	ldr	r0, [r4, #0]
 800b8d4:	1d19      	adds	r1, r3, #4
 800b8d6:	6029      	str	r1, [r5, #0]
 800b8d8:	0601      	lsls	r1, r0, #24
 800b8da:	d501      	bpl.n	800b8e0 <_printf_i+0xec>
 800b8dc:	681e      	ldr	r6, [r3, #0]
 800b8de:	e002      	b.n	800b8e6 <_printf_i+0xf2>
 800b8e0:	0646      	lsls	r6, r0, #25
 800b8e2:	d5fb      	bpl.n	800b8dc <_printf_i+0xe8>
 800b8e4:	881e      	ldrh	r6, [r3, #0]
 800b8e6:	4854      	ldr	r0, [pc, #336]	; (800ba38 <_printf_i+0x244>)
 800b8e8:	2f6f      	cmp	r7, #111	; 0x6f
 800b8ea:	bf0c      	ite	eq
 800b8ec:	2308      	moveq	r3, #8
 800b8ee:	230a      	movne	r3, #10
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8f6:	6865      	ldr	r5, [r4, #4]
 800b8f8:	60a5      	str	r5, [r4, #8]
 800b8fa:	2d00      	cmp	r5, #0
 800b8fc:	bfa2      	ittt	ge
 800b8fe:	6821      	ldrge	r1, [r4, #0]
 800b900:	f021 0104 	bicge.w	r1, r1, #4
 800b904:	6021      	strge	r1, [r4, #0]
 800b906:	b90e      	cbnz	r6, 800b90c <_printf_i+0x118>
 800b908:	2d00      	cmp	r5, #0
 800b90a:	d04d      	beq.n	800b9a8 <_printf_i+0x1b4>
 800b90c:	4615      	mov	r5, r2
 800b90e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b912:	fb03 6711 	mls	r7, r3, r1, r6
 800b916:	5dc7      	ldrb	r7, [r0, r7]
 800b918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b91c:	4637      	mov	r7, r6
 800b91e:	42bb      	cmp	r3, r7
 800b920:	460e      	mov	r6, r1
 800b922:	d9f4      	bls.n	800b90e <_printf_i+0x11a>
 800b924:	2b08      	cmp	r3, #8
 800b926:	d10b      	bne.n	800b940 <_printf_i+0x14c>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	07de      	lsls	r6, r3, #31
 800b92c:	d508      	bpl.n	800b940 <_printf_i+0x14c>
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	6861      	ldr	r1, [r4, #4]
 800b932:	4299      	cmp	r1, r3
 800b934:	bfde      	ittt	le
 800b936:	2330      	movle	r3, #48	; 0x30
 800b938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b93c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b940:	1b52      	subs	r2, r2, r5
 800b942:	6122      	str	r2, [r4, #16]
 800b944:	f8cd a000 	str.w	sl, [sp]
 800b948:	464b      	mov	r3, r9
 800b94a:	aa03      	add	r2, sp, #12
 800b94c:	4621      	mov	r1, r4
 800b94e:	4640      	mov	r0, r8
 800b950:	f7ff fee2 	bl	800b718 <_printf_common>
 800b954:	3001      	adds	r0, #1
 800b956:	d14c      	bne.n	800b9f2 <_printf_i+0x1fe>
 800b958:	f04f 30ff 	mov.w	r0, #4294967295
 800b95c:	b004      	add	sp, #16
 800b95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b962:	4835      	ldr	r0, [pc, #212]	; (800ba38 <_printf_i+0x244>)
 800b964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b968:	6829      	ldr	r1, [r5, #0]
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b970:	6029      	str	r1, [r5, #0]
 800b972:	061d      	lsls	r5, r3, #24
 800b974:	d514      	bpl.n	800b9a0 <_printf_i+0x1ac>
 800b976:	07df      	lsls	r7, r3, #31
 800b978:	bf44      	itt	mi
 800b97a:	f043 0320 	orrmi.w	r3, r3, #32
 800b97e:	6023      	strmi	r3, [r4, #0]
 800b980:	b91e      	cbnz	r6, 800b98a <_printf_i+0x196>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	f023 0320 	bic.w	r3, r3, #32
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	2310      	movs	r3, #16
 800b98c:	e7b0      	b.n	800b8f0 <_printf_i+0xfc>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	f043 0320 	orr.w	r3, r3, #32
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	2378      	movs	r3, #120	; 0x78
 800b998:	4828      	ldr	r0, [pc, #160]	; (800ba3c <_printf_i+0x248>)
 800b99a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b99e:	e7e3      	b.n	800b968 <_printf_i+0x174>
 800b9a0:	0659      	lsls	r1, r3, #25
 800b9a2:	bf48      	it	mi
 800b9a4:	b2b6      	uxthmi	r6, r6
 800b9a6:	e7e6      	b.n	800b976 <_printf_i+0x182>
 800b9a8:	4615      	mov	r5, r2
 800b9aa:	e7bb      	b.n	800b924 <_printf_i+0x130>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	6826      	ldr	r6, [r4, #0]
 800b9b0:	6961      	ldr	r1, [r4, #20]
 800b9b2:	1d18      	adds	r0, r3, #4
 800b9b4:	6028      	str	r0, [r5, #0]
 800b9b6:	0635      	lsls	r5, r6, #24
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	d501      	bpl.n	800b9c0 <_printf_i+0x1cc>
 800b9bc:	6019      	str	r1, [r3, #0]
 800b9be:	e002      	b.n	800b9c6 <_printf_i+0x1d2>
 800b9c0:	0670      	lsls	r0, r6, #25
 800b9c2:	d5fb      	bpl.n	800b9bc <_printf_i+0x1c8>
 800b9c4:	8019      	strh	r1, [r3, #0]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	6123      	str	r3, [r4, #16]
 800b9ca:	4615      	mov	r5, r2
 800b9cc:	e7ba      	b.n	800b944 <_printf_i+0x150>
 800b9ce:	682b      	ldr	r3, [r5, #0]
 800b9d0:	1d1a      	adds	r2, r3, #4
 800b9d2:	602a      	str	r2, [r5, #0]
 800b9d4:	681d      	ldr	r5, [r3, #0]
 800b9d6:	6862      	ldr	r2, [r4, #4]
 800b9d8:	2100      	movs	r1, #0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f7f4 fc80 	bl	80002e0 <memchr>
 800b9e0:	b108      	cbz	r0, 800b9e6 <_printf_i+0x1f2>
 800b9e2:	1b40      	subs	r0, r0, r5
 800b9e4:	6060      	str	r0, [r4, #4]
 800b9e6:	6863      	ldr	r3, [r4, #4]
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9f0:	e7a8      	b.n	800b944 <_printf_i+0x150>
 800b9f2:	6923      	ldr	r3, [r4, #16]
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	47d0      	blx	sl
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d0ab      	beq.n	800b958 <_printf_i+0x164>
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	079b      	lsls	r3, r3, #30
 800ba04:	d413      	bmi.n	800ba2e <_printf_i+0x23a>
 800ba06:	68e0      	ldr	r0, [r4, #12]
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	4298      	cmp	r0, r3
 800ba0c:	bfb8      	it	lt
 800ba0e:	4618      	movlt	r0, r3
 800ba10:	e7a4      	b.n	800b95c <_printf_i+0x168>
 800ba12:	2301      	movs	r3, #1
 800ba14:	4632      	mov	r2, r6
 800ba16:	4649      	mov	r1, r9
 800ba18:	4640      	mov	r0, r8
 800ba1a:	47d0      	blx	sl
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	d09b      	beq.n	800b958 <_printf_i+0x164>
 800ba20:	3501      	adds	r5, #1
 800ba22:	68e3      	ldr	r3, [r4, #12]
 800ba24:	9903      	ldr	r1, [sp, #12]
 800ba26:	1a5b      	subs	r3, r3, r1
 800ba28:	42ab      	cmp	r3, r5
 800ba2a:	dcf2      	bgt.n	800ba12 <_printf_i+0x21e>
 800ba2c:	e7eb      	b.n	800ba06 <_printf_i+0x212>
 800ba2e:	2500      	movs	r5, #0
 800ba30:	f104 0619 	add.w	r6, r4, #25
 800ba34:	e7f5      	b.n	800ba22 <_printf_i+0x22e>
 800ba36:	bf00      	nop
 800ba38:	0800bd71 	.word	0x0800bd71
 800ba3c:	0800bd82 	.word	0x0800bd82

0800ba40 <memcpy>:
 800ba40:	440a      	add	r2, r1
 800ba42:	4291      	cmp	r1, r2
 800ba44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba48:	d100      	bne.n	800ba4c <memcpy+0xc>
 800ba4a:	4770      	bx	lr
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba56:	4291      	cmp	r1, r2
 800ba58:	d1f9      	bne.n	800ba4e <memcpy+0xe>
 800ba5a:	bd10      	pop	{r4, pc}

0800ba5c <memmove>:
 800ba5c:	4288      	cmp	r0, r1
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	eb01 0402 	add.w	r4, r1, r2
 800ba64:	d902      	bls.n	800ba6c <memmove+0x10>
 800ba66:	4284      	cmp	r4, r0
 800ba68:	4623      	mov	r3, r4
 800ba6a:	d807      	bhi.n	800ba7c <memmove+0x20>
 800ba6c:	1e43      	subs	r3, r0, #1
 800ba6e:	42a1      	cmp	r1, r4
 800ba70:	d008      	beq.n	800ba84 <memmove+0x28>
 800ba72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba7a:	e7f8      	b.n	800ba6e <memmove+0x12>
 800ba7c:	4402      	add	r2, r0
 800ba7e:	4601      	mov	r1, r0
 800ba80:	428a      	cmp	r2, r1
 800ba82:	d100      	bne.n	800ba86 <memmove+0x2a>
 800ba84:	bd10      	pop	{r4, pc}
 800ba86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba8e:	e7f7      	b.n	800ba80 <memmove+0x24>

0800ba90 <_free_r>:
 800ba90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba92:	2900      	cmp	r1, #0
 800ba94:	d044      	beq.n	800bb20 <_free_r+0x90>
 800ba96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba9a:	9001      	str	r0, [sp, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f1a1 0404 	sub.w	r4, r1, #4
 800baa2:	bfb8      	it	lt
 800baa4:	18e4      	addlt	r4, r4, r3
 800baa6:	f000 f913 	bl	800bcd0 <__malloc_lock>
 800baaa:	4a1e      	ldr	r2, [pc, #120]	; (800bb24 <_free_r+0x94>)
 800baac:	9801      	ldr	r0, [sp, #4]
 800baae:	6813      	ldr	r3, [r2, #0]
 800bab0:	b933      	cbnz	r3, 800bac0 <_free_r+0x30>
 800bab2:	6063      	str	r3, [r4, #4]
 800bab4:	6014      	str	r4, [r2, #0]
 800bab6:	b003      	add	sp, #12
 800bab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800babc:	f000 b90e 	b.w	800bcdc <__malloc_unlock>
 800bac0:	42a3      	cmp	r3, r4
 800bac2:	d908      	bls.n	800bad6 <_free_r+0x46>
 800bac4:	6825      	ldr	r5, [r4, #0]
 800bac6:	1961      	adds	r1, r4, r5
 800bac8:	428b      	cmp	r3, r1
 800baca:	bf01      	itttt	eq
 800bacc:	6819      	ldreq	r1, [r3, #0]
 800bace:	685b      	ldreq	r3, [r3, #4]
 800bad0:	1949      	addeq	r1, r1, r5
 800bad2:	6021      	streq	r1, [r4, #0]
 800bad4:	e7ed      	b.n	800bab2 <_free_r+0x22>
 800bad6:	461a      	mov	r2, r3
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	b10b      	cbz	r3, 800bae0 <_free_r+0x50>
 800badc:	42a3      	cmp	r3, r4
 800bade:	d9fa      	bls.n	800bad6 <_free_r+0x46>
 800bae0:	6811      	ldr	r1, [r2, #0]
 800bae2:	1855      	adds	r5, r2, r1
 800bae4:	42a5      	cmp	r5, r4
 800bae6:	d10b      	bne.n	800bb00 <_free_r+0x70>
 800bae8:	6824      	ldr	r4, [r4, #0]
 800baea:	4421      	add	r1, r4
 800baec:	1854      	adds	r4, r2, r1
 800baee:	42a3      	cmp	r3, r4
 800baf0:	6011      	str	r1, [r2, #0]
 800baf2:	d1e0      	bne.n	800bab6 <_free_r+0x26>
 800baf4:	681c      	ldr	r4, [r3, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	6053      	str	r3, [r2, #4]
 800bafa:	4421      	add	r1, r4
 800bafc:	6011      	str	r1, [r2, #0]
 800bafe:	e7da      	b.n	800bab6 <_free_r+0x26>
 800bb00:	d902      	bls.n	800bb08 <_free_r+0x78>
 800bb02:	230c      	movs	r3, #12
 800bb04:	6003      	str	r3, [r0, #0]
 800bb06:	e7d6      	b.n	800bab6 <_free_r+0x26>
 800bb08:	6825      	ldr	r5, [r4, #0]
 800bb0a:	1961      	adds	r1, r4, r5
 800bb0c:	428b      	cmp	r3, r1
 800bb0e:	bf04      	itt	eq
 800bb10:	6819      	ldreq	r1, [r3, #0]
 800bb12:	685b      	ldreq	r3, [r3, #4]
 800bb14:	6063      	str	r3, [r4, #4]
 800bb16:	bf04      	itt	eq
 800bb18:	1949      	addeq	r1, r1, r5
 800bb1a:	6021      	streq	r1, [r4, #0]
 800bb1c:	6054      	str	r4, [r2, #4]
 800bb1e:	e7ca      	b.n	800bab6 <_free_r+0x26>
 800bb20:	b003      	add	sp, #12
 800bb22:	bd30      	pop	{r4, r5, pc}
 800bb24:	24000288 	.word	0x24000288

0800bb28 <sbrk_aligned>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	4e0e      	ldr	r6, [pc, #56]	; (800bb64 <sbrk_aligned+0x3c>)
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	6831      	ldr	r1, [r6, #0]
 800bb30:	4605      	mov	r5, r0
 800bb32:	b911      	cbnz	r1, 800bb3a <sbrk_aligned+0x12>
 800bb34:	f000 f8bc 	bl	800bcb0 <_sbrk_r>
 800bb38:	6030      	str	r0, [r6, #0]
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	f000 f8b7 	bl	800bcb0 <_sbrk_r>
 800bb42:	1c43      	adds	r3, r0, #1
 800bb44:	d00a      	beq.n	800bb5c <sbrk_aligned+0x34>
 800bb46:	1cc4      	adds	r4, r0, #3
 800bb48:	f024 0403 	bic.w	r4, r4, #3
 800bb4c:	42a0      	cmp	r0, r4
 800bb4e:	d007      	beq.n	800bb60 <sbrk_aligned+0x38>
 800bb50:	1a21      	subs	r1, r4, r0
 800bb52:	4628      	mov	r0, r5
 800bb54:	f000 f8ac 	bl	800bcb0 <_sbrk_r>
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d101      	bne.n	800bb60 <sbrk_aligned+0x38>
 800bb5c:	f04f 34ff 	mov.w	r4, #4294967295
 800bb60:	4620      	mov	r0, r4
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	2400028c 	.word	0x2400028c

0800bb68 <_malloc_r>:
 800bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6c:	1ccd      	adds	r5, r1, #3
 800bb6e:	f025 0503 	bic.w	r5, r5, #3
 800bb72:	3508      	adds	r5, #8
 800bb74:	2d0c      	cmp	r5, #12
 800bb76:	bf38      	it	cc
 800bb78:	250c      	movcc	r5, #12
 800bb7a:	2d00      	cmp	r5, #0
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	db01      	blt.n	800bb84 <_malloc_r+0x1c>
 800bb80:	42a9      	cmp	r1, r5
 800bb82:	d905      	bls.n	800bb90 <_malloc_r+0x28>
 800bb84:	230c      	movs	r3, #12
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	2600      	movs	r6, #0
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb90:	4e2e      	ldr	r6, [pc, #184]	; (800bc4c <_malloc_r+0xe4>)
 800bb92:	f000 f89d 	bl	800bcd0 <__malloc_lock>
 800bb96:	6833      	ldr	r3, [r6, #0]
 800bb98:	461c      	mov	r4, r3
 800bb9a:	bb34      	cbnz	r4, 800bbea <_malloc_r+0x82>
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	4638      	mov	r0, r7
 800bba0:	f7ff ffc2 	bl	800bb28 <sbrk_aligned>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	4604      	mov	r4, r0
 800bba8:	d14d      	bne.n	800bc46 <_malloc_r+0xde>
 800bbaa:	6834      	ldr	r4, [r6, #0]
 800bbac:	4626      	mov	r6, r4
 800bbae:	2e00      	cmp	r6, #0
 800bbb0:	d140      	bne.n	800bc34 <_malloc_r+0xcc>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	eb04 0803 	add.w	r8, r4, r3
 800bbbc:	f000 f878 	bl	800bcb0 <_sbrk_r>
 800bbc0:	4580      	cmp	r8, r0
 800bbc2:	d13a      	bne.n	800bc3a <_malloc_r+0xd2>
 800bbc4:	6821      	ldr	r1, [r4, #0]
 800bbc6:	3503      	adds	r5, #3
 800bbc8:	1a6d      	subs	r5, r5, r1
 800bbca:	f025 0503 	bic.w	r5, r5, #3
 800bbce:	3508      	adds	r5, #8
 800bbd0:	2d0c      	cmp	r5, #12
 800bbd2:	bf38      	it	cc
 800bbd4:	250c      	movcc	r5, #12
 800bbd6:	4629      	mov	r1, r5
 800bbd8:	4638      	mov	r0, r7
 800bbda:	f7ff ffa5 	bl	800bb28 <sbrk_aligned>
 800bbde:	3001      	adds	r0, #1
 800bbe0:	d02b      	beq.n	800bc3a <_malloc_r+0xd2>
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	442b      	add	r3, r5
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	e00e      	b.n	800bc08 <_malloc_r+0xa0>
 800bbea:	6822      	ldr	r2, [r4, #0]
 800bbec:	1b52      	subs	r2, r2, r5
 800bbee:	d41e      	bmi.n	800bc2e <_malloc_r+0xc6>
 800bbf0:	2a0b      	cmp	r2, #11
 800bbf2:	d916      	bls.n	800bc22 <_malloc_r+0xba>
 800bbf4:	1961      	adds	r1, r4, r5
 800bbf6:	42a3      	cmp	r3, r4
 800bbf8:	6025      	str	r5, [r4, #0]
 800bbfa:	bf18      	it	ne
 800bbfc:	6059      	strne	r1, [r3, #4]
 800bbfe:	6863      	ldr	r3, [r4, #4]
 800bc00:	bf08      	it	eq
 800bc02:	6031      	streq	r1, [r6, #0]
 800bc04:	5162      	str	r2, [r4, r5]
 800bc06:	604b      	str	r3, [r1, #4]
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f104 060b 	add.w	r6, r4, #11
 800bc0e:	f000 f865 	bl	800bcdc <__malloc_unlock>
 800bc12:	f026 0607 	bic.w	r6, r6, #7
 800bc16:	1d23      	adds	r3, r4, #4
 800bc18:	1af2      	subs	r2, r6, r3
 800bc1a:	d0b6      	beq.n	800bb8a <_malloc_r+0x22>
 800bc1c:	1b9b      	subs	r3, r3, r6
 800bc1e:	50a3      	str	r3, [r4, r2]
 800bc20:	e7b3      	b.n	800bb8a <_malloc_r+0x22>
 800bc22:	6862      	ldr	r2, [r4, #4]
 800bc24:	42a3      	cmp	r3, r4
 800bc26:	bf0c      	ite	eq
 800bc28:	6032      	streq	r2, [r6, #0]
 800bc2a:	605a      	strne	r2, [r3, #4]
 800bc2c:	e7ec      	b.n	800bc08 <_malloc_r+0xa0>
 800bc2e:	4623      	mov	r3, r4
 800bc30:	6864      	ldr	r4, [r4, #4]
 800bc32:	e7b2      	b.n	800bb9a <_malloc_r+0x32>
 800bc34:	4634      	mov	r4, r6
 800bc36:	6876      	ldr	r6, [r6, #4]
 800bc38:	e7b9      	b.n	800bbae <_malloc_r+0x46>
 800bc3a:	230c      	movs	r3, #12
 800bc3c:	603b      	str	r3, [r7, #0]
 800bc3e:	4638      	mov	r0, r7
 800bc40:	f000 f84c 	bl	800bcdc <__malloc_unlock>
 800bc44:	e7a1      	b.n	800bb8a <_malloc_r+0x22>
 800bc46:	6025      	str	r5, [r4, #0]
 800bc48:	e7de      	b.n	800bc08 <_malloc_r+0xa0>
 800bc4a:	bf00      	nop
 800bc4c:	24000288 	.word	0x24000288

0800bc50 <_realloc_r>:
 800bc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc54:	4680      	mov	r8, r0
 800bc56:	4614      	mov	r4, r2
 800bc58:	460e      	mov	r6, r1
 800bc5a:	b921      	cbnz	r1, 800bc66 <_realloc_r+0x16>
 800bc5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc60:	4611      	mov	r1, r2
 800bc62:	f7ff bf81 	b.w	800bb68 <_malloc_r>
 800bc66:	b92a      	cbnz	r2, 800bc74 <_realloc_r+0x24>
 800bc68:	f7ff ff12 	bl	800ba90 <_free_r>
 800bc6c:	4625      	mov	r5, r4
 800bc6e:	4628      	mov	r0, r5
 800bc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc74:	f000 f838 	bl	800bce8 <_malloc_usable_size_r>
 800bc78:	4284      	cmp	r4, r0
 800bc7a:	4607      	mov	r7, r0
 800bc7c:	d802      	bhi.n	800bc84 <_realloc_r+0x34>
 800bc7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc82:	d812      	bhi.n	800bcaa <_realloc_r+0x5a>
 800bc84:	4621      	mov	r1, r4
 800bc86:	4640      	mov	r0, r8
 800bc88:	f7ff ff6e 	bl	800bb68 <_malloc_r>
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d0ed      	beq.n	800bc6e <_realloc_r+0x1e>
 800bc92:	42bc      	cmp	r4, r7
 800bc94:	4622      	mov	r2, r4
 800bc96:	4631      	mov	r1, r6
 800bc98:	bf28      	it	cs
 800bc9a:	463a      	movcs	r2, r7
 800bc9c:	f7ff fed0 	bl	800ba40 <memcpy>
 800bca0:	4631      	mov	r1, r6
 800bca2:	4640      	mov	r0, r8
 800bca4:	f7ff fef4 	bl	800ba90 <_free_r>
 800bca8:	e7e1      	b.n	800bc6e <_realloc_r+0x1e>
 800bcaa:	4635      	mov	r5, r6
 800bcac:	e7df      	b.n	800bc6e <_realloc_r+0x1e>
	...

0800bcb0 <_sbrk_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d06      	ldr	r5, [pc, #24]	; (800bccc <_sbrk_r+0x1c>)
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	4608      	mov	r0, r1
 800bcba:	602b      	str	r3, [r5, #0]
 800bcbc:	f7f5 f97c 	bl	8000fb8 <_sbrk>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_sbrk_r+0x1a>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_sbrk_r+0x1a>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	24000290 	.word	0x24000290

0800bcd0 <__malloc_lock>:
 800bcd0:	4801      	ldr	r0, [pc, #4]	; (800bcd8 <__malloc_lock+0x8>)
 800bcd2:	f000 b811 	b.w	800bcf8 <__retarget_lock_acquire_recursive>
 800bcd6:	bf00      	nop
 800bcd8:	24000294 	.word	0x24000294

0800bcdc <__malloc_unlock>:
 800bcdc:	4801      	ldr	r0, [pc, #4]	; (800bce4 <__malloc_unlock+0x8>)
 800bcde:	f000 b80c 	b.w	800bcfa <__retarget_lock_release_recursive>
 800bce2:	bf00      	nop
 800bce4:	24000294 	.word	0x24000294

0800bce8 <_malloc_usable_size_r>:
 800bce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcec:	1f18      	subs	r0, r3, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfbc      	itt	lt
 800bcf2:	580b      	ldrlt	r3, [r1, r0]
 800bcf4:	18c0      	addlt	r0, r0, r3
 800bcf6:	4770      	bx	lr

0800bcf8 <__retarget_lock_acquire_recursive>:
 800bcf8:	4770      	bx	lr

0800bcfa <__retarget_lock_release_recursive>:
 800bcfa:	4770      	bx	lr

0800bcfc <_init>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr

0800bd08 <_fini>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	bf00      	nop
 800bd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd0e:	bc08      	pop	{r3}
 800bd10:	469e      	mov	lr, r3
 800bd12:	4770      	bx	lr
