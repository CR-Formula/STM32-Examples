
DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800bed4  0800bed4  0001bed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf58  0800bf58  0001bf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf60  0800bf60  0001bf60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bf64  0800bf64  0001bf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800bf68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e0  24000060  0800bfc8  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000440  0800bfc8  00020440  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001573c  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000026c0  00000000  00000000  0003580d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ef0  00000000  00000000  00037ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b86  00000000  00000000  00038dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037e07  00000000  00000000  00039946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000156a1  00000000  00000000  0007174d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016af77  00000000  00000000  00086dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000447c  00000000  00000000  001f1d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001f61e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bebc 	.word	0x0800bebc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800bebc 	.word	0x0800bebc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fe81 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f839 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 fa8b 	bl	8000ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 800068e:	f000 fa69 	bl	8000b64 <MX_DMA_Init>
  MX_ADC1_Init();
 8000692:	f000 f8a5 	bl	80007e0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000696:	f000 fa19 	bl	8000acc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcResultsDMA, ADC_BUFFER_SIZE) != HAL_OK) {
 800069a:	2240      	movs	r2, #64	; 0x40
 800069c:	4911      	ldr	r1, [pc, #68]	; (80006e4 <main+0x68>)
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0x6c>)
 80006a0:	f001 fa9a 	bl	8001bd8 <HAL_ADC_Start_DMA>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <main+0x32>
  		  Error_Handler();
 80006aa:	f000 fbab 	bl	8000e04 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (adcConversionComplete == 1) {
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <main+0x70>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d1fb      	bne.n	80006ae <main+0x32>
		  sprintf(message, "%d - %d - %d\r\n", adcResultsDMA[3], adcResultsDMA[8], adcResultsDMA[11]);
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <main+0x68>)
 80006b8:	88db      	ldrh	r3, [r3, #6]
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <main+0x68>)
 80006be:	8a1b      	ldrh	r3, [r3, #16]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <main+0x68>)
 80006c4:	8adb      	ldrh	r3, [r3, #22]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	460b      	mov	r3, r1
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <main+0x74>)
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <main+0x78>)
 80006ce:	f00a ff51 	bl	800b574 <siprintf>
		  HAL_UART_Transmit_IT(&huart3, message, sizeof(message));
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <main+0x78>)
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <main+0x7c>)
 80006d8:	f009 f858 	bl	800978c <HAL_UART_Transmit_IT>
		  adcConversionComplete = 0;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <main+0x70>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
	  if (adcConversionComplete == 1) {
 80006e2:	e7e4      	b.n	80006ae <main+0x32>
 80006e4:	240001ec 	.word	0x240001ec
 80006e8:	2400007c 	.word	0x2400007c
 80006ec:	2400026c 	.word	0x2400026c
 80006f0:	0800bed4 	.word	0x0800bed4
 80006f4:	24000270 	.word	0x24000270
 80006f8:	24000158 	.word	0x24000158

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	; 0x70
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	224c      	movs	r2, #76	; 0x4c
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00a ff52 	bl	800b5b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f00a ff4c 	bl	800b5b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800071c:	2002      	movs	r0, #2
 800071e:	f005 fac7 	bl	8005cb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0xd8>)
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <SystemClock_Config+0xd8>)
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xd8>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <SystemClock_Config+0xdc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000744:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <SystemClock_Config+0xdc>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xdc>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000758:	bf00      	nop
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xdc>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000766:	d1f8      	bne.n	800075a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <SystemClock_Config+0xe0>)
 800076a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <SystemClock_Config+0xe0>)
 800076e:	f023 0303 	bic.w	r3, r3, #3
 8000772:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000778:	2301      	movs	r3, #1
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2340      	movs	r3, #64	; 0x40
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000788:	4618      	mov	r0, r3
 800078a:	f005 facb 	bl	8005d24 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000794:	f000 fb36 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	233f      	movs	r3, #63	; 0x3f
 800079a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ac:	2340      	movs	r3, #64	; 0x40
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2101      	movs	r1, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f005 ff0b 	bl	80065d8 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007c8:	f000 fb1c 	bl	8000e04 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3770      	adds	r7, #112	; 0x70
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58000400 	.word	0x58000400
 80007d8:	58024800 	.word	0x58024800
 80007dc:	58024400 	.word	0x58024400

080007e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000804:	4b9f      	ldr	r3, [pc, #636]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000806:	4aa0      	ldr	r2, [pc, #640]	; (8000a88 <MX_ADC1_Init+0x2a8>)
 8000808:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800080a:	4b9e      	ldr	r3, [pc, #632]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 800080c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000812:	4b9c      	ldr	r3, [pc, #624]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000818:	4b9a      	ldr	r3, [pc, #616]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 800081a:	2201      	movs	r2, #1
 800081c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b99      	ldr	r3, [pc, #612]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000820:	2204      	movs	r2, #4
 8000822:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000824:	4b97      	ldr	r3, [pc, #604]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000826:	2200      	movs	r2, #0
 8000828:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800082a:	4b96      	ldr	r3, [pc, #600]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 800082c:	2201      	movs	r2, #1
 800082e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 8000830:	4b94      	ldr	r3, [pc, #592]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000832:	2210      	movs	r2, #16
 8000834:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000836:	4b93      	ldr	r3, [pc, #588]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000838:	2200      	movs	r2, #0
 800083a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083c:	4b91      	ldr	r3, [pc, #580]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000842:	4b90      	ldr	r3, [pc, #576]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000848:	4b8e      	ldr	r3, [pc, #568]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 800084a:	2203      	movs	r2, #3
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800084e:	4b8d      	ldr	r3, [pc, #564]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000854:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000856:	4b8b      	ldr	r3, [pc, #556]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000858:	2200      	movs	r2, #0
 800085a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800085c:	4b89      	ldr	r3, [pc, #548]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000864:	4887      	ldr	r0, [pc, #540]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000866:	f001 f815 	bl	8001894 <HAL_ADC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000870:	f000 fac8 	bl	8000e04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4881      	ldr	r0, [pc, #516]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000880:	f002 f822 	bl	80028c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800088a:	f000 fabb 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800088e:	4b7f      	ldr	r3, [pc, #508]	; (8000a8c <MX_ADC1_Init+0x2ac>)
 8000890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000892:	2306      	movs	r3, #6
 8000894:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800089e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a0:	2304      	movs	r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4874      	ldr	r0, [pc, #464]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 80008b2:	f001 fa69 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80008bc:	f000 faa2 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	4b73      	ldr	r3, [pc, #460]	; (8000a90 <MX_ADC1_Init+0x2b0>)
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008c4:	230c      	movs	r3, #12
 80008c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	486d      	ldr	r0, [pc, #436]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 80008ce:	f001 fa5b 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80008d8:	f000 fa94 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008dc:	4b6d      	ldr	r3, [pc, #436]	; (8000a94 <MX_ADC1_Init+0x2b4>)
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008e0:	2312      	movs	r3, #18
 80008e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4866      	ldr	r0, [pc, #408]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 80008ea:	f001 fa4d 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80008f4:	f000 fa86 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008f8:	4b67      	ldr	r3, [pc, #412]	; (8000a98 <MX_ADC1_Init+0x2b8>)
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008fc:	2318      	movs	r3, #24
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	485f      	ldr	r0, [pc, #380]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000906:	f001 fa3f 	bl	8001d88 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000910:	f000 fa78 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000914:	4b61      	ldr	r3, [pc, #388]	; (8000a9c <MX_ADC1_Init+0x2bc>)
 8000916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4858      	ldr	r0, [pc, #352]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000924:	f001 fa30 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800092e:	f000 fa69 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <MX_ADC1_Init+0x2c0>)
 8000934:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000936:	f44f 7383 	mov.w	r3, #262	; 0x106
 800093a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4850      	ldr	r0, [pc, #320]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000942:	f001 fa21 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800094c:	f000 fa5a 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000950:	4b54      	ldr	r3, [pc, #336]	; (8000aa4 <MX_ADC1_Init+0x2c4>)
 8000952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000954:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000958:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4849      	ldr	r0, [pc, #292]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000960:	f001 fa12 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800096a:	f000 fa4b 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800096e:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <MX_ADC1_Init+0x2c8>)
 8000970:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000972:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4841      	ldr	r0, [pc, #260]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 800097e:	f001 fa03 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000988:	f000 fa3c 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800098c:	4b47      	ldr	r3, [pc, #284]	; (8000aac <MX_ADC1_Init+0x2cc>)
 800098e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000990:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000994:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	483a      	ldr	r0, [pc, #232]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 800099c:	f001 f9f4 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80009a6:	f000 fa2d 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <MX_ADC1_Init+0x2d0>)
 80009ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80009ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4832      	ldr	r0, [pc, #200]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 80009ba:	f001 f9e5 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80009c4:	f000 fa1e 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009c8:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_ADC1_Init+0x2d4>)
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80009cc:	f240 2306 	movw	r3, #518	; 0x206
 80009d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	482b      	ldr	r0, [pc, #172]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 80009d8:	f001 f9d6 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80009e2:	f000 fa0f 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <MX_ADC1_Init+0x2d8>)
 80009e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80009ea:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80009ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4823      	ldr	r0, [pc, #140]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 80009f6:	f001 f9c7 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8000a00:	f000 fa00 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_ADC1_Init+0x2dc>)
 8000a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000a08:	f240 2312 	movw	r3, #530	; 0x212
 8000a0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	481c      	ldr	r0, [pc, #112]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000a14:	f001 f9b8 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 8000a1e:	f000 f9f1 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_ADC1_Init+0x2e0>)
 8000a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000a26:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000a32:	f001 f9a9 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 8000a3c:	f000 f9e2 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a40:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_ADC1_Init+0x2e4>)
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000a44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000a50:	f001 f99a 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC1_Init+0x27e>
  {
    Error_Handler();
 8000a5a:	f000 f9d3 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_ADC1_Init+0x2e8>)
 8000a60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000a62:	f240 3306 	movw	r3, #774	; 0x306
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_ADC1_Init+0x2a4>)
 8000a6e:	f001 f98b 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x29c>
  {
    Error_Handler();
 8000a78:	f000 f9c4 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2400007c 	.word	0x2400007c
 8000a88:	40022000 	.word	0x40022000
 8000a8c:	08600004 	.word	0x08600004
 8000a90:	0c900008 	.word	0x0c900008
 8000a94:	10c00010 	.word	0x10c00010
 8000a98:	14f00020 	.word	0x14f00020
 8000a9c:	19200040 	.word	0x19200040
 8000aa0:	1d500080 	.word	0x1d500080
 8000aa4:	21800100 	.word	0x21800100
 8000aa8:	25b00200 	.word	0x25b00200
 8000aac:	2a000400 	.word	0x2a000400
 8000ab0:	2e300800 	.word	0x2e300800
 8000ab4:	3ac04000 	.word	0x3ac04000
 8000ab8:	3ef08000 	.word	0x3ef08000
 8000abc:	43210000 	.word	0x43210000
 8000ac0:	47520000 	.word	0x47520000
 8000ac4:	4b840000 	.word	0x4b840000
 8000ac8:	4fb80000 	.word	0x4fb80000

08000acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ad2:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <MX_USART3_UART_Init+0x94>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b16:	f008 fde9 	bl	80096ec <HAL_UART_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b20:	f000 f970 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b28:	f00a fc5a 	bl	800b3e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 f967 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4808      	ldr	r0, [pc, #32]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b3a:	f00a fc8f 	bl	800b45c <HAL_UARTEx_SetRxFifoThreshold>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f000 f95e 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b4a:	f00a fc10 	bl	800b36e <HAL_UARTEx_DisableFifoMode>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f956 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000158 	.word	0x24000158
 8000b60:	40004800 	.word	0x40004800

08000b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_DMA_Init+0x3c>)
 8000b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <MX_DMA_Init+0x3c>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_DMA_Init+0x3c>)
 8000b7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	200b      	movs	r0, #11
 8000b8e:	f002 f854 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b92:	200b      	movs	r0, #11
 8000b94:	f002 f86b 	bl	8002c6e <HAL_NVIC_EnableIRQ>

}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b83      	ldr	r3, [pc, #524]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a81      	ldr	r2, [pc, #516]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b7f      	ldr	r3, [pc, #508]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	623b      	str	r3, [r7, #32]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd8:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a7a      	ldr	r2, [pc, #488]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b77      	ldr	r3, [pc, #476]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b74      	ldr	r3, [pc, #464]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a72      	ldr	r2, [pc, #456]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b70      	ldr	r3, [pc, #448]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b6c      	ldr	r3, [pc, #432]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a6b      	ldr	r2, [pc, #428]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c32:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a63      	ldr	r2, [pc, #396]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c3a:	f043 0320 	orr.w	r3, r3, #32
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b61      	ldr	r3, [pc, #388]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0320 	and.w	r3, r3, #32
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a5c      	ldr	r2, [pc, #368]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b59      	ldr	r3, [pc, #356]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6e:	4b56      	ldr	r3, [pc, #344]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a54      	ldr	r2, [pc, #336]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b52      	ldr	r3, [pc, #328]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8c:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	4a4d      	ldr	r2, [pc, #308]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9c:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <MX_GPIO_Init+0x224>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb0:	4846      	ldr	r0, [pc, #280]	; (8000dcc <MX_GPIO_Init+0x228>)
 8000cb2:	f004 ffe3 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbc:	4844      	ldr	r0, [pc, #272]	; (8000dd0 <MX_GPIO_Init+0x22c>)
 8000cbe:	f004 ffdd 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4843      	ldr	r0, [pc, #268]	; (8000dd4 <MX_GPIO_Init+0x230>)
 8000cc8:	f004 ffd8 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	483d      	ldr	r0, [pc, #244]	; (8000dd8 <MX_GPIO_Init+0x234>)
 8000ce2:	f004 fe1b 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf8:	230b      	movs	r3, #11
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4832      	ldr	r0, [pc, #200]	; (8000dcc <MX_GPIO_Init+0x228>)
 8000d04:	f004 fe0a 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482a      	ldr	r0, [pc, #168]	; (8000dcc <MX_GPIO_Init+0x228>)
 8000d22:	f004 fdfb 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <MX_GPIO_Init+0x22c>)
 8000d40:	f004 fdec 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4820      	ldr	r0, [pc, #128]	; (8000ddc <MX_GPIO_Init+0x238>)
 8000d5a:	f004 fddf 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d5e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d70:	230a      	movs	r3, #10
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4819      	ldr	r0, [pc, #100]	; (8000de0 <MX_GPIO_Init+0x23c>)
 8000d7c:	f004 fdce 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d92:	230b      	movs	r3, #11
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480f      	ldr	r0, [pc, #60]	; (8000ddc <MX_GPIO_Init+0x238>)
 8000d9e:	f004 fdbd 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000da2:	2302      	movs	r3, #2
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_GPIO_Init+0x230>)
 8000dba:	f004 fdaf 	bl	800591c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3738      	adds	r7, #56	; 0x38
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	58020c00 	.word	0x58020c00
 8000dd4:	58021000 	.word	0x58021000
 8000dd8:	58020800 	.word	0x58020800
 8000ddc:	58021800 	.word	0x58021800
 8000de0:	58020000 	.word	0x58020000

08000de4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  adcConversionComplete = 1;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2400026c 	.word	0x2400026c

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_MspInit+0x30>)
 8000e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x30>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x30>)
 8000e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	58024400 	.word	0x58024400

08000e44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0be      	sub	sp, #248	; 0xf8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	22c0      	movs	r2, #192	; 0xc0
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f00a fba5 	bl	800b5b4 <memset>
  if(hadc->Instance==ADC1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a72      	ldr	r2, [pc, #456]	; (8001038 <HAL_ADC_MspInit+0x1f4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f040 80dd 	bne.w	8001030 <HAL_ADC_MspInit+0x1ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000e82:	2304      	movs	r3, #4
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000e86:	2309      	movs	r3, #9
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e96:	23c0      	movs	r3, #192	; 0xc0
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000e9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ea2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 ff1e 	bl	8006cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000eba:	f7ff ffa3 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec4:	4a5d      	ldr	r2, [pc, #372]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000ec6:	f043 0320 	orr.w	r3, r3, #32
 8000eca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ece:	4b5b      	ldr	r3, [pc, #364]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b57      	ldr	r3, [pc, #348]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	4a56      	ldr	r2, [pc, #344]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eec:	4b53      	ldr	r3, [pc, #332]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b50      	ldr	r3, [pc, #320]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	4a4e      	ldr	r2, [pc, #312]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0a:	4b4c      	ldr	r3, [pc, #304]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f18:	4b48      	ldr	r3, [pc, #288]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a47      	ldr	r2, [pc, #284]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b44      	ldr	r3, [pc, #272]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a3f      	ldr	r2, [pc, #252]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000f3e:	f043 0320 	orr.w	r3, r3, #32
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b3d      	ldr	r3, [pc, #244]	; (800103c <HAL_ADC_MspInit+0x1f8>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f54:	2333      	movs	r3, #51	; 0x33
 8000f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4834      	ldr	r0, [pc, #208]	; (8001040 <HAL_ADC_MspInit+0x1fc>)
 8000f6e:	f004 fcd5 	bl	800591c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f72:	23ff      	movs	r3, #255	; 0xff
 8000f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482e      	ldr	r0, [pc, #184]	; (8001044 <HAL_ADC_MspInit+0x200>)
 8000f8c:	f004 fcc6 	bl	800591c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4827      	ldr	r0, [pc, #156]	; (8001048 <HAL_ADC_MspInit+0x204>)
 8000faa:	f004 fcb7 	bl	800591c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4820      	ldr	r0, [pc, #128]	; (800104c <HAL_ADC_MspInit+0x208>)
 8000fca:	f004 fca7 	bl	800591c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_ADC_MspInit+0x210>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8000fd6:	2209      	movs	r2, #9
 8000fd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8000fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8000ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8000ff8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8001000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001004:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8001008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001014:	480e      	ldr	r0, [pc, #56]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8001016:	f001 fe45 	bl	8002ca4 <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0x1e0>
    {
      Error_Handler();
 8001020:	f7ff fef0 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 8001028:	64da      	str	r2, [r3, #76]	; 0x4c
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <HAL_ADC_MspInit+0x20c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	37f8      	adds	r7, #248	; 0xf8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40022000 	.word	0x40022000
 800103c:	58024400 	.word	0x58024400
 8001040:	58020800 	.word	0x58020800
 8001044:	58020000 	.word	0x58020000
 8001048:	58020400 	.word	0x58020400
 800104c:	58021400 	.word	0x58021400
 8001050:	240000e0 	.word	0x240000e0
 8001054:	40020010 	.word	0x40020010

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ba      	sub	sp, #232	; 0xe8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	22c0      	movs	r2, #192	; 0xc0
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00a fa9b 	bl	800b5b4 <memset>
  if(huart->Instance==USART3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a2b      	ldr	r2, [pc, #172]	; (8001130 <HAL_UART_MspInit+0xd8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d14e      	bne.n	8001126 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001088:	f04f 0202 	mov.w	r2, #2
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 fe26 	bl	8006cf0 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010aa:	f7ff feab 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_UART_MspInit+0xdc>)
 80010b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b4:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_UART_MspInit+0xdc>)
 80010b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_UART_MspInit+0xdc>)
 80010c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_UART_MspInit+0xdc>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	4a18      	ldr	r2, [pc, #96]	; (8001134 <HAL_UART_MspInit+0xdc>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0xdc>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001104:	2307      	movs	r3, #7
 8001106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800110e:	4619      	mov	r1, r3
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_UART_MspInit+0xe0>)
 8001112:	f004 fc03 	bl	800591c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2027      	movs	r0, #39	; 0x27
 800111c:	f001 fd8d 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001120:	2027      	movs	r0, #39	; 0x27
 8001122:	f001 fda4 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	37e8      	adds	r7, #232	; 0xe8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40004800 	.word	0x40004800
 8001134:	58024400 	.word	0x58024400
 8001138:	58020c00 	.word	0x58020c00

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f970 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001196:	f003 f8af 	bl	80042f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	240000e0 	.word	0x240000e0

080011a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <USART3_IRQHandler+0x10>)
 80011aa:	f008 fb83 	bl	80098b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000158 	.word	0x24000158

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f00a f9ec 	bl	800b5c4 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	24080000 	.word	0x24080000
 8001218:	00000400 	.word	0x00000400
 800121c:	240002f0 	.word	0x240002f0
 8001220:	24000440 	.word	0x24000440

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001228:	4b37      	ldr	r3, [pc, #220]	; (8001308 <SystemInit+0xe4>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a36      	ldr	r2, [pc, #216]	; (8001308 <SystemInit+0xe4>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <SystemInit+0xe8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	2b06      	cmp	r3, #6
 8001242:	d807      	bhi.n	8001254 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <SystemInit+0xe8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 030f 	bic.w	r3, r3, #15
 800124c:	4a2f      	ldr	r2, [pc, #188]	; (800130c <SystemInit+0xe8>)
 800124e:	f043 0307 	orr.w	r3, r3, #7
 8001252:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <SystemInit+0xec>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <SystemInit+0xec>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <SystemInit+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <SystemInit+0xec>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4929      	ldr	r1, [pc, #164]	; (8001310 <SystemInit+0xec>)
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <SystemInit+0xf0>)
 800126e:	4013      	ands	r3, r2
 8001270:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <SystemInit+0xe8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <SystemInit+0xe8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <SystemInit+0xe8>)
 8001288:	f043 0307 	orr.w	r3, r3, #7
 800128c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <SystemInit+0xec>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <SystemInit+0xec>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <SystemInit+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <SystemInit+0xec>)
 80012a2:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <SystemInit+0xf4>)
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <SystemInit+0xec>)
 80012a8:	4a1c      	ldr	r2, [pc, #112]	; (800131c <SystemInit+0xf8>)
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <SystemInit+0xec>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <SystemInit+0xfc>)
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <SystemInit+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <SystemInit+0xec>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <SystemInit+0xfc>)
 80012bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <SystemInit+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <SystemInit+0xec>)
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <SystemInit+0xfc>)
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <SystemInit+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <SystemInit+0xec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <SystemInit+0xec>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <SystemInit+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <SystemInit+0x100>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <SystemInit+0x104>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012ee:	d202      	bcs.n	80012f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <SystemInit+0x108>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <SystemInit+0x10c>)
 80012f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	52002000 	.word	0x52002000
 8001310:	58024400 	.word	0x58024400
 8001314:	eaf6ed7f 	.word	0xeaf6ed7f
 8001318:	02020200 	.word	0x02020200
 800131c:	01ff0000 	.word	0x01ff0000
 8001320:	01010280 	.word	0x01010280
 8001324:	5c001000 	.word	0x5c001000
 8001328:	ffff0000 	.word	0xffff0000
 800132c:	51008108 	.word	0x51008108
 8001330:	52004000 	.word	0x52004000

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800136c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001338:	f7ff ff74 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	; (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001362:	f00a f935 	bl	800b5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff f989 	bl	800067c <main>
  bx  lr
 800136a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001370:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001374:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001378:	0800bf68 	.word	0x0800bf68
  ldr r2, =_sbss
 800137c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001380:	24000440 	.word	0x24000440

08001384 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC3_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138e:	2003      	movs	r0, #3
 8001390:	f001 fc48 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001394:	f005 fad6 	bl	8006944 <HAL_RCC_GetSysClockFreq>
 8001398:	4602      	mov	r2, r0
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_Init+0x68>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	4913      	ldr	r1, [pc, #76]	; (80013f4 <HAL_Init+0x6c>)
 80013a6:	5ccb      	ldrb	r3, [r1, r3]
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_Init+0x68>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_Init+0x6c>)
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_Init+0x70>)
 80013ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <HAL_Init+0x74>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f814 	bl	8001400 <HAL_InitTick>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e002      	b.n	80013e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013e2:	f7ff fd15 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58024400 	.word	0x58024400
 80013f4:	0800bee4 	.word	0x0800bee4
 80013f8:	24000004 	.word	0x24000004
 80013fc:	24000000 	.word	0x24000000

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_InitTick+0x60>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e021      	b.n	8001458 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_InitTick+0x64>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_InitTick+0x60>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fc2d 	bl	8002c8a <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f001 fbf7 	bl	8002c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x68>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2400000c 	.word	0x2400000c
 8001464:	24000000 	.word	0x24000000
 8001468:	24000008 	.word	0x24000008

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2400000c 	.word	0x2400000c
 8001490:	240002f4 	.word	0x240002f4

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	240002f4 	.word	0x240002f4

080014ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetREVID+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1b      	lsrs	r3, r3, #16
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	5c001000 	.word	0x5c001000

080014c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	609a      	str	r2, [r3, #8]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3360      	adds	r3, #96	; 0x60
 800153e:	461a      	mov	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	430b      	orrs	r3, r1
 800155a:	431a      	orrs	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001560:	bf00      	nop
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	611a      	str	r2, [r3, #16]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800159e:	b480      	push	{r7}
 80015a0:	b087      	sub	sp, #28
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3360      	adds	r3, #96	; 0x60
 80015ae:	461a      	mov	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]
  }
}
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b087      	sub	sp, #28
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3330      	adds	r3, #48	; 0x30
 800160a:	461a      	mov	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	4413      	add	r3, r2
 8001618:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	211f      	movs	r1, #31
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	0e9b      	lsrs	r3, r3, #26
 8001632:	f003 011f 	and.w	r1, r3, #31
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001646:	bf00      	nop
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f023 0203 	bic.w	r2, r3, #3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3314      	adds	r3, #20
 8001688:	461a      	mov	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	0e5b      	lsrs	r3, r3, #25
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	4413      	add	r3, r2
 8001696:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	0d1b      	lsrs	r3, r3, #20
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2107      	movs	r1, #7
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	401a      	ands	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	0d1b      	lsrs	r3, r3, #20
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016e8:	43db      	mvns	r3, r3
 80016ea:	401a      	ands	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0318 	and.w	r3, r3, #24
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016f4:	40d9      	lsrs	r1, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	400b      	ands	r3, r1
 80016fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016fe:	431a      	orrs	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	000fffff 	.word	0x000fffff

08001718 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 031f 	and.w	r3, r3, #31
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6093      	str	r3, [r2, #8]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	5fffffc0 	.word	0x5fffffc0

08001758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800176c:	d101      	bne.n	8001772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800178e:	4013      	ands	r3, r2
 8001790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	6fffffc0 	.word	0x6fffffc0

080017a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <LL_ADC_Enable+0x24>)
 80017de:	4013      	ands	r3, r2
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	7fffffc0 	.word	0x7fffffc0

080017f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <LL_ADC_IsEnabled+0x18>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <LL_ADC_IsEnabled+0x1a>
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <LL_ADC_REG_StartConversion+0x24>)
 800182e:	4013      	ands	r3, r2
 8001830:	f043 0204 	orr.w	r2, r3, #4
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	7fffffc0 	.word	0x7fffffc0

08001848 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b04      	cmp	r3, #4
 800185a:	d101      	bne.n	8001860 <LL_ADC_REG_IsConversionOngoing+0x18>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b08      	cmp	r3, #8
 8001880:	d101      	bne.n	8001886 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e18f      	b.n	8001bce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fac1 	bl	8000e44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff3f 	bl	8001758 <LL_ADC_IsDeepPowerDownEnabled>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff25 	bl	8001734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff5a 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d114      	bne.n	8001924 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff3e 	bl	8001780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001904:	4b87      	ldr	r3, [pc, #540]	; (8001b24 <HAL_ADC_Init+0x290>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	4a87      	ldr	r2, [pc, #540]	; (8001b28 <HAL_ADC_Init+0x294>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	3301      	adds	r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001916:	e002      	b.n	800191e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3b01      	subs	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f9      	bne.n	8001918 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff3d 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10d      	bne.n	8001950 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	f043 0210 	orr.w	r2, r3, #16
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff77 	bl	8001848 <LL_ADC_REG_IsConversionOngoing>
 800195a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 8129 	bne.w	8001bbc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f040 8125 	bne.w	8001bbc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff36 	bl	80017f8 <LL_ADC_IsEnabled>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d136      	bne.n	8001a00 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_ADC_Init+0x298>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d004      	beq.n	80019a6 <HAL_ADC_Init+0x112>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <HAL_ADC_Init+0x29c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10e      	bne.n	80019c4 <HAL_ADC_Init+0x130>
 80019a6:	4861      	ldr	r0, [pc, #388]	; (8001b2c <HAL_ADC_Init+0x298>)
 80019a8:	f7ff ff26 	bl	80017f8 <LL_ADC_IsEnabled>
 80019ac:	4604      	mov	r4, r0
 80019ae:	4860      	ldr	r0, [pc, #384]	; (8001b30 <HAL_ADC_Init+0x29c>)
 80019b0:	f7ff ff22 	bl	80017f8 <LL_ADC_IsEnabled>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4323      	orrs	r3, r4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e008      	b.n	80019d6 <HAL_ADC_Init+0x142>
 80019c4:	485b      	ldr	r0, [pc, #364]	; (8001b34 <HAL_ADC_Init+0x2a0>)
 80019c6:	f7ff ff17 	bl	80017f8 <LL_ADC_IsEnabled>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d012      	beq.n	8001a00 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_ADC_Init+0x298>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_Init+0x15a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_ADC_Init+0x29c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Init+0x15e>
 80019ee:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <HAL_ADC_Init+0x2a4>)
 80019f0:	e000      	b.n	80019f4 <HAL_ADC_Init+0x160>
 80019f2:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_ADC_Init+0x2a8>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7ff fd62 	bl	80014c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a00:	f7ff fd54 	bl	80014ac <HAL_GetREVID>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d914      	bls.n	8001a38 <HAL_ADC_Init+0x1a4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d110      	bne.n	8001a38 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7d5b      	ldrb	r3, [r3, #21]
 8001a1a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a20:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a26:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7f1b      	ldrb	r3, [r3, #28]
 8001a2c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a2e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a30:	f043 030c 	orr.w	r3, r3, #12
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	e00d      	b.n	8001a54 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7d5b      	ldrb	r3, [r3, #21]
 8001a3c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a42:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a48:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7f1b      	ldrb	r3, [r3, #28]
 8001a4e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7f1b      	ldrb	r3, [r3, #28]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	045b      	lsls	r3, r3, #17
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <HAL_ADC_Init+0x2ac>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	69b9      	ldr	r1, [r7, #24]
 8001a96:	430b      	orrs	r3, r1
 8001a98:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fed2 	bl	8001848 <LL_ADC_REG_IsConversionOngoing>
 8001aa4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fedf 	bl	800186e <LL_ADC_INJ_IsConversionOngoing>
 8001ab0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d15f      	bne.n	8001b78 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d15c      	bne.n	8001b78 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7d1b      	ldrb	r3, [r3, #20]
 8001ac2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_ADC_Init+0x2b0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d130      	bne.n	8001b4c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_ADC_Init+0x2b4>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001afe:	3a01      	subs	r2, #1
 8001b00:	0411      	lsls	r1, r2, #16
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b06:	4311      	orrs	r1, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b12:	430a      	orrs	r2, r1
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	e01c      	b.n	8001b5c <HAL_ADC_Init+0x2c8>
 8001b22:	bf00      	nop
 8001b24:	24000000 	.word	0x24000000
 8001b28:	053e2d63 	.word	0x053e2d63
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40022100 	.word	0x40022100
 8001b34:	58026000 	.word	0x58026000
 8001b38:	40022300 	.word	0x40022300
 8001b3c:	58026300 	.word	0x58026300
 8001b40:	fff0c003 	.word	0xfff0c003
 8001b44:	ffffbffc 	.word	0xffffbffc
 8001b48:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fd76 	bl	8002664 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d10c      	bne.n	8001b9a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f023 010f 	bic.w	r1, r3, #15
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	1e5a      	subs	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
 8001b98:	e007      	b.n	8001baa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 020f 	bic.w	r2, r2, #15
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54
 8001bba:	e007      	b.n	8001bcc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f043 0210 	orr.w	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}
 8001bd6:	bf00      	nop

08001bd8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a55      	ldr	r2, [pc, #340]	; (8001d40 <HAL_ADC_Start_DMA+0x168>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_ADC_Start_DMA+0x20>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a54      	ldr	r2, [pc, #336]	; (8001d44 <HAL_ADC_Start_DMA+0x16c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_Start_DMA+0x24>
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_ADC_Start_DMA+0x170>)
 8001bfa:	e000      	b.n	8001bfe <HAL_ADC_Start_DMA+0x26>
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_ADC_Start_DMA+0x174>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fd8a 	bl	8001718 <LL_ADC_GetMultimode>
 8001c04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fe1c 	bl	8001848 <LL_ADC_REG_IsConversionOngoing>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 808c 	bne.w	8001d30 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_Start_DMA+0x4e>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e087      	b.n	8001d36 <HAL_ADC_Start_DMA+0x15e>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d002      	beq.n	8001c40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d170      	bne.n	8001d22 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fbf1 	bl	8002428 <ADC_Enable>
 8001c46:	4603      	mov	r3, r0
 8001c48:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d163      	bne.n	8001d18 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c54:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <HAL_ADC_Start_DMA+0x178>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a37      	ldr	r2, [pc, #220]	; (8001d44 <HAL_ADC_Start_DMA+0x16c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d002      	beq.n	8001c70 <HAL_ADC_Start_DMA+0x98>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e000      	b.n	8001c72 <HAL_ADC_Start_DMA+0x9a>
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <HAL_ADC_Start_DMA+0x168>)
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d002      	beq.n	8001c80 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f023 0206 	bic.w	r2, r3, #6
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca4:	e002      	b.n	8001cac <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_ADC_Start_DMA+0x17c>)
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <HAL_ADC_Start_DMA+0x180>)
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <HAL_ADC_Start_DMA+0x184>)
 8001cc2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	221c      	movs	r2, #28
 8001cca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0210 	orr.w	r2, r2, #16
 8001ce2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f7ff fcaf 	bl	8001652 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3340      	adds	r3, #64	; 0x40
 8001cfe:	4619      	mov	r1, r3
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f001 fb2a 	bl	800335c <HAL_DMA_Start_IT>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fd85 	bl	8001820 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d16:	e00d      	b.n	8001d34 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d20:	e008      	b.n	8001d34 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d2e:	e001      	b.n	8001d34 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
 8001d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40022100 	.word	0x40022100
 8001d48:	40022300 	.word	0x40022300
 8001d4c:	58026300 	.word	0x58026300
 8001d50:	fffff0fe 	.word	0xfffff0fe
 8001d54:	0800253d 	.word	0x0800253d
 8001d58:	08002615 	.word	0x08002615
 8001d5c:	08002631 	.word	0x08002631

08001d60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b0a1      	sub	sp, #132	; 0x84
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a9d      	ldr	r2, [pc, #628]	; (8002018 <HAL_ADC_ConfigChannel+0x290>)
 8001da2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x2a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e321      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x66e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fd42 	bl	8001848 <LL_ADC_REG_IsConversionOngoing>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 8306 	bne.w	80023d8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x62>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2201      	movs	r2, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	e016      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x90>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dfa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e02:	2320      	movs	r3, #32
 8001e04:	e003      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2201      	movs	r2, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	69d1      	ldr	r1, [r2, #28]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	430b      	orrs	r3, r1
 8001e24:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f7ff fbe1 	bl	80015fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fd03 	bl	8001848 <LL_ADC_REG_IsConversionOngoing>
 8001e42:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fd10 	bl	800186e <LL_ADC_INJ_IsConversionOngoing>
 8001e4e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80b3 	bne.w	8001fbe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 80af 	bne.w	8001fbe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f7ff fc03 	bl	8001678 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e72:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_ADC_ConfigChannel+0x294>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e7e:	d10b      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x110>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	e01d      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x14c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10b      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x136>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	e00a      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x14c>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d027      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eec:	f7ff fb1e 	bl	800152c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6919      	ldr	r1, [r3, #16]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	7e5b      	ldrb	r3, [r3, #25]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x17e>
 8001f00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f04:	e000      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x180>
 8001f06:	2300      	movs	r3, #0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f7ff fb48 	bl	800159e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6919      	ldr	r1, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	7e1b      	ldrb	r3, [r3, #24]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x19c>
 8001f1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f22:	e000      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x19e>
 8001f24:	2300      	movs	r3, #0
 8001f26:	461a      	mov	r2, r3
 8001f28:	f7ff fb20 	bl	800156c <LL_ADC_SetDataRightShift>
 8001f2c:	e047      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	069b      	lsls	r3, r3, #26
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d107      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f50:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	069b      	lsls	r3, r3, #26
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d107      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f74:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	069b      	lsls	r3, r3, #26
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d107      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f98:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	069b      	lsls	r3, r3, #26
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d107      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fbc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fc18 	bl	80017f8 <LL_ADC_IsEnabled>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 820d 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f7ff fb77 	bl	80016d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_ADC_ConfigChannel+0x290>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	f040 8133 	bne.w	8002254 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d110      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x298>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0e9b      	lsrs	r3, r3, #26
 8002004:	3301      	adds	r3, #1
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2b09      	cmp	r3, #9
 800200c:	bf94      	ite	ls
 800200e:	2301      	movls	r3, #1
 8002010:	2300      	movhi	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	e01e      	b.n	8002054 <HAL_ADC_ConfigChannel+0x2cc>
 8002016:	bf00      	nop
 8002018:	47ff0000 	.word	0x47ff0000
 800201c:	5c001000 	.word	0x5c001000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800202e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002030:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002038:	2320      	movs	r3, #32
 800203a:	e003      	b.n	8002044 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800203c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2b09      	cmp	r3, #9
 800204c:	bf94      	ite	ls
 800204e:	2301      	movls	r3, #1
 8002050:	2300      	movhi	r3, #0
 8002052:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002054:	2b00      	cmp	r3, #0
 8002056:	d079      	beq.n	800214c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x2ec>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	3301      	adds	r3, #1
 800206c:	069b      	lsls	r3, r3, #26
 800206e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002072:	e015      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x318>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002084:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800208c:	2320      	movs	r3, #32
 800208e:	e003      	b.n	8002098 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	3301      	adds	r3, #1
 800209a:	069b      	lsls	r3, r3, #26
 800209c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x338>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	3301      	adds	r3, #1
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	e017      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x368>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e003      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80020dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x38e>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	3301      	adds	r3, #1
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	051b      	lsls	r3, r3, #20
 8002114:	e018      	b.n	8002148 <HAL_ADC_ConfigChannel+0x3c0>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e003      	b.n	800213a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002148:	430b      	orrs	r3, r1
 800214a:	e07e      	b.n	800224a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x3e0>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	069b      	lsls	r3, r3, #26
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002166:	e015      	b.n	8002194 <HAL_ADC_ConfigChannel+0x40c>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e003      	b.n	800218c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x42c>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	e017      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x45c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	61bb      	str	r3, [r7, #24]
  return result;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	ea42 0103 	orr.w	r1, r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10d      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x488>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	3b1e      	subs	r3, #30
 8002208:	051b      	lsls	r3, r3, #20
 800220a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800220e:	e01b      	b.n	8002248 <HAL_ADC_ConfigChannel+0x4c0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	60fb      	str	r3, [r7, #12]
  return result;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002228:	2320      	movs	r3, #32
 800222a:	e003      	b.n	8002234 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f003 021f 	and.w	r2, r3, #31
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	3b1e      	subs	r3, #30
 8002242:	051b      	lsls	r3, r3, #20
 8002244:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002248:	430b      	orrs	r3, r1
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	6892      	ldr	r2, [r2, #8]
 800224e:	4619      	mov	r1, r3
 8002250:	f7ff fa12 	bl	8001678 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f280 80c6 	bge.w	80023ea <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a67      	ldr	r2, [pc, #412]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x4ea>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a65      	ldr	r2, [pc, #404]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x4ee>
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_ADC_ConfigChannel+0x680>)
 8002274:	e000      	b.n	8002278 <HAL_ADC_ConfigChannel+0x4f0>
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_ADC_ConfigChannel+0x684>)
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f949 	bl	8001510 <LL_ADC_GetCommonPathInternalCh>
 800227e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x50c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5d      	ldr	r2, [pc, #372]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d10e      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x52a>
 8002294:	485a      	ldr	r0, [pc, #360]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 8002296:	f7ff faaf 	bl	80017f8 <LL_ADC_IsEnabled>
 800229a:	4604      	mov	r4, r0
 800229c:	4859      	ldr	r0, [pc, #356]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 800229e:	f7ff faab 	bl	80017f8 <LL_ADC_IsEnabled>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4323      	orrs	r3, r4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	e008      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x53c>
 80022b2:	4857      	ldr	r0, [pc, #348]	; (8002410 <HAL_ADC_ConfigChannel+0x688>)
 80022b4:	f7ff faa0 	bl	80017f8 <LL_ADC_IsEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf0c      	ite	eq
 80022be:	2301      	moveq	r3, #1
 80022c0:	2300      	movne	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d07d      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a51      	ldr	r2, [pc, #324]	; (8002414 <HAL_ADC_ConfigChannel+0x68c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d130      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x5ac>
 80022d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d12b      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a4b      	ldr	r2, [pc, #300]	; (8002410 <HAL_ADC_ConfigChannel+0x688>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f040 8081 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a44      	ldr	r2, [pc, #272]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_ConfigChannel+0x574>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a43      	ldr	r2, [pc, #268]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x578>
 80022fc:	4a42      	ldr	r2, [pc, #264]	; (8002408 <HAL_ADC_ConfigChannel+0x680>)
 80022fe:	e000      	b.n	8002302 <HAL_ADC_ConfigChannel+0x57a>
 8002300:	4a42      	ldr	r2, [pc, #264]	; (800240c <HAL_ADC_ConfigChannel+0x684>)
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002304:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f7ff f8ed 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_ADC_ConfigChannel+0x690>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	4a41      	ldr	r2, [pc, #260]	; (800241c <HAL_ADC_ConfigChannel+0x694>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002324:	e002      	b.n	800232c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3b01      	subs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f9      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002332:	e05a      	b.n	80023ea <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a39      	ldr	r2, [pc, #228]	; (8002420 <HAL_ADC_ConfigChannel+0x698>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11e      	bne.n	800237c <HAL_ADC_ConfigChannel+0x5f4>
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d119      	bne.n	800237c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a30      	ldr	r2, [pc, #192]	; (8002410 <HAL_ADC_ConfigChannel+0x688>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d14b      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x5de>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a28      	ldr	r2, [pc, #160]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x5e2>
 8002366:	4a28      	ldr	r2, [pc, #160]	; (8002408 <HAL_ADC_ConfigChannel+0x680>)
 8002368:	e000      	b.n	800236c <HAL_ADC_ConfigChannel+0x5e4>
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_ADC_ConfigChannel+0x684>)
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7ff f8b8 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800237a:	e036      	b.n	80023ea <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a28      	ldr	r2, [pc, #160]	; (8002424 <HAL_ADC_ConfigChannel+0x69c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d131      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x662>
 8002386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d12c      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_ADC_ConfigChannel+0x688>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d127      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x626>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a16      	ldr	r2, [pc, #88]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x62a>
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <HAL_ADC_ConfigChannel+0x680>)
 80023b0:	e000      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x62c>
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_ADC_ConfigChannel+0x684>)
 80023b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7ff f894 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
 80023c2:	e012      	b.n	80023ea <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023d6:	e008      	b.n	80023ea <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3784      	adds	r7, #132	; 0x84
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd90      	pop	{r4, r7, pc}
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000
 8002404:	40022100 	.word	0x40022100
 8002408:	40022300 	.word	0x40022300
 800240c:	58026300 	.word	0x58026300
 8002410:	58026000 	.word	0x58026000
 8002414:	cb840000 	.word	0xcb840000
 8002418:	24000000 	.word	0x24000000
 800241c:	053e2d63 	.word	0x053e2d63
 8002420:	c7520000 	.word	0xc7520000
 8002424:	cfb80000 	.word	0xcfb80000

08002428 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f9df 	bl	80017f8 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d16e      	bne.n	800251e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <ADC_Enable+0x100>)
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00d      	beq.n	800246a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e05a      	b.n	8002520 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f9ae 	bl	80017d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002474:	f7ff f80e 	bl	8001494 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <ADC_Enable+0x104>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <ADC_Enable+0x66>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <ADC_Enable+0x108>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <ADC_Enable+0x6a>
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <ADC_Enable+0x10c>)
 8002490:	e000      	b.n	8002494 <ADC_Enable+0x6c>
 8002492:	4b29      	ldr	r3, [pc, #164]	; (8002538 <ADC_Enable+0x110>)
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f93f 	bl	8001718 <LL_ADC_GetMultimode>
 800249a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a23      	ldr	r2, [pc, #140]	; (8002530 <ADC_Enable+0x108>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d002      	beq.n	80024ac <ADC_Enable+0x84>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e000      	b.n	80024ae <ADC_Enable+0x86>
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <ADC_Enable+0x104>)
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02c      	beq.n	8002510 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d130      	bne.n	800251e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024bc:	e028      	b.n	8002510 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f998 	bl	80017f8 <LL_ADC_IsEnabled>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d104      	bne.n	80024d8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f97c 	bl	80017d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024d8:	f7fe ffdc 	bl	8001494 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d914      	bls.n	8002510 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d00d      	beq.n	8002510 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0210 	orr.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d1cf      	bne.n	80024be <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	8000003f 	.word	0x8000003f
 800252c:	40022000 	.word	0x40022000
 8002530:	40022100 	.word	0x40022100
 8002534:	40022300 	.word	0x40022300
 8002538:	58026300 	.word	0x58026300

0800253c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002552:	2b00      	cmp	r3, #0
 8002554:	d14b      	bne.n	80025ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d021      	beq.n	80025b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f82d 	bl	80015d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d032      	beq.n	80025e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d12b      	bne.n	80025e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
 80025b2:	e018      	b.n	80025e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d111      	bne.n	80025e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7fe fbfc 	bl	8000de4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025ec:	e00e      	b.n	800260c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff fbba 	bl	8001d74 <HAL_ADC_ErrorCallback>
}
 8002600:	e004      	b.n	800260c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f7ff fb9c 	bl	8001d60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff fb8c 	bl	8001d74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a7a      	ldr	r2, [pc, #488]	; (800285c <ADC_ConfigureBoostMode+0x1f8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <ADC_ConfigureBoostMode+0x1c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a79      	ldr	r2, [pc, #484]	; (8002860 <ADC_ConfigureBoostMode+0x1fc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d109      	bne.n	8002694 <ADC_ConfigureBoostMode+0x30>
 8002680:	4b78      	ldr	r3, [pc, #480]	; (8002864 <ADC_ConfigureBoostMode+0x200>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e008      	b.n	80026a6 <ADC_ConfigureBoostMode+0x42>
 8002694:	4b74      	ldr	r3, [pc, #464]	; (8002868 <ADC_ConfigureBoostMode+0x204>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01c      	beq.n	80026e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026aa:	f004 fac5 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 80026ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b8:	d010      	beq.n	80026dc <ADC_ConfigureBoostMode+0x78>
 80026ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026be:	d873      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x144>
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d002      	beq.n	80026cc <ADC_ConfigureBoostMode+0x68>
 80026c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ca:	d16d      	bne.n	80027a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	60fb      	str	r3, [r7, #12]
        break;
 80026da:	e068      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	60fb      	str	r3, [r7, #12]
        break;
 80026e2:	e064      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	f005 fd0a 	bl	8008104 <HAL_RCCEx_GetPeriphCLKFreq>
 80026f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026fa:	d051      	beq.n	80027a0 <ADC_ConfigureBoostMode+0x13c>
 80026fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002700:	d854      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002702:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002706:	d047      	beq.n	8002798 <ADC_ConfigureBoostMode+0x134>
 8002708:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800270c:	d84e      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 800270e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002712:	d03d      	beq.n	8002790 <ADC_ConfigureBoostMode+0x12c>
 8002714:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002718:	d848      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 800271a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800271e:	d033      	beq.n	8002788 <ADC_ConfigureBoostMode+0x124>
 8002720:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002724:	d842      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002726:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800272a:	d029      	beq.n	8002780 <ADC_ConfigureBoostMode+0x11c>
 800272c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002730:	d83c      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002732:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002736:	d01a      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 8002738:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800273c:	d836      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 800273e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002742:	d014      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 8002744:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002748:	d830      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 800274a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800274e:	d00e      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 8002750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002754:	d82a      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002756:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800275a:	d008      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 800275c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002760:	d824      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002766:	d002      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 8002768:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800276c:	d11e      	bne.n	80027ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0c9b      	lsrs	r3, r3, #18
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	60fb      	str	r3, [r7, #12]
        break;
 800277e:	e016      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
        break;
 8002786:	e012      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	60fb      	str	r3, [r7, #12]
        break;
 800278e:	e00e      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	60fb      	str	r3, [r7, #12]
        break;
 8002796:	e00a      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	09db      	lsrs	r3, r3, #7
 800279c:	60fb      	str	r3, [r7, #12]
        break;
 800279e:	e006      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	60fb      	str	r3, [r7, #12]
        break;
 80027a6:	e002      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027ae:	f7fe fe7d 	bl	80014ac <HAL_GetREVID>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d815      	bhi.n	80027e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a2b      	ldr	r2, [pc, #172]	; (800286c <ADC_ConfigureBoostMode+0x208>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d908      	bls.n	80027d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027d4:	e03e      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e4:	609a      	str	r2, [r3, #8]
}
 80027e6:	e035      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <ADC_ConfigureBoostMode+0x20c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d808      	bhi.n	8002808 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	e025      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <ADC_ConfigureBoostMode+0x210>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d80a      	bhi.n	8002826 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	e016      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <ADC_ConfigureBoostMode+0x214>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d80a      	bhi.n	8002844 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002840:	609a      	str	r2, [r3, #8]
}
 8002842:	e007      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002852:	609a      	str	r2, [r3, #8]
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40022000 	.word	0x40022000
 8002860:	40022100 	.word	0x40022100
 8002864:	40022300 	.word	0x40022300
 8002868:	58026300 	.word	0x58026300
 800286c:	01312d00 	.word	0x01312d00
 8002870:	005f5e10 	.word	0x005f5e10
 8002874:	00bebc20 	.word	0x00bebc20
 8002878:	017d7840 	.word	0x017d7840

0800287c <LL_ADC_IsEnabled>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <LL_ADC_IsEnabled+0x18>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <LL_ADC_IsEnabled+0x1a>
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d101      	bne.n	80028ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b09f      	sub	sp, #124	; 0x7c
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0be      	b.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5c      	ldr	r2, [pc, #368]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d102      	bne.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002900:	4b5b      	ldr	r3, [pc, #364]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	e001      	b.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e09d      	b.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ffb9 	bl	80028a2 <LL_ADC_REG_IsConversionOngoing>
 8002930:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ffb3 	bl	80028a2 <LL_ADC_REG_IsConversionOngoing>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d17f      	bne.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002944:	2b00      	cmp	r3, #0
 8002946:	d17c      	bne.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800295c:	4b45      	ldr	r3, [pc, #276]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800295e:	e000      	b.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002960:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002962:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d039      	beq.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a3a      	ldr	r2, [pc, #232]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10e      	bne.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002992:	4836      	ldr	r0, [pc, #216]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002994:	f7ff ff72 	bl	800287c <LL_ADC_IsEnabled>
 8002998:	4604      	mov	r4, r0
 800299a:	4835      	ldr	r0, [pc, #212]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800299c:	f7ff ff6e 	bl	800287c <LL_ADC_IsEnabled>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4323      	orrs	r3, r4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e008      	b.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80029b0:	4832      	ldr	r0, [pc, #200]	; (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80029b2:	f7ff ff63 	bl	800287c <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d047      	beq.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	6811      	ldr	r1, [r2, #0]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029de:	e03a      	b.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80029e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d10e      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002a00:	481a      	ldr	r0, [pc, #104]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a02:	f7ff ff3b 	bl	800287c <LL_ADC_IsEnabled>
 8002a06:	4604      	mov	r4, r0
 8002a08:	4819      	ldr	r0, [pc, #100]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a0a:	f7ff ff37 	bl	800287c <LL_ADC_IsEnabled>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4323      	orrs	r3, r4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e008      	b.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a1e:	4817      	ldr	r0, [pc, #92]	; (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a20:	f7ff ff2c 	bl	800287c <LL_ADC_IsEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d010      	beq.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a3e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a40:	e009      	b.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a54:	e000      	b.n	8002a58 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	377c      	adds	r7, #124	; 0x7c
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40022100 	.word	0x40022100
 8002a74:	40022300 	.word	0x40022300
 8002a78:	58026300 	.word	0x58026300
 8002a7c:	58026000 	.word	0x58026000
 8002a80:	fffff0e0 	.word	0xfffff0e0

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00
 8002ac8:	05fa0000 	.word	0x05fa0000

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f7ff ff8e 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff29 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff40 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff90 	bl	8002b78 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5f 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff33 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa4 	bl	8002be0 <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7fe fbf2 	bl	8001494 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e316      	b.n	80032ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a66      	ldr	r2, [pc, #408]	; (8002e5c <HAL_DMA_Init+0x1b8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d04a      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <HAL_DMA_Init+0x1bc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d045      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a63      	ldr	r2, [pc, #396]	; (8002e64 <HAL_DMA_Init+0x1c0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d040      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a62      	ldr	r2, [pc, #392]	; (8002e68 <HAL_DMA_Init+0x1c4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d03b      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a60      	ldr	r2, [pc, #384]	; (8002e6c <HAL_DMA_Init+0x1c8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d036      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5f      	ldr	r2, [pc, #380]	; (8002e70 <HAL_DMA_Init+0x1cc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d031      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <HAL_DMA_Init+0x1d0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02c      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a5c      	ldr	r2, [pc, #368]	; (8002e78 <HAL_DMA_Init+0x1d4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d027      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5a      	ldr	r2, [pc, #360]	; (8002e7c <HAL_DMA_Init+0x1d8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d022      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a59      	ldr	r2, [pc, #356]	; (8002e80 <HAL_DMA_Init+0x1dc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d01d      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a57      	ldr	r2, [pc, #348]	; (8002e84 <HAL_DMA_Init+0x1e0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d018      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a56      	ldr	r2, [pc, #344]	; (8002e88 <HAL_DMA_Init+0x1e4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d013      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a54      	ldr	r2, [pc, #336]	; (8002e8c <HAL_DMA_Init+0x1e8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00e      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a53      	ldr	r2, [pc, #332]	; (8002e90 <HAL_DMA_Init+0x1ec>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d009      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a51      	ldr	r2, [pc, #324]	; (8002e94 <HAL_DMA_Init+0x1f0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d004      	beq.n	8002d5c <HAL_DMA_Init+0xb8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_DMA_Init+0x1f4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Init+0xbc>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_DMA_Init+0xbe>
 8002d60:	2300      	movs	r3, #0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 813b 	beq.w	8002fde <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a37      	ldr	r2, [pc, #220]	; (8002e5c <HAL_DMA_Init+0x1b8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04a      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a36      	ldr	r2, [pc, #216]	; (8002e60 <HAL_DMA_Init+0x1bc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d045      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a34      	ldr	r2, [pc, #208]	; (8002e64 <HAL_DMA_Init+0x1c0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d040      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a33      	ldr	r2, [pc, #204]	; (8002e68 <HAL_DMA_Init+0x1c4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d03b      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <HAL_DMA_Init+0x1c8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d036      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a30      	ldr	r2, [pc, #192]	; (8002e70 <HAL_DMA_Init+0x1cc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d031      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <HAL_DMA_Init+0x1d0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02c      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <HAL_DMA_Init+0x1d4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d027      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2b      	ldr	r2, [pc, #172]	; (8002e7c <HAL_DMA_Init+0x1d8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <HAL_DMA_Init+0x1dc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01d      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <HAL_DMA_Init+0x1e0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <HAL_DMA_Init+0x1e4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a25      	ldr	r2, [pc, #148]	; (8002e8c <HAL_DMA_Init+0x1e8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_DMA_Init+0x1ec>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <HAL_DMA_Init+0x1f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_DMA_Init+0x174>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_DMA_Init+0x1f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d108      	bne.n	8002e2a <HAL_DMA_Init+0x186>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e007      	b.n	8002e3a <HAL_DMA_Init+0x196>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e3a:	e02f      	b.n	8002e9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e3c:	f7fe fb2a 	bl	8001494 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d928      	bls.n	8002e9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2203      	movs	r2, #3
 8002e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e246      	b.n	80032ea <HAL_DMA_Init+0x646>
 8002e5c:	40020010 	.word	0x40020010
 8002e60:	40020028 	.word	0x40020028
 8002e64:	40020040 	.word	0x40020040
 8002e68:	40020058 	.word	0x40020058
 8002e6c:	40020070 	.word	0x40020070
 8002e70:	40020088 	.word	0x40020088
 8002e74:	400200a0 	.word	0x400200a0
 8002e78:	400200b8 	.word	0x400200b8
 8002e7c:	40020410 	.word	0x40020410
 8002e80:	40020428 	.word	0x40020428
 8002e84:	40020440 	.word	0x40020440
 8002e88:	40020458 	.word	0x40020458
 8002e8c:	40020470 	.word	0x40020470
 8002e90:	40020488 	.word	0x40020488
 8002e94:	400204a0 	.word	0x400204a0
 8002e98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1c8      	bne.n	8002e3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4b83      	ldr	r3, [pc, #524]	; (80030c4 <HAL_DMA_Init+0x420>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ec2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f00:	4b71      	ldr	r3, [pc, #452]	; (80030c8 <HAL_DMA_Init+0x424>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b71      	ldr	r3, [pc, #452]	; (80030cc <HAL_DMA_Init+0x428>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0c:	d328      	bcc.n	8002f60 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b28      	cmp	r3, #40	; 0x28
 8002f14:	d903      	bls.n	8002f1e <HAL_DMA_Init+0x27a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f1c:	d917      	bls.n	8002f4e <HAL_DMA_Init+0x2aa>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b3e      	cmp	r3, #62	; 0x3e
 8002f24:	d903      	bls.n	8002f2e <HAL_DMA_Init+0x28a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b42      	cmp	r3, #66	; 0x42
 8002f2c:	d90f      	bls.n	8002f4e <HAL_DMA_Init+0x2aa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b46      	cmp	r3, #70	; 0x46
 8002f34:	d903      	bls.n	8002f3e <HAL_DMA_Init+0x29a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b48      	cmp	r3, #72	; 0x48
 8002f3c:	d907      	bls.n	8002f4e <HAL_DMA_Init+0x2aa>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b4e      	cmp	r3, #78	; 0x4e
 8002f44:	d905      	bls.n	8002f52 <HAL_DMA_Init+0x2ae>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b52      	cmp	r3, #82	; 0x52
 8002f4c:	d801      	bhi.n	8002f52 <HAL_DMA_Init+0x2ae>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_DMA_Init+0x2b0>
 8002f52:	2300      	movs	r3, #0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f5e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0307 	bic.w	r3, r3, #7
 8002f76:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d117      	bne.n	8002fba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00e      	beq.n	8002fba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f002 fb33 	bl	8005608 <DMA_CheckFifoParam>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e197      	b.n	80032ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f002 fa6e 	bl	80054a4 <DMA_CalcBaseAndBitshift>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	223f      	movs	r2, #63	; 0x3f
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e0cd      	b.n	800317a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <HAL_DMA_Init+0x42c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_DMA_Init+0x38a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a39      	ldr	r2, [pc, #228]	; (80030d4 <HAL_DMA_Init+0x430>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_Init+0x38a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a38      	ldr	r2, [pc, #224]	; (80030d8 <HAL_DMA_Init+0x434>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d018      	beq.n	800302e <HAL_DMA_Init+0x38a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a36      	ldr	r2, [pc, #216]	; (80030dc <HAL_DMA_Init+0x438>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_DMA_Init+0x38a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a35      	ldr	r2, [pc, #212]	; (80030e0 <HAL_DMA_Init+0x43c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <HAL_DMA_Init+0x38a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a33      	ldr	r2, [pc, #204]	; (80030e4 <HAL_DMA_Init+0x440>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_DMA_Init+0x38a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a32      	ldr	r2, [pc, #200]	; (80030e8 <HAL_DMA_Init+0x444>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_DMA_Init+0x38a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a30      	ldr	r2, [pc, #192]	; (80030ec <HAL_DMA_Init+0x448>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_DMA_Init+0x38e>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_DMA_Init+0x390>
 8003032:	2300      	movs	r3, #0
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8097 	beq.w	8003168 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a24      	ldr	r2, [pc, #144]	; (80030d0 <HAL_DMA_Init+0x42c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d021      	beq.n	8003088 <HAL_DMA_Init+0x3e4>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <HAL_DMA_Init+0x430>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01c      	beq.n	8003088 <HAL_DMA_Init+0x3e4>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <HAL_DMA_Init+0x434>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d017      	beq.n	8003088 <HAL_DMA_Init+0x3e4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_DMA_Init+0x438>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d012      	beq.n	8003088 <HAL_DMA_Init+0x3e4>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_DMA_Init+0x43c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00d      	beq.n	8003088 <HAL_DMA_Init+0x3e4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_DMA_Init+0x440>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d008      	beq.n	8003088 <HAL_DMA_Init+0x3e4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_DMA_Init+0x444>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <HAL_DMA_Init+0x3e4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	; (80030ec <HAL_DMA_Init+0x448>)
 8003086:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_DMA_Init+0x44c>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d021      	beq.n	80030f4 <HAL_DMA_Init+0x450>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d102      	bne.n	80030be <HAL_DMA_Init+0x41a>
 80030b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030bc:	e01b      	b.n	80030f6 <HAL_DMA_Init+0x452>
 80030be:	2300      	movs	r3, #0
 80030c0:	e019      	b.n	80030f6 <HAL_DMA_Init+0x452>
 80030c2:	bf00      	nop
 80030c4:	fe10803f 	.word	0xfe10803f
 80030c8:	5c001000 	.word	0x5c001000
 80030cc:	ffff0000 	.word	0xffff0000
 80030d0:	58025408 	.word	0x58025408
 80030d4:	5802541c 	.word	0x5802541c
 80030d8:	58025430 	.word	0x58025430
 80030dc:	58025444 	.word	0x58025444
 80030e0:	58025458 	.word	0x58025458
 80030e4:	5802546c 	.word	0x5802546c
 80030e8:	58025480 	.word	0x58025480
 80030ec:	58025494 	.word	0x58025494
 80030f0:	fffe000f 	.word	0xfffe000f
 80030f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68d2      	ldr	r2, [r2, #12]
 80030fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800310c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800311c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003124:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <HAL_DMA_Init+0x650>)
 800313c:	4413      	add	r3, r2
 800313e:	4a6e      	ldr	r2, [pc, #440]	; (80032f8 <HAL_DMA_Init+0x654>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f002 f9a9 	bl	80054a4 <DMA_CalcBaseAndBitshift>
 8003152:	4603      	mov	r3, r0
 8003154:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2201      	movs	r2, #1
 8003160:	409a      	lsls	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	e008      	b.n	800317a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2240      	movs	r2, #64	; 0x40
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2203      	movs	r2, #3
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0b7      	b.n	80032ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a5f      	ldr	r2, [pc, #380]	; (80032fc <HAL_DMA_Init+0x658>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d072      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a5d      	ldr	r2, [pc, #372]	; (8003300 <HAL_DMA_Init+0x65c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d06d      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5c      	ldr	r2, [pc, #368]	; (8003304 <HAL_DMA_Init+0x660>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d068      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5a      	ldr	r2, [pc, #360]	; (8003308 <HAL_DMA_Init+0x664>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d063      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a59      	ldr	r2, [pc, #356]	; (800330c <HAL_DMA_Init+0x668>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d05e      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a57      	ldr	r2, [pc, #348]	; (8003310 <HAL_DMA_Init+0x66c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d059      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a56      	ldr	r2, [pc, #344]	; (8003314 <HAL_DMA_Init+0x670>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d054      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a54      	ldr	r2, [pc, #336]	; (8003318 <HAL_DMA_Init+0x674>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d04f      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a53      	ldr	r2, [pc, #332]	; (800331c <HAL_DMA_Init+0x678>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d04a      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a51      	ldr	r2, [pc, #324]	; (8003320 <HAL_DMA_Init+0x67c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d045      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a50      	ldr	r2, [pc, #320]	; (8003324 <HAL_DMA_Init+0x680>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d040      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a4e      	ldr	r2, [pc, #312]	; (8003328 <HAL_DMA_Init+0x684>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d03b      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a4d      	ldr	r2, [pc, #308]	; (800332c <HAL_DMA_Init+0x688>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d036      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a4b      	ldr	r2, [pc, #300]	; (8003330 <HAL_DMA_Init+0x68c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d031      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a4a      	ldr	r2, [pc, #296]	; (8003334 <HAL_DMA_Init+0x690>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d02c      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a48      	ldr	r2, [pc, #288]	; (8003338 <HAL_DMA_Init+0x694>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d027      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a47      	ldr	r2, [pc, #284]	; (800333c <HAL_DMA_Init+0x698>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a45      	ldr	r2, [pc, #276]	; (8003340 <HAL_DMA_Init+0x69c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a44      	ldr	r2, [pc, #272]	; (8003344 <HAL_DMA_Init+0x6a0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a42      	ldr	r2, [pc, #264]	; (8003348 <HAL_DMA_Init+0x6a4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a41      	ldr	r2, [pc, #260]	; (800334c <HAL_DMA_Init+0x6a8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <HAL_DMA_Init+0x6ac>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3e      	ldr	r2, [pc, #248]	; (8003354 <HAL_DMA_Init+0x6b0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_DMA_Init+0x5c6>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3c      	ldr	r2, [pc, #240]	; (8003358 <HAL_DMA_Init+0x6b4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_DMA_Init+0x5ca>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_DMA_Init+0x5cc>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d032      	beq.n	80032da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f002 fa43 	bl	8005700 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b80      	cmp	r3, #128	; 0x80
 8003280:	d102      	bne.n	8003288 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800329c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_DMA_Init+0x624>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d80c      	bhi.n	80032c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f002 fac0 	bl	8005834 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	e008      	b.n	80032da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	a7fdabf8 	.word	0xa7fdabf8
 80032f8:	cccccccd 	.word	0xcccccccd
 80032fc:	40020010 	.word	0x40020010
 8003300:	40020028 	.word	0x40020028
 8003304:	40020040 	.word	0x40020040
 8003308:	40020058 	.word	0x40020058
 800330c:	40020070 	.word	0x40020070
 8003310:	40020088 	.word	0x40020088
 8003314:	400200a0 	.word	0x400200a0
 8003318:	400200b8 	.word	0x400200b8
 800331c:	40020410 	.word	0x40020410
 8003320:	40020428 	.word	0x40020428
 8003324:	40020440 	.word	0x40020440
 8003328:	40020458 	.word	0x40020458
 800332c:	40020470 	.word	0x40020470
 8003330:	40020488 	.word	0x40020488
 8003334:	400204a0 	.word	0x400204a0
 8003338:	400204b8 	.word	0x400204b8
 800333c:	58025408 	.word	0x58025408
 8003340:	5802541c 	.word	0x5802541c
 8003344:	58025430 	.word	0x58025430
 8003348:	58025444 	.word	0x58025444
 800334c:	58025458 	.word	0x58025458
 8003350:	5802546c 	.word	0x5802546c
 8003354:	58025480 	.word	0x58025480
 8003358:	58025494 	.word	0x58025494

0800335c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e226      	b.n	80037c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_DMA_Start_IT+0x2a>
 8003382:	2302      	movs	r3, #2
 8003384:	e21f      	b.n	80037c6 <HAL_DMA_Start_IT+0x46a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	f040 820a 	bne.w	80037b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a68      	ldr	r2, [pc, #416]	; (8003550 <HAL_DMA_Start_IT+0x1f4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04a      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a66      	ldr	r2, [pc, #408]	; (8003554 <HAL_DMA_Start_IT+0x1f8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d045      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a65      	ldr	r2, [pc, #404]	; (8003558 <HAL_DMA_Start_IT+0x1fc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d040      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a63      	ldr	r2, [pc, #396]	; (800355c <HAL_DMA_Start_IT+0x200>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d03b      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a62      	ldr	r2, [pc, #392]	; (8003560 <HAL_DMA_Start_IT+0x204>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d036      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a60      	ldr	r2, [pc, #384]	; (8003564 <HAL_DMA_Start_IT+0x208>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d031      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a5f      	ldr	r2, [pc, #380]	; (8003568 <HAL_DMA_Start_IT+0x20c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d02c      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a5d      	ldr	r2, [pc, #372]	; (800356c <HAL_DMA_Start_IT+0x210>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d027      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <HAL_DMA_Start_IT+0x214>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d022      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a5a      	ldr	r2, [pc, #360]	; (8003574 <HAL_DMA_Start_IT+0x218>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01d      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a59      	ldr	r2, [pc, #356]	; (8003578 <HAL_DMA_Start_IT+0x21c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d018      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a57      	ldr	r2, [pc, #348]	; (800357c <HAL_DMA_Start_IT+0x220>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a56      	ldr	r2, [pc, #344]	; (8003580 <HAL_DMA_Start_IT+0x224>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00e      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a54      	ldr	r2, [pc, #336]	; (8003584 <HAL_DMA_Start_IT+0x228>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a53      	ldr	r2, [pc, #332]	; (8003588 <HAL_DMA_Start_IT+0x22c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_DMA_Start_IT+0xee>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a51      	ldr	r2, [pc, #324]	; (800358c <HAL_DMA_Start_IT+0x230>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d108      	bne.n	800345c <HAL_DMA_Start_IT+0x100>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e007      	b.n	800346c <HAL_DMA_Start_IT+0x110>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f001 fe6a 	bl	800514c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a34      	ldr	r2, [pc, #208]	; (8003550 <HAL_DMA_Start_IT+0x1f4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d04a      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a33      	ldr	r2, [pc, #204]	; (8003554 <HAL_DMA_Start_IT+0x1f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d045      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a31      	ldr	r2, [pc, #196]	; (8003558 <HAL_DMA_Start_IT+0x1fc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d040      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a30      	ldr	r2, [pc, #192]	; (800355c <HAL_DMA_Start_IT+0x200>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d03b      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2e      	ldr	r2, [pc, #184]	; (8003560 <HAL_DMA_Start_IT+0x204>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d036      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <HAL_DMA_Start_IT+0x208>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d031      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a2b      	ldr	r2, [pc, #172]	; (8003568 <HAL_DMA_Start_IT+0x20c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d02c      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2a      	ldr	r2, [pc, #168]	; (800356c <HAL_DMA_Start_IT+0x210>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d027      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a28      	ldr	r2, [pc, #160]	; (8003570 <HAL_DMA_Start_IT+0x214>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d022      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a27      	ldr	r2, [pc, #156]	; (8003574 <HAL_DMA_Start_IT+0x218>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d01d      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a25      	ldr	r2, [pc, #148]	; (8003578 <HAL_DMA_Start_IT+0x21c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d018      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a24      	ldr	r2, [pc, #144]	; (800357c <HAL_DMA_Start_IT+0x220>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a22      	ldr	r2, [pc, #136]	; (8003580 <HAL_DMA_Start_IT+0x224>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00e      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a21      	ldr	r2, [pc, #132]	; (8003584 <HAL_DMA_Start_IT+0x228>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <HAL_DMA_Start_IT+0x22c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_DMA_Start_IT+0x1bc>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1e      	ldr	r2, [pc, #120]	; (800358c <HAL_DMA_Start_IT+0x230>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_DMA_Start_IT+0x1c0>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_DMA_Start_IT+0x1c2>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d036      	beq.n	8003590 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 021e 	bic.w	r2, r3, #30
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0216 	orr.w	r2, r2, #22
 8003534:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03e      	beq.n	80035bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0208 	orr.w	r2, r2, #8
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e035      	b.n	80035bc <HAL_DMA_Start_IT+0x260>
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 020e 	bic.w	r2, r3, #14
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 020a 	orr.w	r2, r2, #10
 80035a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0204 	orr.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a83      	ldr	r2, [pc, #524]	; (80037d0 <HAL_DMA_Start_IT+0x474>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d072      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a82      	ldr	r2, [pc, #520]	; (80037d4 <HAL_DMA_Start_IT+0x478>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d06d      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a80      	ldr	r2, [pc, #512]	; (80037d8 <HAL_DMA_Start_IT+0x47c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d068      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7f      	ldr	r2, [pc, #508]	; (80037dc <HAL_DMA_Start_IT+0x480>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d063      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7d      	ldr	r2, [pc, #500]	; (80037e0 <HAL_DMA_Start_IT+0x484>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d05e      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a7c      	ldr	r2, [pc, #496]	; (80037e4 <HAL_DMA_Start_IT+0x488>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d059      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a7a      	ldr	r2, [pc, #488]	; (80037e8 <HAL_DMA_Start_IT+0x48c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d054      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a79      	ldr	r2, [pc, #484]	; (80037ec <HAL_DMA_Start_IT+0x490>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04f      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a77      	ldr	r2, [pc, #476]	; (80037f0 <HAL_DMA_Start_IT+0x494>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d04a      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a76      	ldr	r2, [pc, #472]	; (80037f4 <HAL_DMA_Start_IT+0x498>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d045      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a74      	ldr	r2, [pc, #464]	; (80037f8 <HAL_DMA_Start_IT+0x49c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d040      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a73      	ldr	r2, [pc, #460]	; (80037fc <HAL_DMA_Start_IT+0x4a0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d03b      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a71      	ldr	r2, [pc, #452]	; (8003800 <HAL_DMA_Start_IT+0x4a4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d036      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a70      	ldr	r2, [pc, #448]	; (8003804 <HAL_DMA_Start_IT+0x4a8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d031      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a6e      	ldr	r2, [pc, #440]	; (8003808 <HAL_DMA_Start_IT+0x4ac>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d02c      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6d      	ldr	r2, [pc, #436]	; (800380c <HAL_DMA_Start_IT+0x4b0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d027      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a6b      	ldr	r2, [pc, #428]	; (8003810 <HAL_DMA_Start_IT+0x4b4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d022      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6a      	ldr	r2, [pc, #424]	; (8003814 <HAL_DMA_Start_IT+0x4b8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d01d      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a68      	ldr	r2, [pc, #416]	; (8003818 <HAL_DMA_Start_IT+0x4bc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d018      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a67      	ldr	r2, [pc, #412]	; (800381c <HAL_DMA_Start_IT+0x4c0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a65      	ldr	r2, [pc, #404]	; (8003820 <HAL_DMA_Start_IT+0x4c4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00e      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a64      	ldr	r2, [pc, #400]	; (8003824 <HAL_DMA_Start_IT+0x4c8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a62      	ldr	r2, [pc, #392]	; (8003828 <HAL_DMA_Start_IT+0x4cc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_DMA_Start_IT+0x350>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a61      	ldr	r2, [pc, #388]	; (800382c <HAL_DMA_Start_IT+0x4d0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_DMA_Start_IT+0x354>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_DMA_Start_IT+0x356>
 80036b0:	2300      	movs	r3, #0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01a      	beq.n	80036ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a37      	ldr	r2, [pc, #220]	; (80037d0 <HAL_DMA_Start_IT+0x474>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d04a      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a36      	ldr	r2, [pc, #216]	; (80037d4 <HAL_DMA_Start_IT+0x478>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d045      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a34      	ldr	r2, [pc, #208]	; (80037d8 <HAL_DMA_Start_IT+0x47c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d040      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a33      	ldr	r2, [pc, #204]	; (80037dc <HAL_DMA_Start_IT+0x480>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d03b      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a31      	ldr	r2, [pc, #196]	; (80037e0 <HAL_DMA_Start_IT+0x484>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d036      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a30      	ldr	r2, [pc, #192]	; (80037e4 <HAL_DMA_Start_IT+0x488>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d031      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2e      	ldr	r2, [pc, #184]	; (80037e8 <HAL_DMA_Start_IT+0x48c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02c      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <HAL_DMA_Start_IT+0x490>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d027      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_DMA_Start_IT+0x494>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d022      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2a      	ldr	r2, [pc, #168]	; (80037f4 <HAL_DMA_Start_IT+0x498>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d01d      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <HAL_DMA_Start_IT+0x49c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d018      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a27      	ldr	r2, [pc, #156]	; (80037fc <HAL_DMA_Start_IT+0x4a0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_DMA_Start_IT+0x4a4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a24      	ldr	r2, [pc, #144]	; (8003804 <HAL_DMA_Start_IT+0x4a8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_DMA_Start_IT+0x4ac>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_DMA_Start_IT+0x430>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a21      	ldr	r2, [pc, #132]	; (800380c <HAL_DMA_Start_IT+0x4b0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <HAL_DMA_Start_IT+0x442>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e012      	b.n	80037c4 <HAL_DMA_Start_IT+0x468>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e009      	b.n	80037c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40020010 	.word	0x40020010
 80037d4:	40020028 	.word	0x40020028
 80037d8:	40020040 	.word	0x40020040
 80037dc:	40020058 	.word	0x40020058
 80037e0:	40020070 	.word	0x40020070
 80037e4:	40020088 	.word	0x40020088
 80037e8:	400200a0 	.word	0x400200a0
 80037ec:	400200b8 	.word	0x400200b8
 80037f0:	40020410 	.word	0x40020410
 80037f4:	40020428 	.word	0x40020428
 80037f8:	40020440 	.word	0x40020440
 80037fc:	40020458 	.word	0x40020458
 8003800:	40020470 	.word	0x40020470
 8003804:	40020488 	.word	0x40020488
 8003808:	400204a0 	.word	0x400204a0
 800380c:	400204b8 	.word	0x400204b8
 8003810:	58025408 	.word	0x58025408
 8003814:	5802541c 	.word	0x5802541c
 8003818:	58025430 	.word	0x58025430
 800381c:	58025444 	.word	0x58025444
 8003820:	58025458 	.word	0x58025458
 8003824:	5802546c 	.word	0x5802546c
 8003828:	58025480 	.word	0x58025480
 800382c:	58025494 	.word	0x58025494

08003830 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003838:	f7fd fe2c 	bl	8001494 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e2dc      	b.n	8003e02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d008      	beq.n	8003866 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e2cd      	b.n	8003e02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a76      	ldr	r2, [pc, #472]	; (8003a44 <HAL_DMA_Abort+0x214>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d04a      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a74      	ldr	r2, [pc, #464]	; (8003a48 <HAL_DMA_Abort+0x218>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d045      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a73      	ldr	r2, [pc, #460]	; (8003a4c <HAL_DMA_Abort+0x21c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d040      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a71      	ldr	r2, [pc, #452]	; (8003a50 <HAL_DMA_Abort+0x220>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d03b      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a70      	ldr	r2, [pc, #448]	; (8003a54 <HAL_DMA_Abort+0x224>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d036      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6e      	ldr	r2, [pc, #440]	; (8003a58 <HAL_DMA_Abort+0x228>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d031      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6d      	ldr	r2, [pc, #436]	; (8003a5c <HAL_DMA_Abort+0x22c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d02c      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a6b      	ldr	r2, [pc, #428]	; (8003a60 <HAL_DMA_Abort+0x230>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d027      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6a      	ldr	r2, [pc, #424]	; (8003a64 <HAL_DMA_Abort+0x234>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a68      	ldr	r2, [pc, #416]	; (8003a68 <HAL_DMA_Abort+0x238>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a67      	ldr	r2, [pc, #412]	; (8003a6c <HAL_DMA_Abort+0x23c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a65      	ldr	r2, [pc, #404]	; (8003a70 <HAL_DMA_Abort+0x240>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a64      	ldr	r2, [pc, #400]	; (8003a74 <HAL_DMA_Abort+0x244>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a62      	ldr	r2, [pc, #392]	; (8003a78 <HAL_DMA_Abort+0x248>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a61      	ldr	r2, [pc, #388]	; (8003a7c <HAL_DMA_Abort+0x24c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_DMA_Abort+0xd6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5f      	ldr	r2, [pc, #380]	; (8003a80 <HAL_DMA_Abort+0x250>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_DMA_Abort+0xda>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_DMA_Abort+0xdc>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 021e 	bic.w	r2, r2, #30
 800391e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800392e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e00a      	b.n	800394e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 020e 	bic.w	r2, r2, #14
 8003946:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <HAL_DMA_Abort+0x214>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d072      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3a      	ldr	r2, [pc, #232]	; (8003a48 <HAL_DMA_Abort+0x218>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d06d      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a39      	ldr	r2, [pc, #228]	; (8003a4c <HAL_DMA_Abort+0x21c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d068      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a37      	ldr	r2, [pc, #220]	; (8003a50 <HAL_DMA_Abort+0x220>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d063      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a36      	ldr	r2, [pc, #216]	; (8003a54 <HAL_DMA_Abort+0x224>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d05e      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_DMA_Abort+0x228>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d059      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <HAL_DMA_Abort+0x22c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d054      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a31      	ldr	r2, [pc, #196]	; (8003a60 <HAL_DMA_Abort+0x230>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d04f      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <HAL_DMA_Abort+0x234>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d04a      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <HAL_DMA_Abort+0x238>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d045      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <HAL_DMA_Abort+0x23c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d040      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <HAL_DMA_Abort+0x240>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d03b      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2a      	ldr	r2, [pc, #168]	; (8003a74 <HAL_DMA_Abort+0x244>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d036      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <HAL_DMA_Abort+0x248>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d031      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a27      	ldr	r2, [pc, #156]	; (8003a7c <HAL_DMA_Abort+0x24c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d02c      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <HAL_DMA_Abort+0x250>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d027      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_DMA_Abort+0x254>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_DMA_Abort+0x258>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01d      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_DMA_Abort+0x25c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_DMA_Abort+0x260>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <HAL_DMA_Abort+0x264>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_DMA_Abort+0x268>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_DMA_Abort+0x26c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_DMA_Abort+0x20e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_DMA_Abort+0x270>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d132      	bne.n	8003aa4 <HAL_DMA_Abort+0x274>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e031      	b.n	8003aa6 <HAL_DMA_Abort+0x276>
 8003a42:	bf00      	nop
 8003a44:	40020010 	.word	0x40020010
 8003a48:	40020028 	.word	0x40020028
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	40020058 	.word	0x40020058
 8003a54:	40020070 	.word	0x40020070
 8003a58:	40020088 	.word	0x40020088
 8003a5c:	400200a0 	.word	0x400200a0
 8003a60:	400200b8 	.word	0x400200b8
 8003a64:	40020410 	.word	0x40020410
 8003a68:	40020428 	.word	0x40020428
 8003a6c:	40020440 	.word	0x40020440
 8003a70:	40020458 	.word	0x40020458
 8003a74:	40020470 	.word	0x40020470
 8003a78:	40020488 	.word	0x40020488
 8003a7c:	400204a0 	.word	0x400204a0
 8003a80:	400204b8 	.word	0x400204b8
 8003a84:	58025408 	.word	0x58025408
 8003a88:	5802541c 	.word	0x5802541c
 8003a8c:	58025430 	.word	0x58025430
 8003a90:	58025444 	.word	0x58025444
 8003a94:	58025458 	.word	0x58025458
 8003a98:	5802546c 	.word	0x5802546c
 8003a9c:	58025480 	.word	0x58025480
 8003aa0:	58025494 	.word	0x58025494
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6d      	ldr	r2, [pc, #436]	; (8003c74 <HAL_DMA_Abort+0x444>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d04a      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6b      	ldr	r2, [pc, #428]	; (8003c78 <HAL_DMA_Abort+0x448>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d045      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6a      	ldr	r2, [pc, #424]	; (8003c7c <HAL_DMA_Abort+0x44c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d040      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a68      	ldr	r2, [pc, #416]	; (8003c80 <HAL_DMA_Abort+0x450>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d03b      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a67      	ldr	r2, [pc, #412]	; (8003c84 <HAL_DMA_Abort+0x454>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d036      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a65      	ldr	r2, [pc, #404]	; (8003c88 <HAL_DMA_Abort+0x458>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d031      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a64      	ldr	r2, [pc, #400]	; (8003c8c <HAL_DMA_Abort+0x45c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d02c      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a62      	ldr	r2, [pc, #392]	; (8003c90 <HAL_DMA_Abort+0x460>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d027      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a61      	ldr	r2, [pc, #388]	; (8003c94 <HAL_DMA_Abort+0x464>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a5f      	ldr	r2, [pc, #380]	; (8003c98 <HAL_DMA_Abort+0x468>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a5e      	ldr	r2, [pc, #376]	; (8003c9c <HAL_DMA_Abort+0x46c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a5c      	ldr	r2, [pc, #368]	; (8003ca0 <HAL_DMA_Abort+0x470>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a5b      	ldr	r2, [pc, #364]	; (8003ca4 <HAL_DMA_Abort+0x474>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a59      	ldr	r2, [pc, #356]	; (8003ca8 <HAL_DMA_Abort+0x478>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a58      	ldr	r2, [pc, #352]	; (8003cac <HAL_DMA_Abort+0x47c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_DMA_Abort+0x32a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a56      	ldr	r2, [pc, #344]	; (8003cb0 <HAL_DMA_Abort+0x480>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <HAL_DMA_Abort+0x33c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e007      	b.n	8003b7c <HAL_DMA_Abort+0x34c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003b7c:	e013      	b.n	8003ba6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b7e:	f7fd fc89 	bl	8001494 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d90c      	bls.n	8003ba6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2203      	movs	r2, #3
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e12d      	b.n	8003e02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e5      	bne.n	8003b7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2f      	ldr	r2, [pc, #188]	; (8003c74 <HAL_DMA_Abort+0x444>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_DMA_Abort+0x448>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2c      	ldr	r2, [pc, #176]	; (8003c7c <HAL_DMA_Abort+0x44c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <HAL_DMA_Abort+0x450>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <HAL_DMA_Abort+0x454>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_DMA_Abort+0x458>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <HAL_DMA_Abort+0x45c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_DMA_Abort+0x460>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a23      	ldr	r2, [pc, #140]	; (8003c94 <HAL_DMA_Abort+0x464>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <HAL_DMA_Abort+0x468>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <HAL_DMA_Abort+0x46c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_DMA_Abort+0x470>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <HAL_DMA_Abort+0x474>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_DMA_Abort+0x478>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <HAL_DMA_Abort+0x47c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_Abort+0x422>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_DMA_Abort+0x480>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <HAL_DMA_Abort+0x426>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_DMA_Abort+0x428>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d02b      	beq.n	8003cb4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	223f      	movs	r2, #63	; 0x3f
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	e02a      	b.n	8003cca <HAL_DMA_Abort+0x49a>
 8003c74:	40020010 	.word	0x40020010
 8003c78:	40020028 	.word	0x40020028
 8003c7c:	40020040 	.word	0x40020040
 8003c80:	40020058 	.word	0x40020058
 8003c84:	40020070 	.word	0x40020070
 8003c88:	40020088 	.word	0x40020088
 8003c8c:	400200a0 	.word	0x400200a0
 8003c90:	400200b8 	.word	0x400200b8
 8003c94:	40020410 	.word	0x40020410
 8003c98:	40020428 	.word	0x40020428
 8003c9c:	40020440 	.word	0x40020440
 8003ca0:	40020458 	.word	0x40020458
 8003ca4:	40020470 	.word	0x40020470
 8003ca8:	40020488 	.word	0x40020488
 8003cac:	400204a0 	.word	0x400204a0
 8003cb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a4f      	ldr	r2, [pc, #316]	; (8003e0c <HAL_DMA_Abort+0x5dc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d072      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a4d      	ldr	r2, [pc, #308]	; (8003e10 <HAL_DMA_Abort+0x5e0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d06d      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <HAL_DMA_Abort+0x5e4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d068      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4a      	ldr	r2, [pc, #296]	; (8003e18 <HAL_DMA_Abort+0x5e8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d063      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a49      	ldr	r2, [pc, #292]	; (8003e1c <HAL_DMA_Abort+0x5ec>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d05e      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a47      	ldr	r2, [pc, #284]	; (8003e20 <HAL_DMA_Abort+0x5f0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d059      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a46      	ldr	r2, [pc, #280]	; (8003e24 <HAL_DMA_Abort+0x5f4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d054      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a44      	ldr	r2, [pc, #272]	; (8003e28 <HAL_DMA_Abort+0x5f8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04f      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a43      	ldr	r2, [pc, #268]	; (8003e2c <HAL_DMA_Abort+0x5fc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d04a      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a41      	ldr	r2, [pc, #260]	; (8003e30 <HAL_DMA_Abort+0x600>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d045      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a40      	ldr	r2, [pc, #256]	; (8003e34 <HAL_DMA_Abort+0x604>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d040      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a3e      	ldr	r2, [pc, #248]	; (8003e38 <HAL_DMA_Abort+0x608>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d03b      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a3d      	ldr	r2, [pc, #244]	; (8003e3c <HAL_DMA_Abort+0x60c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d036      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a3b      	ldr	r2, [pc, #236]	; (8003e40 <HAL_DMA_Abort+0x610>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d031      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3a      	ldr	r2, [pc, #232]	; (8003e44 <HAL_DMA_Abort+0x614>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d02c      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <HAL_DMA_Abort+0x618>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d027      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a37      	ldr	r2, [pc, #220]	; (8003e4c <HAL_DMA_Abort+0x61c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a35      	ldr	r2, [pc, #212]	; (8003e50 <HAL_DMA_Abort+0x620>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a34      	ldr	r2, [pc, #208]	; (8003e54 <HAL_DMA_Abort+0x624>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <HAL_DMA_Abort+0x628>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a31      	ldr	r2, [pc, #196]	; (8003e5c <HAL_DMA_Abort+0x62c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <HAL_DMA_Abort+0x630>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2e      	ldr	r2, [pc, #184]	; (8003e64 <HAL_DMA_Abort+0x634>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_DMA_Abort+0x58a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <HAL_DMA_Abort+0x638>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_DMA_Abort+0x58e>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_DMA_Abort+0x590>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dcc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00c      	beq.n	8003df0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
 8003e4c:	58025408 	.word	0x58025408
 8003e50:	5802541c 	.word	0x5802541c
 8003e54:	58025430 	.word	0x58025430
 8003e58:	58025444 	.word	0x58025444
 8003e5c:	58025458 	.word	0x58025458
 8003e60:	5802546c 	.word	0x5802546c
 8003e64:	58025480 	.word	0x58025480
 8003e68:	58025494 	.word	0x58025494

08003e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e237      	b.n	80042ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d004      	beq.n	8003e94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e22c      	b.n	80042ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5c      	ldr	r2, [pc, #368]	; (800400c <HAL_DMA_Abort_IT+0x1a0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d04a      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5b      	ldr	r2, [pc, #364]	; (8004010 <HAL_DMA_Abort_IT+0x1a4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d045      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a59      	ldr	r2, [pc, #356]	; (8004014 <HAL_DMA_Abort_IT+0x1a8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d040      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a58      	ldr	r2, [pc, #352]	; (8004018 <HAL_DMA_Abort_IT+0x1ac>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d03b      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a56      	ldr	r2, [pc, #344]	; (800401c <HAL_DMA_Abort_IT+0x1b0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d036      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a55      	ldr	r2, [pc, #340]	; (8004020 <HAL_DMA_Abort_IT+0x1b4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d031      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a53      	ldr	r2, [pc, #332]	; (8004024 <HAL_DMA_Abort_IT+0x1b8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d02c      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a52      	ldr	r2, [pc, #328]	; (8004028 <HAL_DMA_Abort_IT+0x1bc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d027      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	; (800402c <HAL_DMA_Abort_IT+0x1c0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d022      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4f      	ldr	r2, [pc, #316]	; (8004030 <HAL_DMA_Abort_IT+0x1c4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d01d      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a4d      	ldr	r2, [pc, #308]	; (8004034 <HAL_DMA_Abort_IT+0x1c8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d018      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a4c      	ldr	r2, [pc, #304]	; (8004038 <HAL_DMA_Abort_IT+0x1cc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4a      	ldr	r2, [pc, #296]	; (800403c <HAL_DMA_Abort_IT+0x1d0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00e      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a49      	ldr	r2, [pc, #292]	; (8004040 <HAL_DMA_Abort_IT+0x1d4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a47      	ldr	r2, [pc, #284]	; (8004044 <HAL_DMA_Abort_IT+0x1d8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_DMA_Abort_IT+0xc8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a46      	ldr	r2, [pc, #280]	; (8004048 <HAL_DMA_Abort_IT+0x1dc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d101      	bne.n	8003f38 <HAL_DMA_Abort_IT+0xcc>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <HAL_DMA_Abort_IT+0xce>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8086 	beq.w	800404c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2204      	movs	r2, #4
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2f      	ldr	r2, [pc, #188]	; (800400c <HAL_DMA_Abort_IT+0x1a0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d04a      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <HAL_DMA_Abort_IT+0x1a4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d045      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a2c      	ldr	r2, [pc, #176]	; (8004014 <HAL_DMA_Abort_IT+0x1a8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d040      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <HAL_DMA_Abort_IT+0x1ac>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d03b      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a29      	ldr	r2, [pc, #164]	; (800401c <HAL_DMA_Abort_IT+0x1b0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d036      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a28      	ldr	r2, [pc, #160]	; (8004020 <HAL_DMA_Abort_IT+0x1b4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d031      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a26      	ldr	r2, [pc, #152]	; (8004024 <HAL_DMA_Abort_IT+0x1b8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d02c      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a25      	ldr	r2, [pc, #148]	; (8004028 <HAL_DMA_Abort_IT+0x1bc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d027      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a23      	ldr	r2, [pc, #140]	; (800402c <HAL_DMA_Abort_IT+0x1c0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d022      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_DMA_Abort_IT+0x1c4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d01d      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a20      	ldr	r2, [pc, #128]	; (8004034 <HAL_DMA_Abort_IT+0x1c8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d018      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_DMA_Abort_IT+0x1cc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d013      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_DMA_Abort_IT+0x1d0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_DMA_Abort_IT+0x1d4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_DMA_Abort_IT+0x1d8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x17c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_DMA_Abort_IT+0x1dc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d108      	bne.n	8003ffa <HAL_DMA_Abort_IT+0x18e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0201 	bic.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e178      	b.n	80042ec <HAL_DMA_Abort_IT+0x480>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e16f      	b.n	80042ec <HAL_DMA_Abort_IT+0x480>
 800400c:	40020010 	.word	0x40020010
 8004010:	40020028 	.word	0x40020028
 8004014:	40020040 	.word	0x40020040
 8004018:	40020058 	.word	0x40020058
 800401c:	40020070 	.word	0x40020070
 8004020:	40020088 	.word	0x40020088
 8004024:	400200a0 	.word	0x400200a0
 8004028:	400200b8 	.word	0x400200b8
 800402c:	40020410 	.word	0x40020410
 8004030:	40020428 	.word	0x40020428
 8004034:	40020440 	.word	0x40020440
 8004038:	40020458 	.word	0x40020458
 800403c:	40020470 	.word	0x40020470
 8004040:	40020488 	.word	0x40020488
 8004044:	400204a0 	.word	0x400204a0
 8004048:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 020e 	bic.w	r2, r2, #14
 800405a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a6c      	ldr	r2, [pc, #432]	; (8004214 <HAL_DMA_Abort_IT+0x3a8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d04a      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6b      	ldr	r2, [pc, #428]	; (8004218 <HAL_DMA_Abort_IT+0x3ac>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d045      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a69      	ldr	r2, [pc, #420]	; (800421c <HAL_DMA_Abort_IT+0x3b0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d040      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a68      	ldr	r2, [pc, #416]	; (8004220 <HAL_DMA_Abort_IT+0x3b4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d03b      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a66      	ldr	r2, [pc, #408]	; (8004224 <HAL_DMA_Abort_IT+0x3b8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d036      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a65      	ldr	r2, [pc, #404]	; (8004228 <HAL_DMA_Abort_IT+0x3bc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d031      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a63      	ldr	r2, [pc, #396]	; (800422c <HAL_DMA_Abort_IT+0x3c0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d02c      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a62      	ldr	r2, [pc, #392]	; (8004230 <HAL_DMA_Abort_IT+0x3c4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d027      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a60      	ldr	r2, [pc, #384]	; (8004234 <HAL_DMA_Abort_IT+0x3c8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5f      	ldr	r2, [pc, #380]	; (8004238 <HAL_DMA_Abort_IT+0x3cc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d01d      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a5d      	ldr	r2, [pc, #372]	; (800423c <HAL_DMA_Abort_IT+0x3d0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d018      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a5c      	ldr	r2, [pc, #368]	; (8004240 <HAL_DMA_Abort_IT+0x3d4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5a      	ldr	r2, [pc, #360]	; (8004244 <HAL_DMA_Abort_IT+0x3d8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a59      	ldr	r2, [pc, #356]	; (8004248 <HAL_DMA_Abort_IT+0x3dc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a57      	ldr	r2, [pc, #348]	; (800424c <HAL_DMA_Abort_IT+0x3e0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_DMA_Abort_IT+0x290>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a56      	ldr	r2, [pc, #344]	; (8004250 <HAL_DMA_Abort_IT+0x3e4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <HAL_DMA_Abort_IT+0x2a2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e007      	b.n	800411e <HAL_DMA_Abort_IT+0x2b2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a3c      	ldr	r2, [pc, #240]	; (8004214 <HAL_DMA_Abort_IT+0x3a8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d072      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3a      	ldr	r2, [pc, #232]	; (8004218 <HAL_DMA_Abort_IT+0x3ac>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d06d      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a39      	ldr	r2, [pc, #228]	; (800421c <HAL_DMA_Abort_IT+0x3b0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d068      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a37      	ldr	r2, [pc, #220]	; (8004220 <HAL_DMA_Abort_IT+0x3b4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d063      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a36      	ldr	r2, [pc, #216]	; (8004224 <HAL_DMA_Abort_IT+0x3b8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d05e      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_DMA_Abort_IT+0x3bc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d059      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a33      	ldr	r2, [pc, #204]	; (800422c <HAL_DMA_Abort_IT+0x3c0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d054      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a31      	ldr	r2, [pc, #196]	; (8004230 <HAL_DMA_Abort_IT+0x3c4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d04f      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a30      	ldr	r2, [pc, #192]	; (8004234 <HAL_DMA_Abort_IT+0x3c8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d04a      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2e      	ldr	r2, [pc, #184]	; (8004238 <HAL_DMA_Abort_IT+0x3cc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d045      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2d      	ldr	r2, [pc, #180]	; (800423c <HAL_DMA_Abort_IT+0x3d0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d040      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <HAL_DMA_Abort_IT+0x3d4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d03b      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <HAL_DMA_Abort_IT+0x3d8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d036      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a28      	ldr	r2, [pc, #160]	; (8004248 <HAL_DMA_Abort_IT+0x3dc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d031      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a27      	ldr	r2, [pc, #156]	; (800424c <HAL_DMA_Abort_IT+0x3e0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d02c      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a25      	ldr	r2, [pc, #148]	; (8004250 <HAL_DMA_Abort_IT+0x3e4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d027      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a24      	ldr	r2, [pc, #144]	; (8004254 <HAL_DMA_Abort_IT+0x3e8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d022      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_DMA_Abort_IT+0x3ec>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01d      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a21      	ldr	r2, [pc, #132]	; (800425c <HAL_DMA_Abort_IT+0x3f0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_DMA_Abort_IT+0x3f4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <HAL_DMA_Abort_IT+0x3f8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <HAL_DMA_Abort_IT+0x3fc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	; (800426c <HAL_DMA_Abort_IT+0x400>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_DMA_Abort_IT+0x3a2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a19      	ldr	r2, [pc, #100]	; (8004270 <HAL_DMA_Abort_IT+0x404>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d132      	bne.n	8004274 <HAL_DMA_Abort_IT+0x408>
 800420e:	2301      	movs	r3, #1
 8004210:	e031      	b.n	8004276 <HAL_DMA_Abort_IT+0x40a>
 8004212:	bf00      	nop
 8004214:	40020010 	.word	0x40020010
 8004218:	40020028 	.word	0x40020028
 800421c:	40020040 	.word	0x40020040
 8004220:	40020058 	.word	0x40020058
 8004224:	40020070 	.word	0x40020070
 8004228:	40020088 	.word	0x40020088
 800422c:	400200a0 	.word	0x400200a0
 8004230:	400200b8 	.word	0x400200b8
 8004234:	40020410 	.word	0x40020410
 8004238:	40020428 	.word	0x40020428
 800423c:	40020440 	.word	0x40020440
 8004240:	40020458 	.word	0x40020458
 8004244:	40020470 	.word	0x40020470
 8004248:	40020488 	.word	0x40020488
 800424c:	400204a0 	.word	0x400204a0
 8004250:	400204b8 	.word	0x400204b8
 8004254:	58025408 	.word	0x58025408
 8004258:	5802541c 	.word	0x5802541c
 800425c:	58025430 	.word	0x58025430
 8004260:	58025444 	.word	0x58025444
 8004264:	58025458 	.word	0x58025458
 8004268:	5802546c 	.word	0x5802546c
 800426c:	58025480 	.word	0x58025480
 8004270:	58025494 	.word	0x58025494
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d028      	beq.n	80042cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004288:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2201      	movs	r2, #1
 800429a:	409a      	lsls	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop

080042f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004304:	4b67      	ldr	r3, [pc, #412]	; (80044a4 <HAL_DMA_IRQHandler+0x1ac>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a67      	ldr	r2, [pc, #412]	; (80044a8 <HAL_DMA_IRQHandler+0x1b0>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	0a9b      	lsrs	r3, r3, #10
 8004310:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a5f      	ldr	r2, [pc, #380]	; (80044ac <HAL_DMA_IRQHandler+0x1b4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d04a      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a5d      	ldr	r2, [pc, #372]	; (80044b0 <HAL_DMA_IRQHandler+0x1b8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d045      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a5c      	ldr	r2, [pc, #368]	; (80044b4 <HAL_DMA_IRQHandler+0x1bc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d040      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a5a      	ldr	r2, [pc, #360]	; (80044b8 <HAL_DMA_IRQHandler+0x1c0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d03b      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a59      	ldr	r2, [pc, #356]	; (80044bc <HAL_DMA_IRQHandler+0x1c4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d036      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a57      	ldr	r2, [pc, #348]	; (80044c0 <HAL_DMA_IRQHandler+0x1c8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d031      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a56      	ldr	r2, [pc, #344]	; (80044c4 <HAL_DMA_IRQHandler+0x1cc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d02c      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a54      	ldr	r2, [pc, #336]	; (80044c8 <HAL_DMA_IRQHandler+0x1d0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d027      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a53      	ldr	r2, [pc, #332]	; (80044cc <HAL_DMA_IRQHandler+0x1d4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a51      	ldr	r2, [pc, #324]	; (80044d0 <HAL_DMA_IRQHandler+0x1d8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a50      	ldr	r2, [pc, #320]	; (80044d4 <HAL_DMA_IRQHandler+0x1dc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d018      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <HAL_DMA_IRQHandler+0x1e0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a4d      	ldr	r2, [pc, #308]	; (80044dc <HAL_DMA_IRQHandler+0x1e4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a4b      	ldr	r2, [pc, #300]	; (80044e0 <HAL_DMA_IRQHandler+0x1e8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a4a      	ldr	r2, [pc, #296]	; (80044e4 <HAL_DMA_IRQHandler+0x1ec>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_DMA_IRQHandler+0xd2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a48      	ldr	r2, [pc, #288]	; (80044e8 <HAL_DMA_IRQHandler+0x1f0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_DMA_IRQHandler+0xd6>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_DMA_IRQHandler+0xd8>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 842b 	beq.w	8004c2c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	2208      	movs	r2, #8
 80043e0:	409a      	lsls	r2, r3
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80a2 	beq.w	8004530 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a2e      	ldr	r2, [pc, #184]	; (80044ac <HAL_DMA_IRQHandler+0x1b4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d04a      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2d      	ldr	r2, [pc, #180]	; (80044b0 <HAL_DMA_IRQHandler+0x1b8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d045      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2b      	ldr	r2, [pc, #172]	; (80044b4 <HAL_DMA_IRQHandler+0x1bc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d040      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <HAL_DMA_IRQHandler+0x1c0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d03b      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a28      	ldr	r2, [pc, #160]	; (80044bc <HAL_DMA_IRQHandler+0x1c4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d036      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <HAL_DMA_IRQHandler+0x1c8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d031      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <HAL_DMA_IRQHandler+0x1cc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d02c      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <HAL_DMA_IRQHandler+0x1d0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d027      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <HAL_DMA_IRQHandler+0x1d4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d022      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <HAL_DMA_IRQHandler+0x1d8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d01d      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <HAL_DMA_IRQHandler+0x1dc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d018      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <HAL_DMA_IRQHandler+0x1e0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <HAL_DMA_IRQHandler+0x1e4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00e      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <HAL_DMA_IRQHandler+0x1e8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <HAL_DMA_IRQHandler+0x1ec>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_DMA_IRQHandler+0x194>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <HAL_DMA_IRQHandler+0x1f0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d12f      	bne.n	80044ec <HAL_DMA_IRQHandler+0x1f4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e02e      	b.n	8004500 <HAL_DMA_IRQHandler+0x208>
 80044a2:	bf00      	nop
 80044a4:	24000000 	.word	0x24000000
 80044a8:	1b4e81b5 	.word	0x1b4e81b5
 80044ac:	40020010 	.word	0x40020010
 80044b0:	40020028 	.word	0x40020028
 80044b4:	40020040 	.word	0x40020040
 80044b8:	40020058 	.word	0x40020058
 80044bc:	40020070 	.word	0x40020070
 80044c0:	40020088 	.word	0x40020088
 80044c4:	400200a0 	.word	0x400200a0
 80044c8:	400200b8 	.word	0x400200b8
 80044cc:	40020410 	.word	0x40020410
 80044d0:	40020428 	.word	0x40020428
 80044d4:	40020440 	.word	0x40020440
 80044d8:	40020458 	.word	0x40020458
 80044dc:	40020470 	.word	0x40020470
 80044e0:	40020488 	.word	0x40020488
 80044e4:	400204a0 	.word	0x400204a0
 80044e8:	400204b8 	.word	0x400204b8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2208      	movs	r2, #8
 800451e:	409a      	lsls	r2, r3
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	fa22 f303 	lsr.w	r3, r2, r3
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d06e      	beq.n	8004624 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a69      	ldr	r2, [pc, #420]	; (80046f0 <HAL_DMA_IRQHandler+0x3f8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d04a      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a67      	ldr	r2, [pc, #412]	; (80046f4 <HAL_DMA_IRQHandler+0x3fc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d045      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a66      	ldr	r2, [pc, #408]	; (80046f8 <HAL_DMA_IRQHandler+0x400>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d040      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a64      	ldr	r2, [pc, #400]	; (80046fc <HAL_DMA_IRQHandler+0x404>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d03b      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a63      	ldr	r2, [pc, #396]	; (8004700 <HAL_DMA_IRQHandler+0x408>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d036      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a61      	ldr	r2, [pc, #388]	; (8004704 <HAL_DMA_IRQHandler+0x40c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d031      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a60      	ldr	r2, [pc, #384]	; (8004708 <HAL_DMA_IRQHandler+0x410>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d02c      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a5e      	ldr	r2, [pc, #376]	; (800470c <HAL_DMA_IRQHandler+0x414>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d027      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5d      	ldr	r2, [pc, #372]	; (8004710 <HAL_DMA_IRQHandler+0x418>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d022      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a5b      	ldr	r2, [pc, #364]	; (8004714 <HAL_DMA_IRQHandler+0x41c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01d      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a5a      	ldr	r2, [pc, #360]	; (8004718 <HAL_DMA_IRQHandler+0x420>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d018      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a58      	ldr	r2, [pc, #352]	; (800471c <HAL_DMA_IRQHandler+0x424>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d013      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a57      	ldr	r2, [pc, #348]	; (8004720 <HAL_DMA_IRQHandler+0x428>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00e      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a55      	ldr	r2, [pc, #340]	; (8004724 <HAL_DMA_IRQHandler+0x42c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d009      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a54      	ldr	r2, [pc, #336]	; (8004728 <HAL_DMA_IRQHandler+0x430>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x2ee>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_DMA_IRQHandler+0x434>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d10a      	bne.n	80045fc <HAL_DMA_IRQHandler+0x304>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e003      	b.n	8004604 <HAL_DMA_IRQHandler+0x30c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f043 0202 	orr.w	r2, r3, #2
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	2204      	movs	r2, #4
 800462e:	409a      	lsls	r2, r3
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 808f 	beq.w	8004758 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2c      	ldr	r2, [pc, #176]	; (80046f0 <HAL_DMA_IRQHandler+0x3f8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d04a      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <HAL_DMA_IRQHandler+0x3fc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d045      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <HAL_DMA_IRQHandler+0x400>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d040      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a27      	ldr	r2, [pc, #156]	; (80046fc <HAL_DMA_IRQHandler+0x404>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d03b      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a26      	ldr	r2, [pc, #152]	; (8004700 <HAL_DMA_IRQHandler+0x408>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d036      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_DMA_IRQHandler+0x40c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d031      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_DMA_IRQHandler+0x410>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d02c      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a21      	ldr	r2, [pc, #132]	; (800470c <HAL_DMA_IRQHandler+0x414>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d027      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a20      	ldr	r2, [pc, #128]	; (8004710 <HAL_DMA_IRQHandler+0x418>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_DMA_IRQHandler+0x41c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01d      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_DMA_IRQHandler+0x420>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1b      	ldr	r2, [pc, #108]	; (800471c <HAL_DMA_IRQHandler+0x424>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <HAL_DMA_IRQHandler+0x428>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_DMA_IRQHandler+0x42c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a17      	ldr	r2, [pc, #92]	; (8004728 <HAL_DMA_IRQHandler+0x430>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_DMA_IRQHandler+0x3e2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <HAL_DMA_IRQHandler+0x434>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d12a      	bne.n	8004730 <HAL_DMA_IRQHandler+0x438>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e023      	b.n	8004738 <HAL_DMA_IRQHandler+0x440>
 80046f0:	40020010 	.word	0x40020010
 80046f4:	40020028 	.word	0x40020028
 80046f8:	40020040 	.word	0x40020040
 80046fc:	40020058 	.word	0x40020058
 8004700:	40020070 	.word	0x40020070
 8004704:	40020088 	.word	0x40020088
 8004708:	400200a0 	.word	0x400200a0
 800470c:	400200b8 	.word	0x400200b8
 8004710:	40020410 	.word	0x40020410
 8004714:	40020428 	.word	0x40020428
 8004718:	40020440 	.word	0x40020440
 800471c:	40020458 	.word	0x40020458
 8004720:	40020470 	.word	0x40020470
 8004724:	40020488 	.word	0x40020488
 8004728:	400204a0 	.word	0x400204a0
 800472c:	400204b8 	.word	0x400204b8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00d      	beq.n	8004758 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2204      	movs	r2, #4
 8004746:	409a      	lsls	r2, r3
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2210      	movs	r2, #16
 8004762:	409a      	lsls	r2, r3
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80a6 	beq.w	80048ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a85      	ldr	r2, [pc, #532]	; (8004988 <HAL_DMA_IRQHandler+0x690>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d04a      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a83      	ldr	r2, [pc, #524]	; (800498c <HAL_DMA_IRQHandler+0x694>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d045      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a82      	ldr	r2, [pc, #520]	; (8004990 <HAL_DMA_IRQHandler+0x698>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d040      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a80      	ldr	r2, [pc, #512]	; (8004994 <HAL_DMA_IRQHandler+0x69c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d03b      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a7f      	ldr	r2, [pc, #508]	; (8004998 <HAL_DMA_IRQHandler+0x6a0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d036      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a7d      	ldr	r2, [pc, #500]	; (800499c <HAL_DMA_IRQHandler+0x6a4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d031      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a7c      	ldr	r2, [pc, #496]	; (80049a0 <HAL_DMA_IRQHandler+0x6a8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d02c      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a7a      	ldr	r2, [pc, #488]	; (80049a4 <HAL_DMA_IRQHandler+0x6ac>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d027      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a79      	ldr	r2, [pc, #484]	; (80049a8 <HAL_DMA_IRQHandler+0x6b0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a77      	ldr	r2, [pc, #476]	; (80049ac <HAL_DMA_IRQHandler+0x6b4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01d      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a76      	ldr	r2, [pc, #472]	; (80049b0 <HAL_DMA_IRQHandler+0x6b8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a74      	ldr	r2, [pc, #464]	; (80049b4 <HAL_DMA_IRQHandler+0x6bc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a73      	ldr	r2, [pc, #460]	; (80049b8 <HAL_DMA_IRQHandler+0x6c0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a71      	ldr	r2, [pc, #452]	; (80049bc <HAL_DMA_IRQHandler+0x6c4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a70      	ldr	r2, [pc, #448]	; (80049c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_DMA_IRQHandler+0x516>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a6e      	ldr	r2, [pc, #440]	; (80049c4 <HAL_DMA_IRQHandler+0x6cc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d10a      	bne.n	8004824 <HAL_DMA_IRQHandler+0x52c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	e009      	b.n	8004838 <HAL_DMA_IRQHandler+0x540>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d03e      	beq.n	80048ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2210      	movs	r2, #16
 8004846:	409a      	lsls	r2, r3
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d018      	beq.n	800488c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d108      	bne.n	800487a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d024      	beq.n	80048ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
 8004878:	e01f      	b.n	80048ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01b      	beq.n	80048ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
 800488a:	e016      	b.n	80048ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d107      	bne.n	80048aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0208 	bic.w	r2, r2, #8
 80048a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2220      	movs	r2, #32
 80048c4:	409a      	lsls	r2, r3
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8110 	beq.w	8004af0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2c      	ldr	r2, [pc, #176]	; (8004988 <HAL_DMA_IRQHandler+0x690>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d04a      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2b      	ldr	r2, [pc, #172]	; (800498c <HAL_DMA_IRQHandler+0x694>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d045      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a29      	ldr	r2, [pc, #164]	; (8004990 <HAL_DMA_IRQHandler+0x698>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d040      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a28      	ldr	r2, [pc, #160]	; (8004994 <HAL_DMA_IRQHandler+0x69c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d03b      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_DMA_IRQHandler+0x6a0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d036      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a25      	ldr	r2, [pc, #148]	; (800499c <HAL_DMA_IRQHandler+0x6a4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d031      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a23      	ldr	r2, [pc, #140]	; (80049a0 <HAL_DMA_IRQHandler+0x6a8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02c      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <HAL_DMA_IRQHandler+0x6ac>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d027      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <HAL_DMA_IRQHandler+0x6b0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d022      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <HAL_DMA_IRQHandler+0x6b4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d01d      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_DMA_IRQHandler+0x6b8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d018      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_DMA_IRQHandler+0x6bc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <HAL_DMA_IRQHandler+0x6c0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00e      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a19      	ldr	r2, [pc, #100]	; (80049bc <HAL_DMA_IRQHandler+0x6c4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d009      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <HAL_DMA_IRQHandler+0x678>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <HAL_DMA_IRQHandler+0x6cc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d12b      	bne.n	80049c8 <HAL_DMA_IRQHandler+0x6d0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	e02a      	b.n	80049dc <HAL_DMA_IRQHandler+0x6e4>
 8004986:	bf00      	nop
 8004988:	40020010 	.word	0x40020010
 800498c:	40020028 	.word	0x40020028
 8004990:	40020040 	.word	0x40020040
 8004994:	40020058 	.word	0x40020058
 8004998:	40020070 	.word	0x40020070
 800499c:	40020088 	.word	0x40020088
 80049a0:	400200a0 	.word	0x400200a0
 80049a4:	400200b8 	.word	0x400200b8
 80049a8:	40020410 	.word	0x40020410
 80049ac:	40020428 	.word	0x40020428
 80049b0:	40020440 	.word	0x40020440
 80049b4:	40020458 	.word	0x40020458
 80049b8:	40020470 	.word	0x40020470
 80049bc:	40020488 	.word	0x40020488
 80049c0:	400204a0 	.word	0x400204a0
 80049c4:	400204b8 	.word	0x400204b8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf14      	ite	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	2300      	moveq	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8087 	beq.w	8004af0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2220      	movs	r2, #32
 80049ec:	409a      	lsls	r2, r3
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d139      	bne.n	8004a72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0216 	bic.w	r2, r2, #22
 8004a0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <HAL_DMA_IRQHandler+0x736>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0208 	bic.w	r2, r2, #8
 8004a3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	223f      	movs	r2, #63	; 0x3f
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 834a 	beq.w	80050fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
          }
          return;
 8004a70:	e344      	b.n	80050fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d018      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d02c      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
 8004a9e:	e027      	b.n	8004af0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d023      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
 8004ab0:	e01e      	b.n	8004af0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10f      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0210 	bic.w	r2, r2, #16
 8004ace:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8306 	beq.w	8005106 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8088 	beq.w	8004c18 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7a      	ldr	r2, [pc, #488]	; (8004d00 <HAL_DMA_IRQHandler+0xa08>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d04a      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a79      	ldr	r2, [pc, #484]	; (8004d04 <HAL_DMA_IRQHandler+0xa0c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d045      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a77      	ldr	r2, [pc, #476]	; (8004d08 <HAL_DMA_IRQHandler+0xa10>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d040      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a76      	ldr	r2, [pc, #472]	; (8004d0c <HAL_DMA_IRQHandler+0xa14>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d03b      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a74      	ldr	r2, [pc, #464]	; (8004d10 <HAL_DMA_IRQHandler+0xa18>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d036      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a73      	ldr	r2, [pc, #460]	; (8004d14 <HAL_DMA_IRQHandler+0xa1c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d031      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a71      	ldr	r2, [pc, #452]	; (8004d18 <HAL_DMA_IRQHandler+0xa20>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02c      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a70      	ldr	r2, [pc, #448]	; (8004d1c <HAL_DMA_IRQHandler+0xa24>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d027      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a6e      	ldr	r2, [pc, #440]	; (8004d20 <HAL_DMA_IRQHandler+0xa28>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d022      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6d      	ldr	r2, [pc, #436]	; (8004d24 <HAL_DMA_IRQHandler+0xa2c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d01d      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6b      	ldr	r2, [pc, #428]	; (8004d28 <HAL_DMA_IRQHandler+0xa30>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d018      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6a      	ldr	r2, [pc, #424]	; (8004d2c <HAL_DMA_IRQHandler+0xa34>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a68      	ldr	r2, [pc, #416]	; (8004d30 <HAL_DMA_IRQHandler+0xa38>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00e      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <HAL_DMA_IRQHandler+0xa3c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a65      	ldr	r2, [pc, #404]	; (8004d38 <HAL_DMA_IRQHandler+0xa40>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8b8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a64      	ldr	r2, [pc, #400]	; (8004d3c <HAL_DMA_IRQHandler+0xa44>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <HAL_DMA_IRQHandler+0x8ca>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e007      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x8da>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d307      	bcc.n	8004bee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f2      	bne.n	8004bd2 <HAL_DMA_IRQHandler+0x8da>
 8004bec:	e000      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004bee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2203      	movs	r2, #3
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c06:	e003      	b.n	8004c10 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8272 	beq.w	8005106 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
 8004c2a:	e26c      	b.n	8005106 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a43      	ldr	r2, [pc, #268]	; (8004d40 <HAL_DMA_IRQHandler+0xa48>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d022      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x984>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a42      	ldr	r2, [pc, #264]	; (8004d44 <HAL_DMA_IRQHandler+0xa4c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d01d      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x984>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a40      	ldr	r2, [pc, #256]	; (8004d48 <HAL_DMA_IRQHandler+0xa50>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d018      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x984>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	; (8004d4c <HAL_DMA_IRQHandler+0xa54>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d013      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x984>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3d      	ldr	r2, [pc, #244]	; (8004d50 <HAL_DMA_IRQHandler+0xa58>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00e      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x984>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3c      	ldr	r2, [pc, #240]	; (8004d54 <HAL_DMA_IRQHandler+0xa5c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d009      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x984>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3a      	ldr	r2, [pc, #232]	; (8004d58 <HAL_DMA_IRQHandler+0xa60>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x984>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a39      	ldr	r2, [pc, #228]	; (8004d5c <HAL_DMA_IRQHandler+0xa64>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_DMA_IRQHandler+0x988>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_DMA_IRQHandler+0x98a>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 823f 	beq.w	8005106 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2204      	movs	r2, #4
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80cd 	beq.w	8004e40 <HAL_DMA_IRQHandler+0xb48>
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80c7 	beq.w	8004e40 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	2204      	movs	r2, #4
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d049      	beq.n	8004d60 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8210 	beq.w	8005100 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce8:	e20a      	b.n	8005100 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8206 	beq.w	8005100 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cfc:	e200      	b.n	8005100 <HAL_DMA_IRQHandler+0xe08>
 8004cfe:	bf00      	nop
 8004d00:	40020010 	.word	0x40020010
 8004d04:	40020028 	.word	0x40020028
 8004d08:	40020040 	.word	0x40020040
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	40020070 	.word	0x40020070
 8004d14:	40020088 	.word	0x40020088
 8004d18:	400200a0 	.word	0x400200a0
 8004d1c:	400200b8 	.word	0x400200b8
 8004d20:	40020410 	.word	0x40020410
 8004d24:	40020428 	.word	0x40020428
 8004d28:	40020440 	.word	0x40020440
 8004d2c:	40020458 	.word	0x40020458
 8004d30:	40020470 	.word	0x40020470
 8004d34:	40020488 	.word	0x40020488
 8004d38:	400204a0 	.word	0x400204a0
 8004d3c:	400204b8 	.word	0x400204b8
 8004d40:	58025408 	.word	0x58025408
 8004d44:	5802541c 	.word	0x5802541c
 8004d48:	58025430 	.word	0x58025430
 8004d4c:	58025444 	.word	0x58025444
 8004d50:	58025458 	.word	0x58025458
 8004d54:	5802546c 	.word	0x5802546c
 8004d58:	58025480 	.word	0x58025480
 8004d5c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d160      	bne.n	8004e2c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7f      	ldr	r2, [pc, #508]	; (8004f6c <HAL_DMA_IRQHandler+0xc74>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d04a      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7d      	ldr	r2, [pc, #500]	; (8004f70 <HAL_DMA_IRQHandler+0xc78>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d045      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a7c      	ldr	r2, [pc, #496]	; (8004f74 <HAL_DMA_IRQHandler+0xc7c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d040      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a7a      	ldr	r2, [pc, #488]	; (8004f78 <HAL_DMA_IRQHandler+0xc80>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d03b      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a79      	ldr	r2, [pc, #484]	; (8004f7c <HAL_DMA_IRQHandler+0xc84>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d036      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a77      	ldr	r2, [pc, #476]	; (8004f80 <HAL_DMA_IRQHandler+0xc88>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d031      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a76      	ldr	r2, [pc, #472]	; (8004f84 <HAL_DMA_IRQHandler+0xc8c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d02c      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a74      	ldr	r2, [pc, #464]	; (8004f88 <HAL_DMA_IRQHandler+0xc90>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d027      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a73      	ldr	r2, [pc, #460]	; (8004f8c <HAL_DMA_IRQHandler+0xc94>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d022      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a71      	ldr	r2, [pc, #452]	; (8004f90 <HAL_DMA_IRQHandler+0xc98>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d01d      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a70      	ldr	r2, [pc, #448]	; (8004f94 <HAL_DMA_IRQHandler+0xc9c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d018      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a6e      	ldr	r2, [pc, #440]	; (8004f98 <HAL_DMA_IRQHandler+0xca0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6d      	ldr	r2, [pc, #436]	; (8004f9c <HAL_DMA_IRQHandler+0xca4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00e      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6b      	ldr	r2, [pc, #428]	; (8004fa0 <HAL_DMA_IRQHandler+0xca8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d009      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6a      	ldr	r2, [pc, #424]	; (8004fa4 <HAL_DMA_IRQHandler+0xcac>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xb12>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a68      	ldr	r2, [pc, #416]	; (8004fa8 <HAL_DMA_IRQHandler+0xcb0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d108      	bne.n	8004e1c <HAL_DMA_IRQHandler+0xb24>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0208 	bic.w	r2, r2, #8
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e007      	b.n	8004e2c <HAL_DMA_IRQHandler+0xb34>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0204 	bic.w	r2, r2, #4
 8004e2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8165 	beq.w	8005100 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e3e:	e15f      	b.n	8005100 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	2202      	movs	r2, #2
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80c5 	beq.w	8004fe0 <HAL_DMA_IRQHandler+0xce8>
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80bf 	beq.w	8004fe0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d018      	beq.n	8004eae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 813a 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e98:	e134      	b.n	8005104 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8130 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eac:	e12a      	b.n	8005104 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 8089 	bne.w	8004fcc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <HAL_DMA_IRQHandler+0xc74>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d04a      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <HAL_DMA_IRQHandler+0xc78>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d045      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a28      	ldr	r2, [pc, #160]	; (8004f74 <HAL_DMA_IRQHandler+0xc7c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d040      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <HAL_DMA_IRQHandler+0xc80>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d03b      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <HAL_DMA_IRQHandler+0xc84>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d036      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <HAL_DMA_IRQHandler+0xc88>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d031      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <HAL_DMA_IRQHandler+0xc8c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d02c      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <HAL_DMA_IRQHandler+0xc90>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d027      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <HAL_DMA_IRQHandler+0xc94>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <HAL_DMA_IRQHandler+0xc98>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01d      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <HAL_DMA_IRQHandler+0xc9c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <HAL_DMA_IRQHandler+0xca0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <HAL_DMA_IRQHandler+0xca4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <HAL_DMA_IRQHandler+0xca8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <HAL_DMA_IRQHandler+0xcac>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xc62>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <HAL_DMA_IRQHandler+0xcb0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d128      	bne.n	8004fac <HAL_DMA_IRQHandler+0xcb4>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0214 	bic.w	r2, r2, #20
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e027      	b.n	8004fbc <HAL_DMA_IRQHandler+0xcc4>
 8004f6c:	40020010 	.word	0x40020010
 8004f70:	40020028 	.word	0x40020028
 8004f74:	40020040 	.word	0x40020040
 8004f78:	40020058 	.word	0x40020058
 8004f7c:	40020070 	.word	0x40020070
 8004f80:	40020088 	.word	0x40020088
 8004f84:	400200a0 	.word	0x400200a0
 8004f88:	400200b8 	.word	0x400200b8
 8004f8c:	40020410 	.word	0x40020410
 8004f90:	40020428 	.word	0x40020428
 8004f94:	40020440 	.word	0x40020440
 8004f98:	40020458 	.word	0x40020458
 8004f9c:	40020470 	.word	0x40020470
 8004fa0:	40020488 	.word	0x40020488
 8004fa4:	400204a0 	.word	0x400204a0
 8004fa8:	400204b8 	.word	0x400204b8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 020a 	bic.w	r2, r2, #10
 8004fba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8097 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fde:	e091      	b.n	8005104 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2208      	movs	r2, #8
 8004fea:	409a      	lsls	r2, r3
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8088 	beq.w	8005106 <HAL_DMA_IRQHandler+0xe0e>
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8082 	beq.w	8005106 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a41      	ldr	r2, [pc, #260]	; (800510c <HAL_DMA_IRQHandler+0xe14>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d04a      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a3f      	ldr	r2, [pc, #252]	; (8005110 <HAL_DMA_IRQHandler+0xe18>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d045      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3e      	ldr	r2, [pc, #248]	; (8005114 <HAL_DMA_IRQHandler+0xe1c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d040      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3c      	ldr	r2, [pc, #240]	; (8005118 <HAL_DMA_IRQHandler+0xe20>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d03b      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a3b      	ldr	r2, [pc, #236]	; (800511c <HAL_DMA_IRQHandler+0xe24>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d036      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a39      	ldr	r2, [pc, #228]	; (8005120 <HAL_DMA_IRQHandler+0xe28>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d031      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a38      	ldr	r2, [pc, #224]	; (8005124 <HAL_DMA_IRQHandler+0xe2c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d02c      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a36      	ldr	r2, [pc, #216]	; (8005128 <HAL_DMA_IRQHandler+0xe30>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d027      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a35      	ldr	r2, [pc, #212]	; (800512c <HAL_DMA_IRQHandler+0xe34>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d022      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a33      	ldr	r2, [pc, #204]	; (8005130 <HAL_DMA_IRQHandler+0xe38>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01d      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a32      	ldr	r2, [pc, #200]	; (8005134 <HAL_DMA_IRQHandler+0xe3c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d018      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a30      	ldr	r2, [pc, #192]	; (8005138 <HAL_DMA_IRQHandler+0xe40>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d013      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2f      	ldr	r2, [pc, #188]	; (800513c <HAL_DMA_IRQHandler+0xe44>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00e      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <HAL_DMA_IRQHandler+0xe48>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d009      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a2c      	ldr	r2, [pc, #176]	; (8005144 <HAL_DMA_IRQHandler+0xe4c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d004      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xdaa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <HAL_DMA_IRQHandler+0xe50>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d108      	bne.n	80050b4 <HAL_DMA_IRQHandler+0xdbc>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 021c 	bic.w	r2, r2, #28
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e007      	b.n	80050c4 <HAL_DMA_IRQHandler+0xdcc>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 020e 	bic.w	r2, r2, #14
 80050c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2201      	movs	r2, #1
 80050ce:	409a      	lsls	r2, r3
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
 80050fa:	e004      	b.n	8005106 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005104:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005106:	3728      	adds	r7, #40	; 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40020010 	.word	0x40020010
 8005110:	40020028 	.word	0x40020028
 8005114:	40020040 	.word	0x40020040
 8005118:	40020058 	.word	0x40020058
 800511c:	40020070 	.word	0x40020070
 8005120:	40020088 	.word	0x40020088
 8005124:	400200a0 	.word	0x400200a0
 8005128:	400200b8 	.word	0x400200b8
 800512c:	40020410 	.word	0x40020410
 8005130:	40020428 	.word	0x40020428
 8005134:	40020440 	.word	0x40020440
 8005138:	40020458 	.word	0x40020458
 800513c:	40020470 	.word	0x40020470
 8005140:	40020488 	.word	0x40020488
 8005144:	400204a0 	.word	0x400204a0
 8005148:	400204b8 	.word	0x400204b8

0800514c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005164:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a7f      	ldr	r2, [pc, #508]	; (8005368 <DMA_SetConfig+0x21c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d072      	beq.n	8005256 <DMA_SetConfig+0x10a>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a7d      	ldr	r2, [pc, #500]	; (800536c <DMA_SetConfig+0x220>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d06d      	beq.n	8005256 <DMA_SetConfig+0x10a>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7c      	ldr	r2, [pc, #496]	; (8005370 <DMA_SetConfig+0x224>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d068      	beq.n	8005256 <DMA_SetConfig+0x10a>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a7a      	ldr	r2, [pc, #488]	; (8005374 <DMA_SetConfig+0x228>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d063      	beq.n	8005256 <DMA_SetConfig+0x10a>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a79      	ldr	r2, [pc, #484]	; (8005378 <DMA_SetConfig+0x22c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d05e      	beq.n	8005256 <DMA_SetConfig+0x10a>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a77      	ldr	r2, [pc, #476]	; (800537c <DMA_SetConfig+0x230>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d059      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a76      	ldr	r2, [pc, #472]	; (8005380 <DMA_SetConfig+0x234>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d054      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a74      	ldr	r2, [pc, #464]	; (8005384 <DMA_SetConfig+0x238>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d04f      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a73      	ldr	r2, [pc, #460]	; (8005388 <DMA_SetConfig+0x23c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04a      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a71      	ldr	r2, [pc, #452]	; (800538c <DMA_SetConfig+0x240>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d045      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a70      	ldr	r2, [pc, #448]	; (8005390 <DMA_SetConfig+0x244>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d040      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a6e      	ldr	r2, [pc, #440]	; (8005394 <DMA_SetConfig+0x248>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d03b      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a6d      	ldr	r2, [pc, #436]	; (8005398 <DMA_SetConfig+0x24c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d036      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a6b      	ldr	r2, [pc, #428]	; (800539c <DMA_SetConfig+0x250>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a6a      	ldr	r2, [pc, #424]	; (80053a0 <DMA_SetConfig+0x254>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d02c      	beq.n	8005256 <DMA_SetConfig+0x10a>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a68      	ldr	r2, [pc, #416]	; (80053a4 <DMA_SetConfig+0x258>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <DMA_SetConfig+0x10a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a67      	ldr	r2, [pc, #412]	; (80053a8 <DMA_SetConfig+0x25c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <DMA_SetConfig+0x10a>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a65      	ldr	r2, [pc, #404]	; (80053ac <DMA_SetConfig+0x260>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <DMA_SetConfig+0x10a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a64      	ldr	r2, [pc, #400]	; (80053b0 <DMA_SetConfig+0x264>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <DMA_SetConfig+0x10a>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a62      	ldr	r2, [pc, #392]	; (80053b4 <DMA_SetConfig+0x268>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <DMA_SetConfig+0x10a>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a61      	ldr	r2, [pc, #388]	; (80053b8 <DMA_SetConfig+0x26c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <DMA_SetConfig+0x10a>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a5f      	ldr	r2, [pc, #380]	; (80053bc <DMA_SetConfig+0x270>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <DMA_SetConfig+0x10a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a5e      	ldr	r2, [pc, #376]	; (80053c0 <DMA_SetConfig+0x274>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <DMA_SetConfig+0x10a>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5c      	ldr	r2, [pc, #368]	; (80053c4 <DMA_SetConfig+0x278>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <DMA_SetConfig+0x10e>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <DMA_SetConfig+0x110>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005268:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800527a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a39      	ldr	r2, [pc, #228]	; (8005368 <DMA_SetConfig+0x21c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d04a      	beq.n	800531c <DMA_SetConfig+0x1d0>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a38      	ldr	r2, [pc, #224]	; (800536c <DMA_SetConfig+0x220>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d045      	beq.n	800531c <DMA_SetConfig+0x1d0>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a36      	ldr	r2, [pc, #216]	; (8005370 <DMA_SetConfig+0x224>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d040      	beq.n	800531c <DMA_SetConfig+0x1d0>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a35      	ldr	r2, [pc, #212]	; (8005374 <DMA_SetConfig+0x228>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d03b      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a33      	ldr	r2, [pc, #204]	; (8005378 <DMA_SetConfig+0x22c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d036      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a32      	ldr	r2, [pc, #200]	; (800537c <DMA_SetConfig+0x230>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d031      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a30      	ldr	r2, [pc, #192]	; (8005380 <DMA_SetConfig+0x234>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d02c      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <DMA_SetConfig+0x238>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d027      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2d      	ldr	r2, [pc, #180]	; (8005388 <DMA_SetConfig+0x23c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d022      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2c      	ldr	r2, [pc, #176]	; (800538c <DMA_SetConfig+0x240>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d01d      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <DMA_SetConfig+0x244>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a29      	ldr	r2, [pc, #164]	; (8005394 <DMA_SetConfig+0x248>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a27      	ldr	r2, [pc, #156]	; (8005398 <DMA_SetConfig+0x24c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <DMA_SetConfig+0x1d0>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a26      	ldr	r2, [pc, #152]	; (800539c <DMA_SetConfig+0x250>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <DMA_SetConfig+0x1d0>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a24      	ldr	r2, [pc, #144]	; (80053a0 <DMA_SetConfig+0x254>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <DMA_SetConfig+0x1d0>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a23      	ldr	r2, [pc, #140]	; (80053a4 <DMA_SetConfig+0x258>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d101      	bne.n	8005320 <DMA_SetConfig+0x1d4>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <DMA_SetConfig+0x1d6>
 8005320:	2300      	movs	r3, #0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d059      	beq.n	80053da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	223f      	movs	r2, #63	; 0x3f
 8005330:	409a      	lsls	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005344:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d138      	bne.n	80053c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005366:	e086      	b.n	8005476 <DMA_SetConfig+0x32a>
 8005368:	40020010 	.word	0x40020010
 800536c:	40020028 	.word	0x40020028
 8005370:	40020040 	.word	0x40020040
 8005374:	40020058 	.word	0x40020058
 8005378:	40020070 	.word	0x40020070
 800537c:	40020088 	.word	0x40020088
 8005380:	400200a0 	.word	0x400200a0
 8005384:	400200b8 	.word	0x400200b8
 8005388:	40020410 	.word	0x40020410
 800538c:	40020428 	.word	0x40020428
 8005390:	40020440 	.word	0x40020440
 8005394:	40020458 	.word	0x40020458
 8005398:	40020470 	.word	0x40020470
 800539c:	40020488 	.word	0x40020488
 80053a0:	400204a0 	.word	0x400204a0
 80053a4:	400204b8 	.word	0x400204b8
 80053a8:	58025408 	.word	0x58025408
 80053ac:	5802541c 	.word	0x5802541c
 80053b0:	58025430 	.word	0x58025430
 80053b4:	58025444 	.word	0x58025444
 80053b8:	58025458 	.word	0x58025458
 80053bc:	5802546c 	.word	0x5802546c
 80053c0:	58025480 	.word	0x58025480
 80053c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]
}
 80053d8:	e04d      	b.n	8005476 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a29      	ldr	r2, [pc, #164]	; (8005484 <DMA_SetConfig+0x338>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d022      	beq.n	800542a <DMA_SetConfig+0x2de>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a27      	ldr	r2, [pc, #156]	; (8005488 <DMA_SetConfig+0x33c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01d      	beq.n	800542a <DMA_SetConfig+0x2de>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a26      	ldr	r2, [pc, #152]	; (800548c <DMA_SetConfig+0x340>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d018      	beq.n	800542a <DMA_SetConfig+0x2de>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a24      	ldr	r2, [pc, #144]	; (8005490 <DMA_SetConfig+0x344>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <DMA_SetConfig+0x2de>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a23      	ldr	r2, [pc, #140]	; (8005494 <DMA_SetConfig+0x348>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00e      	beq.n	800542a <DMA_SetConfig+0x2de>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a21      	ldr	r2, [pc, #132]	; (8005498 <DMA_SetConfig+0x34c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d009      	beq.n	800542a <DMA_SetConfig+0x2de>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a20      	ldr	r2, [pc, #128]	; (800549c <DMA_SetConfig+0x350>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <DMA_SetConfig+0x2de>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <DMA_SetConfig+0x354>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d101      	bne.n	800542e <DMA_SetConfig+0x2e2>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <DMA_SetConfig+0x2e4>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2201      	movs	r2, #1
 800543e:	409a      	lsls	r2, r3
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d108      	bne.n	8005466 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	60da      	str	r2, [r3, #12]
}
 8005464:	e007      	b.n	8005476 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	60da      	str	r2, [r3, #12]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	58025408 	.word	0x58025408
 8005488:	5802541c 	.word	0x5802541c
 800548c:	58025430 	.word	0x58025430
 8005490:	58025444 	.word	0x58025444
 8005494:	58025458 	.word	0x58025458
 8005498:	5802546c 	.word	0x5802546c
 800549c:	58025480 	.word	0x58025480
 80054a0:	58025494 	.word	0x58025494

080054a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a42      	ldr	r2, [pc, #264]	; (80055bc <DMA_CalcBaseAndBitshift+0x118>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d04a      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a41      	ldr	r2, [pc, #260]	; (80055c0 <DMA_CalcBaseAndBitshift+0x11c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d045      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a3f      	ldr	r2, [pc, #252]	; (80055c4 <DMA_CalcBaseAndBitshift+0x120>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d040      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a3e      	ldr	r2, [pc, #248]	; (80055c8 <DMA_CalcBaseAndBitshift+0x124>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d03b      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a3c      	ldr	r2, [pc, #240]	; (80055cc <DMA_CalcBaseAndBitshift+0x128>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d036      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a3b      	ldr	r2, [pc, #236]	; (80055d0 <DMA_CalcBaseAndBitshift+0x12c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d031      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a39      	ldr	r2, [pc, #228]	; (80055d4 <DMA_CalcBaseAndBitshift+0x130>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d02c      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a38      	ldr	r2, [pc, #224]	; (80055d8 <DMA_CalcBaseAndBitshift+0x134>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d027      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a36      	ldr	r2, [pc, #216]	; (80055dc <DMA_CalcBaseAndBitshift+0x138>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a35      	ldr	r2, [pc, #212]	; (80055e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d01d      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <DMA_CalcBaseAndBitshift+0x140>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a32      	ldr	r2, [pc, #200]	; (80055e8 <DMA_CalcBaseAndBitshift+0x144>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a30      	ldr	r2, [pc, #192]	; (80055ec <DMA_CalcBaseAndBitshift+0x148>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2f      	ldr	r2, [pc, #188]	; (80055f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <DMA_CalcBaseAndBitshift+0x150>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <DMA_CalcBaseAndBitshift+0xa8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <DMA_CalcBaseAndBitshift+0x154>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <DMA_CalcBaseAndBitshift+0xac>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <DMA_CalcBaseAndBitshift+0xae>
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d024      	beq.n	80055a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	3b10      	subs	r3, #16
 800555e:	4a27      	ldr	r2, [pc, #156]	; (80055fc <DMA_CalcBaseAndBitshift+0x158>)
 8005560:	fba2 2303 	umull	r2, r3, r2, r3
 8005564:	091b      	lsrs	r3, r3, #4
 8005566:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	4a24      	ldr	r2, [pc, #144]	; (8005600 <DMA_CalcBaseAndBitshift+0x15c>)
 8005570:	5cd3      	ldrb	r3, [r2, r3]
 8005572:	461a      	mov	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d908      	bls.n	8005590 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <DMA_CalcBaseAndBitshift+0x160>)
 8005586:	4013      	ands	r3, r2
 8005588:	1d1a      	adds	r2, r3, #4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	659a      	str	r2, [r3, #88]	; 0x58
 800558e:	e00d      	b.n	80055ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <DMA_CalcBaseAndBitshift+0x160>)
 8005598:	4013      	ands	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6593      	str	r3, [r2, #88]	; 0x58
 800559e:	e005      	b.n	80055ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	40020010 	.word	0x40020010
 80055c0:	40020028 	.word	0x40020028
 80055c4:	40020040 	.word	0x40020040
 80055c8:	40020058 	.word	0x40020058
 80055cc:	40020070 	.word	0x40020070
 80055d0:	40020088 	.word	0x40020088
 80055d4:	400200a0 	.word	0x400200a0
 80055d8:	400200b8 	.word	0x400200b8
 80055dc:	40020410 	.word	0x40020410
 80055e0:	40020428 	.word	0x40020428
 80055e4:	40020440 	.word	0x40020440
 80055e8:	40020458 	.word	0x40020458
 80055ec:	40020470 	.word	0x40020470
 80055f0:	40020488 	.word	0x40020488
 80055f4:	400204a0 	.word	0x400204a0
 80055f8:	400204b8 	.word	0x400204b8
 80055fc:	aaaaaaab 	.word	0xaaaaaaab
 8005600:	0800bef4 	.word	0x0800bef4
 8005604:	fffffc00 	.word	0xfffffc00

08005608 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d120      	bne.n	800565e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	2b03      	cmp	r3, #3
 8005622:	d858      	bhi.n	80056d6 <DMA_CheckFifoParam+0xce>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <DMA_CheckFifoParam+0x24>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	0800563d 	.word	0x0800563d
 8005630:	0800564f 	.word	0x0800564f
 8005634:	0800563d 	.word	0x0800563d
 8005638:	080056d7 	.word	0x080056d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d048      	beq.n	80056da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800564c:	e045      	b.n	80056da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005656:	d142      	bne.n	80056de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800565c:	e03f      	b.n	80056de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005666:	d123      	bne.n	80056b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	2b03      	cmp	r3, #3
 800566e:	d838      	bhi.n	80056e2 <DMA_CheckFifoParam+0xda>
 8005670:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <DMA_CheckFifoParam+0x70>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	08005689 	.word	0x08005689
 800567c:	0800568f 	.word	0x0800568f
 8005680:	08005689 	.word	0x08005689
 8005684:	080056a1 	.word	0x080056a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
        break;
 800568c:	e030      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d025      	beq.n	80056e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800569e:	e022      	b.n	80056e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056a8:	d11f      	bne.n	80056ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056ae:	e01c      	b.n	80056ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d902      	bls.n	80056be <DMA_CheckFifoParam+0xb6>
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d003      	beq.n	80056c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056bc:	e018      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
        break;
 80056c2:	e015      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00e      	beq.n	80056ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
    break;
 80056d4:	e00b      	b.n	80056ee <DMA_CheckFifoParam+0xe6>
        break;
 80056d6:	bf00      	nop
 80056d8:	e00a      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
        break;
 80056da:	bf00      	nop
 80056dc:	e008      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
        break;
 80056de:	bf00      	nop
 80056e0:	e006      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
        break;
 80056e2:	bf00      	nop
 80056e4:	e004      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
        break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
        break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
    break;
 80056ee:	bf00      	nop
    }
  }

  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop

08005700 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a38      	ldr	r2, [pc, #224]	; (80057f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a36      	ldr	r2, [pc, #216]	; (80057f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01d      	beq.n	800575e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a35      	ldr	r2, [pc, #212]	; (80057fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a33      	ldr	r2, [pc, #204]	; (8005800 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a32      	ldr	r2, [pc, #200]	; (8005804 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a30      	ldr	r2, [pc, #192]	; (8005808 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a2f      	ldr	r2, [pc, #188]	; (800580c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d101      	bne.n	8005762 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01a      	beq.n	800579e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	3b08      	subs	r3, #8
 8005770:	4a28      	ldr	r2, [pc, #160]	; (8005814 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4b26      	ldr	r3, [pc, #152]	; (8005818 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	461a      	mov	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a24      	ldr	r2, [pc, #144]	; (800581c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800578c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	2201      	movs	r2, #1
 8005796:	409a      	lsls	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800579c:	e024      	b.n	80057e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	3b10      	subs	r3, #16
 80057a6:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d806      	bhi.n	80057c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d902      	bls.n	80057c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3308      	adds	r3, #8
 80057c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4b18      	ldr	r3, [pc, #96]	; (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	461a      	mov	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a16      	ldr	r2, [pc, #88]	; (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80057d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2201      	movs	r2, #1
 80057e2:	409a      	lsls	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	58025408 	.word	0x58025408
 80057f8:	5802541c 	.word	0x5802541c
 80057fc:	58025430 	.word	0x58025430
 8005800:	58025444 	.word	0x58025444
 8005804:	58025458 	.word	0x58025458
 8005808:	5802546c 	.word	0x5802546c
 800580c:	58025480 	.word	0x58025480
 8005810:	58025494 	.word	0x58025494
 8005814:	cccccccd 	.word	0xcccccccd
 8005818:	16009600 	.word	0x16009600
 800581c:	58025880 	.word	0x58025880
 8005820:	aaaaaaab 	.word	0xaaaaaaab
 8005824:	400204b8 	.word	0x400204b8
 8005828:	4002040f 	.word	0x4002040f
 800582c:	10008200 	.word	0x10008200
 8005830:	40020880 	.word	0x40020880

08005834 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d04a      	beq.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d847      	bhi.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a25      	ldr	r2, [pc, #148]	; (80058ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d022      	beq.n	80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a24      	ldr	r2, [pc, #144]	; (80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d01d      	beq.n	80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d018      	beq.n	80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00e      	beq.n	80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d009      	beq.n	80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d101      	bne.n	80058a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058a4:	2300      	movs	r3, #0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	461a      	mov	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a15      	ldr	r2, [pc, #84]	; (8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058bc:	671a      	str	r2, [r3, #112]	; 0x70
 80058be:	e009      	b.n	80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	461a      	mov	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a11      	ldr	r2, [pc, #68]	; (8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80058d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	2201      	movs	r2, #1
 80058da:	409a      	lsls	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	58025408 	.word	0x58025408
 80058f0:	5802541c 	.word	0x5802541c
 80058f4:	58025430 	.word	0x58025430
 80058f8:	58025444 	.word	0x58025444
 80058fc:	58025458 	.word	0x58025458
 8005900:	5802546c 	.word	0x5802546c
 8005904:	58025480 	.word	0x58025480
 8005908:	58025494 	.word	0x58025494
 800590c:	1600963f 	.word	0x1600963f
 8005910:	58025940 	.word	0x58025940
 8005914:	1000823f 	.word	0x1000823f
 8005918:	40020940 	.word	0x40020940

0800591c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800592a:	4b89      	ldr	r3, [pc, #548]	; (8005b50 <HAL_GPIO_Init+0x234>)
 800592c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800592e:	e194      	b.n	8005c5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	2101      	movs	r1, #1
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	4013      	ands	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8186 	beq.w	8005c54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d005      	beq.n	8005960 <HAL_GPIO_Init+0x44>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d130      	bne.n	80059c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	2203      	movs	r2, #3
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4313      	orrs	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005996:	2201      	movs	r2, #1
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43db      	mvns	r3, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4013      	ands	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	f003 0201 	and.w	r2, r3, #1
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d017      	beq.n	80059fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	2203      	movs	r2, #3
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d123      	bne.n	8005a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	08da      	lsrs	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3208      	adds	r2, #8
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	220f      	movs	r2, #15
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	08da      	lsrs	r2, r3, #3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3208      	adds	r2, #8
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 0203 	and.w	r2, r3, #3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80e0 	beq.w	8005c54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a94:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <HAL_GPIO_Init+0x238>)
 8005a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a9a:	4a2e      	ldr	r2, [pc, #184]	; (8005b54 <HAL_GPIO_Init+0x238>)
 8005a9c:	f043 0302 	orr.w	r3, r3, #2
 8005aa0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005aa4:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <HAL_GPIO_Init+0x238>)
 8005aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ab2:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <HAL_GPIO_Init+0x23c>)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	3302      	adds	r3, #2
 8005aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	220f      	movs	r2, #15
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a20      	ldr	r2, [pc, #128]	; (8005b5c <HAL_GPIO_Init+0x240>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d052      	beq.n	8005b84 <HAL_GPIO_Init+0x268>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <HAL_GPIO_Init+0x244>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d031      	beq.n	8005b4a <HAL_GPIO_Init+0x22e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <HAL_GPIO_Init+0x248>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d02b      	beq.n	8005b46 <HAL_GPIO_Init+0x22a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <HAL_GPIO_Init+0x24c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d025      	beq.n	8005b42 <HAL_GPIO_Init+0x226>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <HAL_GPIO_Init+0x250>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d01f      	beq.n	8005b3e <HAL_GPIO_Init+0x222>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <HAL_GPIO_Init+0x254>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d019      	beq.n	8005b3a <HAL_GPIO_Init+0x21e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1a      	ldr	r2, [pc, #104]	; (8005b74 <HAL_GPIO_Init+0x258>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_GPIO_Init+0x21a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a19      	ldr	r2, [pc, #100]	; (8005b78 <HAL_GPIO_Init+0x25c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00d      	beq.n	8005b32 <HAL_GPIO_Init+0x216>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a18      	ldr	r2, [pc, #96]	; (8005b7c <HAL_GPIO_Init+0x260>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d007      	beq.n	8005b2e <HAL_GPIO_Init+0x212>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a17      	ldr	r2, [pc, #92]	; (8005b80 <HAL_GPIO_Init+0x264>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d101      	bne.n	8005b2a <HAL_GPIO_Init+0x20e>
 8005b26:	2309      	movs	r3, #9
 8005b28:	e02d      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	e02b      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b2e:	2308      	movs	r3, #8
 8005b30:	e029      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b32:	2307      	movs	r3, #7
 8005b34:	e027      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b36:	2306      	movs	r3, #6
 8005b38:	e025      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b3a:	2305      	movs	r3, #5
 8005b3c:	e023      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b3e:	2304      	movs	r3, #4
 8005b40:	e021      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b42:	2303      	movs	r3, #3
 8005b44:	e01f      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e01d      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e01b      	b.n	8005b86 <HAL_GPIO_Init+0x26a>
 8005b4e:	bf00      	nop
 8005b50:	58000080 	.word	0x58000080
 8005b54:	58024400 	.word	0x58024400
 8005b58:	58000400 	.word	0x58000400
 8005b5c:	58020000 	.word	0x58020000
 8005b60:	58020400 	.word	0x58020400
 8005b64:	58020800 	.word	0x58020800
 8005b68:	58020c00 	.word	0x58020c00
 8005b6c:	58021000 	.word	0x58021000
 8005b70:	58021400 	.word	0x58021400
 8005b74:	58021800 	.word	0x58021800
 8005b78:	58021c00 	.word	0x58021c00
 8005b7c:	58022000 	.word	0x58022000
 8005b80:	58022400 	.word	0x58022400
 8005b84:	2300      	movs	r3, #0
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	f002 0203 	and.w	r2, r2, #3
 8005b8c:	0092      	lsls	r2, r2, #2
 8005b8e:	4093      	lsls	r3, r2
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b96:	4938      	ldr	r1, [pc, #224]	; (8005c78 <HAL_GPIO_Init+0x35c>)
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f47f ae63 	bne.w	8005930 <HAL_GPIO_Init+0x14>
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	3724      	adds	r7, #36	; 0x24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	58000400 	.word	0x58000400

08005c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	807b      	strh	r3, [r7, #2]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c8c:	787b      	ldrb	r3, [r7, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c92:	887a      	ldrh	r2, [r7, #2]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c98:	e003      	b.n	8005ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c9a:	887b      	ldrh	r3, [r7, #2]
 8005c9c:	041a      	lsls	r2, r3, #16
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	619a      	str	r2, [r3, #24]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <HAL_PWREx_ConfigSupply+0x70>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d00a      	beq.n	8005cda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005cc4:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <HAL_PWREx_ConfigSupply+0x70>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d001      	beq.n	8005cd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e01f      	b.n	8005d16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e01d      	b.n	8005d16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cda:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <HAL_PWREx_ConfigSupply+0x70>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f023 0207 	bic.w	r2, r3, #7
 8005ce2:	490f      	ldr	r1, [pc, #60]	; (8005d20 <HAL_PWREx_ConfigSupply+0x70>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cea:	f7fb fbd3 	bl	8001494 <HAL_GetTick>
 8005cee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cf0:	e009      	b.n	8005d06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cf2:	f7fb fbcf 	bl	8001494 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d00:	d901      	bls.n	8005d06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e007      	b.n	8005d16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <HAL_PWREx_ConfigSupply+0x70>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d12:	d1ee      	bne.n	8005cf2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	58024800 	.word	0x58024800

08005d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f000 bc48 	b.w	80065c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8088 	beq.w	8005e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d46:	4b99      	ldr	r3, [pc, #612]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d50:	4b96      	ldr	r3, [pc, #600]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d007      	beq.n	8005d6c <HAL_RCC_OscConfig+0x48>
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	2b18      	cmp	r3, #24
 8005d60:	d111      	bne.n	8005d86 <HAL_RCC_OscConfig+0x62>
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d10c      	bne.n	8005d86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6c:	4b8f      	ldr	r3, [pc, #572]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d06d      	beq.n	8005e54 <HAL_RCC_OscConfig+0x130>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d169      	bne.n	8005e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f000 bc21 	b.w	80065c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8e:	d106      	bne.n	8005d9e <HAL_RCC_OscConfig+0x7a>
 8005d90:	4b86      	ldr	r3, [pc, #536]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a85      	ldr	r2, [pc, #532]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	e02e      	b.n	8005dfc <HAL_RCC_OscConfig+0xd8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10c      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x9c>
 8005da6:	4b81      	ldr	r3, [pc, #516]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a80      	ldr	r2, [pc, #512]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	4b7e      	ldr	r3, [pc, #504]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a7d      	ldr	r2, [pc, #500]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e01d      	b.n	8005dfc <HAL_RCC_OscConfig+0xd8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCC_OscConfig+0xc0>
 8005dca:	4b78      	ldr	r3, [pc, #480]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a77      	ldr	r2, [pc, #476]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	4b75      	ldr	r3, [pc, #468]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a74      	ldr	r2, [pc, #464]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e00b      	b.n	8005dfc <HAL_RCC_OscConfig+0xd8>
 8005de4:	4b71      	ldr	r3, [pc, #452]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a70      	ldr	r2, [pc, #448]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	4b6e      	ldr	r3, [pc, #440]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6d      	ldr	r2, [pc, #436]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d013      	beq.n	8005e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fb fb46 	bl	8001494 <HAL_GetTick>
 8005e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e0c:	f7fb fb42 	bl	8001494 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	; 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e3d4      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e1e:	4b63      	ldr	r3, [pc, #396]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCC_OscConfig+0xe8>
 8005e2a:	e014      	b.n	8005e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fb fb32 	bl	8001494 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e34:	f7fb fb2e 	bl	8001494 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b64      	cmp	r3, #100	; 0x64
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e3c0      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e46:	4b59      	ldr	r3, [pc, #356]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0x110>
 8005e52:	e000      	b.n	8005e56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80ca 	beq.w	8005ff8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e64:	4b51      	ldr	r3, [pc, #324]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e6e:	4b4f      	ldr	r3, [pc, #316]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d007      	beq.n	8005e8a <HAL_RCC_OscConfig+0x166>
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	2b18      	cmp	r3, #24
 8005e7e:	d156      	bne.n	8005f2e <HAL_RCC_OscConfig+0x20a>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d151      	bne.n	8005f2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e8a:	4b48      	ldr	r3, [pc, #288]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x17e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e392      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ea2:	4b42      	ldr	r3, [pc, #264]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f023 0219 	bic.w	r2, r3, #25
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	493f      	ldr	r1, [pc, #252]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fb faee 	bl	8001494 <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ebc:	f7fb faea 	bl	8001494 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e37c      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ece:	4b37      	ldr	r3, [pc, #220]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eda:	f7fb fae7 	bl	80014ac <HAL_GetREVID>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d817      	bhi.n	8005f18 <HAL_RCC_OscConfig+0x1f4>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d108      	bne.n	8005f02 <HAL_RCC_OscConfig+0x1de>
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ef8:	4a2c      	ldr	r2, [pc, #176]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005efe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f00:	e07a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f02:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	031b      	lsls	r3, r3, #12
 8005f10:	4926      	ldr	r1, [pc, #152]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f16:	e06f      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f18:	4b24      	ldr	r3, [pc, #144]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	061b      	lsls	r3, r3, #24
 8005f26:	4921      	ldr	r1, [pc, #132]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f2c:	e064      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d047      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f36:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 0219 	bic.w	r2, r3, #25
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	491a      	ldr	r1, [pc, #104]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fb faa4 	bl	8001494 <HAL_GetTick>
 8005f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f50:	f7fb faa0 	bl	8001494 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e332      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f62:	4b12      	ldr	r3, [pc, #72]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6e:	f7fb fa9d 	bl	80014ac <HAL_GetREVID>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d819      	bhi.n	8005fb0 <HAL_RCC_OscConfig+0x28c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b40      	cmp	r3, #64	; 0x40
 8005f82:	d108      	bne.n	8005f96 <HAL_RCC_OscConfig+0x272>
 8005f84:	4b09      	ldr	r3, [pc, #36]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f8c:	4a07      	ldr	r2, [pc, #28]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f92:	6053      	str	r3, [r2, #4]
 8005f94:	e030      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2d4>
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	031b      	lsls	r3, r3, #12
 8005fa4:	4901      	ldr	r1, [pc, #4]	; (8005fac <HAL_RCC_OscConfig+0x288>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	604b      	str	r3, [r1, #4]
 8005faa:	e025      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2d4>
 8005fac:	58024400 	.word	0x58024400
 8005fb0:	4b9a      	ldr	r3, [pc, #616]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	061b      	lsls	r3, r3, #24
 8005fbe:	4997      	ldr	r1, [pc, #604]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	604b      	str	r3, [r1, #4]
 8005fc4:	e018      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fc6:	4b95      	ldr	r3, [pc, #596]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a94      	ldr	r2, [pc, #592]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fb fa5f 	bl	8001494 <HAL_GetTick>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fda:	f7fb fa5b 	bl	8001494 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e2ed      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fec:	4b8b      	ldr	r3, [pc, #556]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f0      	bne.n	8005fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80a9 	beq.w	8006158 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006006:	4b85      	ldr	r3, [pc, #532]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800600e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006010:	4b82      	ldr	r3, [pc, #520]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d007      	beq.n	800602c <HAL_RCC_OscConfig+0x308>
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b18      	cmp	r3, #24
 8006020:	d13a      	bne.n	8006098 <HAL_RCC_OscConfig+0x374>
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d135      	bne.n	8006098 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800602c:	4b7b      	ldr	r3, [pc, #492]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_RCC_OscConfig+0x320>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d001      	beq.n	8006044 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e2c1      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006044:	f7fb fa32 	bl	80014ac <HAL_GetREVID>
 8006048:	4603      	mov	r3, r0
 800604a:	f241 0203 	movw	r2, #4099	; 0x1003
 800604e:	4293      	cmp	r3, r2
 8006050:	d817      	bhi.n	8006082 <HAL_RCC_OscConfig+0x35e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	2b20      	cmp	r3, #32
 8006058:	d108      	bne.n	800606c <HAL_RCC_OscConfig+0x348>
 800605a:	4b70      	ldr	r3, [pc, #448]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006062:	4a6e      	ldr	r2, [pc, #440]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006068:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800606a:	e075      	b.n	8006158 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800606c:	4b6b      	ldr	r3, [pc, #428]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	069b      	lsls	r3, r3, #26
 800607a:	4968      	ldr	r1, [pc, #416]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006080:	e06a      	b.n	8006158 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006082:	4b66      	ldr	r3, [pc, #408]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	061b      	lsls	r3, r3, #24
 8006090:	4962      	ldr	r1, [pc, #392]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006092:	4313      	orrs	r3, r2
 8006094:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006096:	e05f      	b.n	8006158 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d042      	beq.n	8006126 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060a0:	4b5e      	ldr	r3, [pc, #376]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a5d      	ldr	r2, [pc, #372]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80060a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fb f9f2 	bl	8001494 <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060b4:	f7fb f9ee 	bl	8001494 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e280      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060c6:	4b55      	ldr	r3, [pc, #340]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060d2:	f7fb f9eb 	bl	80014ac <HAL_GetREVID>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80060dc:	4293      	cmp	r3, r2
 80060de:	d817      	bhi.n	8006110 <HAL_RCC_OscConfig+0x3ec>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d108      	bne.n	80060fa <HAL_RCC_OscConfig+0x3d6>
 80060e8:	4b4c      	ldr	r3, [pc, #304]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060f0:	4a4a      	ldr	r2, [pc, #296]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80060f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f6:	6053      	str	r3, [r2, #4]
 80060f8:	e02e      	b.n	8006158 <HAL_RCC_OscConfig+0x434>
 80060fa:	4b48      	ldr	r3, [pc, #288]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	069b      	lsls	r3, r3, #26
 8006108:	4944      	ldr	r1, [pc, #272]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800610a:	4313      	orrs	r3, r2
 800610c:	604b      	str	r3, [r1, #4]
 800610e:	e023      	b.n	8006158 <HAL_RCC_OscConfig+0x434>
 8006110:	4b42      	ldr	r3, [pc, #264]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	061b      	lsls	r3, r3, #24
 800611e:	493f      	ldr	r1, [pc, #252]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006120:	4313      	orrs	r3, r2
 8006122:	60cb      	str	r3, [r1, #12]
 8006124:	e018      	b.n	8006158 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006126:	4b3d      	ldr	r3, [pc, #244]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a3c      	ldr	r2, [pc, #240]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800612c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006132:	f7fb f9af 	bl	8001494 <HAL_GetTick>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800613a:	f7fb f9ab 	bl	8001494 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e23d      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800614c:	4b33      	ldr	r3, [pc, #204]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f0      	bne.n	800613a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d036      	beq.n	80061d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d019      	beq.n	80061a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800616c:	4b2b      	ldr	r3, [pc, #172]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800616e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006170:	4a2a      	ldr	r2, [pc, #168]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006172:	f043 0301 	orr.w	r3, r3, #1
 8006176:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006178:	f7fb f98c 	bl	8001494 <HAL_GetTick>
 800617c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006180:	f7fb f988 	bl	8001494 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e21a      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006192:	4b22      	ldr	r3, [pc, #136]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 8006194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x45c>
 800619e:	e018      	b.n	80061d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061a0:	4b1e      	ldr	r3, [pc, #120]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80061a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a4:	4a1d      	ldr	r2, [pc, #116]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fb f972 	bl	8001494 <HAL_GetTick>
 80061b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061b4:	f7fb f96e 	bl	8001494 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e200      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061c6:	4b15      	ldr	r3, [pc, #84]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80061c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d039      	beq.n	8006252 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01c      	beq.n	8006220 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a0c      	ldr	r2, [pc, #48]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 80061ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061f2:	f7fb f94f 	bl	8001494 <HAL_GetTick>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061fa:	f7fb f94b 	bl	8001494 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e1dd      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800620c:	4b03      	ldr	r3, [pc, #12]	; (800621c <HAL_RCC_OscConfig+0x4f8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCC_OscConfig+0x4d6>
 8006218:	e01b      	b.n	8006252 <HAL_RCC_OscConfig+0x52e>
 800621a:	bf00      	nop
 800621c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006220:	4b9b      	ldr	r3, [pc, #620]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a9a      	ldr	r2, [pc, #616]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800622a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800622c:	f7fb f932 	bl	8001494 <HAL_GetTick>
 8006230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006234:	f7fb f92e 	bl	8001494 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e1c0      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006246:	4b92      	ldr	r3, [pc, #584]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 8081 	beq.w	8006362 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006260:	4b8c      	ldr	r3, [pc, #560]	; (8006494 <HAL_RCC_OscConfig+0x770>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a8b      	ldr	r2, [pc, #556]	; (8006494 <HAL_RCC_OscConfig+0x770>)
 8006266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800626c:	f7fb f912 	bl	8001494 <HAL_GetTick>
 8006270:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006274:	f7fb f90e 	bl	8001494 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b64      	cmp	r3, #100	; 0x64
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e1a0      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006286:	4b83      	ldr	r3, [pc, #524]	; (8006494 <HAL_RCC_OscConfig+0x770>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f0      	beq.n	8006274 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d106      	bne.n	80062a8 <HAL_RCC_OscConfig+0x584>
 800629a:	4b7d      	ldr	r3, [pc, #500]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a7c      	ldr	r2, [pc, #496]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
 80062a6:	e02d      	b.n	8006304 <HAL_RCC_OscConfig+0x5e0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10c      	bne.n	80062ca <HAL_RCC_OscConfig+0x5a6>
 80062b0:	4b77      	ldr	r3, [pc, #476]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	4a76      	ldr	r2, [pc, #472]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	6713      	str	r3, [r2, #112]	; 0x70
 80062bc:	4b74      	ldr	r3, [pc, #464]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c0:	4a73      	ldr	r2, [pc, #460]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062c2:	f023 0304 	bic.w	r3, r3, #4
 80062c6:	6713      	str	r3, [r2, #112]	; 0x70
 80062c8:	e01c      	b.n	8006304 <HAL_RCC_OscConfig+0x5e0>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	d10c      	bne.n	80062ec <HAL_RCC_OscConfig+0x5c8>
 80062d2:	4b6f      	ldr	r3, [pc, #444]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	4a6e      	ldr	r2, [pc, #440]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062d8:	f043 0304 	orr.w	r3, r3, #4
 80062dc:	6713      	str	r3, [r2, #112]	; 0x70
 80062de:	4b6c      	ldr	r3, [pc, #432]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	4a6b      	ldr	r2, [pc, #428]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	6713      	str	r3, [r2, #112]	; 0x70
 80062ea:	e00b      	b.n	8006304 <HAL_RCC_OscConfig+0x5e0>
 80062ec:	4b68      	ldr	r3, [pc, #416]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f0:	4a67      	ldr	r2, [pc, #412]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	6713      	str	r3, [r2, #112]	; 0x70
 80062f8:	4b65      	ldr	r3, [pc, #404]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	4a64      	ldr	r2, [pc, #400]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80062fe:	f023 0304 	bic.w	r3, r3, #4
 8006302:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d015      	beq.n	8006338 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630c:	f7fb f8c2 	bl	8001494 <HAL_GetTick>
 8006310:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006312:	e00a      	b.n	800632a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006314:	f7fb f8be 	bl	8001494 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e14e      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800632a:	4b59      	ldr	r3, [pc, #356]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0ee      	beq.n	8006314 <HAL_RCC_OscConfig+0x5f0>
 8006336:	e014      	b.n	8006362 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006338:	f7fb f8ac 	bl	8001494 <HAL_GetTick>
 800633c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800633e:	e00a      	b.n	8006356 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006340:	f7fb f8a8 	bl	8001494 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	f241 3288 	movw	r2, #5000	; 0x1388
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e138      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006356:	4b4e      	ldr	r3, [pc, #312]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1ee      	bne.n	8006340 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 812d 	beq.w	80065c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800636c:	4b48      	ldr	r3, [pc, #288]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006374:	2b18      	cmp	r3, #24
 8006376:	f000 80bd 	beq.w	80064f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	2b02      	cmp	r3, #2
 8006380:	f040 809e 	bne.w	80064c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006384:	4b42      	ldr	r3, [pc, #264]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a41      	ldr	r2, [pc, #260]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800638a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800638e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006390:	f7fb f880 	bl	8001494 <HAL_GetTick>
 8006394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006398:	f7fb f87c 	bl	8001494 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e10e      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063aa:	4b39      	ldr	r3, [pc, #228]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f0      	bne.n	8006398 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063b6:	4b36      	ldr	r3, [pc, #216]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80063b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ba:	4b37      	ldr	r3, [pc, #220]	; (8006498 <HAL_RCC_OscConfig+0x774>)
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063c6:	0112      	lsls	r2, r2, #4
 80063c8:	430a      	orrs	r2, r1
 80063ca:	4931      	ldr	r1, [pc, #196]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	628b      	str	r3, [r1, #40]	; 0x28
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	3b01      	subs	r3, #1
 80063d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063de:	3b01      	subs	r3, #1
 80063e0:	025b      	lsls	r3, r3, #9
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	3b01      	subs	r3, #1
 80063ec:	041b      	lsls	r3, r3, #16
 80063ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f8:	3b01      	subs	r3, #1
 80063fa:	061b      	lsls	r3, r3, #24
 80063fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006400:	4923      	ldr	r1, [pc, #140]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006406:	4b22      	ldr	r3, [pc, #136]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	4a21      	ldr	r2, [pc, #132]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006412:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006416:	4b21      	ldr	r3, [pc, #132]	; (800649c <HAL_RCC_OscConfig+0x778>)
 8006418:	4013      	ands	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800641e:	00d2      	lsls	r2, r2, #3
 8006420:	491b      	ldr	r1, [pc, #108]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006422:	4313      	orrs	r3, r2
 8006424:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006426:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	f023 020c 	bic.w	r2, r3, #12
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	4917      	ldr	r1, [pc, #92]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006434:	4313      	orrs	r3, r2
 8006436:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006438:	4b15      	ldr	r3, [pc, #84]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	f023 0202 	bic.w	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006444:	4912      	ldr	r1, [pc, #72]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006446:	4313      	orrs	r3, r2
 8006448:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800644a:	4b11      	ldr	r3, [pc, #68]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	4a10      	ldr	r2, [pc, #64]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006454:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006456:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	4a0d      	ldr	r2, [pc, #52]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800645c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006460:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006462:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4a0a      	ldr	r2, [pc, #40]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800646c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800646e:	4b08      	ldr	r3, [pc, #32]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	4a07      	ldr	r2, [pc, #28]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800647a:	4b05      	ldr	r3, [pc, #20]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a04      	ldr	r2, [pc, #16]	; (8006490 <HAL_RCC_OscConfig+0x76c>)
 8006480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7fb f805 	bl	8001494 <HAL_GetTick>
 800648a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800648c:	e011      	b.n	80064b2 <HAL_RCC_OscConfig+0x78e>
 800648e:	bf00      	nop
 8006490:	58024400 	.word	0x58024400
 8006494:	58024800 	.word	0x58024800
 8006498:	fffffc0c 	.word	0xfffffc0c
 800649c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fa fff8 	bl	8001494 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e08a      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064b2:	4b47      	ldr	r3, [pc, #284]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0x77c>
 80064be:	e082      	b.n	80065c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c0:	4b43      	ldr	r3, [pc, #268]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a42      	ldr	r2, [pc, #264]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80064c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fa ffe2 	bl	8001494 <HAL_GetTick>
 80064d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d4:	f7fa ffde 	bl	8001494 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e070      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064e6:	4b3a      	ldr	r3, [pc, #232]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x7b0>
 80064f2:	e068      	b.n	80065c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064f4:	4b36      	ldr	r3, [pc, #216]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064fa:	4b35      	ldr	r3, [pc, #212]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2b01      	cmp	r3, #1
 8006506:	d031      	beq.n	800656c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f003 0203 	and.w	r2, r3, #3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d12a      	bne.n	800656c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006522:	429a      	cmp	r2, r3
 8006524:	d122      	bne.n	800656c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006532:	429a      	cmp	r2, r3
 8006534:	d11a      	bne.n	800656c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	0a5b      	lsrs	r3, r3, #9
 800653a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006542:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006544:	429a      	cmp	r2, r3
 8006546:	d111      	bne.n	800656c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	0c1b      	lsrs	r3, r3, #16
 800654c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006556:	429a      	cmp	r2, r3
 8006558:	d108      	bne.n	800656c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	0e1b      	lsrs	r3, r3, #24
 800655e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e02b      	b.n	80065c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006574:	08db      	lsrs	r3, r3, #3
 8006576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800657a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	429a      	cmp	r2, r3
 8006584:	d01f      	beq.n	80065c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	4a11      	ldr	r2, [pc, #68]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006592:	f7fa ff7f 	bl	8001494 <HAL_GetTick>
 8006596:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006598:	bf00      	nop
 800659a:	f7fa ff7b 	bl	8001494 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d0f9      	beq.n	800659a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80065a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <HAL_RCC_OscConfig+0x8b0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065b2:	00d2      	lsls	r2, r2, #3
 80065b4:	4906      	ldr	r1, [pc, #24]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <HAL_RCC_OscConfig+0x8ac>)
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3730      	adds	r7, #48	; 0x30
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	58024400 	.word	0x58024400
 80065d4:	ffff0007 	.word	0xffff0007

080065d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e19c      	b.n	8006926 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065ec:	4b8a      	ldr	r3, [pc, #552]	; (8006818 <HAL_RCC_ClockConfig+0x240>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 030f 	and.w	r3, r3, #15
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d910      	bls.n	800661c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fa:	4b87      	ldr	r3, [pc, #540]	; (8006818 <HAL_RCC_ClockConfig+0x240>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f023 020f 	bic.w	r2, r3, #15
 8006602:	4985      	ldr	r1, [pc, #532]	; (8006818 <HAL_RCC_ClockConfig+0x240>)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	4313      	orrs	r3, r2
 8006608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660a:	4b83      	ldr	r3, [pc, #524]	; (8006818 <HAL_RCC_ClockConfig+0x240>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d001      	beq.n	800661c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e184      	b.n	8006926 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d010      	beq.n	800664a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	4b7b      	ldr	r3, [pc, #492]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006634:	429a      	cmp	r2, r3
 8006636:	d908      	bls.n	800664a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006638:	4b78      	ldr	r3, [pc, #480]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	4975      	ldr	r1, [pc, #468]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 8006646:	4313      	orrs	r3, r2
 8006648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d010      	beq.n	8006678 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695a      	ldr	r2, [r3, #20]
 800665a:	4b70      	ldr	r3, [pc, #448]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006662:	429a      	cmp	r2, r3
 8006664:	d908      	bls.n	8006678 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006666:	4b6d      	ldr	r3, [pc, #436]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	496a      	ldr	r1, [pc, #424]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 8006674:	4313      	orrs	r3, r2
 8006676:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699a      	ldr	r2, [r3, #24]
 8006688:	4b64      	ldr	r3, [pc, #400]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006690:	429a      	cmp	r2, r3
 8006692:	d908      	bls.n	80066a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006694:	4b61      	ldr	r3, [pc, #388]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	495e      	ldr	r1, [pc, #376]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69da      	ldr	r2, [r3, #28]
 80066b6:	4b59      	ldr	r3, [pc, #356]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066be:	429a      	cmp	r2, r3
 80066c0:	d908      	bls.n	80066d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066c2:	4b56      	ldr	r3, [pc, #344]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	4953      	ldr	r1, [pc, #332]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d010      	beq.n	8006702 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	4b4d      	ldr	r3, [pc, #308]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f003 030f 	and.w	r3, r3, #15
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d908      	bls.n	8006702 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f0:	4b4a      	ldr	r3, [pc, #296]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f023 020f 	bic.w	r2, r3, #15
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4947      	ldr	r1, [pc, #284]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d055      	beq.n	80067ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800670e:	4b43      	ldr	r3, [pc, #268]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	4940      	ldr	r1, [pc, #256]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800671c:	4313      	orrs	r3, r2
 800671e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d107      	bne.n	8006738 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006728:	4b3c      	ldr	r3, [pc, #240]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d121      	bne.n	8006778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e0f6      	b.n	8006926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b03      	cmp	r3, #3
 800673e:	d107      	bne.n	8006750 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006740:	4b36      	ldr	r3, [pc, #216]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d115      	bne.n	8006778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e0ea      	b.n	8006926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d107      	bne.n	8006768 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006758:	4b30      	ldr	r3, [pc, #192]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d109      	bne.n	8006778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0de      	b.n	8006926 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006768:	4b2c      	ldr	r3, [pc, #176]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e0d6      	b.n	8006926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006778:	4b28      	ldr	r3, [pc, #160]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f023 0207 	bic.w	r2, r3, #7
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	4925      	ldr	r1, [pc, #148]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 8006786:	4313      	orrs	r3, r2
 8006788:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800678a:	f7fa fe83 	bl	8001494 <HAL_GetTick>
 800678e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006790:	e00a      	b.n	80067a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006792:	f7fa fe7f 	bl	8001494 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e0be      	b.n	8006926 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a8:	4b1c      	ldr	r3, [pc, #112]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d1eb      	bne.n	8006792 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	4b14      	ldr	r3, [pc, #80]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d208      	bcs.n	80067e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d6:	4b11      	ldr	r3, [pc, #68]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f023 020f 	bic.w	r2, r3, #15
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	490e      	ldr	r1, [pc, #56]	; (800681c <HAL_RCC_ClockConfig+0x244>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <HAL_RCC_ClockConfig+0x240>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d214      	bcs.n	8006820 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f6:	4b08      	ldr	r3, [pc, #32]	; (8006818 <HAL_RCC_ClockConfig+0x240>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f023 020f 	bic.w	r2, r3, #15
 80067fe:	4906      	ldr	r1, [pc, #24]	; (8006818 <HAL_RCC_ClockConfig+0x240>)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	4313      	orrs	r3, r2
 8006804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006806:	4b04      	ldr	r3, [pc, #16]	; (8006818 <HAL_RCC_ClockConfig+0x240>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d005      	beq.n	8006820 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e086      	b.n	8006926 <HAL_RCC_ClockConfig+0x34e>
 8006818:	52002000 	.word	0x52002000
 800681c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d010      	beq.n	800684e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	4b3f      	ldr	r3, [pc, #252]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006838:	429a      	cmp	r2, r3
 800683a:	d208      	bcs.n	800684e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800683c:	4b3c      	ldr	r3, [pc, #240]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	4939      	ldr	r1, [pc, #228]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 800684a:	4313      	orrs	r3, r2
 800684c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d010      	beq.n	800687c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695a      	ldr	r2, [r3, #20]
 800685e:	4b34      	ldr	r3, [pc, #208]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006866:	429a      	cmp	r2, r3
 8006868:	d208      	bcs.n	800687c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800686a:	4b31      	ldr	r3, [pc, #196]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	492e      	ldr	r1, [pc, #184]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 8006878:	4313      	orrs	r3, r2
 800687a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d010      	beq.n	80068aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	4b28      	ldr	r3, [pc, #160]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006894:	429a      	cmp	r2, r3
 8006896:	d208      	bcs.n	80068aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006898:	4b25      	ldr	r3, [pc, #148]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	4922      	ldr	r1, [pc, #136]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d010      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69da      	ldr	r2, [r3, #28]
 80068ba:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d208      	bcs.n	80068d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068c6:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	4917      	ldr	r1, [pc, #92]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068d8:	f000 f834 	bl	8006944 <HAL_RCC_GetSysClockFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b14      	ldr	r3, [pc, #80]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	4912      	ldr	r1, [pc, #72]	; (8006934 <HAL_RCC_ClockConfig+0x35c>)
 80068ea:	5ccb      	ldrb	r3, [r1, r3]
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
 80068f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068f6:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <HAL_RCC_ClockConfig+0x358>)
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	4a0d      	ldr	r2, [pc, #52]	; (8006934 <HAL_RCC_ClockConfig+0x35c>)
 8006900:	5cd3      	ldrb	r3, [r2, r3]
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
 800690c:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <HAL_RCC_ClockConfig+0x360>)
 800690e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006910:	4a0a      	ldr	r2, [pc, #40]	; (800693c <HAL_RCC_ClockConfig+0x364>)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <HAL_RCC_ClockConfig+0x368>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f7fa fd70 	bl	8001400 <HAL_InitTick>
 8006920:	4603      	mov	r3, r0
 8006922:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	58024400 	.word	0x58024400
 8006934:	0800bee4 	.word	0x0800bee4
 8006938:	24000004 	.word	0x24000004
 800693c:	24000000 	.word	0x24000000
 8006940:	24000008 	.word	0x24000008

08006944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006944:	b480      	push	{r7}
 8006946:	b089      	sub	sp, #36	; 0x24
 8006948:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800694a:	4bb3      	ldr	r3, [pc, #716]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006952:	2b18      	cmp	r3, #24
 8006954:	f200 8155 	bhi.w	8006c02 <HAL_RCC_GetSysClockFreq+0x2be>
 8006958:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <HAL_RCC_GetSysClockFreq+0x1c>)
 800695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695e:	bf00      	nop
 8006960:	080069c5 	.word	0x080069c5
 8006964:	08006c03 	.word	0x08006c03
 8006968:	08006c03 	.word	0x08006c03
 800696c:	08006c03 	.word	0x08006c03
 8006970:	08006c03 	.word	0x08006c03
 8006974:	08006c03 	.word	0x08006c03
 8006978:	08006c03 	.word	0x08006c03
 800697c:	08006c03 	.word	0x08006c03
 8006980:	080069eb 	.word	0x080069eb
 8006984:	08006c03 	.word	0x08006c03
 8006988:	08006c03 	.word	0x08006c03
 800698c:	08006c03 	.word	0x08006c03
 8006990:	08006c03 	.word	0x08006c03
 8006994:	08006c03 	.word	0x08006c03
 8006998:	08006c03 	.word	0x08006c03
 800699c:	08006c03 	.word	0x08006c03
 80069a0:	080069f1 	.word	0x080069f1
 80069a4:	08006c03 	.word	0x08006c03
 80069a8:	08006c03 	.word	0x08006c03
 80069ac:	08006c03 	.word	0x08006c03
 80069b0:	08006c03 	.word	0x08006c03
 80069b4:	08006c03 	.word	0x08006c03
 80069b8:	08006c03 	.word	0x08006c03
 80069bc:	08006c03 	.word	0x08006c03
 80069c0:	080069f7 	.word	0x080069f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c4:	4b94      	ldr	r3, [pc, #592]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069d0:	4b91      	ldr	r3, [pc, #580]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	08db      	lsrs	r3, r3, #3
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	4a90      	ldr	r2, [pc, #576]	; (8006c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
 80069e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069e2:	e111      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069e4:	4b8d      	ldr	r3, [pc, #564]	; (8006c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069e6:	61bb      	str	r3, [r7, #24]
      break;
 80069e8:	e10e      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069ea:	4b8d      	ldr	r3, [pc, #564]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069ec:	61bb      	str	r3, [r7, #24]
      break;
 80069ee:	e10b      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069f0:	4b8c      	ldr	r3, [pc, #560]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069f2:	61bb      	str	r3, [r7, #24]
      break;
 80069f4:	e108      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069f6:	4b88      	ldr	r3, [pc, #544]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a00:	4b85      	ldr	r3, [pc, #532]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a0c:	4b82      	ldr	r3, [pc, #520]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a16:	4b80      	ldr	r3, [pc, #512]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	08db      	lsrs	r3, r3, #3
 8006a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80e1 	beq.w	8006bfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	f000 8083 	beq.w	8006b48 <HAL_RCC_GetSysClockFreq+0x204>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	f200 80a1 	bhi.w	8006b8c <HAL_RCC_GetSysClockFreq+0x248>
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0x114>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d056      	beq.n	8006b04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a56:	e099      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a58:	4b6f      	ldr	r3, [pc, #444]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d02d      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a64:	4b6c      	ldr	r3, [pc, #432]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	08db      	lsrs	r3, r3, #3
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	4a6b      	ldr	r2, [pc, #428]	; (8006c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a70:	fa22 f303 	lsr.w	r3, r2, r3
 8006a74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8e:	4b62      	ldr	r3, [pc, #392]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aa2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006abe:	e087      	b.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006c2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad2:	4b51      	ldr	r3, [pc, #324]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ae6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b02:	e065      	b.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b16:	4b40      	ldr	r3, [pc, #256]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b46:	e043      	b.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006c34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b8a:	e021      	b.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9e:	4b1e      	ldr	r3, [pc, #120]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bb2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006bd0:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	0a5b      	lsrs	r3, r3, #9
 8006bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bda:	3301      	adds	r3, #1
 8006bdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf4:	ee17 3a90 	vmov	r3, s15
 8006bf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bfa:	e005      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61bb      	str	r3, [r7, #24]
      break;
 8006c00:	e002      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c04:	61bb      	str	r3, [r7, #24]
      break;
 8006c06:	bf00      	nop
  }

  return sysclockfreq;
 8006c08:	69bb      	ldr	r3, [r7, #24]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3724      	adds	r7, #36	; 0x24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	03d09000 	.word	0x03d09000
 8006c20:	003d0900 	.word	0x003d0900
 8006c24:	017d7840 	.word	0x017d7840
 8006c28:	46000000 	.word	0x46000000
 8006c2c:	4c742400 	.word	0x4c742400
 8006c30:	4a742400 	.word	0x4a742400
 8006c34:	4bbebc20 	.word	0x4bbebc20

08006c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c3e:	f7ff fe81 	bl	8006944 <HAL_RCC_GetSysClockFreq>
 8006c42:	4602      	mov	r2, r0
 8006c44:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	0a1b      	lsrs	r3, r3, #8
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	490f      	ldr	r1, [pc, #60]	; (8006c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006c50:	5ccb      	ldrb	r3, [r1, r3]
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006c66:	5cd3      	ldrb	r3, [r2, r3]
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c72:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c76:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	58024400 	.word	0x58024400
 8006c8c:	0800bee4 	.word	0x0800bee4
 8006c90:	24000004 	.word	0x24000004
 8006c94:	24000000 	.word	0x24000000

08006c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c9c:	f7ff ffcc 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	091b      	lsrs	r3, r3, #4
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	4904      	ldr	r1, [pc, #16]	; (8006cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cae:	5ccb      	ldrb	r3, [r1, r3]
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	0800bee4 	.word	0x0800bee4

08006cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cc8:	f7ff ffb6 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	0a1b      	lsrs	r3, r3, #8
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	4904      	ldr	r1, [pc, #16]	; (8006cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cda:	5ccb      	ldrb	r3, [r1, r3]
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	58024400 	.word	0x58024400
 8006cec:	0800bee4 	.word	0x0800bee4

08006cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf4:	b0ca      	sub	sp, #296	; 0x128
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d02:	2300      	movs	r3, #0
 8006d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006d14:	2500      	movs	r5, #0
 8006d16:	ea54 0305 	orrs.w	r3, r4, r5
 8006d1a:	d049      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d26:	d02f      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d2c:	d828      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d32:	d01a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d38:	d822      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d42:	d007      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d44:	e01c      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d46:	4bb8      	ldr	r3, [pc, #736]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	4ab7      	ldr	r2, [pc, #732]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d52:	e01a      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d58:	3308      	adds	r3, #8
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f002 fb61 	bl	8009424 <RCCEx_PLL2_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d68:	e00f      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d6e:	3328      	adds	r3, #40	; 0x28
 8006d70:	2102      	movs	r1, #2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f002 fc08 	bl	8009588 <RCCEx_PLL3_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d7e:	e004      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d86:	e000      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d92:	4ba5      	ldr	r3, [pc, #660]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006da0:	4aa1      	ldr	r2, [pc, #644]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da2:	430b      	orrs	r3, r1
 8006da4:	6513      	str	r3, [r2, #80]	; 0x50
 8006da6:	e003      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006dbc:	f04f 0900 	mov.w	r9, #0
 8006dc0:	ea58 0309 	orrs.w	r3, r8, r9
 8006dc4:	d047      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d82a      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006dd0:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd6:	bf00      	nop
 8006dd8:	08006ded 	.word	0x08006ded
 8006ddc:	08006dfb 	.word	0x08006dfb
 8006de0:	08006e11 	.word	0x08006e11
 8006de4:	08006e2f 	.word	0x08006e2f
 8006de8:	08006e2f 	.word	0x08006e2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dec:	4b8e      	ldr	r3, [pc, #568]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	4a8d      	ldr	r2, [pc, #564]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006df8:	e01a      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfe:	3308      	adds	r3, #8
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f002 fb0e 	bl	8009424 <RCCEx_PLL2_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e0e:	e00f      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e14:	3328      	adds	r3, #40	; 0x28
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f002 fbb5 	bl	8009588 <RCCEx_PLL3_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e24:	e004      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e38:	4b7b      	ldr	r3, [pc, #492]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3c:	f023 0107 	bic.w	r1, r3, #7
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e46:	4a78      	ldr	r2, [pc, #480]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6513      	str	r3, [r2, #80]	; 0x50
 8006e4c:	e003      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006e62:	f04f 0b00 	mov.w	fp, #0
 8006e66:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e6a:	d04c      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e76:	d030      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7c:	d829      	bhi.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e80:	d02d      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e82:	2bc0      	cmp	r3, #192	; 0xc0
 8006e84:	d825      	bhi.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e86:	2b80      	cmp	r3, #128	; 0x80
 8006e88:	d018      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e8a:	2b80      	cmp	r3, #128	; 0x80
 8006e8c:	d821      	bhi.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e92:	2b40      	cmp	r3, #64	; 0x40
 8006e94:	d007      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e96:	e01c      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b63      	ldr	r3, [pc, #396]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	4a62      	ldr	r2, [pc, #392]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ea4:	e01c      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eaa:	3308      	adds	r3, #8
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f002 fab8 	bl	8009424 <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006eba:	e011      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec0:	3328      	adds	r3, #40	; 0x28
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f002 fb5f 	bl	8009588 <RCCEx_PLL3_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ed0:	e006      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ed8:	e002      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006eda:	bf00      	nop
 8006edc:	e000      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ee8:	4b4f      	ldr	r3, [pc, #316]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	4a4c      	ldr	r2, [pc, #304]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6513      	str	r3, [r2, #80]	; 0x50
 8006efc:	e003      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006f12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f16:	2300      	movs	r3, #0
 8006f18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006f20:	460b      	mov	r3, r1
 8006f22:	4313      	orrs	r3, r2
 8006f24:	d053      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f32:	d035      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f38:	d82e      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f3e:	d031      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f44:	d828      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f4a:	d01a      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f50:	d822      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f5a:	d007      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f5c:	e01c      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5e:	4b32      	ldr	r3, [pc, #200]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	4a31      	ldr	r2, [pc, #196]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f6a:	e01c      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f70:	3308      	adds	r3, #8
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 fa55 	bl	8009424 <RCCEx_PLL2_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f80:	e011      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f86:	3328      	adds	r3, #40	; 0x28
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f002 fafc 	bl	8009588 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f96:	e006      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f9e:	e002      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fa0:	bf00      	nop
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fae:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fbe:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8006fc4:	e003      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006fda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fe4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4313      	orrs	r3, r2
 8006fec:	d056      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ff6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ffa:	d038      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007000:	d831      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007002:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007006:	d034      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007008:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800700c:	d82b      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800700e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007012:	d01d      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007018:	d825      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d006      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800701e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007022:	d00a      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007024:	e01f      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007026:	bf00      	nop
 8007028:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702c:	4ba2      	ldr	r3, [pc, #648]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	4aa1      	ldr	r2, [pc, #644]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007038:	e01c      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800703e:	3308      	adds	r3, #8
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f002 f9ee 	bl	8009424 <RCCEx_PLL2_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800704e:	e011      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007054:	3328      	adds	r3, #40	; 0x28
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f002 fa95 	bl	8009588 <RCCEx_PLL3_Config>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007064:	e006      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800706c:	e002      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800706e:	bf00      	nop
 8007070:	e000      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10b      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800707c:	4b8e      	ldr	r3, [pc, #568]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007080:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007088:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800708c:	4a8a      	ldr	r2, [pc, #552]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800708e:	430b      	orrs	r3, r1
 8007090:	6593      	str	r3, [r2, #88]	; 0x58
 8007092:	e003      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007098:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80070a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d03a      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80070bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c2:	2b30      	cmp	r3, #48	; 0x30
 80070c4:	d01f      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80070c6:	2b30      	cmp	r3, #48	; 0x30
 80070c8:	d819      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d00c      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d815      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d019      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80070d6:	2b10      	cmp	r3, #16
 80070d8:	d111      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070da:	4b77      	ldr	r3, [pc, #476]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4a76      	ldr	r2, [pc, #472]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070e6:	e011      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ec:	3308      	adds	r3, #8
 80070ee:	2102      	movs	r1, #2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f002 f997 	bl	8009424 <RCCEx_PLL2_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070fc:	e006      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007104:	e002      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007106:	bf00      	nop
 8007108:	e000      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800710a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007114:	4b68      	ldr	r3, [pc, #416]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007118:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007122:	4a65      	ldr	r2, [pc, #404]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007124:	430b      	orrs	r3, r1
 8007126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007128:	e003      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800712e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800713e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007142:	2300      	movs	r3, #0
 8007144:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007148:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800714c:	460b      	mov	r3, r1
 800714e:	4313      	orrs	r3, r2
 8007150:	d051      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800715c:	d035      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800715e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007162:	d82e      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007164:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007168:	d031      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800716a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800716e:	d828      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007174:	d01a      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717a:	d822      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007184:	d007      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007186:	e01c      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007188:	4b4b      	ldr	r3, [pc, #300]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	4a4a      	ldr	r2, [pc, #296]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800718e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007194:	e01c      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719a:	3308      	adds	r3, #8
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f002 f940 	bl	8009424 <RCCEx_PLL2_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071aa:	e011      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b0:	3328      	adds	r3, #40	; 0x28
 80071b2:	2100      	movs	r1, #0
 80071b4:	4618      	mov	r0, r3
 80071b6:	f002 f9e7 	bl	8009588 <RCCEx_PLL3_Config>
 80071ba:	4603      	mov	r3, r0
 80071bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071c8:	e002      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071ca:	bf00      	nop
 80071cc:	e000      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071d8:	4b37      	ldr	r3, [pc, #220]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80071e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e6:	4a34      	ldr	r2, [pc, #208]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6513      	str	r3, [r2, #80]	; 0x50
 80071ec:	e003      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007206:	2300      	movs	r3, #0
 8007208:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800720c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007210:	460b      	mov	r3, r1
 8007212:	4313      	orrs	r3, r2
 8007214:	d056      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800721a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800721c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007220:	d033      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007226:	d82c      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800722c:	d02f      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800722e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007232:	d826      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007234:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007238:	d02b      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800723a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800723e:	d820      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007244:	d012      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800724a:	d81a      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d022      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007254:	d115      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800725a:	3308      	adds	r3, #8
 800725c:	2101      	movs	r1, #1
 800725e:	4618      	mov	r0, r3
 8007260:	f002 f8e0 	bl	8009424 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800726a:	e015      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007270:	3328      	adds	r3, #40	; 0x28
 8007272:	2101      	movs	r1, #1
 8007274:	4618      	mov	r0, r3
 8007276:	f002 f987 	bl	8009588 <RCCEx_PLL3_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007280:	e00a      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007288:	e006      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800728a:	bf00      	nop
 800728c:	e004      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800728e:	bf00      	nop
 8007290:	e002      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007292:	bf00      	nop
 8007294:	e000      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10d      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80072a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072ae:	4a02      	ldr	r2, [pc, #8]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6513      	str	r3, [r2, #80]	; 0x50
 80072b4:	e006      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80072b6:	bf00      	nop
 80072b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80072d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d055      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f0:	d033      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80072f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f6:	d82c      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fc:	d02f      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007302:	d826      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007304:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007308:	d02b      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800730a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800730e:	d820      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007314:	d012      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800731a:	d81a      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d022      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007324:	d115      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732a:	3308      	adds	r3, #8
 800732c:	2101      	movs	r1, #1
 800732e:	4618      	mov	r0, r3
 8007330:	f002 f878 	bl	8009424 <RCCEx_PLL2_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800733a:	e015      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800733c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007340:	3328      	adds	r3, #40	; 0x28
 8007342:	2101      	movs	r1, #1
 8007344:	4618      	mov	r0, r3
 8007346:	f002 f91f 	bl	8009588 <RCCEx_PLL3_Config>
 800734a:	4603      	mov	r3, r0
 800734c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007350:	e00a      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007358:	e006      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800735a:	bf00      	nop
 800735c:	e004      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800735e:	bf00      	nop
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10b      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007370:	4ba3      	ldr	r3, [pc, #652]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007374:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007380:	4a9f      	ldr	r2, [pc, #636]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007382:	430b      	orrs	r3, r1
 8007384:	6593      	str	r3, [r2, #88]	; 0x58
 8007386:	e003      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800738c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800739c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073a0:	2300      	movs	r3, #0
 80073a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073aa:	460b      	mov	r3, r1
 80073ac:	4313      	orrs	r3, r2
 80073ae:	d037      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80073b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ba:	d00e      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80073bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c0:	d816      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d018      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80073c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ca:	d111      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073cc:	4b8c      	ldr	r3, [pc, #560]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	4a8b      	ldr	r2, [pc, #556]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073d8:	e00f      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073de:	3308      	adds	r3, #8
 80073e0:	2101      	movs	r1, #1
 80073e2:	4618      	mov	r0, r3
 80073e4:	f002 f81e 	bl	8009424 <RCCEx_PLL2_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073ee:	e004      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073f6:	e000      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80073f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007402:	4b7f      	ldr	r3, [pc, #508]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007406:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007410:	4a7b      	ldr	r2, [pc, #492]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007412:	430b      	orrs	r3, r1
 8007414:	6513      	str	r3, [r2, #80]	; 0x50
 8007416:	e003      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800741c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800742c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007430:	2300      	movs	r3, #0
 8007432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007436:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800743a:	460b      	mov	r3, r1
 800743c:	4313      	orrs	r3, r2
 800743e:	d039      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007446:	2b03      	cmp	r3, #3
 8007448:	d81c      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	0800748d 	.word	0x0800748d
 8007454:	08007461 	.word	0x08007461
 8007458:	0800746f 	.word	0x0800746f
 800745c:	0800748d 	.word	0x0800748d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007460:	4b67      	ldr	r3, [pc, #412]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	4a66      	ldr	r2, [pc, #408]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800746a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800746c:	e00f      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007472:	3308      	adds	r3, #8
 8007474:	2102      	movs	r1, #2
 8007476:	4618      	mov	r0, r3
 8007478:	f001 ffd4 	bl	8009424 <RCCEx_PLL2_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007482:	e004      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800748c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007496:	4b5a      	ldr	r3, [pc, #360]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749a:	f023 0103 	bic.w	r1, r3, #3
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a4:	4a56      	ldr	r2, [pc, #344]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074a6:	430b      	orrs	r3, r1
 80074a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074aa:	e003      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80074c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074c4:	2300      	movs	r3, #0
 80074c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80074ce:	460b      	mov	r3, r1
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f000 809f 	beq.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074d6:	4b4b      	ldr	r3, [pc, #300]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a4a      	ldr	r2, [pc, #296]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074e2:	f7f9 ffd7 	bl	8001494 <HAL_GetTick>
 80074e6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ea:	e00b      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ec:	f7f9 ffd2 	bl	8001494 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b64      	cmp	r3, #100	; 0x64
 80074fa:	d903      	bls.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007502:	e005      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007504:	4b3f      	ldr	r3, [pc, #252]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0ed      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007514:	2b00      	cmp	r3, #0
 8007516:	d179      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007518:	4b39      	ldr	r3, [pc, #228]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800751a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007524:	4053      	eors	r3, r2
 8007526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800752a:	2b00      	cmp	r3, #0
 800752c:	d015      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800752e:	4b34      	ldr	r3, [pc, #208]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007536:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800753a:	4b31      	ldr	r3, [pc, #196]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	4a30      	ldr	r2, [pc, #192]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007544:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007546:	4b2e      	ldr	r3, [pc, #184]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754a:	4a2d      	ldr	r2, [pc, #180]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800754c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007550:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007552:	4a2b      	ldr	r2, [pc, #172]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007554:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007558:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800755e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007566:	d118      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007568:	f7f9 ff94 	bl	8001494 <HAL_GetTick>
 800756c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007570:	e00d      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007572:	f7f9 ff8f 	bl	8001494 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800757c:	1ad2      	subs	r2, r2, r3
 800757e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007582:	429a      	cmp	r2, r3
 8007584:	d903      	bls.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800758c:	e005      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800758e:	4b1c      	ldr	r3, [pc, #112]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0eb      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800759a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d129      	bne.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b2:	d10e      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80075b4:	4b12      	ldr	r3, [pc, #72]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075c4:	091a      	lsrs	r2, r3, #4
 80075c6:	4b10      	ldr	r3, [pc, #64]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	4a0d      	ldr	r2, [pc, #52]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6113      	str	r3, [r2, #16]
 80075d0:	e005      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80075d2:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	4a0a      	ldr	r2, [pc, #40]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80075dc:	6113      	str	r3, [r2, #16]
 80075de:	4b08      	ldr	r3, [pc, #32]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ee:	4a04      	ldr	r2, [pc, #16]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6713      	str	r3, [r2, #112]	; 0x70
 80075f4:	e00e      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80075fe:	e009      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007600:	58024400 	.word	0x58024400
 8007604:	58024800 	.word	0x58024800
 8007608:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007610:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f002 0301 	and.w	r3, r2, #1
 8007620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007624:	2300      	movs	r3, #0
 8007626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800762a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800762e:	460b      	mov	r3, r1
 8007630:	4313      	orrs	r3, r2
 8007632:	f000 8089 	beq.w	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763c:	2b28      	cmp	r3, #40	; 0x28
 800763e:	d86b      	bhi.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007721 	.word	0x08007721
 800764c:	08007719 	.word	0x08007719
 8007650:	08007719 	.word	0x08007719
 8007654:	08007719 	.word	0x08007719
 8007658:	08007719 	.word	0x08007719
 800765c:	08007719 	.word	0x08007719
 8007660:	08007719 	.word	0x08007719
 8007664:	08007719 	.word	0x08007719
 8007668:	080076ed 	.word	0x080076ed
 800766c:	08007719 	.word	0x08007719
 8007670:	08007719 	.word	0x08007719
 8007674:	08007719 	.word	0x08007719
 8007678:	08007719 	.word	0x08007719
 800767c:	08007719 	.word	0x08007719
 8007680:	08007719 	.word	0x08007719
 8007684:	08007719 	.word	0x08007719
 8007688:	08007703 	.word	0x08007703
 800768c:	08007719 	.word	0x08007719
 8007690:	08007719 	.word	0x08007719
 8007694:	08007719 	.word	0x08007719
 8007698:	08007719 	.word	0x08007719
 800769c:	08007719 	.word	0x08007719
 80076a0:	08007719 	.word	0x08007719
 80076a4:	08007719 	.word	0x08007719
 80076a8:	08007721 	.word	0x08007721
 80076ac:	08007719 	.word	0x08007719
 80076b0:	08007719 	.word	0x08007719
 80076b4:	08007719 	.word	0x08007719
 80076b8:	08007719 	.word	0x08007719
 80076bc:	08007719 	.word	0x08007719
 80076c0:	08007719 	.word	0x08007719
 80076c4:	08007719 	.word	0x08007719
 80076c8:	08007721 	.word	0x08007721
 80076cc:	08007719 	.word	0x08007719
 80076d0:	08007719 	.word	0x08007719
 80076d4:	08007719 	.word	0x08007719
 80076d8:	08007719 	.word	0x08007719
 80076dc:	08007719 	.word	0x08007719
 80076e0:	08007719 	.word	0x08007719
 80076e4:	08007719 	.word	0x08007719
 80076e8:	08007721 	.word	0x08007721
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f0:	3308      	adds	r3, #8
 80076f2:	2101      	movs	r1, #1
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 fe95 	bl	8009424 <RCCEx_PLL2_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007700:	e00f      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007706:	3328      	adds	r3, #40	; 0x28
 8007708:	2101      	movs	r1, #1
 800770a:	4618      	mov	r0, r3
 800770c:	f001 ff3c 	bl	8009588 <RCCEx_PLL3_Config>
 8007710:	4603      	mov	r3, r0
 8007712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007716:	e004      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800771e:	e000      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800772a:	4bbf      	ldr	r3, [pc, #764]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007738:	4abb      	ldr	r2, [pc, #748]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800773a:	430b      	orrs	r3, r1
 800773c:	6553      	str	r3, [r2, #84]	; 0x54
 800773e:	e003      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007744:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f002 0302 	and.w	r3, r2, #2
 8007754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007758:	2300      	movs	r3, #0
 800775a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800775e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007762:	460b      	mov	r3, r1
 8007764:	4313      	orrs	r3, r2
 8007766:	d041      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800776c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776e:	2b05      	cmp	r3, #5
 8007770:	d824      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007772:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007778:	080077c5 	.word	0x080077c5
 800777c:	08007791 	.word	0x08007791
 8007780:	080077a7 	.word	0x080077a7
 8007784:	080077c5 	.word	0x080077c5
 8007788:	080077c5 	.word	0x080077c5
 800778c:	080077c5 	.word	0x080077c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007794:	3308      	adds	r3, #8
 8007796:	2101      	movs	r1, #1
 8007798:	4618      	mov	r0, r3
 800779a:	f001 fe43 	bl	8009424 <RCCEx_PLL2_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077a4:	e00f      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077aa:	3328      	adds	r3, #40	; 0x28
 80077ac:	2101      	movs	r1, #1
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 feea 	bl	8009588 <RCCEx_PLL3_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077ba:	e004      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077c2:	e000      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80077c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077ce:	4b96      	ldr	r3, [pc, #600]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d2:	f023 0107 	bic.w	r1, r3, #7
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077dc:	4a92      	ldr	r2, [pc, #584]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077de:	430b      	orrs	r3, r1
 80077e0:	6553      	str	r3, [r2, #84]	; 0x54
 80077e2:	e003      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f002 0304 	and.w	r3, r2, #4
 80077f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077fc:	2300      	movs	r3, #0
 80077fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007802:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007806:	460b      	mov	r3, r1
 8007808:	4313      	orrs	r3, r2
 800780a:	d044      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007814:	2b05      	cmp	r3, #5
 8007816:	d825      	bhi.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007818:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	0800786d 	.word	0x0800786d
 8007824:	08007839 	.word	0x08007839
 8007828:	0800784f 	.word	0x0800784f
 800782c:	0800786d 	.word	0x0800786d
 8007830:	0800786d 	.word	0x0800786d
 8007834:	0800786d 	.word	0x0800786d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800783c:	3308      	adds	r3, #8
 800783e:	2101      	movs	r1, #1
 8007840:	4618      	mov	r0, r3
 8007842:	f001 fdef 	bl	8009424 <RCCEx_PLL2_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800784c:	e00f      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007852:	3328      	adds	r3, #40	; 0x28
 8007854:	2101      	movs	r1, #1
 8007856:	4618      	mov	r0, r3
 8007858:	f001 fe96 	bl	8009588 <RCCEx_PLL3_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007862:	e004      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800786a:	e000      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800786c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007876:	4b6c      	ldr	r3, [pc, #432]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787a:	f023 0107 	bic.w	r1, r3, #7
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007886:	4a68      	ldr	r2, [pc, #416]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007888:	430b      	orrs	r3, r1
 800788a:	6593      	str	r3, [r2, #88]	; 0x58
 800788c:	e003      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007892:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f002 0320 	and.w	r3, r2, #32
 80078a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078a6:	2300      	movs	r3, #0
 80078a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078b0:	460b      	mov	r3, r1
 80078b2:	4313      	orrs	r3, r2
 80078b4:	d055      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80078b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c2:	d033      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80078c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c8:	d82c      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d02f      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80078d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d4:	d826      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078da:	d02b      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80078dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078e0:	d820      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e6:	d012      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ec:	d81a      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d022      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078f6:	d115      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fc:	3308      	adds	r3, #8
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fd8f 	bl	8009424 <RCCEx_PLL2_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800790c:	e015      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007912:	3328      	adds	r3, #40	; 0x28
 8007914:	2102      	movs	r1, #2
 8007916:	4618      	mov	r0, r3
 8007918:	f001 fe36 	bl	8009588 <RCCEx_PLL3_Config>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007922:	e00a      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800792a:	e006      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800792c:	bf00      	nop
 800792e:	e004      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007930:	bf00      	nop
 8007932:	e002      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007934:	bf00      	nop
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007942:	4b39      	ldr	r3, [pc, #228]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007946:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800794a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007952:	4a35      	ldr	r2, [pc, #212]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007954:	430b      	orrs	r3, r1
 8007956:	6553      	str	r3, [r2, #84]	; 0x54
 8007958:	e003      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800795e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800796e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007972:	2300      	movs	r3, #0
 8007974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007978:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800797c:	460b      	mov	r3, r1
 800797e:	4313      	orrs	r3, r2
 8007980:	d058      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800798a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800798e:	d033      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007990:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007994:	d82c      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799a:	d02f      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a0:	d826      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079a6:	d02b      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079ac:	d820      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b2:	d012      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80079b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b8:	d81a      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d022      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80079be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c2:	d115      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c8:	3308      	adds	r3, #8
 80079ca:	2100      	movs	r1, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 fd29 	bl	8009424 <RCCEx_PLL2_Config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079d8:	e015      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079de:	3328      	adds	r3, #40	; 0x28
 80079e0:	2102      	movs	r1, #2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fdd0 	bl	8009588 <RCCEx_PLL3_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079ee:	e00a      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079f6:	e006      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079f8:	bf00      	nop
 80079fa:	e004      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079fc:	bf00      	nop
 80079fe:	e002      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a00:	bf00      	nop
 8007a02:	e000      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10e      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a12:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a1e:	4a02      	ldr	r2, [pc, #8]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6593      	str	r3, [r2, #88]	; 0x58
 8007a24:	e006      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a44:	2300      	movs	r3, #0
 8007a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4313      	orrs	r3, r2
 8007a52:	d055      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a60:	d033      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a66:	d82c      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a6c:	d02f      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a72:	d826      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a78:	d02b      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a7e:	d820      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a84:	d012      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a8a:	d81a      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d022      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a94:	d115      	bne.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 fcc0 	bl	8009424 <RCCEx_PLL2_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007aaa:	e015      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	3328      	adds	r3, #40	; 0x28
 8007ab2:	2102      	movs	r1, #2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fd67 	bl	8009588 <RCCEx_PLL3_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ac0:	e00a      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ac8:	e006      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007aca:	bf00      	nop
 8007acc:	e004      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ace:	bf00      	nop
 8007ad0:	e002      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ad2:	bf00      	nop
 8007ad4:	e000      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ae0:	4ba1      	ldr	r3, [pc, #644]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007af0:	4a9d      	ldr	r2, [pc, #628]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007af2:	430b      	orrs	r3, r1
 8007af4:	6593      	str	r3, [r2, #88]	; 0x58
 8007af6:	e003      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007afc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f002 0308 	and.w	r3, r2, #8
 8007b0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d01e      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2c:	d10c      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b32:	3328      	adds	r3, #40	; 0x28
 8007b34:	2102      	movs	r1, #2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f001 fd26 	bl	8009588 <RCCEx_PLL3_Config>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b48:	4b87      	ldr	r3, [pc, #540]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b58:	4a83      	ldr	r2, [pc, #524]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f002 0310 	and.w	r3, r2, #16
 8007b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	d01e      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8a:	d10c      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b90:	3328      	adds	r3, #40	; 0x28
 8007b92:	2102      	movs	r1, #2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 fcf7 	bl	8009588 <RCCEx_PLL3_Config>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ba6:	4b70      	ldr	r3, [pc, #448]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007baa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bb6:	4a6c      	ldr	r2, [pc, #432]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	d03e      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be8:	d022      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bee:	d81b      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf8:	d00b      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007bfa:	e015      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c00:	3308      	adds	r3, #8
 8007c02:	2100      	movs	r1, #0
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 fc0d 	bl	8009424 <RCCEx_PLL2_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c10:	e00f      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c16:	3328      	adds	r3, #40	; 0x28
 8007c18:	2102      	movs	r1, #2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fcb4 	bl	8009588 <RCCEx_PLL3_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c26:	e004      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c2e:	e000      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c3a:	4b4b      	ldr	r3, [pc, #300]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c4a:	4a47      	ldr	r2, [pc, #284]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c50:	e003      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007c66:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c68:	2300      	movs	r3, #0
 8007c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007c70:	460b      	mov	r3, r1
 8007c72:	4313      	orrs	r3, r2
 8007c74:	d03b      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c82:	d01f      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c88:	d818      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c8e:	d003      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c94:	d007      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c96:	e011      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c98:	4b33      	ldr	r3, [pc, #204]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	4a32      	ldr	r2, [pc, #200]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ca4:	e00f      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007caa:	3328      	adds	r3, #40	; 0x28
 8007cac:	2101      	movs	r1, #1
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 fc6a 	bl	8009588 <RCCEx_PLL3_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cba:	e004      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cc2:	e000      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10b      	bne.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cce:	4b26      	ldr	r3, [pc, #152]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cde:	4a22      	ldr	r2, [pc, #136]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	6553      	str	r3, [r2, #84]	; 0x54
 8007ce4:	e003      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	677b      	str	r3, [r7, #116]	; 0x74
 8007d00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007d04:	460b      	mov	r3, r1
 8007d06:	4313      	orrs	r3, r2
 8007d08:	d034      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d18:	d007      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d1a:	e011      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d1c:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d28:	e00e      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2e:	3308      	adds	r3, #8
 8007d30:	2102      	movs	r1, #2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 fb76 	bl	8009424 <RCCEx_PLL2_Config>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d3e:	e003      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10d      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5e:	4a02      	ldr	r2, [pc, #8]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d60:	430b      	orrs	r3, r1
 8007d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d64:	e006      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d66:	bf00      	nop
 8007d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d82:	2300      	movs	r3, #0
 8007d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	d00c      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d94:	3328      	adds	r3, #40	; 0x28
 8007d96:	2102      	movs	r1, #2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f001 fbf5 	bl	8009588 <RCCEx_PLL3_Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007db6:	663b      	str	r3, [r7, #96]	; 0x60
 8007db8:	2300      	movs	r3, #0
 8007dba:	667b      	str	r3, [r7, #100]	; 0x64
 8007dbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	d038      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd2:	d018      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd8:	d811      	bhi.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dde:	d014      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de4:	d80b      	bhi.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d011      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dee:	d106      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df0:	4bc3      	ldr	r3, [pc, #780]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4ac2      	ldr	r2, [pc, #776]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007dfc:	e008      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e04:	e004      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e06:	bf00      	nop
 8007e08:	e002      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e0a:	bf00      	nop
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e18:	4bb9      	ldr	r3, [pc, #740]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e28:	4ab5      	ldr	r2, [pc, #724]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	6553      	str	r3, [r2, #84]	; 0x54
 8007e2e:	e003      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007e44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e46:	2300      	movs	r3, #0
 8007e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4313      	orrs	r3, r2
 8007e52:	d009      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e54:	4baa      	ldr	r3, [pc, #680]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e62:	4aa7      	ldr	r2, [pc, #668]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e64:	430b      	orrs	r3, r1
 8007e66:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007e74:	653b      	str	r3, [r7, #80]	; 0x50
 8007e76:	2300      	movs	r3, #0
 8007e78:	657b      	str	r3, [r7, #84]	; 0x54
 8007e7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4313      	orrs	r3, r2
 8007e82:	d00a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e84:	4b9e      	ldr	r3, [pc, #632]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e94:	4a9a      	ldr	r2, [pc, #616]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e96:	430b      	orrs	r3, r1
 8007e98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	d009      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007eb6:	4b92      	ldr	r3, [pc, #584]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eba:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec4:	4a8e      	ldr	r2, [pc, #568]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ed8:	2300      	movs	r3, #0
 8007eda:	647b      	str	r3, [r7, #68]	; 0x44
 8007edc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	d00e      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ee6:	4b86      	ldr	r3, [pc, #536]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	4a85      	ldr	r2, [pc, #532]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ef0:	6113      	str	r3, [r2, #16]
 8007ef2:	4b83      	ldr	r3, [pc, #524]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef4:	6919      	ldr	r1, [r3, #16]
 8007ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007efa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007efe:	4a80      	ldr	r2, [pc, #512]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f12:	2300      	movs	r3, #0
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	d009      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f20:	4b77      	ldr	r3, [pc, #476]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f24:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2e:	4a74      	ldr	r2, [pc, #464]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f30:	430b      	orrs	r3, r1
 8007f32:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007f40:	633b      	str	r3, [r7, #48]	; 0x30
 8007f42:	2300      	movs	r3, #0
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34
 8007f46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	d00a      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f50:	4b6b      	ldr	r3, [pc, #428]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f54:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f60:	4a67      	ldr	r2, [pc, #412]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f62:	430b      	orrs	r3, r1
 8007f64:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	d011      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f86:	3308      	adds	r3, #8
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 fa4a 	bl	8009424 <RCCEx_PLL2_Config>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	6239      	str	r1, [r7, #32]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	d011      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 fa2a 	bl	8009424 <RCCEx_PLL2_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	2100      	movs	r1, #0
 8007ff0:	61b9      	str	r1, [r7, #24]
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4313      	orrs	r3, r2
 8008000:	d011      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008006:	3308      	adds	r3, #8
 8008008:	2102      	movs	r1, #2
 800800a:	4618      	mov	r0, r3
 800800c:	f001 fa0a 	bl	8009424 <RCCEx_PLL2_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	2100      	movs	r1, #0
 8008030:	6139      	str	r1, [r7, #16]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800803c:	460b      	mov	r3, r1
 800803e:	4313      	orrs	r3, r2
 8008040:	d011      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008046:	3328      	adds	r3, #40	; 0x28
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f001 fa9c 	bl	8009588 <RCCEx_PLL3_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008062:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	2100      	movs	r1, #0
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	f003 0310 	and.w	r3, r3, #16
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800807c:	460b      	mov	r3, r1
 800807e:	4313      	orrs	r3, r2
 8008080:	d011      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008086:	3328      	adds	r3, #40	; 0x28
 8008088:	2101      	movs	r1, #1
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fa7c 	bl	8009588 <RCCEx_PLL3_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	2100      	movs	r1, #0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	607b      	str	r3, [r7, #4]
 80080b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80080bc:	460b      	mov	r3, r1
 80080be:	4313      	orrs	r3, r2
 80080c0:	d011      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c6:	3328      	adds	r3, #40	; 0x28
 80080c8:	2102      	movs	r1, #2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fa5c 	bl	8009588 <RCCEx_PLL3_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80080e6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e000      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80080fa:	46bd      	mov	sp, r7
 80080fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008100:	58024400 	.word	0x58024400

08008104 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b090      	sub	sp, #64	; 0x40
 8008108:	af00      	add	r7, sp, #0
 800810a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800810e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008112:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008116:	430b      	orrs	r3, r1
 8008118:	f040 8094 	bne.w	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800811c:	4b9e      	ldr	r3, [pc, #632]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800811e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008120:	f003 0307 	and.w	r3, r3, #7
 8008124:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	2b04      	cmp	r3, #4
 800812a:	f200 8087 	bhi.w	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008149 	.word	0x08008149
 8008138:	08008171 	.word	0x08008171
 800813c:	08008199 	.word	0x08008199
 8008140:	08008235 	.word	0x08008235
 8008144:	080081c1 	.word	0x080081c1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008148:	4b93      	ldr	r3, [pc, #588]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008154:	d108      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f810 	bl	8009180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008164:	f000 bd45 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800816c:	f000 bd41 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008170:	4b89      	ldr	r3, [pc, #548]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800817c:	d108      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800817e:	f107 0318 	add.w	r3, r7, #24
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fd54 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800818c:	f000 bd31 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008194:	f000 bd2d 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008198:	4b7f      	ldr	r3, [pc, #508]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a4:	d108      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081a6:	f107 030c 	add.w	r3, r7, #12
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fe94 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b4:	f000 bd1d 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081bc:	f000 bd19 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081c0:	4b75      	ldr	r3, [pc, #468]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081c8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081ca:	4b73      	ldr	r3, [pc, #460]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0304 	and.w	r3, r3, #4
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d10c      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d109      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081dc:	4b6e      	ldr	r3, [pc, #440]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	08db      	lsrs	r3, r3, #3
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	4a6d      	ldr	r2, [pc, #436]	; (800839c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ee:	e01f      	b.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081f0:	4b69      	ldr	r3, [pc, #420]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fc:	d106      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008204:	d102      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008206:	4b66      	ldr	r3, [pc, #408]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800820a:	e011      	b.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800820c:	4b62      	ldr	r3, [pc, #392]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008218:	d106      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800821a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008220:	d102      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008222:	4b60      	ldr	r3, [pc, #384]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008226:	e003      	b.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800822c:	f000 bce1 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008230:	f000 bcdf 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008234:	4b5c      	ldr	r3, [pc, #368]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008238:	f000 bcdb 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008240:	f000 bcd7 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008248:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800824c:	430b      	orrs	r3, r1
 800824e:	f040 80ad 	bne.w	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008252:	4b51      	ldr	r3, [pc, #324]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008256:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800825a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d056      	beq.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826a:	f200 8090 	bhi.w	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2bc0      	cmp	r3, #192	; 0xc0
 8008272:	f000 8088 	beq.w	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	2bc0      	cmp	r3, #192	; 0xc0
 800827a:	f200 8088 	bhi.w	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d032      	beq.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	2b80      	cmp	r3, #128	; 0x80
 8008288:	f200 8081 	bhi.w	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	2b40      	cmp	r3, #64	; 0x40
 8008296:	d014      	beq.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008298:	e079      	b.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800829a:	4b3f      	ldr	r3, [pc, #252]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082a6:	d108      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 ff67 	bl	8009180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b6:	f000 bc9c 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082be:	f000 bc98 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082c2:	4b35      	ldr	r3, [pc, #212]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082ce:	d108      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082d0:	f107 0318 	add.w	r3, r7, #24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fcab 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082de:	f000 bc88 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e6:	f000 bc84 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082ea:	4b2b      	ldr	r3, [pc, #172]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f6:	d108      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f8:	f107 030c 	add.w	r3, r7, #12
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fdeb 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008306:	f000 bc74 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800830e:	f000 bc70 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008312:	4b21      	ldr	r3, [pc, #132]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008316:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800831a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800831c:	4b1e      	ldr	r3, [pc, #120]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b04      	cmp	r3, #4
 8008326:	d10c      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800832e:	4b1a      	ldr	r3, [pc, #104]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	08db      	lsrs	r3, r3, #3
 8008334:	f003 0303 	and.w	r3, r3, #3
 8008338:	4a18      	ldr	r2, [pc, #96]	; (800839c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800833a:	fa22 f303 	lsr.w	r3, r2, r3
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008340:	e01f      	b.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834e:	d106      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008356:	d102      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008358:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800835c:	e011      	b.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800835e:	4b0e      	ldr	r3, [pc, #56]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800836a:	d106      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800836c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008372:	d102      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008374:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008378:	e003      	b.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800837e:	f000 bc38 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008382:	f000 bc36 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008386:	4b08      	ldr	r3, [pc, #32]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800838a:	f000 bc32 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008392:	f000 bc2e 	b.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008396:	bf00      	nop
 8008398:	58024400 	.word	0x58024400
 800839c:	03d09000 	.word	0x03d09000
 80083a0:	003d0900 	.word	0x003d0900
 80083a4:	017d7840 	.word	0x017d7840
 80083a8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80083ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80083b4:	430b      	orrs	r3, r1
 80083b6:	f040 809c 	bne.w	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80083ba:	4b9e      	ldr	r3, [pc, #632]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80083c2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ca:	d054      	beq.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d2:	f200 808b 	bhi.w	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083dc:	f000 8083 	beq.w	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083e6:	f200 8081 	bhi.w	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f0:	d02f      	beq.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f8:	d878      	bhi.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008406:	d012      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008408:	e070      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800840a:	4b8a      	ldr	r3, [pc, #552]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008416:	d107      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800841c:	4618      	mov	r0, r3
 800841e:	f000 feaf 	bl	8009180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008426:	e3e4      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800842c:	e3e1      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800842e:	4b81      	ldr	r3, [pc, #516]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800843a:	d107      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800843c:	f107 0318 	add.w	r3, r7, #24
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fbf5 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800844a:	e3d2      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008450:	e3cf      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008452:	4b78      	ldr	r3, [pc, #480]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800845a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845e:	d107      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008460:	f107 030c 	add.w	r3, r7, #12
 8008464:	4618      	mov	r0, r3
 8008466:	f000 fd37 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800846e:	e3c0      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008474:	e3bd      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008476:	4b6f      	ldr	r3, [pc, #444]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800847e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008480:	4b6c      	ldr	r3, [pc, #432]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b04      	cmp	r3, #4
 800848a:	d10c      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008492:	4b68      	ldr	r3, [pc, #416]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	08db      	lsrs	r3, r3, #3
 8008498:	f003 0303 	and.w	r3, r3, #3
 800849c:	4a66      	ldr	r2, [pc, #408]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800849e:	fa22 f303 	lsr.w	r3, r2, r3
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084a4:	e01e      	b.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084a6:	4b63      	ldr	r3, [pc, #396]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084b2:	d106      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80084b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ba:	d102      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084bc:	4b5f      	ldr	r3, [pc, #380]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084c0:	e010      	b.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084c2:	4b5c      	ldr	r3, [pc, #368]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ce:	d106      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80084d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d6:	d102      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084d8:	4b59      	ldr	r3, [pc, #356]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084dc:	e002      	b.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80084e2:	e386      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084e4:	e385      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084e6:	4b57      	ldr	r3, [pc, #348]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ea:	e382      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f0:	e37f      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80084f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80084fa:	430b      	orrs	r3, r1
 80084fc:	f040 80a7 	bne.w	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008500:	4b4c      	ldr	r3, [pc, #304]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008504:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008508:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008510:	d055      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008518:	f200 8096 	bhi.w	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008522:	f000 8084 	beq.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800852c:	f200 808c 	bhi.w	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008536:	d030      	beq.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800853e:	f200 8083 	bhi.w	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	2b00      	cmp	r3, #0
 8008546:	d004      	beq.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800854e:	d012      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008550:	e07a      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008552:	4b38      	ldr	r3, [pc, #224]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800855a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800855e:	d107      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fe0b 	bl	8009180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856e:	e340      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008574:	e33d      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008576:	4b2f      	ldr	r3, [pc, #188]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800857e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008582:	d107      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008584:	f107 0318 	add.w	r3, r7, #24
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fb51 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008592:	e32e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008598:	e32b      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800859a:	4b26      	ldr	r3, [pc, #152]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a6:	d107      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085a8:	f107 030c 	add.w	r3, r7, #12
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fc93 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b6:	e31c      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085bc:	e319      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085be:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085c8:	4b1a      	ldr	r3, [pc, #104]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d10c      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d109      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085da:	4b16      	ldr	r3, [pc, #88]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	08db      	lsrs	r3, r3, #3
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	4a14      	ldr	r2, [pc, #80]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80085e6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ec:	e01e      	b.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085ee:	4b11      	ldr	r3, [pc, #68]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fa:	d106      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80085fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008602:	d102      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008604:	4b0d      	ldr	r3, [pc, #52]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008608:	e010      	b.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800860a:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008616:	d106      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800861e:	d102      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008624:	e002      	b.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800862a:	e2e2      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800862c:	e2e1      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800862e:	4b05      	ldr	r3, [pc, #20]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008632:	e2de      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008634:	58024400 	.word	0x58024400
 8008638:	03d09000 	.word	0x03d09000
 800863c:	003d0900 	.word	0x003d0900
 8008640:	017d7840 	.word	0x017d7840
 8008644:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800864c:	e2d1      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800864e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008652:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008656:	430b      	orrs	r3, r1
 8008658:	f040 809c 	bne.w	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800865c:	4b93      	ldr	r3, [pc, #588]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800865e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008660:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008664:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800866c:	d054      	beq.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008674:	f200 808b 	bhi.w	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800867e:	f000 8083 	beq.w	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008688:	f200 8081 	bhi.w	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008692:	d02f      	beq.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869a:	d878      	bhi.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a8:	d012      	beq.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80086aa:	e070      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ac:	4b7f      	ldr	r3, [pc, #508]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086b8:	d107      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fd5e 	bl	8009180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c8:	e293      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ce:	e290      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d0:	4b76      	ldr	r3, [pc, #472]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086dc:	d107      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 faa4 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ec:	e281      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f2:	e27e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086f4:	4b6d      	ldr	r3, [pc, #436]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008700:	d107      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008702:	f107 030c 	add.w	r3, r7, #12
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fbe6 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008710:	e26f      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008716:	e26c      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008718:	4b64      	ldr	r3, [pc, #400]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800871a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008720:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008722:	4b62      	ldr	r3, [pc, #392]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b04      	cmp	r3, #4
 800872c:	d10c      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008734:	4b5d      	ldr	r3, [pc, #372]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	08db      	lsrs	r3, r3, #3
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	4a5c      	ldr	r2, [pc, #368]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008740:	fa22 f303 	lsr.w	r3, r2, r3
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008746:	e01e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008748:	4b58      	ldr	r3, [pc, #352]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008754:	d106      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800875c:	d102      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800875e:	4b55      	ldr	r3, [pc, #340]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008762:	e010      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008764:	4b51      	ldr	r3, [pc, #324]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008770:	d106      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008778:	d102      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800877a:	4b4f      	ldr	r3, [pc, #316]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800877e:	e002      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008784:	e235      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008786:	e234      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008788:	4b4c      	ldr	r3, [pc, #304]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800878c:	e231      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008792:	e22e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008798:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800879c:	430b      	orrs	r3, r1
 800879e:	f040 808f 	bne.w	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80087a2:	4b42      	ldr	r3, [pc, #264]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80087aa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087b2:	d06b      	beq.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087ba:	d874      	bhi.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087c2:	d056      	beq.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087ca:	d86c      	bhi.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087d2:	d03b      	beq.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087da:	d864      	bhi.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087e2:	d021      	beq.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ea:	d85c      	bhi.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f8:	d004      	beq.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80087fa:	e054      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80087fc:	f7fe fa4c 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 8008800:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008802:	e1f6      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008804:	4b29      	ldr	r3, [pc, #164]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800880c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008810:	d107      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008812:	f107 0318 	add.w	r3, r7, #24
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fa0a 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008820:	e1e7      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008826:	e1e4      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008828:	4b20      	ldr	r3, [pc, #128]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008834:	d107      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008836:	f107 030c 	add.w	r3, r7, #12
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fb4c 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008844:	e1d5      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884a:	e1d2      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800884c:	4b17      	ldr	r3, [pc, #92]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b04      	cmp	r3, #4
 8008856:	d109      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008858:	4b14      	ldr	r3, [pc, #80]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	08db      	lsrs	r3, r3, #3
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
 8008868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800886a:	e1c2      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008870:	e1bf      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008872:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887e:	d102      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008880:	4b0c      	ldr	r3, [pc, #48]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008884:	e1b5      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800888a:	e1b2      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800888c:	4b07      	ldr	r3, [pc, #28]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008898:	d102      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800889a:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800889e:	e1a8      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a4:	e1a5      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088aa:	e1a2      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088ac:	58024400 	.word	0x58024400
 80088b0:	03d09000 	.word	0x03d09000
 80088b4:	003d0900 	.word	0x003d0900
 80088b8:	017d7840 	.word	0x017d7840
 80088bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80088c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80088c8:	430b      	orrs	r3, r1
 80088ca:	d173      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80088cc:	4b9c      	ldr	r3, [pc, #624]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088dc:	d02f      	beq.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088e4:	d863      	bhi.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d004      	beq.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088f2:	d012      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80088f4:	e05b      	b.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088f6:	4b92      	ldr	r3, [pc, #584]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008902:	d107      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008904:	f107 0318 	add.w	r3, r7, #24
 8008908:	4618      	mov	r0, r3
 800890a:	f000 f991 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008912:	e16e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008918:	e16b      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800891a:	4b89      	ldr	r3, [pc, #548]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008926:	d107      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008928:	f107 030c 	add.w	r3, r7, #12
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fad3 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008936:	e15c      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800893c:	e159      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800893e:	4b80      	ldr	r3, [pc, #512]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008946:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008948:	4b7d      	ldr	r3, [pc, #500]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d10c      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800895a:	4b79      	ldr	r3, [pc, #484]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	08db      	lsrs	r3, r3, #3
 8008960:	f003 0303 	and.w	r3, r3, #3
 8008964:	4a77      	ldr	r2, [pc, #476]	; (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008966:	fa22 f303 	lsr.w	r3, r2, r3
 800896a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800896c:	e01e      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800896e:	4b74      	ldr	r3, [pc, #464]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897a:	d106      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800897c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008982:	d102      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008984:	4b70      	ldr	r3, [pc, #448]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008988:	e010      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800898a:	4b6d      	ldr	r3, [pc, #436]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008992:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008996:	d106      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800899e:	d102      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089a0:	4b6a      	ldr	r3, [pc, #424]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a4:	e002      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089aa:	e122      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089ac:	e121      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089b2:	e11e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80089b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80089bc:	430b      	orrs	r3, r1
 80089be:	d133      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80089c0:	4b5f      	ldr	r3, [pc, #380]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d6:	d012      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80089d8:	e023      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089da:	4b59      	ldr	r3, [pc, #356]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089e6:	d107      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fbc7 	bl	8009180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f6:	e0fc      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089fc:	e0f9      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089fe:	4b50      	ldr	r3, [pc, #320]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a0c:	f107 0318 	add.w	r3, r7, #24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f90d 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a1a:	e0ea      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a20:	e0e7      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a26:	e0e4      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008a30:	430b      	orrs	r3, r1
 8008a32:	f040 808d 	bne.w	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a36:	4b42      	ldr	r3, [pc, #264]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a3e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a46:	d06b      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a4e:	d874      	bhi.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a56:	d056      	beq.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5e:	d86c      	bhi.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a66:	d03b      	beq.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a6e:	d864      	bhi.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a76:	d021      	beq.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7e:	d85c      	bhi.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d004      	beq.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a8c:	d004      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008a8e:	e054      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a90:	f000 f8b8 	bl	8008c04 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a94:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a96:	e0ac      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a98:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aa4:	d107      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aa6:	f107 0318 	add.w	r3, r7, #24
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f8c0 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ab4:	e09d      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aba:	e09a      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008abc:	4b20      	ldr	r3, [pc, #128]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ac8:	d107      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aca:	f107 030c 	add.w	r3, r7, #12
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fa02 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad8:	e08b      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ade:	e088      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ae0:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d109      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aec:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	08db      	lsrs	r3, r3, #3
 8008af2:	f003 0303 	and.w	r3, r3, #3
 8008af6:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008af8:	fa22 f303 	lsr.w	r3, r2, r3
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008afe:	e078      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b04:	e075      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b06:	4b0e      	ldr	r3, [pc, #56]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	d102      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008b14:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b18:	e06b      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b1e:	e068      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b20:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b2c:	d102      	bne.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008b2e:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b32:	e05e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b38:	e05b      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b3e:	e058      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b40:	58024400 	.word	0x58024400
 8008b44:	03d09000 	.word	0x03d09000
 8008b48:	003d0900 	.word	0x003d0900
 8008b4c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b54:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	d148      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b5c:	4b27      	ldr	r3, [pc, #156]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b64:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b6c:	d02a      	beq.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b74:	d838      	bhi.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b82:	d00d      	beq.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008b84:	e030      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b86:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b92:	d102      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008b94:	4b1a      	ldr	r3, [pc, #104]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b98:	e02b      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b9e:	e028      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ba0:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bac:	d107      	bne.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fae4 	bl	8009180 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bbc:	e019      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc2:	e016      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bc4:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bd0:	d107      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd2:	f107 0318 	add.w	r3, r7, #24
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 f82a 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be0:	e007      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be6:	e004      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bec:	e001      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3740      	adds	r7, #64	; 0x40
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	58024400 	.word	0x58024400
 8008c00:	017d7840 	.word	0x017d7840

08008c04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c08:	f7fe f816 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	091b      	lsrs	r3, r3, #4
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	4904      	ldr	r1, [pc, #16]	; (8008c2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c1a:	5ccb      	ldrb	r3, [r1, r3]
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	0800bee4 	.word	0x0800bee4

08008c30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b089      	sub	sp, #36	; 0x24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c38:	4ba1      	ldr	r3, [pc, #644]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	f003 0303 	and.w	r3, r3, #3
 8008c40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c42:	4b9f      	ldr	r3, [pc, #636]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c46:	0b1b      	lsrs	r3, r3, #12
 8008c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c4e:	4b9c      	ldr	r3, [pc, #624]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c52:	091b      	lsrs	r3, r3, #4
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c5a:	4b99      	ldr	r3, [pc, #612]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	08db      	lsrs	r3, r3, #3
 8008c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	fb02 f303 	mul.w	r3, r2, r3
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8111 	beq.w	8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	f000 8083 	beq.w	8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	f200 80a1 	bhi.w	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d056      	beq.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c9a:	e099      	b.n	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c9c:	4b88      	ldr	r3, [pc, #544]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d02d      	beq.n	8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ca8:	4b85      	ldr	r3, [pc, #532]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	08db      	lsrs	r3, r3, #3
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	4a84      	ldr	r2, [pc, #528]	; (8008ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	ee07 3a90 	vmov	s15, r3
 8008cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd2:	4b7b      	ldr	r3, [pc, #492]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ce6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d02:	e087      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d16:	4b6a      	ldr	r3, [pc, #424]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d46:	e065      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d5a:	4b59      	ldr	r3, [pc, #356]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d8a:	e043      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d9e:	4b48      	ldr	r3, [pc, #288]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008db2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dce:	e021      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de2:	4b37      	ldr	r3, [pc, #220]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e14:	4b2a      	ldr	r3, [pc, #168]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	0a5b      	lsrs	r3, r3, #9
 8008e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e3a:	ee17 2a90 	vmov	r2, s15
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e42:	4b1f      	ldr	r3, [pc, #124]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	0c1b      	lsrs	r3, r3, #16
 8008e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e4c:	ee07 3a90 	vmov	s15, r3
 8008e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e68:	ee17 2a90 	vmov	r2, s15
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	0e1b      	lsrs	r3, r3, #24
 8008e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e96:	ee17 2a90 	vmov	r2, s15
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	609a      	str	r2, [r3, #8]
}
 8008eb2:	bf00      	nop
 8008eb4:	3724      	adds	r7, #36	; 0x24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	58024400 	.word	0x58024400
 8008ec4:	03d09000 	.word	0x03d09000
 8008ec8:	46000000 	.word	0x46000000
 8008ecc:	4c742400 	.word	0x4c742400
 8008ed0:	4a742400 	.word	0x4a742400
 8008ed4:	4bbebc20 	.word	0x4bbebc20

08008ed8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b089      	sub	sp, #36	; 0x24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ee0:	4ba1      	ldr	r3, [pc, #644]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008eea:	4b9f      	ldr	r3, [pc, #636]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	0d1b      	lsrs	r3, r3, #20
 8008ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ef4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ef6:	4b9c      	ldr	r3, [pc, #624]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f02:	4b99      	ldr	r3, [pc, #612]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f06:	08db      	lsrs	r3, r3, #3
 8008f08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	fb02 f303 	mul.w	r3, r2, r3
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8111 	beq.w	8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	f000 8083 	beq.w	8009034 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	f200 80a1 	bhi.w	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d056      	beq.n	8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f42:	e099      	b.n	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f44:	4b88      	ldr	r3, [pc, #544]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0320 	and.w	r3, r3, #32
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d02d      	beq.n	8008fac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f50:	4b85      	ldr	r3, [pc, #532]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	08db      	lsrs	r3, r3, #3
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	4a84      	ldr	r2, [pc, #528]	; (800916c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7a:	4b7b      	ldr	r3, [pc, #492]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008faa:	e087      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fbe:	4b6a      	ldr	r3, [pc, #424]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fee:	e065      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009002:	4b59      	ldr	r3, [pc, #356]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009012:	ed97 6a03 	vldr	s12, [r7, #12]
 8009016:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800901a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800901e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009032:	e043      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800917c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009046:	4b48      	ldr	r3, [pc, #288]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009056:	ed97 6a03 	vldr	s12, [r7, #12]
 800905a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800905e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800906a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009076:	e021      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009082:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800908a:	4b37      	ldr	r3, [pc, #220]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909a:	ed97 6a03 	vldr	s12, [r7, #12]
 800909e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80090bc:	4b2a      	ldr	r3, [pc, #168]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	0a5b      	lsrs	r3, r3, #9
 80090c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80090da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090e2:	ee17 2a90 	vmov	r2, s15
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80090ea:	4b1f      	ldr	r3, [pc, #124]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	0c1b      	lsrs	r3, r3, #16
 80090f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009100:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009104:	edd7 6a07 	vldr	s13, [r7, #28]
 8009108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800910c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009110:	ee17 2a90 	vmov	r2, s15
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009118:	4b13      	ldr	r3, [pc, #76]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911c:	0e1b      	lsrs	r3, r3, #24
 800911e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800912e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009132:	edd7 6a07 	vldr	s13, [r7, #28]
 8009136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800913a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800913e:	ee17 2a90 	vmov	r2, s15
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009146:	e008      	b.n	800915a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	609a      	str	r2, [r3, #8]
}
 800915a:	bf00      	nop
 800915c:	3724      	adds	r7, #36	; 0x24
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	58024400 	.word	0x58024400
 800916c:	03d09000 	.word	0x03d09000
 8009170:	46000000 	.word	0x46000000
 8009174:	4c742400 	.word	0x4c742400
 8009178:	4a742400 	.word	0x4a742400
 800917c:	4bbebc20 	.word	0x4bbebc20

08009180 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009180:	b480      	push	{r7}
 8009182:	b089      	sub	sp, #36	; 0x24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009188:	4ba0      	ldr	r3, [pc, #640]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009192:	4b9e      	ldr	r3, [pc, #632]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009196:	091b      	lsrs	r3, r3, #4
 8009198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800919c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800919e:	4b9b      	ldr	r3, [pc, #620]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091a8:	4b98      	ldr	r3, [pc, #608]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ac:	08db      	lsrs	r3, r3, #3
 80091ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	fb02 f303 	mul.w	r3, r2, r3
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 8111 	beq.w	80093ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	f000 8083 	beq.w	80092da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	f200 80a1 	bhi.w	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d056      	beq.n	8009296 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80091e8:	e099      	b.n	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ea:	4b88      	ldr	r3, [pc, #544]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0320 	and.w	r3, r3, #32
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d02d      	beq.n	8009252 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091f6:	4b85      	ldr	r3, [pc, #532]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	08db      	lsrs	r3, r3, #3
 80091fc:	f003 0303 	and.w	r3, r3, #3
 8009200:	4a83      	ldr	r2, [pc, #524]	; (8009410 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009202:	fa22 f303 	lsr.w	r3, r2, r3
 8009206:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	ee07 3a90 	vmov	s15, r3
 8009218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009220:	4b7a      	ldr	r3, [pc, #488]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009230:	ed97 6a03 	vldr	s12, [r7, #12]
 8009234:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009250:	e087      	b.n	8009362 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	ee07 3a90 	vmov	s15, r3
 8009258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009418 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009264:	4b69      	ldr	r3, [pc, #420]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009274:	ed97 6a03 	vldr	s12, [r7, #12]
 8009278:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800927c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800928c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009294:	e065      	b.n	8009362 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	ee07 3a90 	vmov	s15, r3
 800929c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800941c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80092a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a8:	4b58      	ldr	r3, [pc, #352]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80092bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092d8:	e043      	b.n	8009362 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	ee07 3a90 	vmov	s15, r3
 80092e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009420 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80092e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ec:	4b47      	ldr	r3, [pc, #284]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009300:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800931c:	e021      	b.n	8009362 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	ee07 3a90 	vmov	s15, r3
 8009324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009328:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009418 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800932c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009330:	4b36      	ldr	r3, [pc, #216]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009338:	ee07 3a90 	vmov	s15, r3
 800933c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009340:	ed97 6a03 	vldr	s12, [r7, #12]
 8009344:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009414 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009360:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009362:	4b2a      	ldr	r3, [pc, #168]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009366:	0a5b      	lsrs	r3, r3, #9
 8009368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800937c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009388:	ee17 2a90 	vmov	r2, s15
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009390:	4b1e      	ldr	r3, [pc, #120]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	0c1b      	lsrs	r3, r3, #16
 8009396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b6:	ee17 2a90 	vmov	r2, s15
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	0e1b      	lsrs	r3, r3, #24
 80093c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c8:	ee07 3a90 	vmov	s15, r3
 80093cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80093dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e4:	ee17 2a90 	vmov	r2, s15
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80093ec:	e008      	b.n	8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	609a      	str	r2, [r3, #8]
}
 8009400:	bf00      	nop
 8009402:	3724      	adds	r7, #36	; 0x24
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	58024400 	.word	0x58024400
 8009410:	03d09000 	.word	0x03d09000
 8009414:	46000000 	.word	0x46000000
 8009418:	4c742400 	.word	0x4c742400
 800941c:	4a742400 	.word	0x4a742400
 8009420:	4bbebc20 	.word	0x4bbebc20

08009424 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009432:	4b53      	ldr	r3, [pc, #332]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d101      	bne.n	8009442 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e099      	b.n	8009576 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009442:	4b4f      	ldr	r3, [pc, #316]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a4e      	ldr	r2, [pc, #312]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009448:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800944c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800944e:	f7f8 f821 	bl	8001494 <HAL_GetTick>
 8009452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009454:	e008      	b.n	8009468 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009456:	f7f8 f81d 	bl	8001494 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d901      	bls.n	8009468 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e086      	b.n	8009576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009468:	4b45      	ldr	r3, [pc, #276]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1f0      	bne.n	8009456 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009474:	4b42      	ldr	r3, [pc, #264]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009478:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	031b      	lsls	r3, r3, #12
 8009482:	493f      	ldr	r1, [pc, #252]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009484:	4313      	orrs	r3, r2
 8009486:	628b      	str	r3, [r1, #40]	; 0x28
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	3b01      	subs	r3, #1
 800948e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	3b01      	subs	r3, #1
 8009498:	025b      	lsls	r3, r3, #9
 800949a:	b29b      	uxth	r3, r3
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	041b      	lsls	r3, r3, #16
 80094a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094aa:	431a      	orrs	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	061b      	lsls	r3, r3, #24
 80094b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094b8:	4931      	ldr	r1, [pc, #196]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094be:	4b30      	ldr	r3, [pc, #192]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	492d      	ldr	r1, [pc, #180]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80094d0:	4b2b      	ldr	r3, [pc, #172]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	f023 0220 	bic.w	r2, r3, #32
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	4928      	ldr	r1, [pc, #160]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80094e2:	4b27      	ldr	r3, [pc, #156]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	4a26      	ldr	r2, [pc, #152]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094e8:	f023 0310 	bic.w	r3, r3, #16
 80094ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094ee:	4b24      	ldr	r3, [pc, #144]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094f2:	4b24      	ldr	r3, [pc, #144]	; (8009584 <RCCEx_PLL2_Config+0x160>)
 80094f4:	4013      	ands	r3, r2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	69d2      	ldr	r2, [r2, #28]
 80094fa:	00d2      	lsls	r2, r2, #3
 80094fc:	4920      	ldr	r1, [pc, #128]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009502:	4b1f      	ldr	r3, [pc, #124]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	4a1e      	ldr	r2, [pc, #120]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009508:	f043 0310 	orr.w	r3, r3, #16
 800950c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009514:	4b1a      	ldr	r3, [pc, #104]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009518:	4a19      	ldr	r2, [pc, #100]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 800951a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800951e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009520:	e00f      	b.n	8009542 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d106      	bne.n	8009536 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009528:	4b15      	ldr	r3, [pc, #84]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	4a14      	ldr	r2, [pc, #80]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 800952e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009534:	e005      	b.n	8009542 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009536:	4b12      	ldr	r3, [pc, #72]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	4a11      	ldr	r2, [pc, #68]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 800953c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009540:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a0e      	ldr	r2, [pc, #56]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 8009548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800954c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800954e:	f7f7 ffa1 	bl	8001494 <HAL_GetTick>
 8009552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009554:	e008      	b.n	8009568 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009556:	f7f7 ff9d 	bl	8001494 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	2b02      	cmp	r3, #2
 8009562:	d901      	bls.n	8009568 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e006      	b.n	8009576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <RCCEx_PLL2_Config+0x15c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0f0      	beq.n	8009556 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009574:	7bfb      	ldrb	r3, [r7, #15]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	58024400 	.word	0x58024400
 8009584:	ffff0007 	.word	0xffff0007

08009588 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009596:	4b53      	ldr	r3, [pc, #332]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d101      	bne.n	80095a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e099      	b.n	80096da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80095a6:	4b4f      	ldr	r3, [pc, #316]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a4e      	ldr	r2, [pc, #312]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80095ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095b2:	f7f7 ff6f 	bl	8001494 <HAL_GetTick>
 80095b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095b8:	e008      	b.n	80095cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095ba:	f7f7 ff6b 	bl	8001494 <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d901      	bls.n	80095cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e086      	b.n	80096da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095cc:	4b45      	ldr	r3, [pc, #276]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1f0      	bne.n	80095ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80095d8:	4b42      	ldr	r3, [pc, #264]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80095da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	051b      	lsls	r3, r3, #20
 80095e6:	493f      	ldr	r1, [pc, #252]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	628b      	str	r3, [r1, #40]	; 0x28
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	025b      	lsls	r3, r3, #9
 80095fe:	b29b      	uxth	r3, r3
 8009600:	431a      	orrs	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	3b01      	subs	r3, #1
 8009608:	041b      	lsls	r3, r3, #16
 800960a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	3b01      	subs	r3, #1
 8009616:	061b      	lsls	r3, r3, #24
 8009618:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800961c:	4931      	ldr	r1, [pc, #196]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 800961e:	4313      	orrs	r3, r2
 8009620:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009622:	4b30      	ldr	r3, [pc, #192]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	492d      	ldr	r1, [pc, #180]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009630:	4313      	orrs	r3, r2
 8009632:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009634:	4b2b      	ldr	r3, [pc, #172]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	4928      	ldr	r1, [pc, #160]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009642:	4313      	orrs	r3, r2
 8009644:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009646:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	4a26      	ldr	r2, [pc, #152]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 800964c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009652:	4b24      	ldr	r3, [pc, #144]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009656:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <RCCEx_PLL3_Config+0x160>)
 8009658:	4013      	ands	r3, r2
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	69d2      	ldr	r2, [r2, #28]
 800965e:	00d2      	lsls	r2, r2, #3
 8009660:	4920      	ldr	r1, [pc, #128]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009662:	4313      	orrs	r3, r2
 8009664:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009666:	4b1f      	ldr	r3, [pc, #124]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966a:	4a1e      	ldr	r2, [pc, #120]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 800966c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009670:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d106      	bne.n	8009686 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009678:	4b1a      	ldr	r3, [pc, #104]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 800967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967c:	4a19      	ldr	r2, [pc, #100]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 800967e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009682:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009684:	e00f      	b.n	80096a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d106      	bne.n	800969a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800968c:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	4a14      	ldr	r2, [pc, #80]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 8009692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009696:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009698:	e005      	b.n	80096a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800969a:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	4a11      	ldr	r2, [pc, #68]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80096a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80096a6:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a0e      	ldr	r2, [pc, #56]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80096ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096b2:	f7f7 feef 	bl	8001494 <HAL_GetTick>
 80096b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096b8:	e008      	b.n	80096cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096ba:	f7f7 feeb 	bl	8001494 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d901      	bls.n	80096cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e006      	b.n	80096da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <RCCEx_PLL3_Config+0x15c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0f0      	beq.n	80096ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	58024400 	.word	0x58024400
 80096e8:	ffff0007 	.word	0xffff0007

080096ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e042      	b.n	8009784 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009704:	2b00      	cmp	r3, #0
 8009706:	d106      	bne.n	8009716 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7f7 fca1 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2224      	movs	r2, #36	; 0x24
 800971a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 0201 	bic.w	r2, r2, #1
 800972c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fc9a 	bl	800a068 <UART_SetConfig>
 8009734:	4603      	mov	r3, r0
 8009736:	2b01      	cmp	r3, #1
 8009738:	d101      	bne.n	800973e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e022      	b.n	8009784 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 f9f6 	bl	800ab38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800975a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800976a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 fa7d 	bl	800ac7c <UART_CheckIdleState>
 8009782:	4603      	mov	r3, r0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800978c:	b480      	push	{r7}
 800978e:	b091      	sub	sp, #68	; 0x44
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	4613      	mov	r3, r2
 8009798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a0:	2b20      	cmp	r3, #32
 80097a2:	d178      	bne.n	8009896 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <HAL_UART_Transmit_IT+0x24>
 80097aa:	88fb      	ldrh	r3, [r7, #6]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e071      	b.n	8009898 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	88fa      	ldrh	r2, [r7, #6]
 80097be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	88fa      	ldrh	r2, [r7, #6]
 80097c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2221      	movs	r2, #33	; 0x21
 80097dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e8:	d12a      	bne.n	8009840 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f2:	d107      	bne.n	8009804 <HAL_UART_Transmit_IT+0x78>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d103      	bne.n	8009804 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4a29      	ldr	r2, [pc, #164]	; (80098a4 <HAL_UART_Transmit_IT+0x118>)
 8009800:	679a      	str	r2, [r3, #120]	; 0x78
 8009802:	e002      	b.n	800980a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4a28      	ldr	r2, [pc, #160]	; (80098a8 <HAL_UART_Transmit_IT+0x11c>)
 8009808:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3308      	adds	r3, #8
 8009810:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009820:	63bb      	str	r3, [r7, #56]	; 0x38
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3308      	adds	r3, #8
 8009828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800982a:	637a      	str	r2, [r7, #52]	; 0x34
 800982c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e5      	bne.n	800980a <HAL_UART_Transmit_IT+0x7e>
 800983e:	e028      	b.n	8009892 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009848:	d107      	bne.n	800985a <HAL_UART_Transmit_IT+0xce>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d103      	bne.n	800985a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4a15      	ldr	r2, [pc, #84]	; (80098ac <HAL_UART_Transmit_IT+0x120>)
 8009856:	679a      	str	r2, [r3, #120]	; 0x78
 8009858:	e002      	b.n	8009860 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4a14      	ldr	r2, [pc, #80]	; (80098b0 <HAL_UART_Transmit_IT+0x124>)
 800985e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	613b      	str	r3, [r7, #16]
   return(result);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987e:	623b      	str	r3, [r7, #32]
 8009880:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	69f9      	ldr	r1, [r7, #28]
 8009884:	6a3a      	ldr	r2, [r7, #32]
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	61bb      	str	r3, [r7, #24]
   return(result);
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e6      	bne.n	8009860 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	e000      	b.n	8009898 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009896:	2302      	movs	r3, #2
  }
}
 8009898:	4618      	mov	r0, r3
 800989a:	3744      	adds	r7, #68	; 0x44
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	0800b1f3 	.word	0x0800b1f3
 80098a8:	0800b113 	.word	0x0800b113
 80098ac:	0800b051 	.word	0x0800b051
 80098b0:	0800af99 	.word	0x0800af99

080098b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b0ba      	sub	sp, #232	; 0xe8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80098de:	f640 030f 	movw	r3, #2063	; 0x80f
 80098e2:	4013      	ands	r3, r2
 80098e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80098e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11b      	bne.n	8009928 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d015      	beq.n	8009928 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b00      	cmp	r3, #0
 8009906:	d105      	bne.n	8009914 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800990c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d009      	beq.n	8009928 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8377 	beq.w	800a00c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
      }
      return;
 8009926:	e371      	b.n	800a00c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8123 	beq.w	8009b78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009932:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009936:	4b8d      	ldr	r3, [pc, #564]	; (8009b6c <HAL_UART_IRQHandler+0x2b8>)
 8009938:	4013      	ands	r3, r2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800993e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009942:	4b8b      	ldr	r3, [pc, #556]	; (8009b70 <HAL_UART_IRQHandler+0x2bc>)
 8009944:	4013      	ands	r3, r2
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 8116 	beq.w	8009b78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800994c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d011      	beq.n	800997c <HAL_UART_IRQHandler+0xc8>
 8009958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800995c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00b      	beq.n	800997c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2201      	movs	r2, #1
 800996a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009972:	f043 0201 	orr.w	r2, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800997c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d011      	beq.n	80099ac <HAL_UART_IRQHandler+0xf8>
 8009988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2202      	movs	r2, #2
 800999a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a2:	f043 0204 	orr.w	r2, r3, #4
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d011      	beq.n	80099dc <HAL_UART_IRQHandler+0x128>
 80099b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2204      	movs	r2, #4
 80099ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099d2:	f043 0202 	orr.w	r2, r3, #2
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d017      	beq.n	8009a18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80099f8:	4b5c      	ldr	r3, [pc, #368]	; (8009b6c <HAL_UART_IRQHandler+0x2b8>)
 80099fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2208      	movs	r2, #8
 8009a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0e:	f043 0208 	orr.w	r2, r3, #8
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d012      	beq.n	8009a4a <HAL_UART_IRQHandler+0x196>
 8009a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00c      	beq.n	8009a4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a40:	f043 0220 	orr.w	r2, r3, #32
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 82dd 	beq.w	800a010 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a5a:	f003 0320 	and.w	r3, r3, #32
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d013      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d007      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d005      	beq.n	8009aae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d054      	beq.n	8009b58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 f9f6 	bl	800aea0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abe:	2b40      	cmp	r3, #64	; 0x40
 8009ac0:	d146      	bne.n	8009b50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1d9      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d017      	beq.n	8009b48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b1e:	4a15      	ldr	r2, [pc, #84]	; (8009b74 <HAL_UART_IRQHandler+0x2c0>)
 8009b20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fa f99f 	bl	8003e6c <HAL_DMA_Abort_IT>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d019      	beq.n	8009b68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009b42:	4610      	mov	r0, r2
 8009b44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b46:	e00f      	b.n	8009b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fa77 	bl	800a03c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4e:	e00b      	b.n	8009b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fa73 	bl	800a03c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b56:	e007      	b.n	8009b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fa6f 	bl	800a03c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009b66:	e253      	b.n	800a010 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b68:	bf00      	nop
    return;
 8009b6a:	e251      	b.n	800a010 <HAL_UART_IRQHandler+0x75c>
 8009b6c:	10000001 	.word	0x10000001
 8009b70:	04000120 	.word	0x04000120
 8009b74:	0800af6d 	.word	0x0800af6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	f040 81e7 	bne.w	8009f50 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b86:	f003 0310 	and.w	r3, r3, #16
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 81e0 	beq.w	8009f50 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b94:	f003 0310 	and.w	r3, r3, #16
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 81d9 	beq.w	8009f50 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2210      	movs	r2, #16
 8009ba4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb0:	2b40      	cmp	r3, #64	; 0x40
 8009bb2:	f040 8151 	bne.w	8009e58 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a96      	ldr	r2, [pc, #600]	; (8009e18 <HAL_UART_IRQHandler+0x564>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d068      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a93      	ldr	r2, [pc, #588]	; (8009e1c <HAL_UART_IRQHandler+0x568>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d061      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a91      	ldr	r2, [pc, #580]	; (8009e20 <HAL_UART_IRQHandler+0x56c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d05a      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a8e      	ldr	r2, [pc, #568]	; (8009e24 <HAL_UART_IRQHandler+0x570>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d053      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a8c      	ldr	r2, [pc, #560]	; (8009e28 <HAL_UART_IRQHandler+0x574>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d04c      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a89      	ldr	r2, [pc, #548]	; (8009e2c <HAL_UART_IRQHandler+0x578>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d045      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a87      	ldr	r2, [pc, #540]	; (8009e30 <HAL_UART_IRQHandler+0x57c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d03e      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a84      	ldr	r2, [pc, #528]	; (8009e34 <HAL_UART_IRQHandler+0x580>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d037      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a82      	ldr	r2, [pc, #520]	; (8009e38 <HAL_UART_IRQHandler+0x584>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d030      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a7f      	ldr	r2, [pc, #508]	; (8009e3c <HAL_UART_IRQHandler+0x588>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d029      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a7d      	ldr	r2, [pc, #500]	; (8009e40 <HAL_UART_IRQHandler+0x58c>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d022      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a7a      	ldr	r2, [pc, #488]	; (8009e44 <HAL_UART_IRQHandler+0x590>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d01b      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a78      	ldr	r2, [pc, #480]	; (8009e48 <HAL_UART_IRQHandler+0x594>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d014      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a75      	ldr	r2, [pc, #468]	; (8009e4c <HAL_UART_IRQHandler+0x598>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00d      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a73      	ldr	r2, [pc, #460]	; (8009e50 <HAL_UART_IRQHandler+0x59c>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d006      	beq.n	8009c96 <HAL_UART_IRQHandler+0x3e2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a70      	ldr	r2, [pc, #448]	; (8009e54 <HAL_UART_IRQHandler+0x5a0>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d106      	bne.n	8009ca4 <HAL_UART_IRQHandler+0x3f0>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	e005      	b.n	8009cb0 <HAL_UART_IRQHandler+0x3fc>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 81ab 	beq.w	800a014 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	f080 81a3 	bcs.w	800a014 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ce4:	f000 8087 	beq.w	8009df6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d22:	e841 2300 	strex	r3, r2, [r1]
 8009d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1da      	bne.n	8009ce8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3308      	adds	r3, #8
 8009d38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3308      	adds	r3, #8
 8009d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e1      	bne.n	8009d32 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3308      	adds	r3, #8
 8009d74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d78:	e853 3f00 	ldrex	r3, [r3]
 8009d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d9a:	e841 2300 	strex	r3, r2, [r1]
 8009d9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1e3      	bne.n	8009d6e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2220      	movs	r2, #32
 8009daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc4:	f023 0310 	bic.w	r3, r3, #16
 8009dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e4      	bne.n	8009db4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7f9 fd1d 	bl	8003830 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f91d 	bl	800a050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e16:	e0fd      	b.n	800a014 <HAL_UART_IRQHandler+0x760>
 8009e18:	40020010 	.word	0x40020010
 8009e1c:	40020028 	.word	0x40020028
 8009e20:	40020040 	.word	0x40020040
 8009e24:	40020058 	.word	0x40020058
 8009e28:	40020070 	.word	0x40020070
 8009e2c:	40020088 	.word	0x40020088
 8009e30:	400200a0 	.word	0x400200a0
 8009e34:	400200b8 	.word	0x400200b8
 8009e38:	40020410 	.word	0x40020410
 8009e3c:	40020428 	.word	0x40020428
 8009e40:	40020440 	.word	0x40020440
 8009e44:	40020458 	.word	0x40020458
 8009e48:	40020470 	.word	0x40020470
 8009e4c:	40020488 	.word	0x40020488
 8009e50:	400204a0 	.word	0x400204a0
 8009e54:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 80cf 	beq.w	800a018 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009e7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f000 80ca 	beq.w	800a018 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	e853 3f00 	ldrex	r3, [r3]
 8009e90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ea8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009eac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009eae:	e841 2300 	strex	r3, r2, [r1]
 8009eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1e4      	bne.n	8009e84 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8009eca:	6a3a      	ldr	r2, [r7, #32]
 8009ecc:	4b55      	ldr	r3, [pc, #340]	; (800a024 <HAL_UART_IRQHandler+0x770>)
 8009ece:	4013      	ands	r3, r2
 8009ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3308      	adds	r3, #8
 8009eda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ede:	633a      	str	r2, [r7, #48]	; 0x30
 8009ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e3      	bne.n	8009eba <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	e853 3f00 	ldrex	r3, [r3]
 8009f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0310 	bic.w	r3, r3, #16
 8009f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f28:	61fb      	str	r3, [r7, #28]
 8009f2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	617b      	str	r3, [r7, #20]
   return(result);
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e4      	bne.n	8009f06 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f881 	bl	800a050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f4e:	e063      	b.n	800a018 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00e      	beq.n	8009f7a <HAL_UART_IRQHandler+0x6c6>
 8009f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d008      	beq.n	8009f7a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 f9dd 	bl	800b332 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f78:	e051      	b.n	800a01e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d014      	beq.n	8009fb0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d105      	bne.n	8009f9e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d008      	beq.n	8009fb0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d03a      	beq.n	800a01c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	4798      	blx	r3
    }
    return;
 8009fae:	e035      	b.n	800a01c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d009      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x71c>
 8009fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 f987 	bl	800b2dc <UART_EndTransmit_IT>
    return;
 8009fce:	e026      	b.n	800a01e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d009      	beq.n	8009ff0 <HAL_UART_IRQHandler+0x73c>
 8009fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 f9b6 	bl	800b35a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fee:	e016      	b.n	800a01e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d010      	beq.n	800a01e <HAL_UART_IRQHandler+0x76a>
 8009ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a000:	2b00      	cmp	r3, #0
 800a002:	da0c      	bge.n	800a01e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 f99e 	bl	800b346 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a00a:	e008      	b.n	800a01e <HAL_UART_IRQHandler+0x76a>
      return;
 800a00c:	bf00      	nop
 800a00e:	e006      	b.n	800a01e <HAL_UART_IRQHandler+0x76a>
    return;
 800a010:	bf00      	nop
 800a012:	e004      	b.n	800a01e <HAL_UART_IRQHandler+0x76a>
      return;
 800a014:	bf00      	nop
 800a016:	e002      	b.n	800a01e <HAL_UART_IRQHandler+0x76a>
      return;
 800a018:	bf00      	nop
 800a01a:	e000      	b.n	800a01e <HAL_UART_IRQHandler+0x76a>
    return;
 800a01c:	bf00      	nop
  }
}
 800a01e:	37e8      	adds	r7, #232	; 0xe8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	effffffe 	.word	0xeffffffe

0800a028 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	460b      	mov	r3, r1
 800a05a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a06c:	b092      	sub	sp, #72	; 0x48
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	431a      	orrs	r2, r3
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	431a      	orrs	r2, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	4bbe      	ldr	r3, [pc, #760]	; (800a390 <UART_SetConfig+0x328>)
 800a098:	4013      	ands	r3, r2
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	6812      	ldr	r2, [r2, #0]
 800a09e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4ab3      	ldr	r2, [pc, #716]	; (800a394 <UART_SetConfig+0x32c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d004      	beq.n	800a0d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	4baf      	ldr	r3, [pc, #700]	; (800a398 <UART_SetConfig+0x330>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	6812      	ldr	r2, [r2, #0]
 800a0e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0e4:	430b      	orrs	r3, r1
 800a0e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	f023 010f 	bic.w	r1, r3, #15
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4aa6      	ldr	r2, [pc, #664]	; (800a39c <UART_SetConfig+0x334>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d177      	bne.n	800a1f8 <UART_SetConfig+0x190>
 800a108:	4ba5      	ldr	r3, [pc, #660]	; (800a3a0 <UART_SetConfig+0x338>)
 800a10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a10c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a110:	2b28      	cmp	r3, #40	; 0x28
 800a112:	d86d      	bhi.n	800a1f0 <UART_SetConfig+0x188>
 800a114:	a201      	add	r2, pc, #4	; (adr r2, 800a11c <UART_SetConfig+0xb4>)
 800a116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11a:	bf00      	nop
 800a11c:	0800a1c1 	.word	0x0800a1c1
 800a120:	0800a1f1 	.word	0x0800a1f1
 800a124:	0800a1f1 	.word	0x0800a1f1
 800a128:	0800a1f1 	.word	0x0800a1f1
 800a12c:	0800a1f1 	.word	0x0800a1f1
 800a130:	0800a1f1 	.word	0x0800a1f1
 800a134:	0800a1f1 	.word	0x0800a1f1
 800a138:	0800a1f1 	.word	0x0800a1f1
 800a13c:	0800a1c9 	.word	0x0800a1c9
 800a140:	0800a1f1 	.word	0x0800a1f1
 800a144:	0800a1f1 	.word	0x0800a1f1
 800a148:	0800a1f1 	.word	0x0800a1f1
 800a14c:	0800a1f1 	.word	0x0800a1f1
 800a150:	0800a1f1 	.word	0x0800a1f1
 800a154:	0800a1f1 	.word	0x0800a1f1
 800a158:	0800a1f1 	.word	0x0800a1f1
 800a15c:	0800a1d1 	.word	0x0800a1d1
 800a160:	0800a1f1 	.word	0x0800a1f1
 800a164:	0800a1f1 	.word	0x0800a1f1
 800a168:	0800a1f1 	.word	0x0800a1f1
 800a16c:	0800a1f1 	.word	0x0800a1f1
 800a170:	0800a1f1 	.word	0x0800a1f1
 800a174:	0800a1f1 	.word	0x0800a1f1
 800a178:	0800a1f1 	.word	0x0800a1f1
 800a17c:	0800a1d9 	.word	0x0800a1d9
 800a180:	0800a1f1 	.word	0x0800a1f1
 800a184:	0800a1f1 	.word	0x0800a1f1
 800a188:	0800a1f1 	.word	0x0800a1f1
 800a18c:	0800a1f1 	.word	0x0800a1f1
 800a190:	0800a1f1 	.word	0x0800a1f1
 800a194:	0800a1f1 	.word	0x0800a1f1
 800a198:	0800a1f1 	.word	0x0800a1f1
 800a19c:	0800a1e1 	.word	0x0800a1e1
 800a1a0:	0800a1f1 	.word	0x0800a1f1
 800a1a4:	0800a1f1 	.word	0x0800a1f1
 800a1a8:	0800a1f1 	.word	0x0800a1f1
 800a1ac:	0800a1f1 	.word	0x0800a1f1
 800a1b0:	0800a1f1 	.word	0x0800a1f1
 800a1b4:	0800a1f1 	.word	0x0800a1f1
 800a1b8:	0800a1f1 	.word	0x0800a1f1
 800a1bc:	0800a1e9 	.word	0x0800a1e9
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c6:	e222      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a1c8:	2304      	movs	r3, #4
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ce:	e21e      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d6:	e21a      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a1d8:	2310      	movs	r3, #16
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1de:	e216      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a1e0:	2320      	movs	r3, #32
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e6:	e212      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a1e8:	2340      	movs	r3, #64	; 0x40
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ee:	e20e      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a1f0:	2380      	movs	r3, #128	; 0x80
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f6:	e20a      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a69      	ldr	r2, [pc, #420]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d130      	bne.n	800a264 <UART_SetConfig+0x1fc>
 800a202:	4b67      	ldr	r3, [pc, #412]	; (800a3a0 <UART_SetConfig+0x338>)
 800a204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2b05      	cmp	r3, #5
 800a20c:	d826      	bhi.n	800a25c <UART_SetConfig+0x1f4>
 800a20e:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <UART_SetConfig+0x1ac>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a22d 	.word	0x0800a22d
 800a218:	0800a235 	.word	0x0800a235
 800a21c:	0800a23d 	.word	0x0800a23d
 800a220:	0800a245 	.word	0x0800a245
 800a224:	0800a24d 	.word	0x0800a24d
 800a228:	0800a255 	.word	0x0800a255
 800a22c:	2300      	movs	r3, #0
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a232:	e1ec      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a234:	2304      	movs	r3, #4
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23a:	e1e8      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a23c:	2308      	movs	r3, #8
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a242:	e1e4      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a244:	2310      	movs	r3, #16
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24a:	e1e0      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a24c:	2320      	movs	r3, #32
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a252:	e1dc      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a254:	2340      	movs	r3, #64	; 0x40
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a25a:	e1d8      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a25c:	2380      	movs	r3, #128	; 0x80
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a262:	e1d4      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a4f      	ldr	r2, [pc, #316]	; (800a3a8 <UART_SetConfig+0x340>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d130      	bne.n	800a2d0 <UART_SetConfig+0x268>
 800a26e:	4b4c      	ldr	r3, [pc, #304]	; (800a3a0 <UART_SetConfig+0x338>)
 800a270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	2b05      	cmp	r3, #5
 800a278:	d826      	bhi.n	800a2c8 <UART_SetConfig+0x260>
 800a27a:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <UART_SetConfig+0x218>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a299 	.word	0x0800a299
 800a284:	0800a2a1 	.word	0x0800a2a1
 800a288:	0800a2a9 	.word	0x0800a2a9
 800a28c:	0800a2b1 	.word	0x0800a2b1
 800a290:	0800a2b9 	.word	0x0800a2b9
 800a294:	0800a2c1 	.word	0x0800a2c1
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29e:	e1b6      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a6:	e1b2      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ae:	e1ae      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b6:	e1aa      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a2b8:	2320      	movs	r3, #32
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2be:	e1a6      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a2c0:	2340      	movs	r3, #64	; 0x40
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c6:	e1a2      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a2c8:	2380      	movs	r3, #128	; 0x80
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ce:	e19e      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a35      	ldr	r2, [pc, #212]	; (800a3ac <UART_SetConfig+0x344>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d130      	bne.n	800a33c <UART_SetConfig+0x2d4>
 800a2da:	4b31      	ldr	r3, [pc, #196]	; (800a3a0 <UART_SetConfig+0x338>)
 800a2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2de:	f003 0307 	and.w	r3, r3, #7
 800a2e2:	2b05      	cmp	r3, #5
 800a2e4:	d826      	bhi.n	800a334 <UART_SetConfig+0x2cc>
 800a2e6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ec <UART_SetConfig+0x284>)
 800a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ec:	0800a305 	.word	0x0800a305
 800a2f0:	0800a30d 	.word	0x0800a30d
 800a2f4:	0800a315 	.word	0x0800a315
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a32d 	.word	0x0800a32d
 800a304:	2300      	movs	r3, #0
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e180      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a30c:	2304      	movs	r3, #4
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a312:	e17c      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a314:	2308      	movs	r3, #8
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31a:	e178      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a31c:	2310      	movs	r3, #16
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a322:	e174      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a324:	2320      	movs	r3, #32
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32a:	e170      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a32c:	2340      	movs	r3, #64	; 0x40
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a332:	e16c      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a334:	2380      	movs	r3, #128	; 0x80
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33a:	e168      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a1b      	ldr	r2, [pc, #108]	; (800a3b0 <UART_SetConfig+0x348>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d142      	bne.n	800a3cc <UART_SetConfig+0x364>
 800a346:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <UART_SetConfig+0x338>)
 800a348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	2b05      	cmp	r3, #5
 800a350:	d838      	bhi.n	800a3c4 <UART_SetConfig+0x35c>
 800a352:	a201      	add	r2, pc, #4	; (adr r2, 800a358 <UART_SetConfig+0x2f0>)
 800a354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a358:	0800a371 	.word	0x0800a371
 800a35c:	0800a379 	.word	0x0800a379
 800a360:	0800a381 	.word	0x0800a381
 800a364:	0800a389 	.word	0x0800a389
 800a368:	0800a3b5 	.word	0x0800a3b5
 800a36c:	0800a3bd 	.word	0x0800a3bd
 800a370:	2300      	movs	r3, #0
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a376:	e14a      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a378:	2304      	movs	r3, #4
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37e:	e146      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a380:	2308      	movs	r3, #8
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a386:	e142      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a388:	2310      	movs	r3, #16
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38e:	e13e      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a390:	cfff69f3 	.word	0xcfff69f3
 800a394:	58000c00 	.word	0x58000c00
 800a398:	11fff4ff 	.word	0x11fff4ff
 800a39c:	40011000 	.word	0x40011000
 800a3a0:	58024400 	.word	0x58024400
 800a3a4:	40004400 	.word	0x40004400
 800a3a8:	40004800 	.word	0x40004800
 800a3ac:	40004c00 	.word	0x40004c00
 800a3b0:	40005000 	.word	0x40005000
 800a3b4:	2320      	movs	r3, #32
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ba:	e128      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a3bc:	2340      	movs	r3, #64	; 0x40
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3c2:	e124      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a3c4:	2380      	movs	r3, #128	; 0x80
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ca:	e120      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4acb      	ldr	r2, [pc, #812]	; (800a700 <UART_SetConfig+0x698>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d176      	bne.n	800a4c4 <UART_SetConfig+0x45c>
 800a3d6:	4bcb      	ldr	r3, [pc, #812]	; (800a704 <UART_SetConfig+0x69c>)
 800a3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3de:	2b28      	cmp	r3, #40	; 0x28
 800a3e0:	d86c      	bhi.n	800a4bc <UART_SetConfig+0x454>
 800a3e2:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <UART_SetConfig+0x380>)
 800a3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e8:	0800a48d 	.word	0x0800a48d
 800a3ec:	0800a4bd 	.word	0x0800a4bd
 800a3f0:	0800a4bd 	.word	0x0800a4bd
 800a3f4:	0800a4bd 	.word	0x0800a4bd
 800a3f8:	0800a4bd 	.word	0x0800a4bd
 800a3fc:	0800a4bd 	.word	0x0800a4bd
 800a400:	0800a4bd 	.word	0x0800a4bd
 800a404:	0800a4bd 	.word	0x0800a4bd
 800a408:	0800a495 	.word	0x0800a495
 800a40c:	0800a4bd 	.word	0x0800a4bd
 800a410:	0800a4bd 	.word	0x0800a4bd
 800a414:	0800a4bd 	.word	0x0800a4bd
 800a418:	0800a4bd 	.word	0x0800a4bd
 800a41c:	0800a4bd 	.word	0x0800a4bd
 800a420:	0800a4bd 	.word	0x0800a4bd
 800a424:	0800a4bd 	.word	0x0800a4bd
 800a428:	0800a49d 	.word	0x0800a49d
 800a42c:	0800a4bd 	.word	0x0800a4bd
 800a430:	0800a4bd 	.word	0x0800a4bd
 800a434:	0800a4bd 	.word	0x0800a4bd
 800a438:	0800a4bd 	.word	0x0800a4bd
 800a43c:	0800a4bd 	.word	0x0800a4bd
 800a440:	0800a4bd 	.word	0x0800a4bd
 800a444:	0800a4bd 	.word	0x0800a4bd
 800a448:	0800a4a5 	.word	0x0800a4a5
 800a44c:	0800a4bd 	.word	0x0800a4bd
 800a450:	0800a4bd 	.word	0x0800a4bd
 800a454:	0800a4bd 	.word	0x0800a4bd
 800a458:	0800a4bd 	.word	0x0800a4bd
 800a45c:	0800a4bd 	.word	0x0800a4bd
 800a460:	0800a4bd 	.word	0x0800a4bd
 800a464:	0800a4bd 	.word	0x0800a4bd
 800a468:	0800a4ad 	.word	0x0800a4ad
 800a46c:	0800a4bd 	.word	0x0800a4bd
 800a470:	0800a4bd 	.word	0x0800a4bd
 800a474:	0800a4bd 	.word	0x0800a4bd
 800a478:	0800a4bd 	.word	0x0800a4bd
 800a47c:	0800a4bd 	.word	0x0800a4bd
 800a480:	0800a4bd 	.word	0x0800a4bd
 800a484:	0800a4bd 	.word	0x0800a4bd
 800a488:	0800a4b5 	.word	0x0800a4b5
 800a48c:	2301      	movs	r3, #1
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a492:	e0bc      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a494:	2304      	movs	r3, #4
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a49a:	e0b8      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a49c:	2308      	movs	r3, #8
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a2:	e0b4      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a4a4:	2310      	movs	r3, #16
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4aa:	e0b0      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a4ac:	2320      	movs	r3, #32
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b2:	e0ac      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a4b4:	2340      	movs	r3, #64	; 0x40
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ba:	e0a8      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a4bc:	2380      	movs	r3, #128	; 0x80
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c2:	e0a4      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a8f      	ldr	r2, [pc, #572]	; (800a708 <UART_SetConfig+0x6a0>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d130      	bne.n	800a530 <UART_SetConfig+0x4c8>
 800a4ce:	4b8d      	ldr	r3, [pc, #564]	; (800a704 <UART_SetConfig+0x69c>)
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b05      	cmp	r3, #5
 800a4d8:	d826      	bhi.n	800a528 <UART_SetConfig+0x4c0>
 800a4da:	a201      	add	r2, pc, #4	; (adr r2, 800a4e0 <UART_SetConfig+0x478>)
 800a4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e0:	0800a4f9 	.word	0x0800a4f9
 800a4e4:	0800a501 	.word	0x0800a501
 800a4e8:	0800a509 	.word	0x0800a509
 800a4ec:	0800a511 	.word	0x0800a511
 800a4f0:	0800a519 	.word	0x0800a519
 800a4f4:	0800a521 	.word	0x0800a521
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fe:	e086      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a500:	2304      	movs	r3, #4
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a506:	e082      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a508:	2308      	movs	r3, #8
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50e:	e07e      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a510:	2310      	movs	r3, #16
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a516:	e07a      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a518:	2320      	movs	r3, #32
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51e:	e076      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a520:	2340      	movs	r3, #64	; 0x40
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a526:	e072      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a528:	2380      	movs	r3, #128	; 0x80
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52e:	e06e      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a75      	ldr	r2, [pc, #468]	; (800a70c <UART_SetConfig+0x6a4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d130      	bne.n	800a59c <UART_SetConfig+0x534>
 800a53a:	4b72      	ldr	r3, [pc, #456]	; (800a704 <UART_SetConfig+0x69c>)
 800a53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53e:	f003 0307 	and.w	r3, r3, #7
 800a542:	2b05      	cmp	r3, #5
 800a544:	d826      	bhi.n	800a594 <UART_SetConfig+0x52c>
 800a546:	a201      	add	r2, pc, #4	; (adr r2, 800a54c <UART_SetConfig+0x4e4>)
 800a548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54c:	0800a565 	.word	0x0800a565
 800a550:	0800a56d 	.word	0x0800a56d
 800a554:	0800a575 	.word	0x0800a575
 800a558:	0800a57d 	.word	0x0800a57d
 800a55c:	0800a585 	.word	0x0800a585
 800a560:	0800a58d 	.word	0x0800a58d
 800a564:	2300      	movs	r3, #0
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56a:	e050      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a56c:	2304      	movs	r3, #4
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a572:	e04c      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a574:	2308      	movs	r3, #8
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57a:	e048      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a57c:	2310      	movs	r3, #16
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a582:	e044      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a584:	2320      	movs	r3, #32
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58a:	e040      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a58c:	2340      	movs	r3, #64	; 0x40
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a592:	e03c      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a594:	2380      	movs	r3, #128	; 0x80
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a59a:	e038      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a5b      	ldr	r2, [pc, #364]	; (800a710 <UART_SetConfig+0x6a8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d130      	bne.n	800a608 <UART_SetConfig+0x5a0>
 800a5a6:	4b57      	ldr	r3, [pc, #348]	; (800a704 <UART_SetConfig+0x69c>)
 800a5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d826      	bhi.n	800a600 <UART_SetConfig+0x598>
 800a5b2:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <UART_SetConfig+0x550>)
 800a5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b8:	0800a5d1 	.word	0x0800a5d1
 800a5bc:	0800a5d9 	.word	0x0800a5d9
 800a5c0:	0800a5e1 	.word	0x0800a5e1
 800a5c4:	0800a5e9 	.word	0x0800a5e9
 800a5c8:	0800a5f1 	.word	0x0800a5f1
 800a5cc:	0800a5f9 	.word	0x0800a5f9
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d6:	e01a      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a5d8:	2304      	movs	r3, #4
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5de:	e016      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a5e0:	2308      	movs	r3, #8
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e6:	e012      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a5e8:	2310      	movs	r3, #16
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ee:	e00e      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f6:	e00a      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a5f8:	2340      	movs	r3, #64	; 0x40
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fe:	e006      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a600:	2380      	movs	r3, #128	; 0x80
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a606:	e002      	b.n	800a60e <UART_SetConfig+0x5a6>
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a3f      	ldr	r2, [pc, #252]	; (800a710 <UART_SetConfig+0x6a8>)
 800a614:	4293      	cmp	r3, r2
 800a616:	f040 80f8 	bne.w	800a80a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a61a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a61e:	2b20      	cmp	r3, #32
 800a620:	dc46      	bgt.n	800a6b0 <UART_SetConfig+0x648>
 800a622:	2b02      	cmp	r3, #2
 800a624:	f2c0 8082 	blt.w	800a72c <UART_SetConfig+0x6c4>
 800a628:	3b02      	subs	r3, #2
 800a62a:	2b1e      	cmp	r3, #30
 800a62c:	d87e      	bhi.n	800a72c <UART_SetConfig+0x6c4>
 800a62e:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <UART_SetConfig+0x5cc>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a6b7 	.word	0x0800a6b7
 800a638:	0800a72d 	.word	0x0800a72d
 800a63c:	0800a6bf 	.word	0x0800a6bf
 800a640:	0800a72d 	.word	0x0800a72d
 800a644:	0800a72d 	.word	0x0800a72d
 800a648:	0800a72d 	.word	0x0800a72d
 800a64c:	0800a6cf 	.word	0x0800a6cf
 800a650:	0800a72d 	.word	0x0800a72d
 800a654:	0800a72d 	.word	0x0800a72d
 800a658:	0800a72d 	.word	0x0800a72d
 800a65c:	0800a72d 	.word	0x0800a72d
 800a660:	0800a72d 	.word	0x0800a72d
 800a664:	0800a72d 	.word	0x0800a72d
 800a668:	0800a72d 	.word	0x0800a72d
 800a66c:	0800a6df 	.word	0x0800a6df
 800a670:	0800a72d 	.word	0x0800a72d
 800a674:	0800a72d 	.word	0x0800a72d
 800a678:	0800a72d 	.word	0x0800a72d
 800a67c:	0800a72d 	.word	0x0800a72d
 800a680:	0800a72d 	.word	0x0800a72d
 800a684:	0800a72d 	.word	0x0800a72d
 800a688:	0800a72d 	.word	0x0800a72d
 800a68c:	0800a72d 	.word	0x0800a72d
 800a690:	0800a72d 	.word	0x0800a72d
 800a694:	0800a72d 	.word	0x0800a72d
 800a698:	0800a72d 	.word	0x0800a72d
 800a69c:	0800a72d 	.word	0x0800a72d
 800a6a0:	0800a72d 	.word	0x0800a72d
 800a6a4:	0800a72d 	.word	0x0800a72d
 800a6a8:	0800a72d 	.word	0x0800a72d
 800a6ac:	0800a71f 	.word	0x0800a71f
 800a6b0:	2b40      	cmp	r3, #64	; 0x40
 800a6b2:	d037      	beq.n	800a724 <UART_SetConfig+0x6bc>
 800a6b4:	e03a      	b.n	800a72c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6b6:	f7fe faa5 	bl	8008c04 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6bc:	e03c      	b.n	800a738 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fe fab4 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6cc:	e034      	b.n	800a738 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ce:	f107 0318 	add.w	r3, r7, #24
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fc00 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6dc:	e02c      	b.n	800a738 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6de:	4b09      	ldr	r3, [pc, #36]	; (800a704 <UART_SetConfig+0x69c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d016      	beq.n	800a718 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6ea:	4b06      	ldr	r3, [pc, #24]	; (800a704 <UART_SetConfig+0x69c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	08db      	lsrs	r3, r3, #3
 800a6f0:	f003 0303 	and.w	r3, r3, #3
 800a6f4:	4a07      	ldr	r2, [pc, #28]	; (800a714 <UART_SetConfig+0x6ac>)
 800a6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6fc:	e01c      	b.n	800a738 <UART_SetConfig+0x6d0>
 800a6fe:	bf00      	nop
 800a700:	40011400 	.word	0x40011400
 800a704:	58024400 	.word	0x58024400
 800a708:	40007800 	.word	0x40007800
 800a70c:	40007c00 	.word	0x40007c00
 800a710:	58000c00 	.word	0x58000c00
 800a714:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a718:	4b9d      	ldr	r3, [pc, #628]	; (800a990 <UART_SetConfig+0x928>)
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a71c:	e00c      	b.n	800a738 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a71e:	4b9d      	ldr	r3, [pc, #628]	; (800a994 <UART_SetConfig+0x92c>)
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a722:	e009      	b.n	800a738 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a72a:	e005      	b.n	800a738 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a736:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 81de 	beq.w	800aafc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	4a94      	ldr	r2, [pc, #592]	; (800a998 <UART_SetConfig+0x930>)
 800a746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a74a:	461a      	mov	r2, r3
 800a74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a752:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	4613      	mov	r3, r2
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	4413      	add	r3, r2
 800a75e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a760:	429a      	cmp	r2, r3
 800a762:	d305      	bcc.n	800a770 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d903      	bls.n	800a778 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a776:	e1c1      	b.n	800aafc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a77a:	2200      	movs	r2, #0
 800a77c:	60bb      	str	r3, [r7, #8]
 800a77e:	60fa      	str	r2, [r7, #12]
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	4a84      	ldr	r2, [pc, #528]	; (800a998 <UART_SetConfig+0x930>)
 800a786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	2200      	movs	r2, #0
 800a78e:	603b      	str	r3, [r7, #0]
 800a790:	607a      	str	r2, [r7, #4]
 800a792:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a79a:	f7f5 fdf1 	bl	8000380 <__aeabi_uldivmod>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	f04f 0200 	mov.w	r2, #0
 800a7aa:	f04f 0300 	mov.w	r3, #0
 800a7ae:	020b      	lsls	r3, r1, #8
 800a7b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7b4:	0202      	lsls	r2, r0, #8
 800a7b6:	6979      	ldr	r1, [r7, #20]
 800a7b8:	6849      	ldr	r1, [r1, #4]
 800a7ba:	0849      	lsrs	r1, r1, #1
 800a7bc:	2000      	movs	r0, #0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	eb12 0804 	adds.w	r8, r2, r4
 800a7c6:	eb43 0905 	adc.w	r9, r3, r5
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	469a      	mov	sl, r3
 800a7d2:	4693      	mov	fp, r2
 800a7d4:	4652      	mov	r2, sl
 800a7d6:	465b      	mov	r3, fp
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f5 fdd0 	bl	8000380 <__aeabi_uldivmod>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7ee:	d308      	bcc.n	800a802 <UART_SetConfig+0x79a>
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7f6:	d204      	bcs.n	800a802 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7fe:	60da      	str	r2, [r3, #12]
 800a800:	e17c      	b.n	800aafc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a808:	e178      	b.n	800aafc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a812:	f040 80c5 	bne.w	800a9a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a816:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	dc48      	bgt.n	800a8b0 <UART_SetConfig+0x848>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	db7b      	blt.n	800a91a <UART_SetConfig+0x8b2>
 800a822:	2b20      	cmp	r3, #32
 800a824:	d879      	bhi.n	800a91a <UART_SetConfig+0x8b2>
 800a826:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <UART_SetConfig+0x7c4>)
 800a828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82c:	0800a8b7 	.word	0x0800a8b7
 800a830:	0800a8bf 	.word	0x0800a8bf
 800a834:	0800a91b 	.word	0x0800a91b
 800a838:	0800a91b 	.word	0x0800a91b
 800a83c:	0800a8c7 	.word	0x0800a8c7
 800a840:	0800a91b 	.word	0x0800a91b
 800a844:	0800a91b 	.word	0x0800a91b
 800a848:	0800a91b 	.word	0x0800a91b
 800a84c:	0800a8d7 	.word	0x0800a8d7
 800a850:	0800a91b 	.word	0x0800a91b
 800a854:	0800a91b 	.word	0x0800a91b
 800a858:	0800a91b 	.word	0x0800a91b
 800a85c:	0800a91b 	.word	0x0800a91b
 800a860:	0800a91b 	.word	0x0800a91b
 800a864:	0800a91b 	.word	0x0800a91b
 800a868:	0800a91b 	.word	0x0800a91b
 800a86c:	0800a8e7 	.word	0x0800a8e7
 800a870:	0800a91b 	.word	0x0800a91b
 800a874:	0800a91b 	.word	0x0800a91b
 800a878:	0800a91b 	.word	0x0800a91b
 800a87c:	0800a91b 	.word	0x0800a91b
 800a880:	0800a91b 	.word	0x0800a91b
 800a884:	0800a91b 	.word	0x0800a91b
 800a888:	0800a91b 	.word	0x0800a91b
 800a88c:	0800a91b 	.word	0x0800a91b
 800a890:	0800a91b 	.word	0x0800a91b
 800a894:	0800a91b 	.word	0x0800a91b
 800a898:	0800a91b 	.word	0x0800a91b
 800a89c:	0800a91b 	.word	0x0800a91b
 800a8a0:	0800a91b 	.word	0x0800a91b
 800a8a4:	0800a91b 	.word	0x0800a91b
 800a8a8:	0800a91b 	.word	0x0800a91b
 800a8ac:	0800a90d 	.word	0x0800a90d
 800a8b0:	2b40      	cmp	r3, #64	; 0x40
 800a8b2:	d02e      	beq.n	800a912 <UART_SetConfig+0x8aa>
 800a8b4:	e031      	b.n	800a91a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8b6:	f7fc f9ef 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 800a8ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8bc:	e033      	b.n	800a926 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8be:	f7fc fa01 	bl	8006cc4 <HAL_RCC_GetPCLK2Freq>
 800a8c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8c4:	e02f      	b.n	800a926 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fe f9b0 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d4:	e027      	b.n	800a926 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d6:	f107 0318 	add.w	r3, r7, #24
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe fafc 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e4:	e01f      	b.n	800a926 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e6:	4b2d      	ldr	r3, [pc, #180]	; (800a99c <UART_SetConfig+0x934>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d009      	beq.n	800a906 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8f2:	4b2a      	ldr	r3, [pc, #168]	; (800a99c <UART_SetConfig+0x934>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	08db      	lsrs	r3, r3, #3
 800a8f8:	f003 0303 	and.w	r3, r3, #3
 800a8fc:	4a24      	ldr	r2, [pc, #144]	; (800a990 <UART_SetConfig+0x928>)
 800a8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a904:	e00f      	b.n	800a926 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a906:	4b22      	ldr	r3, [pc, #136]	; (800a990 <UART_SetConfig+0x928>)
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a90a:	e00c      	b.n	800a926 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a90c:	4b21      	ldr	r3, [pc, #132]	; (800a994 <UART_SetConfig+0x92c>)
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a910:	e009      	b.n	800a926 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a918:	e005      	b.n	800a926 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 80e7 	beq.w	800aafc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	4a19      	ldr	r2, [pc, #100]	; (800a998 <UART_SetConfig+0x930>)
 800a934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a938:	461a      	mov	r2, r3
 800a93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a940:	005a      	lsls	r2, r3, #1
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	085b      	lsrs	r3, r3, #1
 800a948:	441a      	add	r2, r3
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a952:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a956:	2b0f      	cmp	r3, #15
 800a958:	d916      	bls.n	800a988 <UART_SetConfig+0x920>
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a960:	d212      	bcs.n	800a988 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a964:	b29b      	uxth	r3, r3
 800a966:	f023 030f 	bic.w	r3, r3, #15
 800a96a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	085b      	lsrs	r3, r3, #1
 800a970:	b29b      	uxth	r3, r3
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	b29a      	uxth	r2, r3
 800a978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a97a:	4313      	orrs	r3, r2
 800a97c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a984:	60da      	str	r2, [r3, #12]
 800a986:	e0b9      	b.n	800aafc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a98e:	e0b5      	b.n	800aafc <UART_SetConfig+0xa94>
 800a990:	03d09000 	.word	0x03d09000
 800a994:	003d0900 	.word	0x003d0900
 800a998:	0800befc 	.word	0x0800befc
 800a99c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	dc49      	bgt.n	800aa3c <UART_SetConfig+0x9d4>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	db7c      	blt.n	800aaa6 <UART_SetConfig+0xa3e>
 800a9ac:	2b20      	cmp	r3, #32
 800a9ae:	d87a      	bhi.n	800aaa6 <UART_SetConfig+0xa3e>
 800a9b0:	a201      	add	r2, pc, #4	; (adr r2, 800a9b8 <UART_SetConfig+0x950>)
 800a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b6:	bf00      	nop
 800a9b8:	0800aa43 	.word	0x0800aa43
 800a9bc:	0800aa4b 	.word	0x0800aa4b
 800a9c0:	0800aaa7 	.word	0x0800aaa7
 800a9c4:	0800aaa7 	.word	0x0800aaa7
 800a9c8:	0800aa53 	.word	0x0800aa53
 800a9cc:	0800aaa7 	.word	0x0800aaa7
 800a9d0:	0800aaa7 	.word	0x0800aaa7
 800a9d4:	0800aaa7 	.word	0x0800aaa7
 800a9d8:	0800aa63 	.word	0x0800aa63
 800a9dc:	0800aaa7 	.word	0x0800aaa7
 800a9e0:	0800aaa7 	.word	0x0800aaa7
 800a9e4:	0800aaa7 	.word	0x0800aaa7
 800a9e8:	0800aaa7 	.word	0x0800aaa7
 800a9ec:	0800aaa7 	.word	0x0800aaa7
 800a9f0:	0800aaa7 	.word	0x0800aaa7
 800a9f4:	0800aaa7 	.word	0x0800aaa7
 800a9f8:	0800aa73 	.word	0x0800aa73
 800a9fc:	0800aaa7 	.word	0x0800aaa7
 800aa00:	0800aaa7 	.word	0x0800aaa7
 800aa04:	0800aaa7 	.word	0x0800aaa7
 800aa08:	0800aaa7 	.word	0x0800aaa7
 800aa0c:	0800aaa7 	.word	0x0800aaa7
 800aa10:	0800aaa7 	.word	0x0800aaa7
 800aa14:	0800aaa7 	.word	0x0800aaa7
 800aa18:	0800aaa7 	.word	0x0800aaa7
 800aa1c:	0800aaa7 	.word	0x0800aaa7
 800aa20:	0800aaa7 	.word	0x0800aaa7
 800aa24:	0800aaa7 	.word	0x0800aaa7
 800aa28:	0800aaa7 	.word	0x0800aaa7
 800aa2c:	0800aaa7 	.word	0x0800aaa7
 800aa30:	0800aaa7 	.word	0x0800aaa7
 800aa34:	0800aaa7 	.word	0x0800aaa7
 800aa38:	0800aa99 	.word	0x0800aa99
 800aa3c:	2b40      	cmp	r3, #64	; 0x40
 800aa3e:	d02e      	beq.n	800aa9e <UART_SetConfig+0xa36>
 800aa40:	e031      	b.n	800aaa6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa42:	f7fc f929 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 800aa46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa48:	e033      	b.n	800aab2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa4a:	f7fc f93b 	bl	8006cc4 <HAL_RCC_GetPCLK2Freq>
 800aa4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa50:	e02f      	b.n	800aab2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe f8ea 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa60:	e027      	b.n	800aab2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa62:	f107 0318 	add.w	r3, r7, #24
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fa36 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa70:	e01f      	b.n	800aab2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa72:	4b2d      	ldr	r3, [pc, #180]	; (800ab28 <UART_SetConfig+0xac0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d009      	beq.n	800aa92 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa7e:	4b2a      	ldr	r3, [pc, #168]	; (800ab28 <UART_SetConfig+0xac0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	08db      	lsrs	r3, r3, #3
 800aa84:	f003 0303 	and.w	r3, r3, #3
 800aa88:	4a28      	ldr	r2, [pc, #160]	; (800ab2c <UART_SetConfig+0xac4>)
 800aa8a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa90:	e00f      	b.n	800aab2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aa92:	4b26      	ldr	r3, [pc, #152]	; (800ab2c <UART_SetConfig+0xac4>)
 800aa94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa96:	e00c      	b.n	800aab2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa98:	4b25      	ldr	r3, [pc, #148]	; (800ab30 <UART_SetConfig+0xac8>)
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa9c:	e009      	b.n	800aab2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaa4:	e005      	b.n	800aab2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aab0:	bf00      	nop
    }

    if (pclk != 0U)
 800aab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d021      	beq.n	800aafc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	4a1d      	ldr	r2, [pc, #116]	; (800ab34 <UART_SetConfig+0xacc>)
 800aabe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aac2:	461a      	mov	r2, r3
 800aac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac6:	fbb3 f2f2 	udiv	r2, r3, r2
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	085b      	lsrs	r3, r3, #1
 800aad0:	441a      	add	r2, r3
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aada:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	2b0f      	cmp	r3, #15
 800aae0:	d909      	bls.n	800aaf6 <UART_SetConfig+0xa8e>
 800aae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aae8:	d205      	bcs.n	800aaf6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	60da      	str	r2, [r3, #12]
 800aaf4:	e002      	b.n	800aafc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2200      	movs	r2, #0
 800ab16:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ab18:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3748      	adds	r7, #72	; 0x48
 800ab20:	46bd      	mov	sp, r7
 800ab22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab26:	bf00      	nop
 800ab28:	58024400 	.word	0x58024400
 800ab2c:	03d09000 	.word	0x03d09000
 800ab30:	003d0900 	.word	0x003d0900
 800ab34:	0800befc 	.word	0x0800befc

0800ab38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00a      	beq.n	800ab62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab66:	f003 0302 	and.w	r3, r3, #2
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00a      	beq.n	800ab84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	430a      	orrs	r2, r1
 800ab82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00a      	beq.n	800aba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00a      	beq.n	800abc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abcc:	f003 0310 	and.w	r3, r3, #16
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00a      	beq.n	800abea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	f003 0320 	and.w	r3, r3, #32
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00a      	beq.n	800ac0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d01a      	beq.n	800ac4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac36:	d10a      	bne.n	800ac4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	605a      	str	r2, [r3, #4]
  }
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b098      	sub	sp, #96	; 0x60
 800ac80:	af02      	add	r7, sp, #8
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac8c:	f7f6 fc02 	bl	8001494 <HAL_GetTick>
 800ac90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0308 	and.w	r3, r3, #8
 800ac9c:	2b08      	cmp	r3, #8
 800ac9e:	d12f      	bne.n	800ad00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aca8:	2200      	movs	r2, #0
 800acaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f88e 	bl	800add0 <UART_WaitOnFlagUntilTimeout>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d022      	beq.n	800ad00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	e853 3f00 	ldrex	r3, [r3]
 800acc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acce:	653b      	str	r3, [r7, #80]	; 0x50
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	461a      	mov	r2, r3
 800acd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd8:	647b      	str	r3, [r7, #68]	; 0x44
 800acda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ace0:	e841 2300 	strex	r3, r2, [r1]
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ace6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1e6      	bne.n	800acba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2220      	movs	r2, #32
 800acf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e063      	b.n	800adc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0304 	and.w	r3, r3, #4
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	d149      	bne.n	800ada2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad16:	2200      	movs	r2, #0
 800ad18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f857 	bl	800add0 <UART_WaitOnFlagUntilTimeout>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d03c      	beq.n	800ada2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	623b      	str	r3, [r7, #32]
   return(result);
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad46:	633b      	str	r3, [r7, #48]	; 0x30
 800ad48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e6      	bne.n	800ad28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	e853 3f00 	ldrex	r3, [r3]
 800ad68:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f023 0301 	bic.w	r3, r3, #1
 800ad70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3308      	adds	r3, #8
 800ad78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad7a:	61fa      	str	r2, [r7, #28]
 800ad7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	69b9      	ldr	r1, [r7, #24]
 800ad80:	69fa      	ldr	r2, [r7, #28]
 800ad82:	e841 2300 	strex	r3, r2, [r1]
 800ad86:	617b      	str	r3, [r7, #20]
   return(result);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1e5      	bne.n	800ad5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e012      	b.n	800adc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2220      	movs	r2, #32
 800adae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3758      	adds	r7, #88	; 0x58
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	4613      	mov	r3, r2
 800adde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade0:	e049      	b.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade8:	d045      	beq.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adea:	f7f6 fb53 	bl	8001494 <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d302      	bcc.n	800ae00 <UART_WaitOnFlagUntilTimeout+0x30>
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e048      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0304 	and.w	r3, r3, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d031      	beq.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f003 0308 	and.w	r3, r3, #8
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d110      	bne.n	800ae42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2208      	movs	r2, #8
 800ae26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 f839 	bl	800aea0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2208      	movs	r2, #8
 800ae32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e029      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae50:	d111      	bne.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f000 f81f 	bl	800aea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e00f      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	69da      	ldr	r2, [r3, #28]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	4013      	ands	r3, r2
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	bf0c      	ite	eq
 800ae86:	2301      	moveq	r3, #1
 800ae88:	2300      	movne	r3, #0
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	79fb      	ldrb	r3, [r7, #7]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d0a6      	beq.n	800ade2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b095      	sub	sp, #84	; 0x54
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb0:	e853 3f00 	ldrex	r3, [r3]
 800aeb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec6:	643b      	str	r3, [r7, #64]	; 0x40
 800aec8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aece:	e841 2300 	strex	r3, r2, [r1]
 800aed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1e6      	bne.n	800aea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	e853 3f00 	ldrex	r3, [r3]
 800aee8:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeea:	69fa      	ldr	r2, [r7, #28]
 800aeec:	4b1e      	ldr	r3, [pc, #120]	; (800af68 <UART_EndRxTransfer+0xc8>)
 800aeee:	4013      	ands	r3, r2
 800aef0:	64bb      	str	r3, [r7, #72]	; 0x48
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3308      	adds	r3, #8
 800aef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aefa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aefc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e5      	bne.n	800aeda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af12:	2b01      	cmp	r3, #1
 800af14:	d118      	bne.n	800af48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	60bb      	str	r3, [r7, #8]
   return(result);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f023 0310 	bic.w	r3, r3, #16
 800af2a:	647b      	str	r3, [r7, #68]	; 0x44
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	461a      	mov	r2, r3
 800af32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af34:	61bb      	str	r3, [r7, #24]
 800af36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6979      	ldr	r1, [r7, #20]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	e841 2300 	strex	r3, r2, [r1]
 800af40:	613b      	str	r3, [r7, #16]
   return(result);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e6      	bne.n	800af16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2220      	movs	r2, #32
 800af4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800af5c:	bf00      	nop
 800af5e:	3754      	adds	r7, #84	; 0x54
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	effffffe 	.word	0xeffffffe

0800af6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7ff f856 	bl	800a03c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af90:	bf00      	nop
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800af98:	b480      	push	{r7}
 800af9a:	b08f      	sub	sp, #60	; 0x3c
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa6:	2b21      	cmp	r3, #33	; 0x21
 800afa8:	d14c      	bne.n	800b044 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d132      	bne.n	800b01c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbc:	6a3b      	ldr	r3, [r7, #32]
 800afbe:	e853 3f00 	ldrex	r3, [r3]
 800afc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afca:	637b      	str	r3, [r7, #52]	; 0x34
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afd6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e6      	bne.n	800afb6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800affc:	633b      	str	r3, [r7, #48]	; 0x30
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	61bb      	str	r3, [r7, #24]
 800b008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00a:	6979      	ldr	r1, [r7, #20]
 800b00c:	69ba      	ldr	r2, [r7, #24]
 800b00e:	e841 2300 	strex	r3, r2, [r1]
 800b012:	613b      	str	r3, [r7, #16]
   return(result);
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1e6      	bne.n	800afe8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b01a:	e013      	b.n	800b044 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b020:	781a      	ldrb	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b038:	b29b      	uxth	r3, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b044:	bf00      	nop
 800b046:	373c      	adds	r7, #60	; 0x3c
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b050:	b480      	push	{r7}
 800b052:	b091      	sub	sp, #68	; 0x44
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05e:	2b21      	cmp	r3, #33	; 0x21
 800b060:	d151      	bne.n	800b106 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b068:	b29b      	uxth	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d132      	bne.n	800b0d4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	e853 3f00 	ldrex	r3, [r3]
 800b07a:	623b      	str	r3, [r7, #32]
   return(result);
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b082:	63bb      	str	r3, [r7, #56]	; 0x38
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	461a      	mov	r2, r3
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	633b      	str	r3, [r7, #48]	; 0x30
 800b08e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b094:	e841 2300 	strex	r3, r2, [r1]
 800b098:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1e6      	bne.n	800b06e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0be:	61fb      	str	r3, [r7, #28]
 800b0c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	69b9      	ldr	r1, [r7, #24]
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	617b      	str	r3, [r7, #20]
   return(result);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e6      	bne.n	800b0a0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b0d2:	e018      	b.n	800b106 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0e8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ee:	1c9a      	adds	r2, r3, #2
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b106:	bf00      	nop
 800b108:	3744      	adds	r7, #68	; 0x44
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b112:	b480      	push	{r7}
 800b114:	b091      	sub	sp, #68	; 0x44
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b120:	2b21      	cmp	r3, #33	; 0x21
 800b122:	d160      	bne.n	800b1e6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b12a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b12c:	e057      	b.n	800b1de <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b134:	b29b      	uxth	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d133      	bne.n	800b1a2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3308      	adds	r3, #8
 800b140:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	e853 3f00 	ldrex	r3, [r3]
 800b148:	623b      	str	r3, [r7, #32]
   return(result);
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b150:	63bb      	str	r3, [r7, #56]	; 0x38
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3308      	adds	r3, #8
 800b158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b15a:	633a      	str	r2, [r7, #48]	; 0x30
 800b15c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b162:	e841 2300 	strex	r3, r2, [r1]
 800b166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1e5      	bne.n	800b13a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b182:	637b      	str	r3, [r7, #52]	; 0x34
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18c:	61fb      	str	r3, [r7, #28]
 800b18e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	69b9      	ldr	r1, [r7, #24]
 800b192:	69fa      	ldr	r2, [r7, #28]
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	617b      	str	r3, [r7, #20]
   return(result);
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e6      	bne.n	800b16e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b1a0:	e021      	b.n	800b1e6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d013      	beq.n	800b1d8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b4:	781a      	ldrb	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c0:	1c5a      	adds	r2, r3, #1
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b1d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b1de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1a4      	bne.n	800b12e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b1e4:	e7ff      	b.n	800b1e6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b1e6:	bf00      	nop
 800b1e8:	3744      	adds	r7, #68	; 0x44
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b091      	sub	sp, #68	; 0x44
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b200:	2b21      	cmp	r3, #33	; 0x21
 800b202:	d165      	bne.n	800b2d0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b20a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b20c:	e05c      	b.n	800b2c8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d133      	bne.n	800b282 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3308      	adds	r3, #8
 800b220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	61fb      	str	r3, [r7, #28]
   return(result);
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b230:	637b      	str	r3, [r7, #52]	; 0x34
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3308      	adds	r3, #8
 800b238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b23a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e5      	bne.n	800b21a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	e853 3f00 	ldrex	r3, [r3]
 800b25a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b262:	633b      	str	r3, [r7, #48]	; 0x30
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	461a      	mov	r2, r3
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	61bb      	str	r3, [r7, #24]
 800b26e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b270:	6979      	ldr	r1, [r7, #20]
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	e841 2300 	strex	r3, r2, [r1]
 800b278:	613b      	str	r3, [r7, #16]
   return(result);
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1e6      	bne.n	800b24e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b280:	e026      	b.n	800b2d0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	69db      	ldr	r3, [r3, #28]
 800b288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d018      	beq.n	800b2c2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b294:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b298:	881b      	ldrh	r3, [r3, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2a4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2aa:	1c9a      	adds	r2, r3, #2
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b2c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b2c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d19f      	bne.n	800b20e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b2ce:	e7ff      	b.n	800b2d0 <UART_TxISR_16BIT_FIFOEN+0xde>
 800b2d0:	bf00      	nop
 800b2d2:	3744      	adds	r7, #68	; 0x44
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	e853 3f00 	ldrex	r3, [r3]
 800b2f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f8:	61fb      	str	r3, [r7, #28]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	61bb      	str	r3, [r7, #24]
 800b304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b306:	6979      	ldr	r1, [r7, #20]
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	e841 2300 	strex	r3, r2, [r1]
 800b30e:	613b      	str	r3, [r7, #16]
   return(result);
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e6      	bne.n	800b2e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2220      	movs	r2, #32
 800b31a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7fe fe7f 	bl	800a028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b32a:	bf00      	nop
 800b32c:	3720      	adds	r7, #32
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b34e:	bf00      	nop
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b36e:	b480      	push	{r7}
 800b370:	b085      	sub	sp, #20
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d101      	bne.n	800b384 <HAL_UARTEx_DisableFifoMode+0x16>
 800b380:	2302      	movs	r3, #2
 800b382:	e027      	b.n	800b3d4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2224      	movs	r2, #36	; 0x24
 800b390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f022 0201 	bic.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d101      	bne.n	800b3f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	e02d      	b.n	800b454 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2224      	movs	r2, #36	; 0x24
 800b404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f022 0201 	bic.w	r2, r2, #1
 800b41e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f84f 	bl	800b4d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d101      	bne.n	800b474 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b470:	2302      	movs	r3, #2
 800b472:	e02d      	b.n	800b4d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2224      	movs	r2, #36	; 0x24
 800b480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f022 0201 	bic.w	r2, r2, #1
 800b49a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f811 	bl	800b4d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2220      	movs	r2, #32
 800b4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d108      	bne.n	800b4fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4f8:	e031      	b.n	800b55e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4fa:	2310      	movs	r3, #16
 800b4fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4fe:	2310      	movs	r3, #16
 800b500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	0e5b      	lsrs	r3, r3, #25
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	f003 0307 	and.w	r3, r3, #7
 800b510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	0f5b      	lsrs	r3, r3, #29
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	f003 0307 	and.w	r3, r3, #7
 800b520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b522:	7bbb      	ldrb	r3, [r7, #14]
 800b524:	7b3a      	ldrb	r2, [r7, #12]
 800b526:	4911      	ldr	r1, [pc, #68]	; (800b56c <UARTEx_SetNbDataToProcess+0x94>)
 800b528:	5c8a      	ldrb	r2, [r1, r2]
 800b52a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b52e:	7b3a      	ldrb	r2, [r7, #12]
 800b530:	490f      	ldr	r1, [pc, #60]	; (800b570 <UARTEx_SetNbDataToProcess+0x98>)
 800b532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b534:	fb93 f3f2 	sdiv	r3, r3, r2
 800b538:	b29a      	uxth	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	7b7a      	ldrb	r2, [r7, #13]
 800b544:	4909      	ldr	r1, [pc, #36]	; (800b56c <UARTEx_SetNbDataToProcess+0x94>)
 800b546:	5c8a      	ldrb	r2, [r1, r2]
 800b548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b54c:	7b7a      	ldrb	r2, [r7, #13]
 800b54e:	4908      	ldr	r1, [pc, #32]	; (800b570 <UARTEx_SetNbDataToProcess+0x98>)
 800b550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b552:	fb93 f3f2 	sdiv	r3, r3, r2
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b55e:	bf00      	nop
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	0800bf14 	.word	0x0800bf14
 800b570:	0800bf1c 	.word	0x0800bf1c

0800b574 <siprintf>:
 800b574:	b40e      	push	{r1, r2, r3}
 800b576:	b500      	push	{lr}
 800b578:	b09c      	sub	sp, #112	; 0x70
 800b57a:	ab1d      	add	r3, sp, #116	; 0x74
 800b57c:	9002      	str	r0, [sp, #8]
 800b57e:	9006      	str	r0, [sp, #24]
 800b580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b584:	4809      	ldr	r0, [pc, #36]	; (800b5ac <siprintf+0x38>)
 800b586:	9107      	str	r1, [sp, #28]
 800b588:	9104      	str	r1, [sp, #16]
 800b58a:	4909      	ldr	r1, [pc, #36]	; (800b5b0 <siprintf+0x3c>)
 800b58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b590:	9105      	str	r1, [sp, #20]
 800b592:	6800      	ldr	r0, [r0, #0]
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	a902      	add	r1, sp, #8
 800b598:	f000 f992 	bl	800b8c0 <_svfiprintf_r>
 800b59c:	9b02      	ldr	r3, [sp, #8]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	b01c      	add	sp, #112	; 0x70
 800b5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a8:	b003      	add	sp, #12
 800b5aa:	4770      	bx	lr
 800b5ac:	2400005c 	.word	0x2400005c
 800b5b0:	ffff0208 	.word	0xffff0208

0800b5b4 <memset>:
 800b5b4:	4402      	add	r2, r0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d100      	bne.n	800b5be <memset+0xa>
 800b5bc:	4770      	bx	lr
 800b5be:	f803 1b01 	strb.w	r1, [r3], #1
 800b5c2:	e7f9      	b.n	800b5b8 <memset+0x4>

0800b5c4 <__errno>:
 800b5c4:	4b01      	ldr	r3, [pc, #4]	; (800b5cc <__errno+0x8>)
 800b5c6:	6818      	ldr	r0, [r3, #0]
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	2400005c 	.word	0x2400005c

0800b5d0 <__libc_init_array>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	4d0d      	ldr	r5, [pc, #52]	; (800b608 <__libc_init_array+0x38>)
 800b5d4:	4c0d      	ldr	r4, [pc, #52]	; (800b60c <__libc_init_array+0x3c>)
 800b5d6:	1b64      	subs	r4, r4, r5
 800b5d8:	10a4      	asrs	r4, r4, #2
 800b5da:	2600      	movs	r6, #0
 800b5dc:	42a6      	cmp	r6, r4
 800b5de:	d109      	bne.n	800b5f4 <__libc_init_array+0x24>
 800b5e0:	4d0b      	ldr	r5, [pc, #44]	; (800b610 <__libc_init_array+0x40>)
 800b5e2:	4c0c      	ldr	r4, [pc, #48]	; (800b614 <__libc_init_array+0x44>)
 800b5e4:	f000 fc6a 	bl	800bebc <_init>
 800b5e8:	1b64      	subs	r4, r4, r5
 800b5ea:	10a4      	asrs	r4, r4, #2
 800b5ec:	2600      	movs	r6, #0
 800b5ee:	42a6      	cmp	r6, r4
 800b5f0:	d105      	bne.n	800b5fe <__libc_init_array+0x2e>
 800b5f2:	bd70      	pop	{r4, r5, r6, pc}
 800b5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5f8:	4798      	blx	r3
 800b5fa:	3601      	adds	r6, #1
 800b5fc:	e7ee      	b.n	800b5dc <__libc_init_array+0xc>
 800b5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b602:	4798      	blx	r3
 800b604:	3601      	adds	r6, #1
 800b606:	e7f2      	b.n	800b5ee <__libc_init_array+0x1e>
 800b608:	0800bf60 	.word	0x0800bf60
 800b60c:	0800bf60 	.word	0x0800bf60
 800b610:	0800bf60 	.word	0x0800bf60
 800b614:	0800bf64 	.word	0x0800bf64

0800b618 <__retarget_lock_acquire_recursive>:
 800b618:	4770      	bx	lr

0800b61a <__retarget_lock_release_recursive>:
 800b61a:	4770      	bx	lr

0800b61c <_free_r>:
 800b61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b61e:	2900      	cmp	r1, #0
 800b620:	d044      	beq.n	800b6ac <_free_r+0x90>
 800b622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b626:	9001      	str	r0, [sp, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f1a1 0404 	sub.w	r4, r1, #4
 800b62e:	bfb8      	it	lt
 800b630:	18e4      	addlt	r4, r4, r3
 800b632:	f000 f8df 	bl	800b7f4 <__malloc_lock>
 800b636:	4a1e      	ldr	r2, [pc, #120]	; (800b6b0 <_free_r+0x94>)
 800b638:	9801      	ldr	r0, [sp, #4]
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	b933      	cbnz	r3, 800b64c <_free_r+0x30>
 800b63e:	6063      	str	r3, [r4, #4]
 800b640:	6014      	str	r4, [r2, #0]
 800b642:	b003      	add	sp, #12
 800b644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b648:	f000 b8da 	b.w	800b800 <__malloc_unlock>
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	d908      	bls.n	800b662 <_free_r+0x46>
 800b650:	6825      	ldr	r5, [r4, #0]
 800b652:	1961      	adds	r1, r4, r5
 800b654:	428b      	cmp	r3, r1
 800b656:	bf01      	itttt	eq
 800b658:	6819      	ldreq	r1, [r3, #0]
 800b65a:	685b      	ldreq	r3, [r3, #4]
 800b65c:	1949      	addeq	r1, r1, r5
 800b65e:	6021      	streq	r1, [r4, #0]
 800b660:	e7ed      	b.n	800b63e <_free_r+0x22>
 800b662:	461a      	mov	r2, r3
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	b10b      	cbz	r3, 800b66c <_free_r+0x50>
 800b668:	42a3      	cmp	r3, r4
 800b66a:	d9fa      	bls.n	800b662 <_free_r+0x46>
 800b66c:	6811      	ldr	r1, [r2, #0]
 800b66e:	1855      	adds	r5, r2, r1
 800b670:	42a5      	cmp	r5, r4
 800b672:	d10b      	bne.n	800b68c <_free_r+0x70>
 800b674:	6824      	ldr	r4, [r4, #0]
 800b676:	4421      	add	r1, r4
 800b678:	1854      	adds	r4, r2, r1
 800b67a:	42a3      	cmp	r3, r4
 800b67c:	6011      	str	r1, [r2, #0]
 800b67e:	d1e0      	bne.n	800b642 <_free_r+0x26>
 800b680:	681c      	ldr	r4, [r3, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	6053      	str	r3, [r2, #4]
 800b686:	440c      	add	r4, r1
 800b688:	6014      	str	r4, [r2, #0]
 800b68a:	e7da      	b.n	800b642 <_free_r+0x26>
 800b68c:	d902      	bls.n	800b694 <_free_r+0x78>
 800b68e:	230c      	movs	r3, #12
 800b690:	6003      	str	r3, [r0, #0]
 800b692:	e7d6      	b.n	800b642 <_free_r+0x26>
 800b694:	6825      	ldr	r5, [r4, #0]
 800b696:	1961      	adds	r1, r4, r5
 800b698:	428b      	cmp	r3, r1
 800b69a:	bf04      	itt	eq
 800b69c:	6819      	ldreq	r1, [r3, #0]
 800b69e:	685b      	ldreq	r3, [r3, #4]
 800b6a0:	6063      	str	r3, [r4, #4]
 800b6a2:	bf04      	itt	eq
 800b6a4:	1949      	addeq	r1, r1, r5
 800b6a6:	6021      	streq	r1, [r4, #0]
 800b6a8:	6054      	str	r4, [r2, #4]
 800b6aa:	e7ca      	b.n	800b642 <_free_r+0x26>
 800b6ac:	b003      	add	sp, #12
 800b6ae:	bd30      	pop	{r4, r5, pc}
 800b6b0:	24000438 	.word	0x24000438

0800b6b4 <sbrk_aligned>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	4e0e      	ldr	r6, [pc, #56]	; (800b6f0 <sbrk_aligned+0x3c>)
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	6831      	ldr	r1, [r6, #0]
 800b6bc:	4605      	mov	r5, r0
 800b6be:	b911      	cbnz	r1, 800b6c6 <sbrk_aligned+0x12>
 800b6c0:	f000 fba6 	bl	800be10 <_sbrk_r>
 800b6c4:	6030      	str	r0, [r6, #0]
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f000 fba1 	bl	800be10 <_sbrk_r>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d00a      	beq.n	800b6e8 <sbrk_aligned+0x34>
 800b6d2:	1cc4      	adds	r4, r0, #3
 800b6d4:	f024 0403 	bic.w	r4, r4, #3
 800b6d8:	42a0      	cmp	r0, r4
 800b6da:	d007      	beq.n	800b6ec <sbrk_aligned+0x38>
 800b6dc:	1a21      	subs	r1, r4, r0
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f000 fb96 	bl	800be10 <_sbrk_r>
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d101      	bne.n	800b6ec <sbrk_aligned+0x38>
 800b6e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}
 800b6f0:	2400043c 	.word	0x2400043c

0800b6f4 <_malloc_r>:
 800b6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f8:	1ccd      	adds	r5, r1, #3
 800b6fa:	f025 0503 	bic.w	r5, r5, #3
 800b6fe:	3508      	adds	r5, #8
 800b700:	2d0c      	cmp	r5, #12
 800b702:	bf38      	it	cc
 800b704:	250c      	movcc	r5, #12
 800b706:	2d00      	cmp	r5, #0
 800b708:	4607      	mov	r7, r0
 800b70a:	db01      	blt.n	800b710 <_malloc_r+0x1c>
 800b70c:	42a9      	cmp	r1, r5
 800b70e:	d905      	bls.n	800b71c <_malloc_r+0x28>
 800b710:	230c      	movs	r3, #12
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	2600      	movs	r6, #0
 800b716:	4630      	mov	r0, r6
 800b718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7f0 <_malloc_r+0xfc>
 800b720:	f000 f868 	bl	800b7f4 <__malloc_lock>
 800b724:	f8d8 3000 	ldr.w	r3, [r8]
 800b728:	461c      	mov	r4, r3
 800b72a:	bb5c      	cbnz	r4, 800b784 <_malloc_r+0x90>
 800b72c:	4629      	mov	r1, r5
 800b72e:	4638      	mov	r0, r7
 800b730:	f7ff ffc0 	bl	800b6b4 <sbrk_aligned>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	4604      	mov	r4, r0
 800b738:	d155      	bne.n	800b7e6 <_malloc_r+0xf2>
 800b73a:	f8d8 4000 	ldr.w	r4, [r8]
 800b73e:	4626      	mov	r6, r4
 800b740:	2e00      	cmp	r6, #0
 800b742:	d145      	bne.n	800b7d0 <_malloc_r+0xdc>
 800b744:	2c00      	cmp	r4, #0
 800b746:	d048      	beq.n	800b7da <_malloc_r+0xe6>
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	4631      	mov	r1, r6
 800b74c:	4638      	mov	r0, r7
 800b74e:	eb04 0903 	add.w	r9, r4, r3
 800b752:	f000 fb5d 	bl	800be10 <_sbrk_r>
 800b756:	4581      	cmp	r9, r0
 800b758:	d13f      	bne.n	800b7da <_malloc_r+0xe6>
 800b75a:	6821      	ldr	r1, [r4, #0]
 800b75c:	1a6d      	subs	r5, r5, r1
 800b75e:	4629      	mov	r1, r5
 800b760:	4638      	mov	r0, r7
 800b762:	f7ff ffa7 	bl	800b6b4 <sbrk_aligned>
 800b766:	3001      	adds	r0, #1
 800b768:	d037      	beq.n	800b7da <_malloc_r+0xe6>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	442b      	add	r3, r5
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	f8d8 3000 	ldr.w	r3, [r8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d038      	beq.n	800b7ea <_malloc_r+0xf6>
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	42a2      	cmp	r2, r4
 800b77c:	d12b      	bne.n	800b7d6 <_malloc_r+0xe2>
 800b77e:	2200      	movs	r2, #0
 800b780:	605a      	str	r2, [r3, #4]
 800b782:	e00f      	b.n	800b7a4 <_malloc_r+0xb0>
 800b784:	6822      	ldr	r2, [r4, #0]
 800b786:	1b52      	subs	r2, r2, r5
 800b788:	d41f      	bmi.n	800b7ca <_malloc_r+0xd6>
 800b78a:	2a0b      	cmp	r2, #11
 800b78c:	d917      	bls.n	800b7be <_malloc_r+0xca>
 800b78e:	1961      	adds	r1, r4, r5
 800b790:	42a3      	cmp	r3, r4
 800b792:	6025      	str	r5, [r4, #0]
 800b794:	bf18      	it	ne
 800b796:	6059      	strne	r1, [r3, #4]
 800b798:	6863      	ldr	r3, [r4, #4]
 800b79a:	bf08      	it	eq
 800b79c:	f8c8 1000 	streq.w	r1, [r8]
 800b7a0:	5162      	str	r2, [r4, r5]
 800b7a2:	604b      	str	r3, [r1, #4]
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	f104 060b 	add.w	r6, r4, #11
 800b7aa:	f000 f829 	bl	800b800 <__malloc_unlock>
 800b7ae:	f026 0607 	bic.w	r6, r6, #7
 800b7b2:	1d23      	adds	r3, r4, #4
 800b7b4:	1af2      	subs	r2, r6, r3
 800b7b6:	d0ae      	beq.n	800b716 <_malloc_r+0x22>
 800b7b8:	1b9b      	subs	r3, r3, r6
 800b7ba:	50a3      	str	r3, [r4, r2]
 800b7bc:	e7ab      	b.n	800b716 <_malloc_r+0x22>
 800b7be:	42a3      	cmp	r3, r4
 800b7c0:	6862      	ldr	r2, [r4, #4]
 800b7c2:	d1dd      	bne.n	800b780 <_malloc_r+0x8c>
 800b7c4:	f8c8 2000 	str.w	r2, [r8]
 800b7c8:	e7ec      	b.n	800b7a4 <_malloc_r+0xb0>
 800b7ca:	4623      	mov	r3, r4
 800b7cc:	6864      	ldr	r4, [r4, #4]
 800b7ce:	e7ac      	b.n	800b72a <_malloc_r+0x36>
 800b7d0:	4634      	mov	r4, r6
 800b7d2:	6876      	ldr	r6, [r6, #4]
 800b7d4:	e7b4      	b.n	800b740 <_malloc_r+0x4c>
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	e7cc      	b.n	800b774 <_malloc_r+0x80>
 800b7da:	230c      	movs	r3, #12
 800b7dc:	603b      	str	r3, [r7, #0]
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f000 f80e 	bl	800b800 <__malloc_unlock>
 800b7e4:	e797      	b.n	800b716 <_malloc_r+0x22>
 800b7e6:	6025      	str	r5, [r4, #0]
 800b7e8:	e7dc      	b.n	800b7a4 <_malloc_r+0xb0>
 800b7ea:	605b      	str	r3, [r3, #4]
 800b7ec:	deff      	udf	#255	; 0xff
 800b7ee:	bf00      	nop
 800b7f0:	24000438 	.word	0x24000438

0800b7f4 <__malloc_lock>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__malloc_lock+0x8>)
 800b7f6:	f7ff bf0f 	b.w	800b618 <__retarget_lock_acquire_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	24000434 	.word	0x24000434

0800b800 <__malloc_unlock>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__malloc_unlock+0x8>)
 800b802:	f7ff bf0a 	b.w	800b61a <__retarget_lock_release_recursive>
 800b806:	bf00      	nop
 800b808:	24000434 	.word	0x24000434

0800b80c <__ssputs_r>:
 800b80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b810:	688e      	ldr	r6, [r1, #8]
 800b812:	461f      	mov	r7, r3
 800b814:	42be      	cmp	r6, r7
 800b816:	680b      	ldr	r3, [r1, #0]
 800b818:	4682      	mov	sl, r0
 800b81a:	460c      	mov	r4, r1
 800b81c:	4690      	mov	r8, r2
 800b81e:	d82c      	bhi.n	800b87a <__ssputs_r+0x6e>
 800b820:	898a      	ldrh	r2, [r1, #12]
 800b822:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b826:	d026      	beq.n	800b876 <__ssputs_r+0x6a>
 800b828:	6965      	ldr	r5, [r4, #20]
 800b82a:	6909      	ldr	r1, [r1, #16]
 800b82c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b830:	eba3 0901 	sub.w	r9, r3, r1
 800b834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b838:	1c7b      	adds	r3, r7, #1
 800b83a:	444b      	add	r3, r9
 800b83c:	106d      	asrs	r5, r5, #1
 800b83e:	429d      	cmp	r5, r3
 800b840:	bf38      	it	cc
 800b842:	461d      	movcc	r5, r3
 800b844:	0553      	lsls	r3, r2, #21
 800b846:	d527      	bpl.n	800b898 <__ssputs_r+0x8c>
 800b848:	4629      	mov	r1, r5
 800b84a:	f7ff ff53 	bl	800b6f4 <_malloc_r>
 800b84e:	4606      	mov	r6, r0
 800b850:	b360      	cbz	r0, 800b8ac <__ssputs_r+0xa0>
 800b852:	6921      	ldr	r1, [r4, #16]
 800b854:	464a      	mov	r2, r9
 800b856:	f000 faeb 	bl	800be30 <memcpy>
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	6126      	str	r6, [r4, #16]
 800b868:	6165      	str	r5, [r4, #20]
 800b86a:	444e      	add	r6, r9
 800b86c:	eba5 0509 	sub.w	r5, r5, r9
 800b870:	6026      	str	r6, [r4, #0]
 800b872:	60a5      	str	r5, [r4, #8]
 800b874:	463e      	mov	r6, r7
 800b876:	42be      	cmp	r6, r7
 800b878:	d900      	bls.n	800b87c <__ssputs_r+0x70>
 800b87a:	463e      	mov	r6, r7
 800b87c:	6820      	ldr	r0, [r4, #0]
 800b87e:	4632      	mov	r2, r6
 800b880:	4641      	mov	r1, r8
 800b882:	f000 faab 	bl	800bddc <memmove>
 800b886:	68a3      	ldr	r3, [r4, #8]
 800b888:	1b9b      	subs	r3, r3, r6
 800b88a:	60a3      	str	r3, [r4, #8]
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	4433      	add	r3, r6
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	2000      	movs	r0, #0
 800b894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b898:	462a      	mov	r2, r5
 800b89a:	f000 fad7 	bl	800be4c <_realloc_r>
 800b89e:	4606      	mov	r6, r0
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d1e0      	bne.n	800b866 <__ssputs_r+0x5a>
 800b8a4:	6921      	ldr	r1, [r4, #16]
 800b8a6:	4650      	mov	r0, sl
 800b8a8:	f7ff feb8 	bl	800b61c <_free_r>
 800b8ac:	230c      	movs	r3, #12
 800b8ae:	f8ca 3000 	str.w	r3, [sl]
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b8be:	e7e9      	b.n	800b894 <__ssputs_r+0x88>

0800b8c0 <_svfiprintf_r>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	4698      	mov	r8, r3
 800b8c6:	898b      	ldrh	r3, [r1, #12]
 800b8c8:	061b      	lsls	r3, r3, #24
 800b8ca:	b09d      	sub	sp, #116	; 0x74
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	460d      	mov	r5, r1
 800b8d0:	4614      	mov	r4, r2
 800b8d2:	d50e      	bpl.n	800b8f2 <_svfiprintf_r+0x32>
 800b8d4:	690b      	ldr	r3, [r1, #16]
 800b8d6:	b963      	cbnz	r3, 800b8f2 <_svfiprintf_r+0x32>
 800b8d8:	2140      	movs	r1, #64	; 0x40
 800b8da:	f7ff ff0b 	bl	800b6f4 <_malloc_r>
 800b8de:	6028      	str	r0, [r5, #0]
 800b8e0:	6128      	str	r0, [r5, #16]
 800b8e2:	b920      	cbnz	r0, 800b8ee <_svfiprintf_r+0x2e>
 800b8e4:	230c      	movs	r3, #12
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ec:	e0d0      	b.n	800ba90 <_svfiprintf_r+0x1d0>
 800b8ee:	2340      	movs	r3, #64	; 0x40
 800b8f0:	616b      	str	r3, [r5, #20]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f6:	2320      	movs	r3, #32
 800b8f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b900:	2330      	movs	r3, #48	; 0x30
 800b902:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800baa8 <_svfiprintf_r+0x1e8>
 800b906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b90a:	f04f 0901 	mov.w	r9, #1
 800b90e:	4623      	mov	r3, r4
 800b910:	469a      	mov	sl, r3
 800b912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b916:	b10a      	cbz	r2, 800b91c <_svfiprintf_r+0x5c>
 800b918:	2a25      	cmp	r2, #37	; 0x25
 800b91a:	d1f9      	bne.n	800b910 <_svfiprintf_r+0x50>
 800b91c:	ebba 0b04 	subs.w	fp, sl, r4
 800b920:	d00b      	beq.n	800b93a <_svfiprintf_r+0x7a>
 800b922:	465b      	mov	r3, fp
 800b924:	4622      	mov	r2, r4
 800b926:	4629      	mov	r1, r5
 800b928:	4638      	mov	r0, r7
 800b92a:	f7ff ff6f 	bl	800b80c <__ssputs_r>
 800b92e:	3001      	adds	r0, #1
 800b930:	f000 80a9 	beq.w	800ba86 <_svfiprintf_r+0x1c6>
 800b934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b936:	445a      	add	r2, fp
 800b938:	9209      	str	r2, [sp, #36]	; 0x24
 800b93a:	f89a 3000 	ldrb.w	r3, [sl]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 80a1 	beq.w	800ba86 <_svfiprintf_r+0x1c6>
 800b944:	2300      	movs	r3, #0
 800b946:	f04f 32ff 	mov.w	r2, #4294967295
 800b94a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b94e:	f10a 0a01 	add.w	sl, sl, #1
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	9307      	str	r3, [sp, #28]
 800b956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b95a:	931a      	str	r3, [sp, #104]	; 0x68
 800b95c:	4654      	mov	r4, sl
 800b95e:	2205      	movs	r2, #5
 800b960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b964:	4850      	ldr	r0, [pc, #320]	; (800baa8 <_svfiprintf_r+0x1e8>)
 800b966:	f7f4 fcbb 	bl	80002e0 <memchr>
 800b96a:	9a04      	ldr	r2, [sp, #16]
 800b96c:	b9d8      	cbnz	r0, 800b9a6 <_svfiprintf_r+0xe6>
 800b96e:	06d0      	lsls	r0, r2, #27
 800b970:	bf44      	itt	mi
 800b972:	2320      	movmi	r3, #32
 800b974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b978:	0711      	lsls	r1, r2, #28
 800b97a:	bf44      	itt	mi
 800b97c:	232b      	movmi	r3, #43	; 0x2b
 800b97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b982:	f89a 3000 	ldrb.w	r3, [sl]
 800b986:	2b2a      	cmp	r3, #42	; 0x2a
 800b988:	d015      	beq.n	800b9b6 <_svfiprintf_r+0xf6>
 800b98a:	9a07      	ldr	r2, [sp, #28]
 800b98c:	4654      	mov	r4, sl
 800b98e:	2000      	movs	r0, #0
 800b990:	f04f 0c0a 	mov.w	ip, #10
 800b994:	4621      	mov	r1, r4
 800b996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b99a:	3b30      	subs	r3, #48	; 0x30
 800b99c:	2b09      	cmp	r3, #9
 800b99e:	d94d      	bls.n	800ba3c <_svfiprintf_r+0x17c>
 800b9a0:	b1b0      	cbz	r0, 800b9d0 <_svfiprintf_r+0x110>
 800b9a2:	9207      	str	r2, [sp, #28]
 800b9a4:	e014      	b.n	800b9d0 <_svfiprintf_r+0x110>
 800b9a6:	eba0 0308 	sub.w	r3, r0, r8
 800b9aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	9304      	str	r3, [sp, #16]
 800b9b2:	46a2      	mov	sl, r4
 800b9b4:	e7d2      	b.n	800b95c <_svfiprintf_r+0x9c>
 800b9b6:	9b03      	ldr	r3, [sp, #12]
 800b9b8:	1d19      	adds	r1, r3, #4
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	9103      	str	r1, [sp, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	bfbb      	ittet	lt
 800b9c2:	425b      	neglt	r3, r3
 800b9c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b9c8:	9307      	strge	r3, [sp, #28]
 800b9ca:	9307      	strlt	r3, [sp, #28]
 800b9cc:	bfb8      	it	lt
 800b9ce:	9204      	strlt	r2, [sp, #16]
 800b9d0:	7823      	ldrb	r3, [r4, #0]
 800b9d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d4:	d10c      	bne.n	800b9f0 <_svfiprintf_r+0x130>
 800b9d6:	7863      	ldrb	r3, [r4, #1]
 800b9d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9da:	d134      	bne.n	800ba46 <_svfiprintf_r+0x186>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	1d1a      	adds	r2, r3, #4
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	9203      	str	r2, [sp, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bfb8      	it	lt
 800b9e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9ec:	3402      	adds	r4, #2
 800b9ee:	9305      	str	r3, [sp, #20]
 800b9f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bab8 <_svfiprintf_r+0x1f8>
 800b9f4:	7821      	ldrb	r1, [r4, #0]
 800b9f6:	2203      	movs	r2, #3
 800b9f8:	4650      	mov	r0, sl
 800b9fa:	f7f4 fc71 	bl	80002e0 <memchr>
 800b9fe:	b138      	cbz	r0, 800ba10 <_svfiprintf_r+0x150>
 800ba00:	9b04      	ldr	r3, [sp, #16]
 800ba02:	eba0 000a 	sub.w	r0, r0, sl
 800ba06:	2240      	movs	r2, #64	; 0x40
 800ba08:	4082      	lsls	r2, r0
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	9304      	str	r3, [sp, #16]
 800ba10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba14:	4825      	ldr	r0, [pc, #148]	; (800baac <_svfiprintf_r+0x1ec>)
 800ba16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba1a:	2206      	movs	r2, #6
 800ba1c:	f7f4 fc60 	bl	80002e0 <memchr>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d038      	beq.n	800ba96 <_svfiprintf_r+0x1d6>
 800ba24:	4b22      	ldr	r3, [pc, #136]	; (800bab0 <_svfiprintf_r+0x1f0>)
 800ba26:	bb1b      	cbnz	r3, 800ba70 <_svfiprintf_r+0x1b0>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	3307      	adds	r3, #7
 800ba2c:	f023 0307 	bic.w	r3, r3, #7
 800ba30:	3308      	adds	r3, #8
 800ba32:	9303      	str	r3, [sp, #12]
 800ba34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba36:	4433      	add	r3, r6
 800ba38:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3a:	e768      	b.n	800b90e <_svfiprintf_r+0x4e>
 800ba3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba40:	460c      	mov	r4, r1
 800ba42:	2001      	movs	r0, #1
 800ba44:	e7a6      	b.n	800b994 <_svfiprintf_r+0xd4>
 800ba46:	2300      	movs	r3, #0
 800ba48:	3401      	adds	r4, #1
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	f04f 0c0a 	mov.w	ip, #10
 800ba52:	4620      	mov	r0, r4
 800ba54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba58:	3a30      	subs	r2, #48	; 0x30
 800ba5a:	2a09      	cmp	r2, #9
 800ba5c:	d903      	bls.n	800ba66 <_svfiprintf_r+0x1a6>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0c6      	beq.n	800b9f0 <_svfiprintf_r+0x130>
 800ba62:	9105      	str	r1, [sp, #20]
 800ba64:	e7c4      	b.n	800b9f0 <_svfiprintf_r+0x130>
 800ba66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7f0      	b.n	800ba52 <_svfiprintf_r+0x192>
 800ba70:	ab03      	add	r3, sp, #12
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	462a      	mov	r2, r5
 800ba76:	4b0f      	ldr	r3, [pc, #60]	; (800bab4 <_svfiprintf_r+0x1f4>)
 800ba78:	a904      	add	r1, sp, #16
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	f3af 8000 	nop.w
 800ba80:	1c42      	adds	r2, r0, #1
 800ba82:	4606      	mov	r6, r0
 800ba84:	d1d6      	bne.n	800ba34 <_svfiprintf_r+0x174>
 800ba86:	89ab      	ldrh	r3, [r5, #12]
 800ba88:	065b      	lsls	r3, r3, #25
 800ba8a:	f53f af2d 	bmi.w	800b8e8 <_svfiprintf_r+0x28>
 800ba8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba90:	b01d      	add	sp, #116	; 0x74
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	ab03      	add	r3, sp, #12
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <_svfiprintf_r+0x1f4>)
 800ba9e:	a904      	add	r1, sp, #16
 800baa0:	4638      	mov	r0, r7
 800baa2:	f000 f879 	bl	800bb98 <_printf_i>
 800baa6:	e7eb      	b.n	800ba80 <_svfiprintf_r+0x1c0>
 800baa8:	0800bf24 	.word	0x0800bf24
 800baac:	0800bf2e 	.word	0x0800bf2e
 800bab0:	00000000 	.word	0x00000000
 800bab4:	0800b80d 	.word	0x0800b80d
 800bab8:	0800bf2a 	.word	0x0800bf2a

0800babc <_printf_common>:
 800babc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	4616      	mov	r6, r2
 800bac2:	4699      	mov	r9, r3
 800bac4:	688a      	ldr	r2, [r1, #8]
 800bac6:	690b      	ldr	r3, [r1, #16]
 800bac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bacc:	4293      	cmp	r3, r2
 800bace:	bfb8      	it	lt
 800bad0:	4613      	movlt	r3, r2
 800bad2:	6033      	str	r3, [r6, #0]
 800bad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bad8:	4607      	mov	r7, r0
 800bada:	460c      	mov	r4, r1
 800badc:	b10a      	cbz	r2, 800bae2 <_printf_common+0x26>
 800bade:	3301      	adds	r3, #1
 800bae0:	6033      	str	r3, [r6, #0]
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	0699      	lsls	r1, r3, #26
 800bae6:	bf42      	ittt	mi
 800bae8:	6833      	ldrmi	r3, [r6, #0]
 800baea:	3302      	addmi	r3, #2
 800baec:	6033      	strmi	r3, [r6, #0]
 800baee:	6825      	ldr	r5, [r4, #0]
 800baf0:	f015 0506 	ands.w	r5, r5, #6
 800baf4:	d106      	bne.n	800bb04 <_printf_common+0x48>
 800baf6:	f104 0a19 	add.w	sl, r4, #25
 800bafa:	68e3      	ldr	r3, [r4, #12]
 800bafc:	6832      	ldr	r2, [r6, #0]
 800bafe:	1a9b      	subs	r3, r3, r2
 800bb00:	42ab      	cmp	r3, r5
 800bb02:	dc26      	bgt.n	800bb52 <_printf_common+0x96>
 800bb04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb08:	1e13      	subs	r3, r2, #0
 800bb0a:	6822      	ldr	r2, [r4, #0]
 800bb0c:	bf18      	it	ne
 800bb0e:	2301      	movne	r3, #1
 800bb10:	0692      	lsls	r2, r2, #26
 800bb12:	d42b      	bmi.n	800bb6c <_printf_common+0xb0>
 800bb14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb18:	4649      	mov	r1, r9
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	47c0      	blx	r8
 800bb1e:	3001      	adds	r0, #1
 800bb20:	d01e      	beq.n	800bb60 <_printf_common+0xa4>
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	6922      	ldr	r2, [r4, #16]
 800bb26:	f003 0306 	and.w	r3, r3, #6
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	bf02      	ittt	eq
 800bb2e:	68e5      	ldreq	r5, [r4, #12]
 800bb30:	6833      	ldreq	r3, [r6, #0]
 800bb32:	1aed      	subeq	r5, r5, r3
 800bb34:	68a3      	ldr	r3, [r4, #8]
 800bb36:	bf0c      	ite	eq
 800bb38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb3c:	2500      	movne	r5, #0
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	bfc4      	itt	gt
 800bb42:	1a9b      	subgt	r3, r3, r2
 800bb44:	18ed      	addgt	r5, r5, r3
 800bb46:	2600      	movs	r6, #0
 800bb48:	341a      	adds	r4, #26
 800bb4a:	42b5      	cmp	r5, r6
 800bb4c:	d11a      	bne.n	800bb84 <_printf_common+0xc8>
 800bb4e:	2000      	movs	r0, #0
 800bb50:	e008      	b.n	800bb64 <_printf_common+0xa8>
 800bb52:	2301      	movs	r3, #1
 800bb54:	4652      	mov	r2, sl
 800bb56:	4649      	mov	r1, r9
 800bb58:	4638      	mov	r0, r7
 800bb5a:	47c0      	blx	r8
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d103      	bne.n	800bb68 <_printf_common+0xac>
 800bb60:	f04f 30ff 	mov.w	r0, #4294967295
 800bb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb68:	3501      	adds	r5, #1
 800bb6a:	e7c6      	b.n	800bafa <_printf_common+0x3e>
 800bb6c:	18e1      	adds	r1, r4, r3
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	2030      	movs	r0, #48	; 0x30
 800bb72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb76:	4422      	add	r2, r4
 800bb78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb80:	3302      	adds	r3, #2
 800bb82:	e7c7      	b.n	800bb14 <_printf_common+0x58>
 800bb84:	2301      	movs	r3, #1
 800bb86:	4622      	mov	r2, r4
 800bb88:	4649      	mov	r1, r9
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	47c0      	blx	r8
 800bb8e:	3001      	adds	r0, #1
 800bb90:	d0e6      	beq.n	800bb60 <_printf_common+0xa4>
 800bb92:	3601      	adds	r6, #1
 800bb94:	e7d9      	b.n	800bb4a <_printf_common+0x8e>
	...

0800bb98 <_printf_i>:
 800bb98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb9c:	7e0f      	ldrb	r7, [r1, #24]
 800bb9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bba0:	2f78      	cmp	r7, #120	; 0x78
 800bba2:	4691      	mov	r9, r2
 800bba4:	4680      	mov	r8, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	469a      	mov	sl, r3
 800bbaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbae:	d807      	bhi.n	800bbc0 <_printf_i+0x28>
 800bbb0:	2f62      	cmp	r7, #98	; 0x62
 800bbb2:	d80a      	bhi.n	800bbca <_printf_i+0x32>
 800bbb4:	2f00      	cmp	r7, #0
 800bbb6:	f000 80d4 	beq.w	800bd62 <_printf_i+0x1ca>
 800bbba:	2f58      	cmp	r7, #88	; 0x58
 800bbbc:	f000 80c0 	beq.w	800bd40 <_printf_i+0x1a8>
 800bbc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbc8:	e03a      	b.n	800bc40 <_printf_i+0xa8>
 800bbca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbce:	2b15      	cmp	r3, #21
 800bbd0:	d8f6      	bhi.n	800bbc0 <_printf_i+0x28>
 800bbd2:	a101      	add	r1, pc, #4	; (adr r1, 800bbd8 <_printf_i+0x40>)
 800bbd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbd8:	0800bc31 	.word	0x0800bc31
 800bbdc:	0800bc45 	.word	0x0800bc45
 800bbe0:	0800bbc1 	.word	0x0800bbc1
 800bbe4:	0800bbc1 	.word	0x0800bbc1
 800bbe8:	0800bbc1 	.word	0x0800bbc1
 800bbec:	0800bbc1 	.word	0x0800bbc1
 800bbf0:	0800bc45 	.word	0x0800bc45
 800bbf4:	0800bbc1 	.word	0x0800bbc1
 800bbf8:	0800bbc1 	.word	0x0800bbc1
 800bbfc:	0800bbc1 	.word	0x0800bbc1
 800bc00:	0800bbc1 	.word	0x0800bbc1
 800bc04:	0800bd49 	.word	0x0800bd49
 800bc08:	0800bc71 	.word	0x0800bc71
 800bc0c:	0800bd03 	.word	0x0800bd03
 800bc10:	0800bbc1 	.word	0x0800bbc1
 800bc14:	0800bbc1 	.word	0x0800bbc1
 800bc18:	0800bd6b 	.word	0x0800bd6b
 800bc1c:	0800bbc1 	.word	0x0800bbc1
 800bc20:	0800bc71 	.word	0x0800bc71
 800bc24:	0800bbc1 	.word	0x0800bbc1
 800bc28:	0800bbc1 	.word	0x0800bbc1
 800bc2c:	0800bd0b 	.word	0x0800bd0b
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	1d1a      	adds	r2, r3, #4
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	602a      	str	r2, [r5, #0]
 800bc38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc40:	2301      	movs	r3, #1
 800bc42:	e09f      	b.n	800bd84 <_printf_i+0x1ec>
 800bc44:	6820      	ldr	r0, [r4, #0]
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	0607      	lsls	r7, r0, #24
 800bc4a:	f103 0104 	add.w	r1, r3, #4
 800bc4e:	6029      	str	r1, [r5, #0]
 800bc50:	d501      	bpl.n	800bc56 <_printf_i+0xbe>
 800bc52:	681e      	ldr	r6, [r3, #0]
 800bc54:	e003      	b.n	800bc5e <_printf_i+0xc6>
 800bc56:	0646      	lsls	r6, r0, #25
 800bc58:	d5fb      	bpl.n	800bc52 <_printf_i+0xba>
 800bc5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bc5e:	2e00      	cmp	r6, #0
 800bc60:	da03      	bge.n	800bc6a <_printf_i+0xd2>
 800bc62:	232d      	movs	r3, #45	; 0x2d
 800bc64:	4276      	negs	r6, r6
 800bc66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc6a:	485a      	ldr	r0, [pc, #360]	; (800bdd4 <_printf_i+0x23c>)
 800bc6c:	230a      	movs	r3, #10
 800bc6e:	e012      	b.n	800bc96 <_printf_i+0xfe>
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	6820      	ldr	r0, [r4, #0]
 800bc74:	1d19      	adds	r1, r3, #4
 800bc76:	6029      	str	r1, [r5, #0]
 800bc78:	0605      	lsls	r5, r0, #24
 800bc7a:	d501      	bpl.n	800bc80 <_printf_i+0xe8>
 800bc7c:	681e      	ldr	r6, [r3, #0]
 800bc7e:	e002      	b.n	800bc86 <_printf_i+0xee>
 800bc80:	0641      	lsls	r1, r0, #25
 800bc82:	d5fb      	bpl.n	800bc7c <_printf_i+0xe4>
 800bc84:	881e      	ldrh	r6, [r3, #0]
 800bc86:	4853      	ldr	r0, [pc, #332]	; (800bdd4 <_printf_i+0x23c>)
 800bc88:	2f6f      	cmp	r7, #111	; 0x6f
 800bc8a:	bf0c      	ite	eq
 800bc8c:	2308      	moveq	r3, #8
 800bc8e:	230a      	movne	r3, #10
 800bc90:	2100      	movs	r1, #0
 800bc92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc96:	6865      	ldr	r5, [r4, #4]
 800bc98:	60a5      	str	r5, [r4, #8]
 800bc9a:	2d00      	cmp	r5, #0
 800bc9c:	bfa2      	ittt	ge
 800bc9e:	6821      	ldrge	r1, [r4, #0]
 800bca0:	f021 0104 	bicge.w	r1, r1, #4
 800bca4:	6021      	strge	r1, [r4, #0]
 800bca6:	b90e      	cbnz	r6, 800bcac <_printf_i+0x114>
 800bca8:	2d00      	cmp	r5, #0
 800bcaa:	d04b      	beq.n	800bd44 <_printf_i+0x1ac>
 800bcac:	4615      	mov	r5, r2
 800bcae:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcb2:	fb03 6711 	mls	r7, r3, r1, r6
 800bcb6:	5dc7      	ldrb	r7, [r0, r7]
 800bcb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcbc:	4637      	mov	r7, r6
 800bcbe:	42bb      	cmp	r3, r7
 800bcc0:	460e      	mov	r6, r1
 800bcc2:	d9f4      	bls.n	800bcae <_printf_i+0x116>
 800bcc4:	2b08      	cmp	r3, #8
 800bcc6:	d10b      	bne.n	800bce0 <_printf_i+0x148>
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	07de      	lsls	r6, r3, #31
 800bccc:	d508      	bpl.n	800bce0 <_printf_i+0x148>
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	6861      	ldr	r1, [r4, #4]
 800bcd2:	4299      	cmp	r1, r3
 800bcd4:	bfde      	ittt	le
 800bcd6:	2330      	movle	r3, #48	; 0x30
 800bcd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bce0:	1b52      	subs	r2, r2, r5
 800bce2:	6122      	str	r2, [r4, #16]
 800bce4:	f8cd a000 	str.w	sl, [sp]
 800bce8:	464b      	mov	r3, r9
 800bcea:	aa03      	add	r2, sp, #12
 800bcec:	4621      	mov	r1, r4
 800bcee:	4640      	mov	r0, r8
 800bcf0:	f7ff fee4 	bl	800babc <_printf_common>
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	d14a      	bne.n	800bd8e <_printf_i+0x1f6>
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	b004      	add	sp, #16
 800bcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd02:	6823      	ldr	r3, [r4, #0]
 800bd04:	f043 0320 	orr.w	r3, r3, #32
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	4833      	ldr	r0, [pc, #204]	; (800bdd8 <_printf_i+0x240>)
 800bd0c:	2778      	movs	r7, #120	; 0x78
 800bd0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	6829      	ldr	r1, [r5, #0]
 800bd16:	061f      	lsls	r7, r3, #24
 800bd18:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd1c:	d402      	bmi.n	800bd24 <_printf_i+0x18c>
 800bd1e:	065f      	lsls	r7, r3, #25
 800bd20:	bf48      	it	mi
 800bd22:	b2b6      	uxthmi	r6, r6
 800bd24:	07df      	lsls	r7, r3, #31
 800bd26:	bf48      	it	mi
 800bd28:	f043 0320 	orrmi.w	r3, r3, #32
 800bd2c:	6029      	str	r1, [r5, #0]
 800bd2e:	bf48      	it	mi
 800bd30:	6023      	strmi	r3, [r4, #0]
 800bd32:	b91e      	cbnz	r6, 800bd3c <_printf_i+0x1a4>
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	f023 0320 	bic.w	r3, r3, #32
 800bd3a:	6023      	str	r3, [r4, #0]
 800bd3c:	2310      	movs	r3, #16
 800bd3e:	e7a7      	b.n	800bc90 <_printf_i+0xf8>
 800bd40:	4824      	ldr	r0, [pc, #144]	; (800bdd4 <_printf_i+0x23c>)
 800bd42:	e7e4      	b.n	800bd0e <_printf_i+0x176>
 800bd44:	4615      	mov	r5, r2
 800bd46:	e7bd      	b.n	800bcc4 <_printf_i+0x12c>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	6826      	ldr	r6, [r4, #0]
 800bd4c:	6961      	ldr	r1, [r4, #20]
 800bd4e:	1d18      	adds	r0, r3, #4
 800bd50:	6028      	str	r0, [r5, #0]
 800bd52:	0635      	lsls	r5, r6, #24
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	d501      	bpl.n	800bd5c <_printf_i+0x1c4>
 800bd58:	6019      	str	r1, [r3, #0]
 800bd5a:	e002      	b.n	800bd62 <_printf_i+0x1ca>
 800bd5c:	0670      	lsls	r0, r6, #25
 800bd5e:	d5fb      	bpl.n	800bd58 <_printf_i+0x1c0>
 800bd60:	8019      	strh	r1, [r3, #0]
 800bd62:	2300      	movs	r3, #0
 800bd64:	6123      	str	r3, [r4, #16]
 800bd66:	4615      	mov	r5, r2
 800bd68:	e7bc      	b.n	800bce4 <_printf_i+0x14c>
 800bd6a:	682b      	ldr	r3, [r5, #0]
 800bd6c:	1d1a      	adds	r2, r3, #4
 800bd6e:	602a      	str	r2, [r5, #0]
 800bd70:	681d      	ldr	r5, [r3, #0]
 800bd72:	6862      	ldr	r2, [r4, #4]
 800bd74:	2100      	movs	r1, #0
 800bd76:	4628      	mov	r0, r5
 800bd78:	f7f4 fab2 	bl	80002e0 <memchr>
 800bd7c:	b108      	cbz	r0, 800bd82 <_printf_i+0x1ea>
 800bd7e:	1b40      	subs	r0, r0, r5
 800bd80:	6060      	str	r0, [r4, #4]
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	6123      	str	r3, [r4, #16]
 800bd86:	2300      	movs	r3, #0
 800bd88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd8c:	e7aa      	b.n	800bce4 <_printf_i+0x14c>
 800bd8e:	6923      	ldr	r3, [r4, #16]
 800bd90:	462a      	mov	r2, r5
 800bd92:	4649      	mov	r1, r9
 800bd94:	4640      	mov	r0, r8
 800bd96:	47d0      	blx	sl
 800bd98:	3001      	adds	r0, #1
 800bd9a:	d0ad      	beq.n	800bcf8 <_printf_i+0x160>
 800bd9c:	6823      	ldr	r3, [r4, #0]
 800bd9e:	079b      	lsls	r3, r3, #30
 800bda0:	d413      	bmi.n	800bdca <_printf_i+0x232>
 800bda2:	68e0      	ldr	r0, [r4, #12]
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	4298      	cmp	r0, r3
 800bda8:	bfb8      	it	lt
 800bdaa:	4618      	movlt	r0, r3
 800bdac:	e7a6      	b.n	800bcfc <_printf_i+0x164>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	4649      	mov	r1, r9
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	47d0      	blx	sl
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d09d      	beq.n	800bcf8 <_printf_i+0x160>
 800bdbc:	3501      	adds	r5, #1
 800bdbe:	68e3      	ldr	r3, [r4, #12]
 800bdc0:	9903      	ldr	r1, [sp, #12]
 800bdc2:	1a5b      	subs	r3, r3, r1
 800bdc4:	42ab      	cmp	r3, r5
 800bdc6:	dcf2      	bgt.n	800bdae <_printf_i+0x216>
 800bdc8:	e7eb      	b.n	800bda2 <_printf_i+0x20a>
 800bdca:	2500      	movs	r5, #0
 800bdcc:	f104 0619 	add.w	r6, r4, #25
 800bdd0:	e7f5      	b.n	800bdbe <_printf_i+0x226>
 800bdd2:	bf00      	nop
 800bdd4:	0800bf35 	.word	0x0800bf35
 800bdd8:	0800bf46 	.word	0x0800bf46

0800bddc <memmove>:
 800bddc:	4288      	cmp	r0, r1
 800bdde:	b510      	push	{r4, lr}
 800bde0:	eb01 0402 	add.w	r4, r1, r2
 800bde4:	d902      	bls.n	800bdec <memmove+0x10>
 800bde6:	4284      	cmp	r4, r0
 800bde8:	4623      	mov	r3, r4
 800bdea:	d807      	bhi.n	800bdfc <memmove+0x20>
 800bdec:	1e43      	subs	r3, r0, #1
 800bdee:	42a1      	cmp	r1, r4
 800bdf0:	d008      	beq.n	800be04 <memmove+0x28>
 800bdf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdfa:	e7f8      	b.n	800bdee <memmove+0x12>
 800bdfc:	4402      	add	r2, r0
 800bdfe:	4601      	mov	r1, r0
 800be00:	428a      	cmp	r2, r1
 800be02:	d100      	bne.n	800be06 <memmove+0x2a>
 800be04:	bd10      	pop	{r4, pc}
 800be06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be0e:	e7f7      	b.n	800be00 <memmove+0x24>

0800be10 <_sbrk_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4d06      	ldr	r5, [pc, #24]	; (800be2c <_sbrk_r+0x1c>)
 800be14:	2300      	movs	r3, #0
 800be16:	4604      	mov	r4, r0
 800be18:	4608      	mov	r0, r1
 800be1a:	602b      	str	r3, [r5, #0]
 800be1c:	f7f5 f9cc 	bl	80011b8 <_sbrk>
 800be20:	1c43      	adds	r3, r0, #1
 800be22:	d102      	bne.n	800be2a <_sbrk_r+0x1a>
 800be24:	682b      	ldr	r3, [r5, #0]
 800be26:	b103      	cbz	r3, 800be2a <_sbrk_r+0x1a>
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	bd38      	pop	{r3, r4, r5, pc}
 800be2c:	24000430 	.word	0x24000430

0800be30 <memcpy>:
 800be30:	440a      	add	r2, r1
 800be32:	4291      	cmp	r1, r2
 800be34:	f100 33ff 	add.w	r3, r0, #4294967295
 800be38:	d100      	bne.n	800be3c <memcpy+0xc>
 800be3a:	4770      	bx	lr
 800be3c:	b510      	push	{r4, lr}
 800be3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be46:	4291      	cmp	r1, r2
 800be48:	d1f9      	bne.n	800be3e <memcpy+0xe>
 800be4a:	bd10      	pop	{r4, pc}

0800be4c <_realloc_r>:
 800be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be50:	4680      	mov	r8, r0
 800be52:	4614      	mov	r4, r2
 800be54:	460e      	mov	r6, r1
 800be56:	b921      	cbnz	r1, 800be62 <_realloc_r+0x16>
 800be58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	4611      	mov	r1, r2
 800be5e:	f7ff bc49 	b.w	800b6f4 <_malloc_r>
 800be62:	b92a      	cbnz	r2, 800be70 <_realloc_r+0x24>
 800be64:	f7ff fbda 	bl	800b61c <_free_r>
 800be68:	4625      	mov	r5, r4
 800be6a:	4628      	mov	r0, r5
 800be6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be70:	f000 f81b 	bl	800beaa <_malloc_usable_size_r>
 800be74:	4284      	cmp	r4, r0
 800be76:	4607      	mov	r7, r0
 800be78:	d802      	bhi.n	800be80 <_realloc_r+0x34>
 800be7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be7e:	d812      	bhi.n	800bea6 <_realloc_r+0x5a>
 800be80:	4621      	mov	r1, r4
 800be82:	4640      	mov	r0, r8
 800be84:	f7ff fc36 	bl	800b6f4 <_malloc_r>
 800be88:	4605      	mov	r5, r0
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d0ed      	beq.n	800be6a <_realloc_r+0x1e>
 800be8e:	42bc      	cmp	r4, r7
 800be90:	4622      	mov	r2, r4
 800be92:	4631      	mov	r1, r6
 800be94:	bf28      	it	cs
 800be96:	463a      	movcs	r2, r7
 800be98:	f7ff ffca 	bl	800be30 <memcpy>
 800be9c:	4631      	mov	r1, r6
 800be9e:	4640      	mov	r0, r8
 800bea0:	f7ff fbbc 	bl	800b61c <_free_r>
 800bea4:	e7e1      	b.n	800be6a <_realloc_r+0x1e>
 800bea6:	4635      	mov	r5, r6
 800bea8:	e7df      	b.n	800be6a <_realloc_r+0x1e>

0800beaa <_malloc_usable_size_r>:
 800beaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beae:	1f18      	subs	r0, r3, #4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	bfbc      	itt	lt
 800beb4:	580b      	ldrlt	r3, [r1, r0]
 800beb6:	18c0      	addlt	r0, r0, r3
 800beb8:	4770      	bx	lr
	...

0800bebc <_init>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr

0800bec8 <_fini>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	bf00      	nop
 800becc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bece:	bc08      	pop	{r3}
 800bed0:	469e      	mov	lr, r3
 800bed2:	4770      	bx	lr
