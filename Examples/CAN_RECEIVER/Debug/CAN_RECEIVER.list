
CAN_RECEIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080042c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ac  24000010  080042d4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240001bc  080042d4  000201bc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c4e0  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000018b2  00000000  00000000  0002c561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a68  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007df  00000000  00000000  0002e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035816  00000000  00000000  0002f05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000b65f  00000000  00000000  00064875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015845d  00000000  00000000  0006fed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002b74  00000000  00000000  001c8334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001caea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004248 	.word	0x08004248

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004248 	.word	0x08004248

080002d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 80002dc:	f000 fc1a 	bl	8000b14 <HAL_Init>

    /* MPU
     * Configuration--------------------------------------------------------*/
    MPU_Config();
 80002e0:	f000 fa20 	bl	8000724 <MPU_Config>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80002e4:	f000 f872 	bl	80003cc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80002e8:	f000 f9f2 	bl	80006d0 <MX_GPIO_Init>
    MX_FDCAN1_Init();
 80002ec:	f000 f8ec 	bl	80004c8 <MX_FDCAN1_Init>
    MX_FDCAN2_Init();
 80002f0:	f000 f988 	bl	8000604 <MX_FDCAN2_Init>
    /* USER CODE BEGIN 2 */
    // initalizes can
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80002f4:	482f      	ldr	r0, [pc, #188]	; (80003b4 <main+0xdc>)
 80002f6:	f001 f85f 	bl	80013b8 <HAL_FDCAN_Start>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <main+0x2c>
        Error_Handler();
 8000300:	f000 fa3c 	bl	800077c <Error_Handler>
    }
    // initalizes can
    if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8000304:	482c      	ldr	r0, [pc, #176]	; (80003b8 <main+0xe0>)
 8000306:	f001 f857 	bl	80013b8 <HAL_FDCAN_Start>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <main+0x3c>
        Error_Handler();
 8000310:	f000 fa34 	bl	800077c <Error_Handler>
    }
    // ready to recive msgs
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000314:	2200      	movs	r2, #0
 8000316:	2101      	movs	r1, #1
 8000318:	4826      	ldr	r0, [pc, #152]	; (80003b4 <main+0xdc>)
 800031a:	f001 f879 	bl	8001410 <HAL_FDCAN_ActivateNotification>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <main+0x50>
                                       0) != HAL_OK) {
        Error_Handler();
 8000324:	f000 fa2a 	bl	800077c <Error_Handler>
    }
    // ready to recive msgs
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE,
 8000328:	2200      	movs	r2, #0
 800032a:	2110      	movs	r1, #16
 800032c:	4822      	ldr	r0, [pc, #136]	; (80003b8 <main+0xe0>)
 800032e:	f001 f86f 	bl	8001410 <HAL_FDCAN_ActivateNotification>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <main+0x64>
                                       0) != HAL_OK) {
        Error_Handler();
 8000338:	f000 fa20 	bl	800077c <Error_Handler>
    }

    TxHeader1.Identifier = 0x0cff104;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <main+0xe4>)
 800033e:	4a20      	ldr	r2, [pc, #128]	; (80003c0 <main+0xe8>)
 8000340:	601a      	str	r2, [r3, #0]
    TxHeader1.IdType = FDCAN_EXTENDED_ID;
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <main+0xe4>)
 8000344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000348:	605a      	str	r2, [r3, #4]
    TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <main+0xe4>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
    TxHeader1.DataLength = FDCAN_DATA_BYTES_8;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <main+0xe4>)
 8000352:	2204      	movs	r2, #4
 8000354:	60da      	str	r2, [r3, #12]
    TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <main+0xe4>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
    TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <main+0xe4>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
    TxHeader1.FDFormat = FDCAN_FD_CAN;
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <main+0xe4>)
 8000364:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000368:	619a      	str	r2, [r3, #24]
    TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <main+0xe4>)
 800036c:	2200      	movs	r2, #0
 800036e:	61da      	str	r2, [r3, #28]
    TxHeader1.MessageMarker = 0;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <main+0xe4>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]

    TxHeader2.Identifier = 0x0C24048;
 8000376:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <main+0xec>)
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <main+0xf0>)
 800037a:	601a      	str	r2, [r3, #0]
    TxHeader2.IdType = FDCAN_EXTENDED_ID;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <main+0xec>)
 800037e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000382:	605a      	str	r2, [r3, #4]
    TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <main+0xec>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
    TxHeader2.DataLength = FDCAN_DATA_BYTES_8;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <main+0xec>)
 800038c:	2204      	movs	r2, #4
 800038e:	60da      	str	r2, [r3, #12]
    TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <main+0xec>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
    TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <main+0xec>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
    TxHeader2.FDFormat = FDCAN_FD_CAN;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <main+0xec>)
 800039e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003a2:	619a      	str	r2, [r3, #24]
    TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <main+0xec>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
    TxHeader2.MessageMarker = 0;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <main+0xec>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 80003b0:	e7fe      	b.n	80003b0 <main+0xd8>
 80003b2:	bf00      	nop
 80003b4:	2400002c 	.word	0x2400002c
 80003b8:	240000cc 	.word	0x240000cc
 80003bc:	2400016c 	.word	0x2400016c
 80003c0:	00cff104 	.word	0x00cff104
 80003c4:	24000190 	.word	0x24000190
 80003c8:	00c24048 	.word	0x00c24048

080003cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b09c      	sub	sp, #112	; 0x70
 80003d0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003d6:	224c      	movs	r2, #76	; 0x4c
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fefa 	bl	80041d4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2220      	movs	r2, #32
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f003 fef4 	bl	80041d4 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ec:	2002      	movs	r0, #2
 80003ee:	f001 fbbf 	bl	8001b70 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003f2:	2300      	movs	r3, #0
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	4b32      	ldr	r3, [pc, #200]	; (80004c0 <SystemClock_Config+0xf4>)
 80003f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fa:	4a31      	ldr	r2, [pc, #196]	; (80004c0 <SystemClock_Config+0xf4>)
 80003fc:	f023 0301 	bic.w	r3, r3, #1
 8000400:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000402:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <SystemClock_Config+0xf4>)
 8000404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <SystemClock_Config+0xf8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000414:	4a2b      	ldr	r2, [pc, #172]	; (80004c4 <SystemClock_Config+0xf8>)
 8000416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <SystemClock_Config+0xf8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000428:	bf00      	nop
 800042a:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <SystemClock_Config+0xf8>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000436:	d1f8      	bne.n	800042a <SystemClock_Config+0x5e>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000438:	2302      	movs	r3, #2
 800043a:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800043c:	2301      	movs	r3, #1
 800043e:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000440:	2340      	movs	r3, #64	; 0x40
 8000442:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000444:	2302      	movs	r3, #2
 8000446:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000448:	2300      	movs	r3, #0
 800044a:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM = 4;
 800044c:	2304      	movs	r3, #4
 800044e:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN = 9;
 8000450:	2309      	movs	r3, #9
 8000452:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 8000454:	2302      	movs	r3, #2
 8000456:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8000458:	2303      	movs	r3, #3
 800045a:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLR = 2;
 800045c:	2302      	movs	r3, #2
 800045e:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000460:	230c      	movs	r3, #12
 8000462:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000464:	2302      	movs	r3, #2
 8000466:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000468:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800046c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800046e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fbb6 	bl	8001be4 <HAL_RCC_OscConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0xb6>
        Error_Handler();
 800047e:	f000 f97d 	bl	800077c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000482:	233f      	movs	r3, #63	; 0x3f
 8000484:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                  RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2101      	movs	r1, #1
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fff6 	bl	8002498 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0xea>
        Error_Handler();
 80004b2:	f000 f963 	bl	800077c <Error_Handler>
    }
}
 80004b6:	bf00      	nop
 80004b8:	3770      	adds	r7, #112	; 0x70
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	58000400 	.word	0x58000400
 80004c4:	58024800 	.word	0x58024800

080004c8 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
    /* USER CODE END FDCAN1_Init 0 */

    /* USER CODE BEGIN FDCAN1_Init 1 */

    /* USER CODE END FDCAN1_Init 1 */
    hfdcan1.Instance = FDCAN1;
 80004ce:	4b48      	ldr	r3, [pc, #288]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80004d0:	4a48      	ldr	r2, [pc, #288]	; (80005f4 <MX_FDCAN1_Init+0x12c>)
 80004d2:	601a      	str	r2, [r3, #0]
    hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80004d4:	4b46      	ldr	r3, [pc, #280]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80004d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004da:	609a      	str	r2, [r3, #8]
    hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004dc:	4b44      	ldr	r3, [pc, #272]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
    hfdcan1.Init.AutoRetransmission = ENABLE;
 80004e2:	4b43      	ldr	r3, [pc, #268]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	741a      	strb	r2, [r3, #16]
    hfdcan1.Init.TransmitPause = DISABLE;
 80004e8:	4b41      	ldr	r3, [pc, #260]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	745a      	strb	r2, [r3, #17]
    hfdcan1.Init.ProtocolException = DISABLE;
 80004ee:	4b40      	ldr	r3, [pc, #256]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	749a      	strb	r2, [r3, #18]
    hfdcan1.Init.NominalPrescaler = 1;
 80004f4:	4b3e      	ldr	r3, [pc, #248]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	615a      	str	r2, [r3, #20]
    hfdcan1.Init.NominalSyncJumpWidth = 13;
 80004fa:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80004fc:	220d      	movs	r2, #13
 80004fe:	619a      	str	r2, [r3, #24]
    hfdcan1.Init.NominalTimeSeg1 = 86;
 8000500:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000502:	2256      	movs	r2, #86	; 0x56
 8000504:	61da      	str	r2, [r3, #28]
    hfdcan1.Init.NominalTimeSeg2 = 13;
 8000506:	4b3a      	ldr	r3, [pc, #232]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000508:	220d      	movs	r2, #13
 800050a:	621a      	str	r2, [r3, #32]
    hfdcan1.Init.DataPrescaler = 25;
 800050c:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 800050e:	2219      	movs	r2, #25
 8000510:	625a      	str	r2, [r3, #36]	; 0x24
    hfdcan1.Init.DataSyncJumpWidth = 1;
 8000512:	4b37      	ldr	r3, [pc, #220]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000514:	2201      	movs	r2, #1
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
    hfdcan1.Init.DataTimeSeg1 = 2;
 8000518:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 800051a:	2202      	movs	r2, #2
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
    hfdcan1.Init.DataTimeSeg2 = 1;
 800051e:	4b34      	ldr	r3, [pc, #208]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000520:	2201      	movs	r2, #1
 8000522:	631a      	str	r2, [r3, #48]	; 0x30
    hfdcan1.Init.MessageRAMOffset = 0;
 8000524:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000526:	2200      	movs	r2, #0
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
    hfdcan1.Init.StdFiltersNbr = 0;
 800052a:	4b31      	ldr	r3, [pc, #196]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 800052c:	2200      	movs	r2, #0
 800052e:	639a      	str	r2, [r3, #56]	; 0x38
    hfdcan1.Init.ExtFiltersNbr = 3;
 8000530:	4b2f      	ldr	r3, [pc, #188]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000532:	2203      	movs	r2, #3
 8000534:	63da      	str	r2, [r3, #60]	; 0x3c
    hfdcan1.Init.RxFifo0ElmtsNbr = 3;
 8000536:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000538:	2203      	movs	r2, #3
 800053a:	641a      	str	r2, [r3, #64]	; 0x40
    hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800053c:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 800053e:	2204      	movs	r2, #4
 8000540:	645a      	str	r2, [r3, #68]	; 0x44
    hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000544:	2200      	movs	r2, #0
 8000546:	649a      	str	r2, [r3, #72]	; 0x48
    hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000548:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 800054a:	2204      	movs	r2, #4
 800054c:	64da      	str	r2, [r3, #76]	; 0x4c
    hfdcan1.Init.RxBuffersNbr = 0;
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000550:	2200      	movs	r2, #0
 8000552:	651a      	str	r2, [r3, #80]	; 0x50
    hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000556:	2204      	movs	r2, #4
 8000558:	655a      	str	r2, [r3, #84]	; 0x54
    hfdcan1.Init.TxEventsNbr = 0;
 800055a:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 800055c:	2200      	movs	r2, #0
 800055e:	659a      	str	r2, [r3, #88]	; 0x58
    hfdcan1.Init.TxBuffersNbr = 0;
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000562:	2200      	movs	r2, #0
 8000564:	65da      	str	r2, [r3, #92]	; 0x5c
    hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000566:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000568:	2201      	movs	r2, #1
 800056a:	661a      	str	r2, [r3, #96]	; 0x60
    hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 800056e:	2200      	movs	r2, #0
 8000570:	665a      	str	r2, [r3, #100]	; 0x64
    hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 8000574:	2204      	movs	r2, #4
 8000576:	669a      	str	r2, [r3, #104]	; 0x68
    if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8000578:	481d      	ldr	r0, [pc, #116]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 800057a:	f000 fcc9 	bl	8000f10 <HAL_FDCAN_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_FDCAN1_Init+0xc0>
        Error_Handler();
 8000584:	f000 f8fa 	bl	800077c <Error_Handler>
#define ID2 0x0CFF148;
#define ID3 0x0CFF548;

    FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058c:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000592:	2302      	movs	r3, #2
 8000594:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000596:	2301      	movs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = ID1;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_FDCAN1_Init+0x130>)
 800059c:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x1FFFFFFF;
 800059e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80005a2:	617b      	str	r3, [r7, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80005aa:	f000 fe8f 	bl	80012cc <HAL_FDCAN_ConfigFilter>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_FDCAN1_Init+0xf0>
        Error_Handler();
 80005b4:	f000 f8e2 	bl	800077c <Error_Handler>
    }

    // Filter for ID2
    sFilterConfig.FilterID1 = ID2;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_FDCAN1_Init+0x134>)
 80005ba:	613b      	str	r3, [r7, #16]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80005bc:	463b      	mov	r3, r7
 80005be:	4619      	mov	r1, r3
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80005c2:	f000 fe83 	bl	80012cc <HAL_FDCAN_ConfigFilter>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_FDCAN1_Init+0x108>
        Error_Handler();
 80005cc:	f000 f8d6 	bl	800077c <Error_Handler>
    }

    // Filter for ID3
    sFilterConfig.FilterID1 = ID3;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_FDCAN1_Init+0x138>)
 80005d2:	613b      	str	r3, [r7, #16]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_FDCAN1_Init+0x128>)
 80005da:	f000 fe77 	bl	80012cc <HAL_FDCAN_ConfigFilter>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_FDCAN1_Init+0x120>
        Error_Handler();
 80005e4:	f000 f8ca 	bl	800077c <Error_Handler>
    }
    /* USER CODE END FDCAN1_Init 2 */
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2400002c 	.word	0x2400002c
 80005f4:	4000a000 	.word	0x4000a000
 80005f8:	00cff048 	.word	0x00cff048
 80005fc:	00cff148 	.word	0x00cff148
 8000600:	00cff548 	.word	0x00cff548

08000604 <MX_FDCAN2_Init>:
/**
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    /* USER CODE END FDCAN2_Init 0 */

    /* USER CODE BEGIN FDCAN2_Init 1 */

    /* USER CODE END FDCAN2_Init 1 */
    hfdcan2.Instance = FDCAN2;
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <MX_FDCAN2_Init+0xc8>)
 800060c:	601a      	str	r2, [r3, #0]
    hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000614:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
    hfdcan2.Init.AutoRetransmission = ENABLE;
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800061c:	2201      	movs	r2, #1
 800061e:	741a      	strb	r2, [r3, #16]
    hfdcan2.Init.TransmitPause = DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000622:	2200      	movs	r2, #0
 8000624:	745a      	strb	r2, [r3, #17]
    hfdcan2.Init.ProtocolException = DISABLE;
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000628:	2200      	movs	r2, #0
 800062a:	749a      	strb	r2, [r3, #18]
    hfdcan2.Init.NominalPrescaler = 1;
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
    hfdcan2.Init.NominalSyncJumpWidth = 13;
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000634:	220d      	movs	r2, #13
 8000636:	619a      	str	r2, [r3, #24]
    hfdcan2.Init.NominalTimeSeg1 = 86;
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800063a:	2256      	movs	r2, #86	; 0x56
 800063c:	61da      	str	r2, [r3, #28]
    hfdcan2.Init.NominalTimeSeg2 = 13;
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000640:	220d      	movs	r2, #13
 8000642:	621a      	str	r2, [r3, #32]
    hfdcan2.Init.DataPrescaler = 25;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000646:	2219      	movs	r2, #25
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
    hfdcan2.Init.DataSyncJumpWidth = 1;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800064c:	2201      	movs	r2, #1
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
    hfdcan2.Init.DataTimeSeg1 = 2;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000652:	2202      	movs	r2, #2
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
    hfdcan2.Init.DataTimeSeg2 = 1;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000658:	2201      	movs	r2, #1
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
    hfdcan2.Init.MessageRAMOffset = 1240;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800065e:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
    hfdcan2.Init.StdFiltersNbr = 0;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000666:	2200      	movs	r2, #0
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
    hfdcan2.Init.ExtFiltersNbr = 1;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800066c:	2201      	movs	r2, #1
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
    hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000672:	2200      	movs	r2, #0
 8000674:	641a      	str	r2, [r3, #64]	; 0x40
    hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000678:	2204      	movs	r2, #4
 800067a:	645a      	str	r2, [r3, #68]	; 0x44
    hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800067e:	2201      	movs	r2, #1
 8000680:	649a      	str	r2, [r3, #72]	; 0x48
    hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000684:	2204      	movs	r2, #4
 8000686:	64da      	str	r2, [r3, #76]	; 0x4c
    hfdcan2.Init.RxBuffersNbr = 0;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800068a:	2200      	movs	r2, #0
 800068c:	651a      	str	r2, [r3, #80]	; 0x50
    hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000690:	2204      	movs	r2, #4
 8000692:	655a      	str	r2, [r3, #84]	; 0x54
    hfdcan2.Init.TxEventsNbr = 0;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 8000696:	2200      	movs	r2, #0
 8000698:	659a      	str	r2, [r3, #88]	; 0x58
    hfdcan2.Init.TxBuffersNbr = 0;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 800069c:	2200      	movs	r2, #0
 800069e:	65da      	str	r2, [r3, #92]	; 0x5c
    hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60
    hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	665a      	str	r2, [r3, #100]	; 0x64
    hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 80006ae:	2204      	movs	r2, #4
 80006b0:	669a      	str	r2, [r3, #104]	; 0x68
    if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK) {
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_FDCAN2_Init+0xc4>)
 80006b4:	f000 fc2c 	bl	8000f10 <HAL_FDCAN_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_FDCAN2_Init+0xbe>
        Error_Handler();
 80006be:	f000 f85d 	bl	800077c <Error_Handler>
    }
    /* USER CODE BEGIN FDCAN2_Init 2 */

    /* USER CODE END FDCAN2_Init 2 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	240000cc 	.word	0x240000cc
 80006cc:	4000a400 	.word	0x4000a400

080006d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_GPIO_Init+0x50>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a10      	ldr	r2, [pc, #64]	; (8000720 <MX_GPIO_Init+0x50>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_GPIO_Init+0x50>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f003 0302 	and.w	r3, r3, #2
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_GPIO_Init+0x50>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a09      	ldr	r2, [pc, #36]	; (8000720 <MX_GPIO_Init+0x50>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_GPIO_Init+0x50>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	58024400 	.word	0x58024400

08000724 <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8000736:	f000 fb6f 	bl	8000e18 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800073a:	2301      	movs	r3, #1
 800073c:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800073e:	2300      	movs	r3, #0
 8000740:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x0;
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000746:	231f      	movs	r3, #31
 8000748:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 800074a:	2387      	movs	r3, #135	; 0x87
 800074c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800074e:	2300      	movs	r3, #0
 8000750:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000752:	2300      	movs	r3, #0
 8000754:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000756:	2301      	movs	r3, #1
 8000758:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800075a:	2301      	movs	r3, #1
 800075c:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000766:	463b      	mov	r3, r7
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fb8d 	bl	8000e88 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800076e:	2004      	movs	r0, #4
 8000770:	f000 fb6a 	bl	8000e48 <HAL_MPU_Enable>
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_MspInit+0x30>)
 8000790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x30>)
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x30>)
 80007a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	58024400 	.word	0x58024400

080007bc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0bc      	sub	sp, #240	; 0xf0
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	22c0      	movs	r2, #192	; 0xc0
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fcf9 	bl	80041d4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a57      	ldr	r2, [pc, #348]	; (8000944 <HAL_FDCAN_MspInit+0x188>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d151      	bne.n	8000890 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007f0:	f04f 0300 	mov.w	r3, #0
 80007f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80007f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	4618      	mov	r0, r3
 8000806:	f002 f977 	bl	8002af8 <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000810:	f7ff ffb4 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000814:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <HAL_FDCAN_MspInit+0x18c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a4b      	ldr	r2, [pc, #300]	; (8000948 <HAL_FDCAN_MspInit+0x18c>)
 800081c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800081e:	4b4a      	ldr	r3, [pc, #296]	; (8000948 <HAL_FDCAN_MspInit+0x18c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d10e      	bne.n	8000844 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000826:	4b49      	ldr	r3, [pc, #292]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 8000828:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800082c:	4a47      	ldr	r2, [pc, #284]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 800082e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000832:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000836:	4b45      	ldr	r3, [pc, #276]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 8000838:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800083c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b41      	ldr	r3, [pc, #260]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084a:	4a40      	ldr	r2, [pc, #256]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000854:	4b3d      	ldr	r3, [pc, #244]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 8000856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000862:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800087c:	2309      	movs	r3, #9
 800087e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000886:	4619      	mov	r1, r3
 8000888:	4831      	ldr	r0, [pc, #196]	; (8000950 <HAL_FDCAN_MspInit+0x194>)
 800088a:	f000 ffc1 	bl	8001810 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800088e:	e055      	b.n	800093c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a2f      	ldr	r2, [pc, #188]	; (8000954 <HAL_FDCAN_MspInit+0x198>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d150      	bne.n	800093c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800089a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800089e:	f04f 0300 	mov.w	r3, #0
 80008a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80008a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f920 	bl	8002af8 <HAL_RCCEx_PeriphCLKConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 80008be:	f7ff ff5d 	bl	800077c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <HAL_FDCAN_MspInit+0x18c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <HAL_FDCAN_MspInit+0x18c>)
 80008ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <HAL_FDCAN_MspInit+0x18c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d10e      	bne.n	80008f2 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 80008d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 80008dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 80008e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	4a14      	ldr	r2, [pc, #80]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_FDCAN_MspInit+0x190>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000910:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000914:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800092a:	2309      	movs	r3, #9
 800092c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000934:	4619      	mov	r1, r3
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <HAL_FDCAN_MspInit+0x19c>)
 8000938:	f000 ff6a 	bl	8001810 <HAL_GPIO_Init>
}
 800093c:	bf00      	nop
 800093e:	37f0      	adds	r7, #240	; 0xf0
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	4000a000 	.word	0x4000a000
 8000948:	240001b4 	.word	0x240001b4
 800094c:	58024400 	.word	0x58024400
 8000950:	58020000 	.word	0x58020000
 8000954:	4000a400 	.word	0x4000a400
 8000958:	58020400 	.word	0x58020400

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f926 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <SystemInit+0xe4>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a36      	ldr	r2, [pc, #216]	; (8000a94 <SystemInit+0xe4>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009c4:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <SystemInit+0xe8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 030f 	and.w	r3, r3, #15
 80009cc:	2b06      	cmp	r3, #6
 80009ce:	d807      	bhi.n	80009e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009d0:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <SystemInit+0xe8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f023 030f 	bic.w	r3, r3, #15
 80009d8:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <SystemInit+0xe8>)
 80009da:	f043 0307 	orr.w	r3, r3, #7
 80009de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <SystemInit+0xec>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <SystemInit+0xec>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <SystemInit+0xec>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <SystemInit+0xec>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4929      	ldr	r1, [pc, #164]	; (8000a9c <SystemInit+0xec>)
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <SystemInit+0xf0>)
 80009fa:	4013      	ands	r3, r2
 80009fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SystemInit+0xe8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d007      	beq.n	8000a1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a0a:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <SystemInit+0xe8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f023 030f 	bic.w	r3, r3, #15
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <SystemInit+0xe8>)
 8000a14:	f043 0307 	orr.w	r3, r3, #7
 8000a18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <SystemInit+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <SystemInit+0xec>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <SystemInit+0xec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <SystemInit+0xec>)
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <SystemInit+0xf4>)
 8000a30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <SystemInit+0xec>)
 8000a34:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <SystemInit+0xf8>)
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <SystemInit+0xec>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <SystemInit+0xfc>)
 8000a3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <SystemInit+0xec>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <SystemInit+0xec>)
 8000a46:	4a19      	ldr	r2, [pc, #100]	; (8000aac <SystemInit+0xfc>)
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <SystemInit+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <SystemInit+0xec>)
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <SystemInit+0xfc>)
 8000a54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <SystemInit+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <SystemInit+0xec>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <SystemInit+0xec>)
 8000a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <SystemInit+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <SystemInit+0x100>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <SystemInit+0x104>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a7a:	d202      	bcs.n	8000a82 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <SystemInit+0x108>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <SystemInit+0x10c>)
 8000a84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00
 8000a98:	52002000 	.word	0x52002000
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000aa4:	02020200 	.word	0x02020200
 8000aa8:	01ff0000 	.word	0x01ff0000
 8000aac:	01010280 	.word	0x01010280
 8000ab0:	5c001000 	.word	0x5c001000
 8000ab4:	ffff0000 	.word	0xffff0000
 8000ab8:	51008108 	.word	0x51008108
 8000abc:	52004000 	.word	0x52004000

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac4:	f7ff ff74 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f003 fb79 	bl	80041e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fbf1 	bl	80002d8 <main>
  bx  lr
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000afc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b00:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b04:	080042c4 	.word	0x080042c4
  ldr r2, =_sbss
 8000b08:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b0c:	240001bc 	.word	0x240001bc

08000b10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC3_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f000 f94a 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b20:	f001 fe70 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8000b24:	4602      	mov	r2, r0
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_Init+0x68>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	0a1b      	lsrs	r3, r3, #8
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	4913      	ldr	r1, [pc, #76]	; (8000b80 <HAL_Init+0x6c>)
 8000b32:	5ccb      	ldrb	r3, [r1, r3]
 8000b34:	f003 031f 	and.w	r3, r3, #31
 8000b38:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_Init+0x68>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_Init+0x6c>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	f003 031f 	and.w	r3, r3, #31
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	fa22 f303 	lsr.w	r3, r2, r3
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_Init+0x70>)
 8000b56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <HAL_Init+0x74>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f000 f814 	bl	8000b8c <HAL_InitTick>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e002      	b.n	8000b74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6e:	f7ff fe0b 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	080042ac 	.word	0x080042ac
 8000b84:	24000004 	.word	0x24000004
 8000b88:	24000000 	.word	0x24000000

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_InitTick+0x60>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e021      	b.n	8000be4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_InitTick+0x64>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_InitTick+0x60>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f921 	bl	8000dfe <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f000 f8f9 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x68>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2400000c 	.word	0x2400000c
 8000bf0:	24000000 	.word	0x24000000
 8000bf4:	24000008 	.word	0x24000008

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2400000c 	.word	0x2400000c
 8000c1c:	240001b8 	.word	0x240001b8

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	240001b8 	.word	0x240001b8

08000c38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetREVID+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	0c1b      	lsrs	r3, r3, #16
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	5c001000 	.word	0x5c001000

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	05fa0000 	.word	0x05fa0000

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb2 	bl	8000d70 <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e1c:	f3bf 8f5f 	dmb	sy
}
 8000e20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <HAL_MPU_Disable+0x28>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_MPU_Disable+0x28>)
 8000e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_MPU_Disable+0x2c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00
 8000e44:	e000ed90 	.word	0xe000ed90

08000e48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_MPU_Enable+0x38>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_MPU_Enable+0x3c>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_MPU_Enable+0x3c>)
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e64:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e66:	f3bf 8f4f 	dsb	sy
}
 8000e6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e6c:	f3bf 8f6f 	isb	sy
}
 8000e70:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed90 	.word	0xe000ed90
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	785a      	ldrb	r2, [r3, #1]
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_MPU_ConfigRegion+0x84>)
 8000e96:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d029      	beq.n	8000ef4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_MPU_ConfigRegion+0x84>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7b1b      	ldrb	r3, [r3, #12]
 8000eac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7adb      	ldrb	r3, [r3, #11]
 8000eb2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000eb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7a9b      	ldrb	r3, [r3, #10]
 8000eba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ebc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7b5b      	ldrb	r3, [r3, #13]
 8000ec2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ec4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b9b      	ldrb	r3, [r3, #14]
 8000eca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ecc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7bdb      	ldrb	r3, [r3, #15]
 8000ed2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ed4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7a5b      	ldrb	r3, [r3, #9]
 8000eda:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000edc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7a1b      	ldrb	r3, [r3, #8]
 8000ee2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ee4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000eee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ef0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000ef2:	e005      	b.n	8000f00 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_MPU_ConfigRegion+0x84>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_MPU_ConfigRegion+0x84>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed90 	.word	0xe000ed90

08000f10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b098      	sub	sp, #96	; 0x60
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000f18:	4a84      	ldr	r2, [pc, #528]	; (800112c <HAL_FDCAN_Init+0x21c>)
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4611      	mov	r1, r2
 8000f20:	224c      	movs	r2, #76	; 0x4c
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f982 	bl	800422c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1c6      	b.n	80012c0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a7e      	ldr	r2, [pc, #504]	; (8001130 <HAL_FDCAN_Init+0x220>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d106      	bne.n	8000f4a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f44:	461a      	mov	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d106      	bne.n	8000f64 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fc2c 	bl	80007bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0210 	bic.w	r2, r2, #16
 8000f72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f74:	f7ff fe54 	bl	8000c20 <HAL_GetTick>
 8000f78:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f7a:	e014      	b.n	8000fa6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f7c:	f7ff fe50 	bl	8000c20 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d90d      	bls.n	8000fa6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e18c      	b.n	80012c0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d0e3      	beq.n	8000f7c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff fe2c 	bl	8000c20 <HAL_GetTick>
 8000fc8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000fca:	e014      	b.n	8000ff6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fcc:	f7ff fe28 	bl	8000c20 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b0a      	cmp	r3, #10
 8000fd8:	d90d      	bls.n	8000ff6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fe0:	f043 0201 	orr.w	r2, r3, #1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e164      	b.n	80012c0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0e3      	beq.n	8000fcc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0202 	orr.w	r2, r2, #2
 8001012:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7c1b      	ldrb	r3, [r3, #16]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d108      	bne.n	800102e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	699a      	ldr	r2, [r3, #24]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800102a:	619a      	str	r2, [r3, #24]
 800102c:	e007      	b.n	800103e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800103c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7c5b      	ldrb	r3, [r3, #17]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	699a      	ldr	r2, [r3, #24]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001054:	619a      	str	r2, [r3, #24]
 8001056:	e007      	b.n	8001068 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001066:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7c9b      	ldrb	r3, [r3, #18]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d108      	bne.n	8001082 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	699a      	ldr	r2, [r3, #24]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800107e:	619a      	str	r2, [r3, #24]
 8001080:	e007      	b.n	8001092 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	699a      	ldr	r2, [r3, #24]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001090:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	699a      	ldr	r2, [r3, #24]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80010b6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0210 	bic.w	r2, r2, #16
 80010c6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d108      	bne.n	80010e2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	699a      	ldr	r2, [r3, #24]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0204 	orr.w	r2, r2, #4
 80010de:	619a      	str	r2, [r3, #24]
 80010e0:	e030      	b.n	8001144 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d02c      	beq.n	8001144 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d020      	beq.n	8001134 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001100:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0210 	orr.w	r2, r2, #16
 8001110:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d114      	bne.n	8001144 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0220 	orr.w	r2, r2, #32
 8001128:	619a      	str	r2, [r3, #24]
 800112a:	e00b      	b.n	8001144 <HAL_FDCAN_Init+0x234>
 800112c:	08004260 	.word	0x08004260
 8001130:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0220 	orr.w	r2, r2, #32
 8001142:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	3b01      	subs	r3, #1
 800114a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	3b01      	subs	r3, #1
 8001152:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001154:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800115c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	3b01      	subs	r3, #1
 8001166:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800116c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800116e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001178:	d115      	bne.n	80011a6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	3b01      	subs	r3, #1
 8001186:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001188:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	3b01      	subs	r3, #1
 8001190:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001192:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	3b01      	subs	r3, #1
 800119c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80011a2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80011a4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00a      	beq.n	80011c4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011cc:	4413      	add	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d011      	beq.n	80011f6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80011da:	f023 0107 	bic.w	r1, r3, #7
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	3360      	adds	r3, #96	; 0x60
 80011e6:	443b      	add	r3, r7
 80011e8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d011      	beq.n	8001222 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001206:	f023 0107 	bic.w	r1, r3, #7
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	3360      	adds	r3, #96	; 0x60
 8001212:	443b      	add	r3, r7
 8001214:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001226:	2b00      	cmp	r3, #0
 8001228:	d012      	beq.n	8001250 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001232:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	3360      	adds	r3, #96	; 0x60
 800123e:	443b      	add	r3, r7
 8001240:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001244:	011a      	lsls	r2, r3, #4
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001254:	2b00      	cmp	r3, #0
 8001256:	d012      	beq.n	800127e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001260:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	3360      	adds	r3, #96	; 0x60
 800126c:	443b      	add	r3, r7
 800126e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001272:	021a      	lsls	r2, r3, #8
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <HAL_FDCAN_Init+0x3b8>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d107      	bne.n	8001298 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f022 0203 	bic.w	r2, r2, #3
 8001296:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f927 	bl	8001504 <FDCAN_CalcultateRamBlockAddresses>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80012bc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3760      	adds	r7, #96	; 0x60
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	4000a000 	.word	0x4000a000

080012cc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012dc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d002      	beq.n	80012ea <HAL_FDCAN_ConfigFilter+0x1e>
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d157      	bne.n	800139a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d12b      	bne.n	800134a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d10d      	bne.n	8001316 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001306:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800130c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800130e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e00e      	b.n	8001334 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001322:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800132a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001330:	4313      	orrs	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e025      	b.n	8001396 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	075a      	lsls	r2, r3, #29
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b07      	cmp	r3, #7
 800135e:	d103      	bne.n	8001368 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	e006      	b.n	8001376 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	079a      	lsls	r2, r3, #30
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3304      	adds	r3, #4
 800138e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e008      	b.n	80013ac <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013a0:	f043 0202 	orr.w	r2, r3, #2
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
  }
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d111      	bne.n	80013f0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e008      	b.n	8001402 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013f6:	f043 0204 	orr.w	r2, r3, #4
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
  }
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001422:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d002      	beq.n	8001430 <HAL_FDCAN_ActivateNotification+0x20>
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d155      	bne.n	80014dc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d108      	bne.n	8001450 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	65da      	str	r2, [r3, #92]	; 0x5c
 800144e:	e014      	b.n	800147a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	4013      	ands	r3, r2
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	429a      	cmp	r2, r3
 800145e:	d108      	bne.n	8001472 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0202 	orr.w	r2, r2, #2
 800146e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001470:	e003      	b.n	800147a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2203      	movs	r2, #3
 8001478:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	430a      	orrs	r2, r1
 8001494:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_FDCAN_ActivateNotification+0xec>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	430b      	orrs	r3, r1
 80014c8:	6553      	str	r3, [r2, #84]	; 0x54
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_FDCAN_ActivateNotification+0xf0>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	0f9b      	lsrs	r3, r3, #30
 80014d2:	490b      	ldr	r1, [pc, #44]	; (8001500 <HAL_FDCAN_ActivateNotification+0xf0>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e008      	b.n	80014ee <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014e2:	f043 0202 	orr.w	r2, r3, #2
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
  }
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	3fcfffff 	.word	0x3fcfffff
 8001500:	4000a800 	.word	0x4000a800

08001504 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001510:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800151a:	4ba7      	ldr	r3, [pc, #668]	; (80017b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800151c:	4013      	ands	r3, r2
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	0091      	lsls	r1, r2, #2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	430b      	orrs	r3, r1
 8001528:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001534:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	4413      	add	r3, r2
 8001550:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800155a:	4b97      	ldr	r3, [pc, #604]	; (80017b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800155c:	4013      	ands	r3, r2
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	0091      	lsls	r1, r2, #2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	430b      	orrs	r3, r1
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001574:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	4413      	add	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800159c:	4b86      	ldr	r3, [pc, #536]	; (80017b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800159e:	4013      	ands	r3, r2
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	0091      	lsls	r1, r2, #2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80015b6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	041a      	lsls	r2, r3, #16
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	4413      	add	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015e4:	4b74      	ldr	r3, [pc, #464]	; (80017b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	0091      	lsls	r1, r2, #2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	430b      	orrs	r3, r1
 80015f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015fe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001606:	041a      	lsls	r2, r3, #16
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4413      	add	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800162c:	4b62      	ldr	r3, [pc, #392]	; (80017b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800162e:	4013      	ands	r3, r2
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	0091      	lsls	r1, r2, #2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	430b      	orrs	r3, r1
 800163a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001658:	4b57      	ldr	r3, [pc, #348]	; (80017b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800165a:	4013      	ands	r3, r2
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	0091      	lsls	r1, r2, #2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	430b      	orrs	r3, r1
 8001666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001672:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	041a      	lsls	r2, r3, #16
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	4413      	add	r3, r2
 8001690:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800169c:	4013      	ands	r3, r2
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	0091      	lsls	r1, r2, #2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	430b      	orrs	r3, r1
 80016a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016b4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016d0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e8:	4b34      	ldr	r3, [pc, #208]	; (80017bc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80016ea:	4413      	add	r3, r2
 80016ec:	009a      	lsls	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	441a      	add	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	441a      	add	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	441a      	add	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	441a      	add	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	441a      	add	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	441a      	add	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	441a      	add	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	441a      	add	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d915      	bls.n	80017e0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80017b4:	e006      	b.n	80017c4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80017b6:	bf00      	nop
 80017b8:	ffff0003 	.word	0xffff0003
 80017bc:	10002b00 	.word	0x10002b00
 80017c0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017ca:	f043 0220 	orr.w	r2, r3, #32
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2203      	movs	r2, #3
 80017d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e010      	b.n	8001802 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e005      	b.n	80017f4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3304      	adds	r3, #4
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3f3      	bcc.n	80017e8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800181e:	4b89      	ldr	r3, [pc, #548]	; (8001a44 <HAL_GPIO_Init+0x234>)
 8001820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001822:	e194      	b.n	8001b4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8186 	beq.w	8001b48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d005      	beq.n	8001854 <HAL_GPIO_Init+0x44>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 0201 	and.w	r2, r3, #1
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d017      	beq.n	80018f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d123      	bne.n	8001946 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	69b9      	ldr	r1, [r7, #24]
 8001942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0203 	and.w	r2, r3, #3
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80e0 	beq.w	8001b48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_GPIO_Init+0x238>)
 800198a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800198e:	4a2e      	ldr	r2, [pc, #184]	; (8001a48 <HAL_GPIO_Init+0x238>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_GPIO_Init+0x238>)
 800199a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a6:	4a29      	ldr	r2, [pc, #164]	; (8001a4c <HAL_GPIO_Init+0x23c>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <HAL_GPIO_Init+0x240>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d052      	beq.n	8001a78 <HAL_GPIO_Init+0x268>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <HAL_GPIO_Init+0x244>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <HAL_GPIO_Init+0x22e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <HAL_GPIO_Init+0x248>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d02b      	beq.n	8001a3a <HAL_GPIO_Init+0x22a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_GPIO_Init+0x24c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d025      	beq.n	8001a36 <HAL_GPIO_Init+0x226>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <HAL_GPIO_Init+0x250>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01f      	beq.n	8001a32 <HAL_GPIO_Init+0x222>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <HAL_GPIO_Init+0x254>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d019      	beq.n	8001a2e <HAL_GPIO_Init+0x21e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <HAL_GPIO_Init+0x258>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0x21a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_GPIO_Init+0x25c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00d      	beq.n	8001a26 <HAL_GPIO_Init+0x216>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a18      	ldr	r2, [pc, #96]	; (8001a70 <HAL_GPIO_Init+0x260>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d007      	beq.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_GPIO_Init+0x264>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_GPIO_Init+0x20e>
 8001a1a:	2309      	movs	r3, #9
 8001a1c:	e02d      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a1e:	230a      	movs	r3, #10
 8001a20:	e02b      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a22:	2308      	movs	r3, #8
 8001a24:	e029      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e027      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e025      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e023      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e021      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e01f      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e01d      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e01b      	b.n	8001a7a <HAL_GPIO_Init+0x26a>
 8001a42:	bf00      	nop
 8001a44:	58000080 	.word	0x58000080
 8001a48:	58024400 	.word	0x58024400
 8001a4c:	58000400 	.word	0x58000400
 8001a50:	58020000 	.word	0x58020000
 8001a54:	58020400 	.word	0x58020400
 8001a58:	58020800 	.word	0x58020800
 8001a5c:	58020c00 	.word	0x58020c00
 8001a60:	58021000 	.word	0x58021000
 8001a64:	58021400 	.word	0x58021400
 8001a68:	58021800 	.word	0x58021800
 8001a6c:	58021c00 	.word	0x58021c00
 8001a70:	58022000 	.word	0x58022000
 8001a74:	58022400 	.word	0x58022400
 8001a78:	2300      	movs	r3, #0
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a8a:	4938      	ldr	r1, [pc, #224]	; (8001b6c <HAL_GPIO_Init+0x35c>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f47f ae63 	bne.w	8001824 <HAL_GPIO_Init+0x14>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3724      	adds	r7, #36	; 0x24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	58000400 	.word	0x58000400

08001b70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_PWREx_ConfigSupply+0x70>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d00a      	beq.n	8001b9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_PWREx_ConfigSupply+0x70>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d001      	beq.n	8001b96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e01f      	b.n	8001bd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e01d      	b.n	8001bd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_PWREx_ConfigSupply+0x70>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	490f      	ldr	r1, [pc, #60]	; (8001be0 <HAL_PWREx_ConfigSupply+0x70>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001baa:	f7ff f839 	bl	8000c20 <HAL_GetTick>
 8001bae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bb0:	e009      	b.n	8001bc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bb2:	f7ff f835 	bl	8000c20 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bc0:	d901      	bls.n	8001bc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e007      	b.n	8001bd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_PWREx_ConfigSupply+0x70>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	58024800 	.word	0x58024800

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f000 bc48 	b.w	8002488 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8088 	beq.w	8001d16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b99      	ldr	r3, [pc, #612]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c10:	4b96      	ldr	r3, [pc, #600]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d007      	beq.n	8001c2c <HAL_RCC_OscConfig+0x48>
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	2b18      	cmp	r3, #24
 8001c20:	d111      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62>
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d10c      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	4b8f      	ldr	r3, [pc, #572]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d06d      	beq.n	8001d14 <HAL_RCC_OscConfig+0x130>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d169      	bne.n	8001d14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f000 bc21 	b.w	8002488 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x7a>
 8001c50:	4b86      	ldr	r3, [pc, #536]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a85      	ldr	r2, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02e      	b.n	8001cbc <HAL_RCC_OscConfig+0xd8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x9c>
 8001c66:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a80      	ldr	r2, [pc, #512]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b7e      	ldr	r3, [pc, #504]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7d      	ldr	r2, [pc, #500]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xd8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xc0>
 8001c8a:	4b78      	ldr	r3, [pc, #480]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a77      	ldr	r2, [pc, #476]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a74      	ldr	r2, [pc, #464]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xd8>
 8001ca4:	4b71      	ldr	r3, [pc, #452]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a70      	ldr	r2, [pc, #448]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6d      	ldr	r2, [pc, #436]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7fe ffac 	bl	8000c20 <HAL_GetTick>
 8001cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7fe ffa8 	bl	8000c20 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e3d4      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe8>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7fe ff98 	bl	8000c20 <HAL_GetTick>
 8001cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7fe ff94 	bl	8000c20 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e3c0      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d06:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x110>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80ca 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d24:	4b51      	ldr	r3, [pc, #324]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d2e:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_RCC_OscConfig+0x166>
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	2b18      	cmp	r3, #24
 8001d3e:	d156      	bne.n	8001dee <HAL_RCC_OscConfig+0x20a>
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d151      	bne.n	8001dee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d4a:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x17e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e392      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d62:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 0219 	bic.w	r2, r3, #25
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	493f      	ldr	r1, [pc, #252]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe ff54 	bl	8000c20 <HAL_GetTick>
 8001d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7fe ff50 	bl	8000c20 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e37c      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	f7fe ff4d 	bl	8000c38 <HAL_GetREVID>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d817      	bhi.n	8001dd8 <HAL_RCC_OscConfig+0x1f4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b40      	cmp	r3, #64	; 0x40
 8001dae:	d108      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001db8:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc0:	e07a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	031b      	lsls	r3, r3, #12
 8001dd0:	4926      	ldr	r1, [pc, #152]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd6:	e06f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	4921      	ldr	r1, [pc, #132]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dec:	e064      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d047      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0219 	bic.w	r2, r3, #25
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	491a      	ldr	r1, [pc, #104]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe ff0a 	bl	8000c20 <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7fe ff06 	bl	8000c20 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e332      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	f7fe ff03 	bl	8000c38 <HAL_GetREVID>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d819      	bhi.n	8001e70 <HAL_RCC_OscConfig+0x28c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b40      	cmp	r3, #64	; 0x40
 8001e42:	d108      	bne.n	8001e56 <HAL_RCC_OscConfig+0x272>
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6053      	str	r3, [r2, #4]
 8001e54:	e030      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	031b      	lsls	r3, r3, #12
 8001e64:	4901      	ldr	r1, [pc, #4]	; (8001e6c <HAL_RCC_OscConfig+0x288>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
 8001e6a:	e025      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	4b9a      	ldr	r3, [pc, #616]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	4997      	ldr	r1, [pc, #604]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b95      	ldr	r3, [pc, #596]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a94      	ldr	r2, [pc, #592]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7fe fec5 	bl	8000c20 <HAL_GetTick>
 8001e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7fe fec1 	bl	8000c20 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e2ed      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eac:	4b8b      	ldr	r3, [pc, #556]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80a9 	beq.w	8002018 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec6:	4b85      	ldr	r3, [pc, #532]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ece:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ed0:	4b82      	ldr	r3, [pc, #520]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d007      	beq.n	8001eec <HAL_RCC_OscConfig+0x308>
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b18      	cmp	r3, #24
 8001ee0:	d13a      	bne.n	8001f58 <HAL_RCC_OscConfig+0x374>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d135      	bne.n	8001f58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eec:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_OscConfig+0x320>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e2c1      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f04:	f7fe fe98 	bl	8000c38 <HAL_GetREVID>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d817      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x35e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d108      	bne.n	8001f2c <HAL_RCC_OscConfig+0x348>
 8001f1a:	4b70      	ldr	r3, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f22:	4a6e      	ldr	r2, [pc, #440]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f28:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f2a:	e075      	b.n	8002018 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	069b      	lsls	r3, r3, #26
 8001f3a:	4968      	ldr	r1, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f40:	e06a      	b.n	8002018 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f42:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	061b      	lsls	r3, r3, #24
 8001f50:	4962      	ldr	r1, [pc, #392]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f56:	e05f      	b.n	8002018 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d042      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f60:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fe58 	bl	8000c20 <HAL_GetTick>
 8001f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f74:	f7fe fe54 	bl	8000c20 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e280      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f86:	4b55      	ldr	r3, [pc, #340]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f92:	f7fe fe51 	bl	8000c38 <HAL_GetREVID>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d817      	bhi.n	8001fd0 <HAL_RCC_OscConfig+0x3ec>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d108      	bne.n	8001fba <HAL_RCC_OscConfig+0x3d6>
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fb6:	6053      	str	r3, [r2, #4]
 8001fb8:	e02e      	b.n	8002018 <HAL_RCC_OscConfig+0x434>
 8001fba:	4b48      	ldr	r3, [pc, #288]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	069b      	lsls	r3, r3, #26
 8001fc8:	4944      	ldr	r1, [pc, #272]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
 8001fce:	e023      	b.n	8002018 <HAL_RCC_OscConfig+0x434>
 8001fd0:	4b42      	ldr	r3, [pc, #264]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	061b      	lsls	r3, r3, #24
 8001fde:	493f      	ldr	r1, [pc, #252]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
 8001fe4:	e018      	b.n	8002018 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a3c      	ldr	r2, [pc, #240]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fe15 	bl	8000c20 <HAL_GetTick>
 8001ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fe11 	bl	8000c20 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e23d      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800200c:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d036      	beq.n	8002092 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d019      	beq.n	8002060 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 800202e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002030:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7fe fdf2 	bl	8000c20 <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe fdee 	bl	8000c20 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e21a      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002052:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8002054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x45c>
 800205e:	e018      	b.n	8002092 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8002062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe fdd8 	bl	8000c20 <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fdd4 	bl	8000c20 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e200      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	d039      	beq.n	8002112 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01c      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020b2:	f7fe fdb5 	bl	8000c20 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ba:	f7fe fdb1 	bl	8000c20 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1dd      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_RCC_OscConfig+0x4f8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x4d6>
 80020d8:	e01b      	b.n	8002112 <HAL_RCC_OscConfig+0x52e>
 80020da:	bf00      	nop
 80020dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020e0:	4b9b      	ldr	r3, [pc, #620]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a9a      	ldr	r2, [pc, #616]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80020e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020ec:	f7fe fd98 	bl	8000c20 <HAL_GetTick>
 80020f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f4:	f7fe fd94 	bl	8000c20 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1c0      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002106:	4b92      	ldr	r3, [pc, #584]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8081 	beq.w	8002222 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002120:	4b8c      	ldr	r3, [pc, #560]	; (8002354 <HAL_RCC_OscConfig+0x770>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a8b      	ldr	r2, [pc, #556]	; (8002354 <HAL_RCC_OscConfig+0x770>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212c:	f7fe fd78 	bl	8000c20 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7fe fd74 	bl	8000c20 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1a0      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002146:	4b83      	ldr	r3, [pc, #524]	; (8002354 <HAL_RCC_OscConfig+0x770>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x584>
 800215a:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a7c      	ldr	r2, [pc, #496]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	e02d      	b.n	80021c4 <HAL_RCC_OscConfig+0x5e0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x5a6>
 8002170:	4b77      	ldr	r3, [pc, #476]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a76      	ldr	r2, [pc, #472]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	4b74      	ldr	r3, [pc, #464]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a73      	ldr	r2, [pc, #460]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x5e0>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c8>
 8002192:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a6e      	ldr	r2, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a6b      	ldr	r2, [pc, #428]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x5e0>
 80021ac:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a67      	ldr	r2, [pc, #412]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	4b65      	ldr	r3, [pc, #404]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a64      	ldr	r2, [pc, #400]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe fd28 	bl	8000c20 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe fd24 	bl	8000c20 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e14e      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ea:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ee      	beq.n	80021d4 <HAL_RCC_OscConfig+0x5f0>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7fe fd12 	bl	8000c20 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7fe fd0e 	bl	8000c20 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e138      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002216:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ee      	bne.n	8002200 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 812d 	beq.w	8002486 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800222c:	4b48      	ldr	r3, [pc, #288]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002234:	2b18      	cmp	r3, #24
 8002236:	f000 80bd 	beq.w	80023b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b02      	cmp	r3, #2
 8002240:	f040 809e 	bne.w	8002380 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a41      	ldr	r2, [pc, #260]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800224a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fce6 	bl	8000c20 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fce2 	bl	8000c20 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e10e      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227a:	4b37      	ldr	r3, [pc, #220]	; (8002358 <HAL_RCC_OscConfig+0x774>)
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	430a      	orrs	r2, r1
 800228a:	4931      	ldr	r1, [pc, #196]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	628b      	str	r3, [r1, #40]	; 0x28
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	3b01      	subs	r3, #1
 8002296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229e:	3b01      	subs	r3, #1
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	3b01      	subs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	3b01      	subs	r3, #1
 80022ba:	061b      	lsls	r3, r3, #24
 80022bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022c0:	4923      	ldr	r1, [pc, #140]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	4a21      	ldr	r2, [pc, #132]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80022d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_RCC_OscConfig+0x778>)
 80022d8:	4013      	ands	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022de:	00d2      	lsls	r2, r2, #3
 80022e0:	491b      	ldr	r1, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f023 020c 	bic.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4917      	ldr	r1, [pc, #92]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f023 0202 	bic.w	r2, r3, #2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	4912      	ldr	r1, [pc, #72]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800231c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002320:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	4a07      	ldr	r2, [pc, #28]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_RCC_OscConfig+0x76c>)
 8002340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fc6b 	bl	8000c20 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800234c:	e011      	b.n	8002372 <HAL_RCC_OscConfig+0x78e>
 800234e:	bf00      	nop
 8002350:	58024400 	.word	0x58024400
 8002354:	58024800 	.word	0x58024800
 8002358:	fffffc0c 	.word	0xfffffc0c
 800235c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe fc5e 	bl	8000c20 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e08a      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x77c>
 800237e:	e082      	b.n	8002486 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a42      	ldr	r2, [pc, #264]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 8002386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fc48 	bl	8000c20 <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fc44 	bl	8000c20 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e070      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023a6:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x7b0>
 80023b2:	e068      	b.n	8002486 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023ba:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d031      	beq.n	800242c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0203 	and.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d12a      	bne.n	800242c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d122      	bne.n	800242c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d11a      	bne.n	800242c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	0a5b      	lsrs	r3, r3, #9
 80023fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002402:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d111      	bne.n	800242c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	0c1b      	lsrs	r3, r3, #16
 800240c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d108      	bne.n	800242c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	0e1b      	lsrs	r3, r3, #24
 800241e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e02b      	b.n	8002488 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800243a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	429a      	cmp	r2, r3
 8002444:	d01f      	beq.n	8002486 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002452:	f7fe fbe5 	bl	8000c20 <HAL_GetTick>
 8002456:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002458:	bf00      	nop
 800245a:	f7fe fbe1 	bl	8000c20 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	4293      	cmp	r3, r2
 8002464:	d0f9      	beq.n	800245a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 8002468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RCC_OscConfig+0x8b0>)
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002472:	00d2      	lsls	r2, r2, #3
 8002474:	4906      	ldr	r1, [pc, #24]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 8002476:	4313      	orrs	r3, r2
 8002478:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_RCC_OscConfig+0x8ac>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3730      	adds	r7, #48	; 0x30
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	58024400 	.word	0x58024400
 8002494:	ffff0007 	.word	0xffff0007

08002498 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e19c      	b.n	80027e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b8a      	ldr	r3, [pc, #552]	; (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b87      	ldr	r3, [pc, #540]	; (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 020f 	bic.w	r2, r3, #15
 80024c2:	4985      	ldr	r1, [pc, #532]	; (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b83      	ldr	r3, [pc, #524]	; (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e184      	b.n	80027e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	4b7b      	ldr	r3, [pc, #492]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d908      	bls.n	800250a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024f8:	4b78      	ldr	r3, [pc, #480]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	4975      	ldr	r1, [pc, #468]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002506:	4313      	orrs	r3, r2
 8002508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	4b70      	ldr	r3, [pc, #448]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002522:	429a      	cmp	r2, r3
 8002524:	d908      	bls.n	8002538 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002526:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	496a      	ldr	r1, [pc, #424]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002534:	4313      	orrs	r3, r2
 8002536:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	4b64      	ldr	r3, [pc, #400]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002550:	429a      	cmp	r2, r3
 8002552:	d908      	bls.n	8002566 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002554:	4b61      	ldr	r3, [pc, #388]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	495e      	ldr	r1, [pc, #376]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002562:	4313      	orrs	r3, r2
 8002564:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800257e:	429a      	cmp	r2, r3
 8002580:	d908      	bls.n	8002594 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002582:	4b56      	ldr	r3, [pc, #344]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4953      	ldr	r1, [pc, #332]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002590:	4313      	orrs	r3, r2
 8002592:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d010      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4b4d      	ldr	r3, [pc, #308]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d908      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f023 020f 	bic.w	r2, r3, #15
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4947      	ldr	r1, [pc, #284]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d055      	beq.n	800267a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025ce:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4940      	ldr	r1, [pc, #256]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025e8:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d121      	bne.n	8002638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0f6      	b.n	80027e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002600:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d115      	bne.n	8002638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0ea      	b.n	80027e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d107      	bne.n	8002628 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002618:	4b30      	ldr	r3, [pc, #192]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0de      	b.n	80027e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002628:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0d6      	b.n	80027e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f023 0207 	bic.w	r2, r3, #7
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4925      	ldr	r1, [pc, #148]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002646:	4313      	orrs	r3, r2
 8002648:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264a:	f7fe fae9 	bl	8000c20 <HAL_GetTick>
 800264e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002650:	e00a      	b.n	8002668 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002652:	f7fe fae5 	bl	8000c20 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0be      	b.n	80027e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	429a      	cmp	r2, r3
 8002678:	d1eb      	bne.n	8002652 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d010      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	429a      	cmp	r2, r3
 8002694:	d208      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f023 020f 	bic.w	r2, r3, #15
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	490e      	ldr	r1, [pc, #56]	; (80026dc <HAL_RCC_ClockConfig+0x244>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d214      	bcs.n	80026e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 020f 	bic.w	r2, r3, #15
 80026be:	4906      	ldr	r1, [pc, #24]	; (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e086      	b.n	80027e6 <HAL_RCC_ClockConfig+0x34e>
 80026d8:	52002000 	.word	0x52002000
 80026dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d208      	bcs.n	800270e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026fc:	4b3c      	ldr	r3, [pc, #240]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4939      	ldr	r1, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 800270a:	4313      	orrs	r3, r2
 800270c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d010      	beq.n	800273c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002726:	429a      	cmp	r2, r3
 8002728:	d208      	bcs.n	800273c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	492e      	ldr	r1, [pc, #184]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 8002738:	4313      	orrs	r3, r2
 800273a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002754:	429a      	cmp	r2, r3
 8002756:	d208      	bcs.n	800276a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4922      	ldr	r1, [pc, #136]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 8002766:	4313      	orrs	r3, r2
 8002768:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002782:	429a      	cmp	r2, r3
 8002784:	d208      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4917      	ldr	r1, [pc, #92]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 8002794:	4313      	orrs	r3, r2
 8002796:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002798:	f000 f834 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	4912      	ldr	r1, [pc, #72]	; (80027f4 <HAL_RCC_ClockConfig+0x35c>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_RCC_ClockConfig+0x358>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <HAL_RCC_ClockConfig+0x35c>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_RCC_ClockConfig+0x360>)
 80027ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x364>)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x368>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe f9d6 	bl	8000b8c <HAL_InitTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	58024400 	.word	0x58024400
 80027f4:	080042ac 	.word	0x080042ac
 80027f8:	24000004 	.word	0x24000004
 80027fc:	24000000 	.word	0x24000000
 8002800:	24000008 	.word	0x24000008

08002804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280a:	4bb3      	ldr	r3, [pc, #716]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002812:	2b18      	cmp	r3, #24
 8002814:	f200 8155 	bhi.w	8002ac2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002818:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <HAL_RCC_GetSysClockFreq+0x1c>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002885 	.word	0x08002885
 8002824:	08002ac3 	.word	0x08002ac3
 8002828:	08002ac3 	.word	0x08002ac3
 800282c:	08002ac3 	.word	0x08002ac3
 8002830:	08002ac3 	.word	0x08002ac3
 8002834:	08002ac3 	.word	0x08002ac3
 8002838:	08002ac3 	.word	0x08002ac3
 800283c:	08002ac3 	.word	0x08002ac3
 8002840:	080028ab 	.word	0x080028ab
 8002844:	08002ac3 	.word	0x08002ac3
 8002848:	08002ac3 	.word	0x08002ac3
 800284c:	08002ac3 	.word	0x08002ac3
 8002850:	08002ac3 	.word	0x08002ac3
 8002854:	08002ac3 	.word	0x08002ac3
 8002858:	08002ac3 	.word	0x08002ac3
 800285c:	08002ac3 	.word	0x08002ac3
 8002860:	080028b1 	.word	0x080028b1
 8002864:	08002ac3 	.word	0x08002ac3
 8002868:	08002ac3 	.word	0x08002ac3
 800286c:	08002ac3 	.word	0x08002ac3
 8002870:	08002ac3 	.word	0x08002ac3
 8002874:	08002ac3 	.word	0x08002ac3
 8002878:	08002ac3 	.word	0x08002ac3
 800287c:	08002ac3 	.word	0x08002ac3
 8002880:	080028b7 	.word	0x080028b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002884:	4b94      	ldr	r3, [pc, #592]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002890:	4b91      	ldr	r3, [pc, #580]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	4a90      	ldr	r2, [pc, #576]	; (8002adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80028a2:	e111      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028a4:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028a6:	61bb      	str	r3, [r7, #24]
      break;
 80028a8:	e10e      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80028aa:	4b8d      	ldr	r3, [pc, #564]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028ac:	61bb      	str	r3, [r7, #24]
      break;
 80028ae:	e10b      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80028b0:	4b8c      	ldr	r3, [pc, #560]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028b2:	61bb      	str	r3, [r7, #24]
      break;
 80028b4:	e108      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028b6:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028c0:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028cc:	4b82      	ldr	r3, [pc, #520]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028d6:	4b80      	ldr	r3, [pc, #512]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	08db      	lsrs	r3, r3, #3
 80028dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80e1 	beq.w	8002abc <HAL_RCC_GetSysClockFreq+0x2b8>
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f000 8083 	beq.w	8002a08 <HAL_RCC_GetSysClockFreq+0x204>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b02      	cmp	r3, #2
 8002906:	f200 80a1 	bhi.w	8002a4c <HAL_RCC_GetSysClockFreq+0x248>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x114>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d056      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002916:	e099      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002918:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02d      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002924:	4b6c      	ldr	r3, [pc, #432]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	4a6b      	ldr	r2, [pc, #428]	; (8002adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800295e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002962:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800296a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800296e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800297e:	e087      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002aec <HAL_RCC_GetSysClockFreq+0x2e8>
 800298e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029c2:	e065      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002af0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a06:	e043      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002af4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a4a:	e021      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002af0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	0a5b      	lsrs	r3, r3, #9
 8002a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab4:	ee17 3a90 	vmov	r3, s15
 8002ab8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002aba:	e005      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]
      break;
 8002ac0:	e002      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ac4:	61bb      	str	r3, [r7, #24]
      break;
 8002ac6:	bf00      	nop
  }

  return sysclockfreq;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	; 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	03d09000 	.word	0x03d09000
 8002ae0:	003d0900 	.word	0x003d0900
 8002ae4:	017d7840 	.word	0x017d7840
 8002ae8:	46000000 	.word	0x46000000
 8002aec:	4c742400 	.word	0x4c742400
 8002af0:	4a742400 	.word	0x4a742400
 8002af4:	4bbebc20 	.word	0x4bbebc20

08002af8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b0ca      	sub	sp, #296	; 0x128
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002b1c:	2500      	movs	r5, #0
 8002b1e:	ea54 0305 	orrs.w	r3, r4, r5
 8002b22:	d049      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b2e:	d02f      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b34:	d828      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b3a:	d01a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b40:	d822      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4a:	d007      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b4c:	e01c      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b4e:	4bb8      	ldr	r3, [pc, #736]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	4ab7      	ldr	r2, [pc, #732]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b5a:	e01a      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b60:	3308      	adds	r3, #8
 8002b62:	2102      	movs	r1, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 f9d1 	bl	8003f0c <RCCEx_PLL2_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b70:	e00f      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b76:	3328      	adds	r3, #40	; 0x28
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 fa78 	bl	8004070 <RCCEx_PLL3_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b86:	e004      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b8e:	e000      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b9a:	4ba5      	ldr	r3, [pc, #660]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba8:	4aa1      	ldr	r2, [pc, #644]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002baa:	430b      	orrs	r3, r1
 8002bac:	6513      	str	r3, [r2, #80]	; 0x50
 8002bae:	e003      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002bc4:	f04f 0900 	mov.w	r9, #0
 8002bc8:	ea58 0309 	orrs.w	r3, r8, r9
 8002bcc:	d047      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d82a      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002bd8:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002bf5 	.word	0x08002bf5
 8002be4:	08002c03 	.word	0x08002c03
 8002be8:	08002c19 	.word	0x08002c19
 8002bec:	08002c37 	.word	0x08002c37
 8002bf0:	08002c37 	.word	0x08002c37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf4:	4b8e      	ldr	r3, [pc, #568]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	4a8d      	ldr	r2, [pc, #564]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c00:	e01a      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c06:	3308      	adds	r3, #8
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 f97e 	bl	8003f0c <RCCEx_PLL2_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c16:	e00f      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c1c:	3328      	adds	r3, #40	; 0x28
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fa25 	bl	8004070 <RCCEx_PLL3_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c2c:	e004      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c34:	e000      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c40:	4b7b      	ldr	r3, [pc, #492]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c44:	f023 0107 	bic.w	r1, r3, #7
 8002c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	4a78      	ldr	r2, [pc, #480]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6513      	str	r3, [r2, #80]	; 0x50
 8002c54:	e003      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002c6a:	f04f 0b00 	mov.w	fp, #0
 8002c6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c72:	d04c      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d030      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c84:	d829      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c86:	2bc0      	cmp	r3, #192	; 0xc0
 8002c88:	d02d      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c8c:	d825      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c8e:	2b80      	cmp	r3, #128	; 0x80
 8002c90:	d018      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c92:	2b80      	cmp	r3, #128	; 0x80
 8002c94:	d821      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d007      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c9e:	e01c      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca0:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	4a62      	ldr	r2, [pc, #392]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 f928 	bl	8003f0c <RCCEx_PLL2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cc2:	e011      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cc8:	3328      	adds	r3, #40	; 0x28
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 f9cf 	bl	8004070 <RCCEx_PLL3_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cd8:	e006      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	4a4c      	ldr	r2, [pc, #304]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6513      	str	r3, [r2, #80]	; 0x50
 8002d04:	e003      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002d1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002d24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	d053      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d3a:	d035      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d40:	d82e      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d46:	d031      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d4c:	d828      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d52:	d01a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d58:	d822      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d62:	d007      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d64:	e01c      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d66:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d72:	e01c      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d78:	3308      	adds	r3, #8
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 f8c5 	bl	8003f0c <RCCEx_PLL2_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d88:	e011      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8e:	3328      	adds	r3, #40	; 0x28
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f96c 	bl	8004070 <RCCEx_PLL3_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d9e:	e006      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002da6:	e002      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002dc6:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6593      	str	r3, [r2, #88]	; 0x58
 8002dcc:	e003      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002de2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002df0:	460b      	mov	r3, r1
 8002df2:	4313      	orrs	r3, r2
 8002df4:	d056      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e02:	d038      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e08:	d831      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e0e:	d034      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e14:	d82b      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e1a:	d01d      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e20:	d825      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e2c:	e01f      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e2e:	bf00      	nop
 8002e30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e34:	4ba2      	ldr	r3, [pc, #648]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	4aa1      	ldr	r2, [pc, #644]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e40:	e01c      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e46:	3308      	adds	r3, #8
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 f85e 	bl	8003f0c <RCCEx_PLL2_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e56:	e011      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5c:	3328      	adds	r3, #40	; 0x28
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 f905 	bl	8004070 <RCCEx_PLL3_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e6c:	e006      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e74:	e002      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e84:	4b8e      	ldr	r3, [pc, #568]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e94:	4a8a      	ldr	r2, [pc, #552]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e96:	430b      	orrs	r3, r1
 8002e98:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9a:	e003      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ea0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002eba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	d03a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	2b30      	cmp	r3, #48	; 0x30
 8002ecc:	d01f      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002ece:	2b30      	cmp	r3, #48	; 0x30
 8002ed0:	d819      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d815      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d019      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d111      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee2:	4b77      	ldr	r3, [pc, #476]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	4a76      	ldr	r2, [pc, #472]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002eee:	e011      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 f807 	bl	8003f0c <RCCEx_PLL2_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f04:	e006      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f0c:	e002      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f1c:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f20:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	4a65      	ldr	r2, [pc, #404]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f30:	e003      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4313      	orrs	r3, r2
 8002f58:	d051      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f64:	d035      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f6a:	d82e      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f70:	d031      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f76:	d828      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7c:	d01a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f82:	d822      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8c:	d007      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f8e:	e01c      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f90:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	4a4a      	ldr	r2, [pc, #296]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 ffb0 	bl	8003f0c <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fb2:	e011      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb8:	3328      	adds	r3, #40	; 0x28
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 f857 	bl	8004070 <RCCEx_PLL3_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fc8:	e006      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fe0:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fee:	4a34      	ldr	r2, [pc, #208]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6513      	str	r3, [r2, #80]	; 0x50
 8002ff4:	e003      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800300a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003014:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003018:	460b      	mov	r3, r1
 800301a:	4313      	orrs	r3, r2
 800301c:	d056      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d033      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800302a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800302e:	d82c      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003030:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003034:	d02f      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800303a:	d826      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800303c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003040:	d02b      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003046:	d820      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800304c:	d012      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800304e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003052:	d81a      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d022      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305c:	d115      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800305e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003062:	3308      	adds	r3, #8
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f000 ff50 	bl	8003f0c <RCCEx_PLL2_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003072:	e015      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003078:	3328      	adds	r3, #40	; 0x28
 800307a:	2101      	movs	r1, #1
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fff7 	bl	8004070 <RCCEx_PLL3_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003088:	e00a      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003092:	bf00      	nop
 8003094:	e004      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003096:	bf00      	nop
 8003098:	e002      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800309e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10d      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b6:	4a02      	ldr	r2, [pc, #8]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6513      	str	r3, [r2, #80]	; 0x50
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80030be:	bf00      	nop
 80030c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80030d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	d055      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f8:	d033      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fe:	d82c      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d02f      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d826      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800310c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003110:	d02b      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003112:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003116:	d820      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800311c:	d012      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800311e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003122:	d81a      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d022      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800312c:	d115      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003132:	3308      	adds	r3, #8
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fee8 	bl	8003f0c <RCCEx_PLL2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003142:	e015      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003148:	3328      	adds	r3, #40	; 0x28
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f000 ff8f 	bl	8004070 <RCCEx_PLL3_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003158:	e00a      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003160:	e006      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003162:	bf00      	nop
 8003164:	e004      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800316e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003178:	4ba3      	ldr	r3, [pc, #652]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003188:	4a9f      	ldr	r2, [pc, #636]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318a:	430b      	orrs	r3, r1
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
 800318e:	e003      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80031a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80031ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031b2:	460b      	mov	r3, r1
 80031b4:	4313      	orrs	r3, r2
 80031b6:	d037      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c2:	d00e      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80031c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c8:	d816      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d018      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80031ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d2:	d111      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d4:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031e0:	e00f      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e6:	3308      	adds	r3, #8
 80031e8:	2101      	movs	r1, #1
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fe8e 	bl	8003f0c <RCCEx_PLL2_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031f6:	e004      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800320a:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a7b      	ldr	r2, [pc, #492]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800321a:	430b      	orrs	r3, r1
 800321c:	6513      	str	r3, [r2, #80]	; 0x50
 800321e:	e003      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003224:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800323e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003242:	460b      	mov	r3, r1
 8003244:	4313      	orrs	r3, r2
 8003246:	d039      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	2b03      	cmp	r3, #3
 8003250:	d81c      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	08003295 	.word	0x08003295
 800325c:	08003269 	.word	0x08003269
 8003260:	08003277 	.word	0x08003277
 8003264:	08003295 	.word	0x08003295
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	4a66      	ldr	r2, [pc, #408]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800326e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003274:	e00f      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327a:	3308      	adds	r3, #8
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fe44 	bl	8003f0c <RCCEx_PLL2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800328a:	e004      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	f023 0103 	bic.w	r1, r3, #3
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	4a56      	ldr	r2, [pc, #344]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ae:	430b      	orrs	r3, r1
 80032b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80032c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80032d6:	460b      	mov	r3, r1
 80032d8:	4313      	orrs	r3, r2
 80032da:	f000 809f 	beq.w	800341c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032de:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a4a      	ldr	r2, [pc, #296]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ea:	f7fd fc99 	bl	8000c20 <HAL_GetTick>
 80032ee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f2:	e00b      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f4:	f7fd fc94 	bl	8000c20 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b64      	cmp	r3, #100	; 0x64
 8003302:	d903      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800330a:	e005      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800330c:	4b3f      	ldr	r3, [pc, #252]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ed      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800331c:	2b00      	cmp	r3, #0
 800331e:	d179      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003328:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800332c:	4053      	eors	r3, r2
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	2b00      	cmp	r3, #0
 8003334:	d015      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003342:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a30      	ldr	r2, [pc, #192]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800335a:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800335c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800336a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336e:	d118      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fd fc56 	bl	8000c20 <HAL_GetTick>
 8003374:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003378:	e00d      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd fc51 	bl	8000c20 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003384:	1ad2      	subs	r2, r2, r3
 8003386:	f241 3388 	movw	r3, #5000	; 0x1388
 800338a:	429a      	cmp	r2, r3
 800338c:	d903      	bls.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003394:	e005      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0eb      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80033a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d129      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ba:	d10e      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033cc:	091a      	lsrs	r2, r3, #4
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6113      	str	r3, [r2, #16]
 80033d8:	e005      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033e4:	6113      	str	r3, [r2, #16]
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	4a04      	ldr	r2, [pc, #16]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
 80033fc:	e00e      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003402:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003406:	e009      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003408:	58024400 	.word	0x58024400
 800340c:	58024800 	.word	0x58024800
 8003410:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800341c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f002 0301 	and.w	r3, r2, #1
 8003428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003432:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003436:	460b      	mov	r3, r1
 8003438:	4313      	orrs	r3, r2
 800343a:	f000 8089 	beq.w	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003444:	2b28      	cmp	r3, #40	; 0x28
 8003446:	d86b      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003529 	.word	0x08003529
 8003454:	08003521 	.word	0x08003521
 8003458:	08003521 	.word	0x08003521
 800345c:	08003521 	.word	0x08003521
 8003460:	08003521 	.word	0x08003521
 8003464:	08003521 	.word	0x08003521
 8003468:	08003521 	.word	0x08003521
 800346c:	08003521 	.word	0x08003521
 8003470:	080034f5 	.word	0x080034f5
 8003474:	08003521 	.word	0x08003521
 8003478:	08003521 	.word	0x08003521
 800347c:	08003521 	.word	0x08003521
 8003480:	08003521 	.word	0x08003521
 8003484:	08003521 	.word	0x08003521
 8003488:	08003521 	.word	0x08003521
 800348c:	08003521 	.word	0x08003521
 8003490:	0800350b 	.word	0x0800350b
 8003494:	08003521 	.word	0x08003521
 8003498:	08003521 	.word	0x08003521
 800349c:	08003521 	.word	0x08003521
 80034a0:	08003521 	.word	0x08003521
 80034a4:	08003521 	.word	0x08003521
 80034a8:	08003521 	.word	0x08003521
 80034ac:	08003521 	.word	0x08003521
 80034b0:	08003529 	.word	0x08003529
 80034b4:	08003521 	.word	0x08003521
 80034b8:	08003521 	.word	0x08003521
 80034bc:	08003521 	.word	0x08003521
 80034c0:	08003521 	.word	0x08003521
 80034c4:	08003521 	.word	0x08003521
 80034c8:	08003521 	.word	0x08003521
 80034cc:	08003521 	.word	0x08003521
 80034d0:	08003529 	.word	0x08003529
 80034d4:	08003521 	.word	0x08003521
 80034d8:	08003521 	.word	0x08003521
 80034dc:	08003521 	.word	0x08003521
 80034e0:	08003521 	.word	0x08003521
 80034e4:	08003521 	.word	0x08003521
 80034e8:	08003521 	.word	0x08003521
 80034ec:	08003521 	.word	0x08003521
 80034f0:	08003529 	.word	0x08003529
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f8:	3308      	adds	r3, #8
 80034fa:	2101      	movs	r1, #1
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fd05 	bl	8003f0c <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003508:	e00f      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350e:	3328      	adds	r3, #40	; 0x28
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fdac 	bl	8004070 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800351e:	e004      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003532:	4bbf      	ldr	r3, [pc, #764]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003540:	4abb      	ldr	r2, [pc, #748]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003542:	430b      	orrs	r3, r1
 8003544:	6553      	str	r3, [r2, #84]	; 0x54
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800354c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f002 0302 	and.w	r3, r2, #2
 800355c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003566:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	d041      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003576:	2b05      	cmp	r3, #5
 8003578:	d824      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035cd 	.word	0x080035cd
 8003584:	08003599 	.word	0x08003599
 8003588:	080035af 	.word	0x080035af
 800358c:	080035cd 	.word	0x080035cd
 8003590:	080035cd 	.word	0x080035cd
 8003594:	080035cd 	.word	0x080035cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359c:	3308      	adds	r3, #8
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fcb3 	bl	8003f0c <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035ac:	e00f      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b2:	3328      	adds	r3, #40	; 0x28
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fd5a 	bl	8004070 <RCCEx_PLL3_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035c2:	e004      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80035cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035d6:	4b96      	ldr	r3, [pc, #600]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f023 0107 	bic.w	r1, r3, #7
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e4:	4a92      	ldr	r2, [pc, #584]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6553      	str	r3, [r2, #84]	; 0x54
 80035ea:	e003      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f002 0304 	and.w	r3, r2, #4
 8003600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800360a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d044      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361c:	2b05      	cmp	r3, #5
 800361e:	d825      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	08003675 	.word	0x08003675
 800362c:	08003641 	.word	0x08003641
 8003630:	08003657 	.word	0x08003657
 8003634:	08003675 	.word	0x08003675
 8003638:	08003675 	.word	0x08003675
 800363c:	08003675 	.word	0x08003675
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003644:	3308      	adds	r3, #8
 8003646:	2101      	movs	r1, #1
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fc5f 	bl	8003f0c <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003654:	e00f      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365a:	3328      	adds	r3, #40	; 0x28
 800365c:	2101      	movs	r1, #1
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fd06 	bl	8004070 <RCCEx_PLL3_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800366a:	e004      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800367e:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	f023 0107 	bic.w	r1, r3, #7
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368e:	4a68      	ldr	r2, [pc, #416]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003690:	430b      	orrs	r3, r1
 8003692:	6593      	str	r3, [r2, #88]	; 0x58
 8003694:	e003      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800369a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800369e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f002 0320 	and.w	r3, r2, #32
 80036aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d055      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ca:	d033      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80036cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036d0:	d82c      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d6:	d02f      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036dc:	d826      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036e2:	d02b      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80036e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036e8:	d820      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ee:	d012      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80036f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f4:	d81a      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d022      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80036fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036fe:	d115      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003704:	3308      	adds	r3, #8
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fbff 	bl	8003f0c <RCCEx_PLL2_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003714:	e015      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371a:	3328      	adds	r3, #40	; 0x28
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fca6 	bl	8004070 <RCCEx_PLL3_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800372a:	e00a      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003732:	e006      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003734:	bf00      	nop
 8003736:	e004      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003738:	bf00      	nop
 800373a:	e002      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800374a:	4b39      	ldr	r3, [pc, #228]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a35      	ldr	r2, [pc, #212]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800375c:	430b      	orrs	r3, r1
 800375e:	6553      	str	r3, [r2, #84]	; 0x54
 8003760:	e003      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003780:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003784:	460b      	mov	r3, r1
 8003786:	4313      	orrs	r3, r2
 8003788:	d058      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003792:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003796:	d033      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003798:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800379c:	d82c      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a2:	d02f      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a8:	d826      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ae:	d02b      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80037b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037b4:	d820      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ba:	d012      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80037bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c0:	d81a      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d022      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ca:	d115      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d0:	3308      	adds	r3, #8
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fb99 	bl	8003f0c <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037e0:	e015      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e6:	3328      	adds	r3, #40	; 0x28
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fc40 	bl	8004070 <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037f6:	e00a      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037fe:	e006      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003800:	bf00      	nop
 8003802:	e004      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003804:	bf00      	nop
 8003806:	e002      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10e      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003826:	4a02      	ldr	r2, [pc, #8]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6593      	str	r3, [r2, #88]	; 0x58
 800382c:	e006      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003838:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003852:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d055      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003860:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003864:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003868:	d033      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800386a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800386e:	d82c      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003874:	d02f      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387a:	d826      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800387c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003880:	d02b      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003882:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003886:	d820      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388c:	d012      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800388e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003892:	d81a      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389c:	d115      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a2:	3308      	adds	r3, #8
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fb30 	bl	8003f0c <RCCEx_PLL2_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038b2:	e015      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b8:	3328      	adds	r3, #40	; 0x28
 80038ba:	2102      	movs	r1, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fbd7 	bl	8004070 <RCCEx_PLL3_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038c8:	e00a      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038d0:	e006      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038d2:	bf00      	nop
 80038d4:	e004      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038e8:	4ba1      	ldr	r3, [pc, #644]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038f8:	4a9d      	ldr	r2, [pc, #628]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6593      	str	r3, [r2, #88]	; 0x58
 80038fe:	e003      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f002 0308 	and.w	r3, r2, #8
 8003914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800391e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003922:	460b      	mov	r3, r1
 8003924:	4313      	orrs	r3, r2
 8003926:	d01e      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d10c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393a:	3328      	adds	r3, #40	; 0x28
 800393c:	2102      	movs	r1, #2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fb96 	bl	8004070 <RCCEx_PLL3_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003950:	4b87      	ldr	r3, [pc, #540]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003960:	4a83      	ldr	r2, [pc, #524]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003962:	430b      	orrs	r3, r1
 8003964:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f002 0310 	and.w	r3, r2, #16
 8003972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800397c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003980:	460b      	mov	r3, r1
 8003982:	4313      	orrs	r3, r2
 8003984:	d01e      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800398a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d10c      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003998:	3328      	adds	r3, #40	; 0x28
 800399a:	2102      	movs	r1, #2
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fb67 	bl	8004070 <RCCEx_PLL3_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039ae:	4b70      	ldr	r3, [pc, #448]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039be:	4a6c      	ldr	r2, [pc, #432]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80039d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80039de:	460b      	mov	r3, r1
 80039e0:	4313      	orrs	r3, r2
 80039e2:	d03e      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f0:	d022      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80039f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f6:	d81b      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003a02:	e015      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a08:	3308      	adds	r3, #8
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa7d 	bl	8003f0c <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a18:	e00f      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	3328      	adds	r3, #40	; 0x28
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fb24 	bl	8004070 <RCCEx_PLL3_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a2e:	e004      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a42:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a52:	4a47      	ldr	r2, [pc, #284]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6593      	str	r3, [r2, #88]	; 0x58
 8003a58:	e003      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003a6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a70:	2300      	movs	r3, #0
 8003a72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d03b      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a8a:	d01f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a90:	d818      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a96:	d003      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a9c:	d007      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a9e:	e011      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa0:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	4a32      	ldr	r2, [pc, #200]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aac:	e00f      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	3328      	adds	r3, #40	; 0x28
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fada 	bl	8004070 <RCCEx_PLL3_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ac2:	e004      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6553      	str	r3, [r2, #84]	; 0x54
 8003aec:	e003      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003b02:	673b      	str	r3, [r7, #112]	; 0x70
 8003b04:	2300      	movs	r3, #0
 8003b06:	677b      	str	r3, [r7, #116]	; 0x74
 8003b08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d034      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d007      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003b22:	e011      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b30:	e00e      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b36:	3308      	adds	r3, #8
 8003b38:	2102      	movs	r1, #2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f9e6 	bl	8003f0c <RCCEx_PLL2_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	4a02      	ldr	r2, [pc, #8]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b6c:	e006      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b6e:	bf00      	nop
 8003b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003b92:	460b      	mov	r3, r1
 8003b94:	4313      	orrs	r3, r2
 8003b96:	d00c      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9c:	3328      	adds	r3, #40	; 0x28
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fa65 	bl	8004070 <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003bbe:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	d038      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bda:	d018      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be0:	d811      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be6:	d014      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bec:	d80b      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d011      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf8:	4bc3      	ldr	r3, [pc, #780]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	4ac2      	ldr	r2, [pc, #776]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c04:	e008      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c0c:	e004      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c20:	4bb9      	ldr	r3, [pc, #740]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c30:	4ab5      	ldr	r2, [pc, #724]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c32:	430b      	orrs	r3, r1
 8003c34:	6553      	str	r3, [r2, #84]	; 0x54
 8003c36:	e003      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c4e:	2300      	movs	r3, #0
 8003c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	d009      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c5c:	4baa      	ldr	r3, [pc, #680]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6a:	4aa7      	ldr	r2, [pc, #668]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c7e:	2300      	movs	r3, #0
 8003c80:	657b      	str	r3, [r7, #84]	; 0x54
 8003c82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c8c:	4b9e      	ldr	r3, [pc, #632]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c9c:	4a9a      	ldr	r2, [pc, #616]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cbe:	4b92      	ldr	r3, [pc, #584]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ccc:	4a8e      	ldr	r2, [pc, #568]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003cde:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4313      	orrs	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cee:	4b86      	ldr	r3, [pc, #536]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	4a85      	ldr	r2, [pc, #532]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cf8:	6113      	str	r3, [r2, #16]
 8003cfa:	4b83      	ldr	r3, [pc, #524]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cfc:	6919      	ldr	r1, [r3, #16]
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d06:	4a80      	ldr	r2, [pc, #512]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d28:	4b77      	ldr	r3, [pc, #476]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	4a74      	ldr	r2, [pc, #464]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003d52:	460b      	mov	r3, r1
 8003d54:	4313      	orrs	r3, r2
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d58:	4b6b      	ldr	r3, [pc, #428]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d68:	4a67      	ldr	r2, [pc, #412]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	2100      	movs	r1, #0
 8003d78:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003d84:	460b      	mov	r3, r1
 8003d86:	4313      	orrs	r3, r2
 8003d88:	d011      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	3308      	adds	r3, #8
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f8ba 	bl	8003f0c <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003daa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	2100      	movs	r1, #0
 8003db8:	6239      	str	r1, [r7, #32]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	d011      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dce:	3308      	adds	r3, #8
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f89a 	bl	8003f0c <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	2100      	movs	r1, #0
 8003df8:	61b9      	str	r1, [r7, #24]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e04:	460b      	mov	r3, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	d011      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0e:	3308      	adds	r3, #8
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f87a 	bl	8003f0c <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	2100      	movs	r1, #0
 8003e38:	6139      	str	r1, [r7, #16]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e44:	460b      	mov	r3, r1
 8003e46:	4313      	orrs	r3, r2
 8003e48:	d011      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4e:	3328      	adds	r3, #40	; 0x28
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f90c 	bl	8004070 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	2100      	movs	r1, #0
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d011      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8e:	3328      	adds	r3, #40	; 0x28
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f8ec 	bl	8004070 <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d011      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ece:	3328      	adds	r3, #40	; 0x28
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f8cc 	bl	8004070 <RCCEx_PLL3_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003eee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003f02:	46bd      	mov	sp, r7
 8003f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f08:	58024400 	.word	0x58024400

08003f0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f1a:	4b53      	ldr	r3, [pc, #332]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d101      	bne.n	8003f2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e099      	b.n	800405e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f2a:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a4e      	ldr	r2, [pc, #312]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003f30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f36:	f7fc fe73 	bl	8000c20 <HAL_GetTick>
 8003f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f3e:	f7fc fe6f 	bl	8000c20 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e086      	b.n	800405e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f50:	4b45      	ldr	r3, [pc, #276]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	493f      	ldr	r1, [pc, #252]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	628b      	str	r3, [r1, #40]	; 0x28
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	025b      	lsls	r3, r3, #9
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fa0:	4931      	ldr	r1, [pc, #196]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fa6:	4b30      	ldr	r3, [pc, #192]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	492d      	ldr	r1, [pc, #180]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f023 0220 	bic.w	r2, r3, #32
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	4928      	ldr	r1, [pc, #160]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fca:	4b27      	ldr	r3, [pc, #156]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	4a26      	ldr	r2, [pc, #152]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	f023 0310 	bic.w	r3, r3, #16
 8003fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <RCCEx_PLL2_Config+0x160>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	69d2      	ldr	r2, [r2, #28]
 8003fe2:	00d2      	lsls	r2, r2, #3
 8003fe4:	4920      	ldr	r1, [pc, #128]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fea:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003ff0:	f043 0310 	orr.w	r3, r3, #16
 8003ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8004002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004008:	e00f      	b.n	800402a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d106      	bne.n	800401e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004010:	4b15      	ldr	r3, [pc, #84]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4a14      	ldr	r2, [pc, #80]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800401c:	e005      	b.n	800402a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	4a11      	ldr	r2, [pc, #68]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8004024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004028:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8004030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fc fdf3 	bl	8000c20 <HAL_GetTick>
 800403a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800403c:	e008      	b.n	8004050 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800403e:	f7fc fdef 	bl	8000c20 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e006      	b.n	800405e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <RCCEx_PLL2_Config+0x15c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
 800406c:	ffff0007 	.word	0xffff0007

08004070 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800407e:	4b53      	ldr	r3, [pc, #332]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b03      	cmp	r3, #3
 8004088:	d101      	bne.n	800408e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e099      	b.n	80041c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800408e:	4b4f      	ldr	r3, [pc, #316]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a4e      	ldr	r2, [pc, #312]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409a:	f7fc fdc1 	bl	8000c20 <HAL_GetTick>
 800409e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040a0:	e008      	b.n	80040b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040a2:	f7fc fdbd 	bl	8000c20 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e086      	b.n	80041c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040b4:	4b45      	ldr	r3, [pc, #276]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040c0:	4b42      	ldr	r3, [pc, #264]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	051b      	lsls	r3, r3, #20
 80040ce:	493f      	ldr	r1, [pc, #252]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	628b      	str	r3, [r1, #40]	; 0x28
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	3b01      	subs	r3, #1
 80040da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	061b      	lsls	r3, r3, #24
 8004100:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004104:	4931      	ldr	r1, [pc, #196]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004106:	4313      	orrs	r3, r2
 8004108:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800410a:	4b30      	ldr	r3, [pc, #192]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	492d      	ldr	r1, [pc, #180]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800411c:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	4928      	ldr	r1, [pc, #160]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800412e:	4b27      	ldr	r3, [pc, #156]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	4a26      	ldr	r2, [pc, #152]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 800413c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <RCCEx_PLL3_Config+0x160>)
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	69d2      	ldr	r2, [r2, #28]
 8004146:	00d2      	lsls	r2, r2, #3
 8004148:	4920      	ldr	r1, [pc, #128]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800414e:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	4a1e      	ldr	r2, [pc, #120]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800416a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800416c:	e00f      	b.n	800418e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d106      	bne.n	8004182 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004174:	4b15      	ldr	r3, [pc, #84]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 800417a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800417e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004180:	e005      	b.n	800418e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	4a11      	ldr	r2, [pc, #68]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800418c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800418e:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 8004194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419a:	f7fc fd41 	bl	8000c20 <HAL_GetTick>
 800419e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041a0:	e008      	b.n	80041b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041a2:	f7fc fd3d 	bl	8000c20 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e006      	b.n	80041c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <RCCEx_PLL3_Config+0x15c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400
 80041d0:	ffff0007 	.word	0xffff0007

080041d4 <memset>:
 80041d4:	4402      	add	r2, r0
 80041d6:	4603      	mov	r3, r0
 80041d8:	4293      	cmp	r3, r2
 80041da:	d100      	bne.n	80041de <memset+0xa>
 80041dc:	4770      	bx	lr
 80041de:	f803 1b01 	strb.w	r1, [r3], #1
 80041e2:	e7f9      	b.n	80041d8 <memset+0x4>

080041e4 <__libc_init_array>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4d0d      	ldr	r5, [pc, #52]	; (800421c <__libc_init_array+0x38>)
 80041e8:	4c0d      	ldr	r4, [pc, #52]	; (8004220 <__libc_init_array+0x3c>)
 80041ea:	1b64      	subs	r4, r4, r5
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	2600      	movs	r6, #0
 80041f0:	42a6      	cmp	r6, r4
 80041f2:	d109      	bne.n	8004208 <__libc_init_array+0x24>
 80041f4:	4d0b      	ldr	r5, [pc, #44]	; (8004224 <__libc_init_array+0x40>)
 80041f6:	4c0c      	ldr	r4, [pc, #48]	; (8004228 <__libc_init_array+0x44>)
 80041f8:	f000 f826 	bl	8004248 <_init>
 80041fc:	1b64      	subs	r4, r4, r5
 80041fe:	10a4      	asrs	r4, r4, #2
 8004200:	2600      	movs	r6, #0
 8004202:	42a6      	cmp	r6, r4
 8004204:	d105      	bne.n	8004212 <__libc_init_array+0x2e>
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	f855 3b04 	ldr.w	r3, [r5], #4
 800420c:	4798      	blx	r3
 800420e:	3601      	adds	r6, #1
 8004210:	e7ee      	b.n	80041f0 <__libc_init_array+0xc>
 8004212:	f855 3b04 	ldr.w	r3, [r5], #4
 8004216:	4798      	blx	r3
 8004218:	3601      	adds	r6, #1
 800421a:	e7f2      	b.n	8004202 <__libc_init_array+0x1e>
 800421c:	080042bc 	.word	0x080042bc
 8004220:	080042bc 	.word	0x080042bc
 8004224:	080042bc 	.word	0x080042bc
 8004228:	080042c0 	.word	0x080042c0

0800422c <memcpy>:
 800422c:	440a      	add	r2, r1
 800422e:	4291      	cmp	r1, r2
 8004230:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004234:	d100      	bne.n	8004238 <memcpy+0xc>
 8004236:	4770      	bx	lr
 8004238:	b510      	push	{r4, lr}
 800423a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800423e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004242:	4291      	cmp	r1, r2
 8004244:	d1f9      	bne.n	800423a <memcpy+0xe>
 8004246:	bd10      	pop	{r4, pc}

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
