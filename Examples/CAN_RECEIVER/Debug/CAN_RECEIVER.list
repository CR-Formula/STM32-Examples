
CAN_RECEIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000637c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006614  08006614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080066b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b8  24000010  080066c8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002c8  080066c8  000202c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001641a  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000023c5  00000000  00000000  0003649b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001070  00000000  00000000  00038860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000ce0  00000000  00000000  000398d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036c43  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014df0  00000000  00000000  000711f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00160875  00000000  00000000  00085fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004744  00000000  00000000  001e6858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001eaf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080065fc 	.word	0x080065fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080065fc 	.word	0x080065fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	0000      	movs	r0, r0
	...

080005d8 <packet1>:
    }
}

//temp fucntion to replicate the ecu sim
void packet1(double rpm, double tps, double fuelOpenTime,
             double ignistionAngle) {
 80005d8:	b480      	push	{r7}
 80005da:	b08b      	sub	sp, #44	; 0x2c
 80005dc:	af00      	add	r7, sp, #0
 80005de:	ed87 0b08 	vstr	d0, [r7, #32]
 80005e2:	ed87 1b06 	vstr	d1, [r7, #24]
 80005e6:	ed87 2b04 	vstr	d2, [r7, #16]
 80005ea:	ed87 3b02 	vstr	d3, [r7, #8]

    TxData2[0] = (rpm / 2);
 80005ee:	ed97 6b08 	vldr	d6, [r7, #32]
 80005f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80005f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8000602:	793b      	ldrb	r3, [r7, #4]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <packet1+0x130>)
 8000608:	701a      	strb	r2, [r3, #0]
    TxData2[1] = (rpm / 2) / 256;
 800060a:	ed97 7b08 	vldr	d7, [r7, #32]
 800060e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000612:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000616:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8000700 <packet1+0x128>
 800061a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800061e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000622:	edc7 7a01 	vstr	s15, [r7, #4]
 8000626:	793b      	ldrb	r3, [r7, #4]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <packet1+0x130>)
 800062c:	705a      	strb	r2, [r3, #1]
    TxData2[2] = tps / 2;
 800062e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000632:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000636:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800063a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800063e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000642:	793b      	ldrb	r3, [r7, #4]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b30      	ldr	r3, [pc, #192]	; (8000708 <packet1+0x130>)
 8000648:	709a      	strb	r2, [r3, #2]
    TxData2[3] = (tps / 2) / 256;
 800064a:	ed97 7b06 	vldr	d7, [r7, #24]
 800064e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000652:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000656:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000700 <packet1+0x128>
 800065a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800065e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000662:	edc7 7a01 	vstr	s15, [r7, #4]
 8000666:	793b      	ldrb	r3, [r7, #4]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b27      	ldr	r3, [pc, #156]	; (8000708 <packet1+0x130>)
 800066c:	70da      	strb	r2, [r3, #3]
    TxData2[4] = fuelOpenTime / 2;
 800066e:	ed97 6b04 	vldr	d6, [r7, #16]
 8000672:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000676:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800067a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800067e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000682:	793b      	ldrb	r3, [r7, #4]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <packet1+0x130>)
 8000688:	711a      	strb	r2, [r3, #4]
    TxData2[5] = (fuelOpenTime / 2) / 256;
 800068a:	ed97 7b04 	vldr	d7, [r7, #16]
 800068e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000692:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000696:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8000700 <packet1+0x128>
 800069a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800069e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80006a6:	793b      	ldrb	r3, [r7, #4]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <packet1+0x130>)
 80006ac:	715a      	strb	r2, [r3, #5]
    TxData2[6] = ignistionAngle / 2;
 80006ae:	ed97 6b02 	vldr	d6, [r7, #8]
 80006b2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80006b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006be:	edc7 7a01 	vstr	s15, [r7, #4]
 80006c2:	793b      	ldrb	r3, [r7, #4]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <packet1+0x130>)
 80006c8:	719a      	strb	r2, [r3, #6]
    TxData2[7] = (ignistionAngle / 2) / 256;
 80006ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80006ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80006d2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80006d6:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000700 <packet1+0x128>
 80006da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80006e6:	793b      	ldrb	r3, [r7, #4]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <packet1+0x130>)
 80006ec:	71da      	strb	r2, [r3, #7]
}
 80006ee:	bf00      	nop
 80006f0:	372c      	adds	r7, #44	; 0x2c
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	f3af 8000 	nop.w
 8000700:	00000000 	.word	0x00000000
 8000704:	40700000 	.word	0x40700000
 8000708:	2400029c 	.word	0x2400029c
 800070c:	00000000 	.word	0x00000000

08000710 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8000714:	f000 fdb2 	bl	800127c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000718:	f000 f8bc 	bl	8000894 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800071c:	f000 fae6 	bl	8000cec <MX_GPIO_Init>
    MX_FDCAN1_Init();
 8000720:	f000 f936 	bl	8000990 <MX_FDCAN1_Init>
    MX_FDCAN2_Init();
 8000724:	f000 f9d2 	bl	8000acc <MX_FDCAN2_Init>
    MX_I2C1_Init();
 8000728:	f000 fa54 	bl	8000bd4 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 800072c:	f000 fa92 	bl	8000c54 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    // initalizes can
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000730:	484f      	ldr	r0, [pc, #316]	; (8000870 <main+0x160>)
 8000732:	f001 f99d 	bl	8001a70 <HAL_FDCAN_Start>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <main+0x30>
        Error_Handler();
 800073c:	f000 fb00 	bl	8000d40 <Error_Handler>
    }
    // initalizes can
    if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8000740:	484c      	ldr	r0, [pc, #304]	; (8000874 <main+0x164>)
 8000742:	f001 f995 	bl	8001a70 <HAL_FDCAN_Start>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <main+0x40>
        Error_Handler();
 800074c:	f000 faf8 	bl	8000d40 <Error_Handler>
    }
    // ready to recive msgs
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000750:	2200      	movs	r2, #0
 8000752:	2101      	movs	r1, #1
 8000754:	4846      	ldr	r0, [pc, #280]	; (8000870 <main+0x160>)
 8000756:	f001 fa11 	bl	8001b7c <HAL_FDCAN_ActivateNotification>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <main+0x54>
                                       0) != HAL_OK) {
        Error_Handler();
 8000760:	f000 faee 	bl	8000d40 <Error_Handler>
    }
    // ready to recive msgs
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE,
 8000764:	2200      	movs	r2, #0
 8000766:	2110      	movs	r1, #16
 8000768:	4842      	ldr	r0, [pc, #264]	; (8000874 <main+0x164>)
 800076a:	f001 fa07 	bl	8001b7c <HAL_FDCAN_ActivateNotification>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <main+0x68>
                                       0) != HAL_OK) {
        Error_Handler();
 8000774:	f000 fae4 	bl	8000d40 <Error_Handler>
    }

    TxHeader1.Identifier = 0x0cff104;
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <main+0x168>)
 800077a:	4a40      	ldr	r2, [pc, #256]	; (800087c <main+0x16c>)
 800077c:	601a      	str	r2, [r3, #0]
    TxHeader1.IdType = FDCAN_EXTENDED_ID;
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <main+0x168>)
 8000780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000784:	605a      	str	r2, [r3, #4]
    TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <main+0x168>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
    TxHeader1.DataLength = FDCAN_DATA_BYTES_8;
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <main+0x168>)
 800078e:	2204      	movs	r2, #4
 8000790:	60da      	str	r2, [r3, #12]
    TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <main+0x168>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
    TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <main+0x168>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
    TxHeader1.FDFormat = FDCAN_FD_CAN;
 800079e:	4b36      	ldr	r3, [pc, #216]	; (8000878 <main+0x168>)
 80007a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007a4:	619a      	str	r2, [r3, #24]
    TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <main+0x168>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
    TxHeader1.MessageMarker = 0;
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <main+0x168>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]

    TxHeader2.Identifier = 0x0CFF048;
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <main+0x170>)
 80007b4:	4a33      	ldr	r2, [pc, #204]	; (8000884 <main+0x174>)
 80007b6:	601a      	str	r2, [r3, #0]
    TxHeader2.IdType = FDCAN_EXTENDED_ID;
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <main+0x170>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007be:	605a      	str	r2, [r3, #4]
    TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <main+0x170>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    TxHeader2.DataLength = FDCAN_DATA_BYTES_8;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <main+0x170>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	60da      	str	r2, [r3, #12]
    TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <main+0x170>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
    TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <main+0x170>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
    TxHeader2.FDFormat = FDCAN_FD_CAN;
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <main+0x170>)
 80007da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007de:	619a      	str	r2, [r3, #24]
    TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <main+0x170>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
    TxHeader2.MessageMarker = 0;
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <main+0x170>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
    while (1) {
        /* USER CODE END WHILE */
        /* USER CODE BEGIN 3 */

    	//test function replicating the ecu simulatior
        packet1(100.000, 28.0000, 25.0000, 15.0000);
 80007ec:	eeb2 3b0e 	vmov.f64	d3, #46	; 0x41700000  15.0
 80007f0:	eeb3 2b09 	vmov.f64	d2, #57	; 0x41c80000  25.0
 80007f4:	eeb3 1b0c 	vmov.f64	d1, #60	; 0x41e00000  28.0
 80007f8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8000868 <main+0x158>
 80007fc:	f7ff feec 	bl	80005d8 <packet1>

        //sends data from test fdcan
        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2) !=
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <main+0x178>)
 8000802:	491f      	ldr	r1, [pc, #124]	; (8000880 <main+0x170>)
 8000804:	481b      	ldr	r0, [pc, #108]	; (8000874 <main+0x164>)
 8000806:	f001 f95e 	bl	8001ac6 <HAL_FDCAN_AddMessageToTxFifoQ>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <main+0x104>
            HAL_OK) {
            Error_Handler();
 8000810:	f000 fa96 	bl	8000d40 <Error_Handler>
        }
        HAL_Delay(1000);
 8000814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000818:	f000 fdc2 	bl	80013a0 <HAL_Delay>
        //test the RXdata1 (data buffer that will recive data from main can)
//        HAL_UART_Transmit(&huart2, RxData1, 8,
//                          HAL_MAX_DELAY);

        //test the telemptry struct
        HAL_UART_Transmit(&huart2, (uint8_t*)telemetry.rpm, sizeof((uint8_t*)telemetry.rpm), HAL_MAX_DELAY);
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <main+0x17c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000826:	2204      	movs	r2, #4
 8000828:	4819      	ldr	r0, [pc, #100]	; (8000890 <main+0x180>)
 800082a:	f004 fd99 	bl	8005360 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)telemetry.tps, sizeof((uint8_t*)telemetry.tps), HAL_MAX_DELAY);
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <main+0x17c>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4619      	mov	r1, r3
 8000834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000838:	2204      	movs	r2, #4
 800083a:	4815      	ldr	r0, [pc, #84]	; (8000890 <main+0x180>)
 800083c:	f004 fd90 	bl	8005360 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)telemetry.fuelOpenTime, sizeof((uint8_t*)telemetry.fuelOpenTime), HAL_MAX_DELAY);
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <main+0x17c>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084a:	2204      	movs	r2, #4
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <main+0x180>)
 800084e:	f004 fd87 	bl	8005360 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)telemetry.ignistionAngle, sizeof((uint8_t*)telemetry.ignistionAngle), HAL_MAX_DELAY);
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <main+0x17c>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085c:	2204      	movs	r2, #4
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <main+0x180>)
 8000860:	f004 fd7e 	bl	8005360 <HAL_UART_Transmit>
        packet1(100.000, 28.0000, 25.0000, 15.0000);
 8000864:	e7c2      	b.n	80007ec <main+0xdc>
 8000866:	bf00      	nop
 8000868:	00000000 	.word	0x00000000
 800086c:	40590000 	.word	0x40590000
 8000870:	2400002c 	.word	0x2400002c
 8000874:	240000cc 	.word	0x240000cc
 8000878:	24000254 	.word	0x24000254
 800087c:	00cff104 	.word	0x00cff104
 8000880:	24000278 	.word	0x24000278
 8000884:	00cff048 	.word	0x00cff048
 8000888:	2400029c 	.word	0x2400029c
 800088c:	240002a4 	.word	0x240002a4
 8000890:	240001c0 	.word	0x240001c0

08000894 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b09c      	sub	sp, #112	; 0x70
 8000898:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	224c      	movs	r2, #76	; 0x4c
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fe70 	bl	8006588 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2220      	movs	r2, #32
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 fe6a 	bl	8006588 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008b4:	2002      	movs	r0, #2
 80008b6:	f001 feb7 	bl	8002628 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <SystemClock_Config+0xf4>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	4a31      	ldr	r2, [pc, #196]	; (8000988 <SystemClock_Config+0xf4>)
 80008c4:	f023 0301 	bic.w	r3, r3, #1
 80008c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <SystemClock_Config+0xf4>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	4b2d      	ldr	r3, [pc, #180]	; (800098c <SystemClock_Config+0xf8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008dc:	4a2b      	ldr	r2, [pc, #172]	; (800098c <SystemClock_Config+0xf8>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <SystemClock_Config+0xf8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80008f0:	bf00      	nop
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <SystemClock_Config+0xf8>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008fe:	d1f8      	bne.n	80008f2 <SystemClock_Config+0x5e>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000904:	2301      	movs	r3, #1
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN = 9;
 8000918:	2309      	movs	r3, #9
 800091a:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8000920:	2303      	movs	r3, #3
 8000922:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000928:	230c      	movs	r3, #12
 800092a:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800092c:	2302      	movs	r3, #2
 800092e:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000930:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000934:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	4618      	mov	r0, r3
 800093c:	f001 feae 	bl	800269c <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xb6>
        Error_Handler();
 8000946:	f000 f9fb 	bl	8000d40 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800094a:	233f      	movs	r3, #63	; 0x3f
 800094c:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                  RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095e:	2340      	movs	r3, #64	; 0x40
 8000960:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f002 faee 	bl	8002f50 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xea>
        Error_Handler();
 800097a:	f000 f9e1 	bl	8000d40 <Error_Handler>
    }
}
 800097e:	bf00      	nop
 8000980:	3770      	adds	r7, #112	; 0x70
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	58000400 	.word	0x58000400
 800098c:	58024800 	.word	0x58024800

08000990 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
    /* USER CODE END FDCAN1_Init 0 */

    /* USER CODE BEGIN FDCAN1_Init 1 */

    /* USER CODE END FDCAN1_Init 1 */
    hfdcan1.Instance = FDCAN1;
 8000996:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000998:	4a48      	ldr	r2, [pc, #288]	; (8000abc <MX_FDCAN1_Init+0x12c>)
 800099a:	601a      	str	r2, [r3, #0]
    hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800099c:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 800099e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a2:	609a      	str	r2, [r3, #8]
    hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009a4:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hfdcan1.Init.AutoRetransmission = ENABLE;
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	741a      	strb	r2, [r3, #16]
    hfdcan1.Init.TransmitPause = DISABLE;
 80009b0:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	745a      	strb	r2, [r3, #17]
    hfdcan1.Init.ProtocolException = DISABLE;
 80009b6:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	749a      	strb	r2, [r3, #18]
    hfdcan1.Init.NominalPrescaler = 1;
 80009bc:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009be:	2201      	movs	r2, #1
 80009c0:	615a      	str	r2, [r3, #20]
    hfdcan1.Init.NominalSyncJumpWidth = 13;
 80009c2:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009c4:	220d      	movs	r2, #13
 80009c6:	619a      	str	r2, [r3, #24]
    hfdcan1.Init.NominalTimeSeg1 = 86;
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009ca:	2256      	movs	r2, #86	; 0x56
 80009cc:	61da      	str	r2, [r3, #28]
    hfdcan1.Init.NominalTimeSeg2 = 13;
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009d0:	220d      	movs	r2, #13
 80009d2:	621a      	str	r2, [r3, #32]
    hfdcan1.Init.DataPrescaler = 25;
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009d6:	2219      	movs	r2, #25
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
    hfdcan1.Init.DataSyncJumpWidth = 1;
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009dc:	2201      	movs	r2, #1
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
    hfdcan1.Init.DataTimeSeg1 = 2;
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hfdcan1.Init.DataTimeSeg2 = 1;
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
    hfdcan1.Init.MessageRAMOffset = 0;
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
    hfdcan1.Init.StdFiltersNbr = 0;
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
    hfdcan1.Init.ExtFiltersNbr = 3;
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 80009fa:	2203      	movs	r2, #3
 80009fc:	63da      	str	r2, [r3, #60]	; 0x3c
    hfdcan1.Init.RxFifo0ElmtsNbr = 3;
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	641a      	str	r2, [r3, #64]	; 0x40
    hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	645a      	str	r2, [r3, #68]	; 0x44
    hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	649a      	str	r2, [r3, #72]	; 0x48
    hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	64da      	str	r2, [r3, #76]	; 0x4c
    hfdcan1.Init.RxBuffersNbr = 0;
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	651a      	str	r2, [r3, #80]	; 0x50
    hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	655a      	str	r2, [r3, #84]	; 0x54
    hfdcan1.Init.TxEventsNbr = 0;
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	659a      	str	r2, [r3, #88]	; 0x58
    hfdcan1.Init.TxBuffersNbr = 0;
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	65da      	str	r2, [r3, #92]	; 0x5c
    hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	661a      	str	r2, [r3, #96]	; 0x60
    hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	665a      	str	r2, [r3, #100]	; 0x64
    hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	669a      	str	r2, [r3, #104]	; 0x68
    if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8000a40:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a42:	f000 fdc1 	bl	80015c8 <HAL_FDCAN_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_FDCAN1_Init+0xc0>
        Error_Handler();
 8000a4c:	f000 f978 	bl	8000d40 <Error_Handler>
#define ID2 0x0CFF148;
#define ID3 0x0CFF548;

    FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000a50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a54:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = ID1;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_FDCAN1_Init+0x130>)
 8000a64:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000a66:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000a6a:	617b      	str	r3, [r7, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a72:	f000 ff87 	bl	8001984 <HAL_FDCAN_ConfigFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_FDCAN1_Init+0xf0>
        Error_Handler();
 8000a7c:	f000 f960 	bl	8000d40 <Error_Handler>
    }

    // Filter for ID2
    sFilterConfig.FilterID1 = ID2;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_FDCAN1_Init+0x134>)
 8000a82:	613b      	str	r3, [r7, #16]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000a8a:	f000 ff7b 	bl	8001984 <HAL_FDCAN_ConfigFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_FDCAN1_Init+0x108>
        Error_Handler();
 8000a94:	f000 f954 	bl	8000d40 <Error_Handler>
    }

    // Filter for ID3
    sFilterConfig.FilterID1 = ID3;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_FDCAN1_Init+0x138>)
 8000a9a:	613b      	str	r3, [r7, #16]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_FDCAN1_Init+0x128>)
 8000aa2:	f000 ff6f 	bl	8001984 <HAL_FDCAN_ConfigFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_FDCAN1_Init+0x120>
        Error_Handler();
 8000aac:	f000 f948 	bl	8000d40 <Error_Handler>
    }
    /* USER CODE END FDCAN1_Init 2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2400002c 	.word	0x2400002c
 8000abc:	4000a000 	.word	0x4000a000
 8000ac0:	00cff048 	.word	0x00cff048
 8000ac4:	00cff148 	.word	0x00cff148
 8000ac8:	00cff548 	.word	0x00cff548

08000acc <MX_FDCAN2_Init>:
/**
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
    /* USER CODE END FDCAN2_Init 0 */

    /* USER CODE BEGIN FDCAN2_Init 1 */

    /* USER CODE END FDCAN2_Init 1 */
    hfdcan2.Instance = FDCAN2;
 8000ad2:	4b3d      	ldr	r3, [pc, #244]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000ad4:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <MX_FDCAN2_Init+0x100>)
 8000ad6:	601a      	str	r2, [r3, #0]
    hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ad8:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
    hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
    hfdcan2.Init.AutoRetransmission = ENABLE;
 8000ae4:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	741a      	strb	r2, [r3, #16]
    hfdcan2.Init.TransmitPause = DISABLE;
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	745a      	strb	r2, [r3, #17]
    hfdcan2.Init.ProtocolException = DISABLE;
 8000af0:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	749a      	strb	r2, [r3, #18]
    hfdcan2.Init.NominalPrescaler = 1;
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	615a      	str	r2, [r3, #20]
    hfdcan2.Init.NominalSyncJumpWidth = 13;
 8000afc:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000afe:	220d      	movs	r2, #13
 8000b00:	619a      	str	r2, [r3, #24]
    hfdcan2.Init.NominalTimeSeg1 = 86;
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b04:	2256      	movs	r2, #86	; 0x56
 8000b06:	61da      	str	r2, [r3, #28]
    hfdcan2.Init.NominalTimeSeg2 = 13;
 8000b08:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b0a:	220d      	movs	r2, #13
 8000b0c:	621a      	str	r2, [r3, #32]
    hfdcan2.Init.DataPrescaler = 25;
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b10:	2219      	movs	r2, #25
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
    hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b14:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
    hfdcan2.Init.DataTimeSeg1 = 2;
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hfdcan2.Init.DataTimeSeg2 = 1;
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
    hfdcan2.Init.MessageRAMOffset = 1240;
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b28:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
    hfdcan2.Init.StdFiltersNbr = 0;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
    hfdcan2.Init.ExtFiltersNbr = 1;
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	63da      	str	r2, [r3, #60]	; 0x3c
    hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	641a      	str	r2, [r3, #64]	; 0x40
    hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	645a      	str	r2, [r3, #68]	; 0x44
    hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	649a      	str	r2, [r3, #72]	; 0x48
    hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	64da      	str	r2, [r3, #76]	; 0x4c
    hfdcan2.Init.RxBuffersNbr = 0;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	651a      	str	r2, [r3, #80]	; 0x50
    hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	655a      	str	r2, [r3, #84]	; 0x54
    hfdcan2.Init.TxEventsNbr = 0;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	659a      	str	r2, [r3, #88]	; 0x58
    hfdcan2.Init.TxBuffersNbr = 0;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	65da      	str	r2, [r3, #92]	; 0x5c
    hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	661a      	str	r2, [r3, #96]	; 0x60
    hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	665a      	str	r2, [r3, #100]	; 0x64
    hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	669a      	str	r2, [r3, #104]	; 0x68
    if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK) {
 8000b7c:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <MX_FDCAN2_Init+0xfc>)
 8000b7e:	f000 fd23 	bl	80015c8 <HAL_FDCAN_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_FDCAN2_Init+0xc0>
        Error_Handler();
 8000b88:	f000 f8da 	bl	8000d40 <Error_Handler>
    }
    /* USER CODE BEGIN FDCAN2_Init 2 */
    FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b90:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000b96:	2302      	movs	r3, #2
 8000b98:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x1FFFFFFF;
 8000b9e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000ba2:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000ba4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000ba8:	617b      	str	r3, [r7, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000baa:	463b      	mov	r3, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <MX_FDCAN2_Init+0x104>)
 8000bb0:	f000 fee8 	bl	8001984 <HAL_FDCAN_ConfigFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_FDCAN2_Init+0xf2>
        Error_Handler();
 8000bba:	f000 f8c1 	bl	8000d40 <Error_Handler>
    }
    /* USER CODE END FDCAN2_Init 2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	240000cc 	.word	0x240000cc
 8000bcc:	4000a400 	.word	0x4000a400
 8000bd0:	2400002c 	.word	0x2400002c

08000bd4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <MX_I2C1_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00707CBB;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <MX_I2C1_Init+0x7c>)
 8000be2:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c10:	f001 fbe2 	bl	80023d8 <HAL_I2C_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2C1_Init+0x4a>
        Error_Handler();
 8000c1a:	f000 f891 	bl	8000d40 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) !=
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c22:	f001 fc69 	bl	80024f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C1_Init+0x5c>
        HAL_OK) {
        Error_Handler();
 8000c2c:	f000 f888 	bl	8000d40 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000c30:	2100      	movs	r1, #0
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c34:	f001 fcab 	bl	800258e <HAL_I2CEx_ConfigDigitalFilter>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C1_Init+0x6e>
        Error_Handler();
 8000c3e:	f000 f87f 	bl	8000d40 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2400016c 	.word	0x2400016c
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	00707cbb 	.word	0x00707cbb

08000c54 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c9e:	f004 fb0f 	bl	80052c0 <HAL_UART_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART2_UART_Init+0x58>
        Error_Handler();
 8000ca8:	f000 f84a 	bl	8000d40 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) !=
 8000cac:	2100      	movs	r1, #0
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000cb0:	f005 fb9f 	bl	80063f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x6a>
        HAL_OK) {
        Error_Handler();
 8000cba:	f000 f841 	bl	8000d40 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) !=
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000cc2:	f005 fbd4 	bl	800646e <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART2_UART_Init+0x7c>
        HAL_OK) {
        Error_Handler();
 8000ccc:	f000 f838 	bl	8000d40 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000cd2:	f005 fb55 	bl	8006380 <HAL_UARTEx_DisableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART2_UART_Init+0x8c>
        Error_Handler();
 8000cdc:	f000 f830 	bl	8000d40 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	240001c0 	.word	0x240001c0
 8000ce8:	40004400 	.word	0x40004400

08000cec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_GPIO_Init+0x50>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <MX_GPIO_Init+0x50>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_GPIO_Init+0x50>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_GPIO_Init+0x50>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <MX_GPIO_Init+0x50>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_GPIO_Init+0x50>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	58024400 	.word	0x58024400

08000d40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_MspInit+0x30>)
 8000d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x30>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x30>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	58024400 	.word	0x58024400

08000d80 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0bc      	sub	sp, #240	; 0xf0
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	22c0      	movs	r2, #192	; 0xc0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 fbf1 	bl	8006588 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_FDCAN_MspInit+0x188>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d151      	bne.n	8000e54 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fc4d 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000dd4:	f7ff ffb4 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000dd8:	4b4c      	ldr	r3, [pc, #304]	; (8000f0c <HAL_FDCAN_MspInit+0x18c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	4a4b      	ldr	r2, [pc, #300]	; (8000f0c <HAL_FDCAN_MspInit+0x18c>)
 8000de0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000de2:	4b4a      	ldr	r3, [pc, #296]	; (8000f0c <HAL_FDCAN_MspInit+0x18c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d10e      	bne.n	8000e08 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000dec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000df0:	4a47      	ldr	r2, [pc, #284]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000dfa:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000dfc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	4a40      	ldr	r2, [pc, #256]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e18:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e40:	2309      	movs	r3, #9
 8000e42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4831      	ldr	r0, [pc, #196]	; (8000f14 <HAL_FDCAN_MspInit+0x194>)
 8000e4e:	f001 f913 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000e52:	e055      	b.n	8000f00 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <HAL_FDCAN_MspInit+0x198>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d150      	bne.n	8000f00 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fbf6 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8000e82:	f7ff ff5d 	bl	8000d40 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_FDCAN_MspInit+0x18c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_FDCAN_MspInit+0x18c>)
 8000e8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <HAL_FDCAN_MspInit+0x18c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10e      	bne.n	8000eb6 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000e9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000eaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_FDCAN_MspInit+0x190>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ed4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000eee:	2309      	movs	r3, #9
 8000ef0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <HAL_FDCAN_MspInit+0x19c>)
 8000efc:	f001 f8bc 	bl	8002078 <HAL_GPIO_Init>
}
 8000f00:	bf00      	nop
 8000f02:	37f0      	adds	r7, #240	; 0xf0
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	4000a000 	.word	0x4000a000
 8000f0c:	240002c0 	.word	0x240002c0
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020000 	.word	0x58020000
 8000f18:	4000a400 	.word	0x4000a400
 8000f1c:	58020400 	.word	0x58020400

08000f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ba      	sub	sp, #232	; 0xe8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	22c0      	movs	r2, #192	; 0xc0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 fb21 	bl	8006588 <memset>
  if(hi2c->Instance==I2C1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_I2C_MspInit+0xc8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d146      	bne.n	8000fde <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f50:	f04f 0208 	mov.w	r2, #8
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fb7e 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f72:	f7ff fee5 	bl	8000d40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_I2C_MspInit+0xcc>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_I2C_MspInit+0xcc>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_I2C_MspInit+0xcc>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <HAL_I2C_MspInit+0xd0>)
 8000fbc:	f001 f85c 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_I2C_MspInit+0xcc>)
 8000fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <HAL_I2C_MspInit+0xcc>)
 8000fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_I2C_MspInit+0xcc>)
 8000fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	37e8      	adds	r7, #232	; 0xe8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020400 	.word	0x58020400

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0ba      	sub	sp, #232	; 0xe8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	22c0      	movs	r2, #192	; 0xc0
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f005 fab7 	bl	8006588 <memset>
  if(huart->Instance==USART2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <HAL_UART_MspInit+0xc4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d145      	bne.n	80010b0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001024:	f04f 0202 	mov.w	r2, #2
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fb14 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001046:	f7ff fe7b 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_UART_MspInit+0xc8>)
 800104c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <HAL_UART_MspInit+0xc8>)
 8001052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001056:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_UART_MspInit+0xc8>)
 800105c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_UART_MspInit+0xc8>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <HAL_UART_MspInit+0xc8>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_UART_MspInit+0xc8>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001086:	230c      	movs	r3, #12
 8001088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109e:	2307      	movs	r3, #7
 80010a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_UART_MspInit+0xcc>)
 80010ac:	f000 ffe4 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	37e8      	adds	r7, #232	; 0xe8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40004400 	.word	0x40004400
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020000 	.word	0x58020000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 f926 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <SystemInit+0xe4>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a36      	ldr	r2, [pc, #216]	; (80011fc <SystemInit+0xe4>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800112c:	4b34      	ldr	r3, [pc, #208]	; (8001200 <SystemInit+0xe8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	2b06      	cmp	r3, #6
 8001136:	d807      	bhi.n	8001148 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <SystemInit+0xe8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 030f 	bic.w	r3, r3, #15
 8001140:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <SystemInit+0xe8>)
 8001142:	f043 0307 	orr.w	r3, r3, #7
 8001146:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <SystemInit+0xec>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <SystemInit+0xec>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <SystemInit+0xec>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <SystemInit+0xec>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4929      	ldr	r1, [pc, #164]	; (8001204 <SystemInit+0xec>)
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <SystemInit+0xf0>)
 8001162:	4013      	ands	r3, r2
 8001164:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <SystemInit+0xe8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <SystemInit+0xe8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 030f 	bic.w	r3, r3, #15
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <SystemInit+0xe8>)
 800117c:	f043 0307 	orr.w	r3, r3, #7
 8001180:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <SystemInit+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <SystemInit+0xec>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <SystemInit+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <SystemInit+0xec>)
 8001196:	4a1d      	ldr	r2, [pc, #116]	; (800120c <SystemInit+0xf4>)
 8001198:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <SystemInit+0xec>)
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <SystemInit+0xf8>)
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <SystemInit+0xec>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <SystemInit+0xfc>)
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <SystemInit+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <SystemInit+0xec>)
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <SystemInit+0xfc>)
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <SystemInit+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <SystemInit+0xec>)
 80011ba:	4a16      	ldr	r2, [pc, #88]	; (8001214 <SystemInit+0xfc>)
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <SystemInit+0xec>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <SystemInit+0xec>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <SystemInit+0xec>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <SystemInit+0xec>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <SystemInit+0x100>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <SystemInit+0x104>)
 80011dc:	4013      	ands	r3, r2
 80011de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e2:	d202      	bcs.n	80011ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <SystemInit+0x108>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <SystemInit+0x10c>)
 80011ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	52002000 	.word	0x52002000
 8001204:	58024400 	.word	0x58024400
 8001208:	eaf6ed7f 	.word	0xeaf6ed7f
 800120c:	02020200 	.word	0x02020200
 8001210:	01ff0000 	.word	0x01ff0000
 8001214:	01010280 	.word	0x01010280
 8001218:	5c001000 	.word	0x5c001000
 800121c:	ffff0000 	.word	0xffff0000
 8001220:	51008108 	.word	0x51008108
 8001224:	52004000 	.word	0x52004000

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800122c:	f7ff ff74 	bl	8001118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	; (8001268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	; (8001274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f005 f99f 	bl	8006598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fa59 	bl	8000710 <main>
  bx  lr
 800125e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001264:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001268:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800126c:	080066b8 	.word	0x080066b8
  ldr r2, =_sbss
 8001270:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001274:	240002c8 	.word	0x240002c8

08001278 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC3_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001282:	2003      	movs	r0, #3
 8001284:	f000 f96e 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001288:	f002 f818 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800128c:	4602      	mov	r2, r0
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_Init+0x68>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	4913      	ldr	r1, [pc, #76]	; (80012e8 <HAL_Init+0x6c>)
 800129a:	5ccb      	ldrb	r3, [r1, r3]
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	fa22 f303 	lsr.w	r3, r2, r3
 80012a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_Init+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_Init+0x6c>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_Init+0x70>)
 80012be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_Init+0x74>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c6:	200f      	movs	r0, #15
 80012c8:	f000 f814 	bl	80012f4 <HAL_InitTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e002      	b.n	80012dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012d6:	f7ff fd39 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	58024400 	.word	0x58024400
 80012e8:	08006660 	.word	0x08006660
 80012ec:	24000004 	.word	0x24000004
 80012f0:	24000000 	.word	0x24000000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_InitTick+0x60>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e021      	b.n	800134c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_InitTick+0x64>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_InitTick+0x60>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f945 	bl	80015ae <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800133c:	f000 f91d 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x68>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2400000c 	.word	0x2400000c
 8001358:	24000000 	.word	0x24000000
 800135c:	24000008 	.word	0x24000008

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	2400000c 	.word	0x2400000c
 8001384:	240002c4 	.word	0x240002c4

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	240002c4 	.word	0x240002c4

080013a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff ffee 	bl	8001388 <HAL_GetTick>
 80013ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013b8:	d005      	beq.n	80013c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_Delay+0x44>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c6:	bf00      	nop
 80013c8:	f7ff ffde 	bl	8001388 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f7      	bhi.n	80013c8 <HAL_Delay+0x28>
  {
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2400000c 	.word	0x2400000c

080013e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GetREVID+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0c1b      	lsrs	r3, r3, #16
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	5c001000 	.word	0x5c001000

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <__NVIC_SetPriorityGrouping+0x40>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	4313      	orrs	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x40>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	05fa0000 	.word	0x05fa0000

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff47 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff5e 	bl	8001448 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff90 	bl	80014b8 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffb2 	bl	8001520 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b098      	sub	sp, #96	; 0x60
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80015d0:	4a84      	ldr	r2, [pc, #528]	; (80017e4 <HAL_FDCAN_Init+0x21c>)
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4611      	mov	r1, r2
 80015d8:	224c      	movs	r2, #76	; 0x4c
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 f800 	bl	80065e0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e1c6      	b.n	8001978 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a7e      	ldr	r2, [pc, #504]	; (80017e8 <HAL_FDCAN_Init+0x220>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d106      	bne.n	8001602 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fbb2 	bl	8000d80 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0210 	bic.w	r2, r2, #16
 800162a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800162c:	f7ff feac 	bl	8001388 <HAL_GetTick>
 8001630:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001632:	e014      	b.n	800165e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001634:	f7ff fea8 	bl	8001388 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b0a      	cmp	r3, #10
 8001640:	d90d      	bls.n	800165e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e18c      	b.n	8001978 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b08      	cmp	r3, #8
 800166a:	d0e3      	beq.n	8001634 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800167c:	f7ff fe84 	bl	8001388 <HAL_GetTick>
 8001680:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001682:	e014      	b.n	80016ae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001684:	f7ff fe80 	bl	8001388 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b0a      	cmp	r3, #10
 8001690:	d90d      	bls.n	80016ae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e164      	b.n	8001978 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0e3      	beq.n	8001684 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0202 	orr.w	r2, r2, #2
 80016ca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7c1b      	ldrb	r3, [r3, #16]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d108      	bne.n	80016e6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e2:	619a      	str	r2, [r3, #24]
 80016e4:	e007      	b.n	80016f6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	699a      	ldr	r2, [r3, #24]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7c5b      	ldrb	r3, [r3, #17]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699a      	ldr	r2, [r3, #24]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800170c:	619a      	str	r2, [r3, #24]
 800170e:	e007      	b.n	8001720 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800171e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7c9b      	ldrb	r3, [r3, #18]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	e007      	b.n	800174a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001748:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800176e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0210 	bic.w	r2, r2, #16
 800177e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0204 	orr.w	r2, r2, #4
 8001796:	619a      	str	r2, [r3, #24]
 8001798:	e030      	b.n	80017fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d02c      	beq.n	80017fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d020      	beq.n	80017ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0210 	orr.w	r2, r2, #16
 80017c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d114      	bne.n	80017fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0220 	orr.w	r2, r2, #32
 80017e0:	619a      	str	r2, [r3, #24]
 80017e2:	e00b      	b.n	80017fc <HAL_FDCAN_Init+0x234>
 80017e4:	08006614 	.word	0x08006614
 80017e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	3b01      	subs	r3, #1
 8001802:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	3b01      	subs	r3, #1
 800180a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800180c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001814:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	3b01      	subs	r3, #1
 800181e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001824:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001826:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001830:	d115      	bne.n	800185e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	3b01      	subs	r3, #1
 800183e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001840:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	3b01      	subs	r3, #1
 8001848:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800184a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	3b01      	subs	r3, #1
 8001854:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800185a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800185c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00a      	beq.n	800187c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	4413      	add	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d011      	beq.n	80018ae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001892:	f023 0107 	bic.w	r1, r3, #7
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3360      	adds	r3, #96	; 0x60
 800189e:	443b      	add	r3, r7
 80018a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d011      	beq.n	80018da <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80018be:	f023 0107 	bic.w	r1, r3, #7
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	3360      	adds	r3, #96	; 0x60
 80018ca:	443b      	add	r3, r7
 80018cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d012      	beq.n	8001908 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80018ea:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	3360      	adds	r3, #96	; 0x60
 80018f6:	443b      	add	r3, r7
 80018f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80018fc:	011a      	lsls	r2, r3, #4
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190c:	2b00      	cmp	r3, #0
 800190e:	d012      	beq.n	8001936 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001918:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3360      	adds	r3, #96	; 0x60
 8001924:	443b      	add	r3, r7
 8001926:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800192a:	021a      	lsls	r2, r3, #8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_FDCAN_Init+0x3b8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d107      	bne.n	8001950 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f022 0203 	bic.w	r2, r2, #3
 800194e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f981 	bl	8001c70 <FDCAN_CalcultateRamBlockAddresses>
 800196e:	4603      	mov	r3, r0
 8001970:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001974:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001978:	4618      	mov	r0, r3
 800197a:	3760      	adds	r7, #96	; 0x60
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	4000a000 	.word	0x4000a000

08001984 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001994:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d002      	beq.n	80019a2 <HAL_FDCAN_ConfigFilter+0x1e>
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d157      	bne.n	8001a52 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d12b      	bne.n	8001a02 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d10d      	bne.n	80019ce <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80019be:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80019c4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80019c6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00e      	b.n	80019ec <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80019da:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80019e2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e025      	b.n	8001a4e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	075a      	lsls	r2, r3, #29
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b07      	cmp	r3, #7
 8001a16:	d103      	bne.n	8001a20 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	e006      	b.n	8001a2e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	079a      	lsls	r2, r3, #30
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3304      	adds	r3, #4
 8001a46:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e008      	b.n	8001a64 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a58:	f043 0202 	orr.w	r2, r3, #2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
  }
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d111      	bne.n	8001aa8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e008      	b.n	8001aba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aae:	f043 0204 	orr.w	r2, r3, #4
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
  }
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d141      	bne.n	8001b62 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ae6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001af4:	f043 0220 	orr.w	r2, r3, #32
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e038      	b.n	8001b74 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e026      	b.n	8001b74 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 fa1d 	bl	8001f7c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2101      	movs	r1, #1
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001b52:	2201      	movs	r2, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e008      	b.n	8001b74 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b68:	f043 0208 	orr.w	r2, r3, #8
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
  }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b8e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d002      	beq.n	8001b9c <HAL_FDCAN_ActivateNotification+0x20>
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d155      	bne.n	8001c48 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bba:	e014      	b.n	8001be6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d108      	bne.n	8001bde <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0202 	orr.w	r2, r2, #2
 8001bda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bdc:	e003      	b.n	8001be6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2203      	movs	r2, #3
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_FDCAN_ActivateNotification+0xec>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6553      	str	r3, [r2, #84]	; 0x54
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0f9b      	lsrs	r3, r3, #30
 8001c3e:	490b      	ldr	r1, [pc, #44]	; (8001c6c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e008      	b.n	8001c5a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	3fcfffff 	.word	0x3fcfffff
 8001c6c:	4000a800 	.word	0x4000a800

08001c70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c86:	4ba7      	ldr	r3, [pc, #668]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	0091      	lsls	r1, r2, #2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	430b      	orrs	r3, r1
 8001c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cc6:	4b97      	ldr	r3, [pc, #604]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	0091      	lsls	r1, r2, #2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001d08:	4b86      	ldr	r3, [pc, #536]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	0091      	lsls	r1, r2, #2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	041a      	lsls	r2, r3, #16
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d50:	4b74      	ldr	r3, [pc, #464]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	0091      	lsls	r1, r2, #2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d98:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	0091      	lsls	r1, r2, #2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	4413      	add	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001dc4:	4b57      	ldr	r3, [pc, #348]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	0091      	lsls	r1, r2, #2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dde:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	041a      	lsls	r2, r3, #16
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	0091      	lsls	r1, r2, #2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	430b      	orrs	r3, r1
 8001e14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e44:	061a      	lsls	r2, r3, #24
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e54:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001e56:	4413      	add	r3, r2
 8001e58:	009a      	lsls	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	441a      	add	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	441a      	add	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	441a      	add	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	441a      	add	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	441a      	add	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d915      	bls.n	8001f4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001f20:	e006      	b.n	8001f30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001f22:	bf00      	nop
 8001f24:	ffff0003 	.word	0xffff0003
 8001f28:	10002b00 	.word	0x10002b00
 8001f2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e010      	b.n	8001f6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e005      	b.n	8001f60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d3f3      	bcc.n	8001f54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop

08001f7c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10a      	bne.n	8001fa8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001f9a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e00a      	b.n	8001fbe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001fb0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001fb6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fbc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001fc8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001fce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001fd4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3304      	adds	r3, #4
 800200a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e020      	b.n	8002054 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3303      	adds	r3, #3
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3302      	adds	r3, #2
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	440b      	add	r3, r1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800202a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	440b      	add	r3, r1
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002038:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	440a      	add	r2, r1
 8002040:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002042:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	3304      	adds	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3304      	adds	r3, #4
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	4a06      	ldr	r2, [pc, #24]	; (8002074 <FDCAN_CopyMessageToRAM+0xf8>)
 800205c:	5cd3      	ldrb	r3, [r2, r3]
 800205e:	461a      	mov	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4293      	cmp	r3, r2
 8002064:	d3d5      	bcc.n	8002012 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3724      	adds	r7, #36	; 0x24
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	08006670 	.word	0x08006670

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002086:	4b89      	ldr	r3, [pc, #548]	; (80022ac <HAL_GPIO_Init+0x234>)
 8002088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800208a:	e194      	b.n	80023b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8186 	beq.w	80023b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d005      	beq.n	80020bc <HAL_GPIO_Init+0x44>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d130      	bne.n	800211e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020f2:	2201      	movs	r2, #1
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f003 0201 	and.w	r2, r3, #1
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b03      	cmp	r3, #3
 8002128:	d017      	beq.n	800215a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d123      	bne.n	80021ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	69b9      	ldr	r1, [r7, #24]
 80021aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0203 	and.w	r2, r3, #3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80e0 	beq.w	80023b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f0:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_GPIO_Init+0x238>)
 80021f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021f6:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <HAL_GPIO_Init+0x238>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_GPIO_Init+0x238>)
 8002202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <HAL_GPIO_Init+0x23c>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <HAL_GPIO_Init+0x240>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d052      	beq.n	80022e0 <HAL_GPIO_Init+0x268>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <HAL_GPIO_Init+0x244>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d031      	beq.n	80022a6 <HAL_GPIO_Init+0x22e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_GPIO_Init+0x248>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02b      	beq.n	80022a2 <HAL_GPIO_Init+0x22a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_GPIO_Init+0x24c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d025      	beq.n	800229e <HAL_GPIO_Init+0x226>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_GPIO_Init+0x250>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01f      	beq.n	800229a <HAL_GPIO_Init+0x222>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_GPIO_Init+0x254>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x21e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x258>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x21a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_GPIO_Init+0x25c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x216>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_GPIO_Init+0x260>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x212>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_GPIO_Init+0x264>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x20e>
 8002282:	2309      	movs	r3, #9
 8002284:	e02d      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 8002286:	230a      	movs	r3, #10
 8002288:	e02b      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 800228a:	2308      	movs	r3, #8
 800228c:	e029      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 800228e:	2307      	movs	r3, #7
 8002290:	e027      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 8002292:	2306      	movs	r3, #6
 8002294:	e025      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 8002296:	2305      	movs	r3, #5
 8002298:	e023      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 800229a:	2304      	movs	r3, #4
 800229c:	e021      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 800229e:	2303      	movs	r3, #3
 80022a0:	e01f      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e01d      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e01b      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 80022aa:	bf00      	nop
 80022ac:	58000080 	.word	0x58000080
 80022b0:	58024400 	.word	0x58024400
 80022b4:	58000400 	.word	0x58000400
 80022b8:	58020000 	.word	0x58020000
 80022bc:	58020400 	.word	0x58020400
 80022c0:	58020800 	.word	0x58020800
 80022c4:	58020c00 	.word	0x58020c00
 80022c8:	58021000 	.word	0x58021000
 80022cc:	58021400 	.word	0x58021400
 80022d0:	58021800 	.word	0x58021800
 80022d4:	58021c00 	.word	0x58021c00
 80022d8:	58022000 	.word	0x58022000
 80022dc:	58022400 	.word	0x58022400
 80022e0:	2300      	movs	r3, #0
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f002 0203 	and.w	r2, r2, #3
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	4093      	lsls	r3, r2
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f2:	4938      	ldr	r1, [pc, #224]	; (80023d4 <HAL_GPIO_Init+0x35c>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f ae63 	bne.w	800208c <HAL_GPIO_Init+0x14>
  }
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	3724      	adds	r7, #36	; 0x24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	58000400 	.word	0x58000400

080023d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe fd8e 	bl	8000f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e006      	b.n	8002460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800245e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d104      	bne.n	8002472 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_I2C_Init+0x11c>)
 800247e:	430b      	orrs	r3, r1
 8002480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69d9      	ldr	r1, [r3, #28]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	02008000 	.word	0x02008000

080024f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	d138      	bne.n	8002580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002518:	2302      	movs	r3, #2
 800251a:	e032      	b.n	8002582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800254a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002580:	2302      	movs	r3, #2
  }
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d139      	bne.n	8002618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e033      	b.n	800261a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2224      	movs	r2, #36	; 0x24
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d00a      	beq.n	8002652 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01f      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e01d      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	490f      	ldr	r1, [pc, #60]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002662:	f7fe fe91 	bl	8001388 <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002668:	e009      	b.n	800267e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800266a:	f7fe fe8d 	bl	8001388 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002678:	d901      	bls.n	800267e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	d1ee      	bne.n	800266a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	58024800 	.word	0x58024800

0800269c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f000 bc48 	b.w	8002f40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8088 	beq.w	80027ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026be:	4b99      	ldr	r3, [pc, #612]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c8:	4b96      	ldr	r3, [pc, #600]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d007      	beq.n	80026e4 <HAL_RCC_OscConfig+0x48>
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	2b18      	cmp	r3, #24
 80026d8:	d111      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	4b8f      	ldr	r3, [pc, #572]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d06d      	beq.n	80027cc <HAL_RCC_OscConfig+0x130>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d169      	bne.n	80027cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f000 bc21 	b.w	8002f40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x7a>
 8002708:	4b86      	ldr	r3, [pc, #536]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a85      	ldr	r2, [pc, #532]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e02e      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x9c>
 800271e:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a80      	ldr	r2, [pc, #512]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b7e      	ldr	r3, [pc, #504]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7d      	ldr	r2, [pc, #500]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0xc0>
 8002742:	4b78      	ldr	r3, [pc, #480]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a77      	ldr	r2, [pc, #476]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b75      	ldr	r3, [pc, #468]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a74      	ldr	r2, [pc, #464]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 800275c:	4b71      	ldr	r3, [pc, #452]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a70      	ldr	r2, [pc, #448]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b6e      	ldr	r3, [pc, #440]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6d      	ldr	r2, [pc, #436]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fe04 	bl	8001388 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fe00 	bl	8001388 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e3d4      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xe8>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fdf0 	bl	8001388 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fdec 	bl	8001388 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e3c0      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027be:	4b59      	ldr	r3, [pc, #356]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x110>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80ca 	beq.w	8002970 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027dc:	4b51      	ldr	r3, [pc, #324]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027e6:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_RCC_OscConfig+0x166>
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2b18      	cmp	r3, #24
 80027f6:	d156      	bne.n	80028a6 <HAL_RCC_OscConfig+0x20a>
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d151      	bne.n	80028a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002802:	4b48      	ldr	r3, [pc, #288]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x17e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e392      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800281a:	4b42      	ldr	r3, [pc, #264]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 0219 	bic.w	r2, r3, #25
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	493f      	ldr	r1, [pc, #252]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fdac 	bl	8001388 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002834:	f7fe fda8 	bl	8001388 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e37c      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	f7fe fdc9 	bl	80013e8 <HAL_GetREVID>
 8002856:	4603      	mov	r3, r0
 8002858:	f241 0203 	movw	r2, #4099	; 0x1003
 800285c:	4293      	cmp	r3, r2
 800285e:	d817      	bhi.n	8002890 <HAL_RCC_OscConfig+0x1f4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d108      	bne.n	800287a <HAL_RCC_OscConfig+0x1de>
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002870:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002876:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002878:	e07a      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	031b      	lsls	r3, r3, #12
 8002888:	4926      	ldr	r1, [pc, #152]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288e:	e06f      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	4921      	ldr	r1, [pc, #132]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a4:	e064      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d047      	beq.n	800293e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 0219 	bic.w	r2, r3, #25
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	491a      	ldr	r1, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fd62 	bl	8001388 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c8:	f7fe fd5e 	bl	8001388 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e332      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	f7fe fd7f 	bl	80013e8 <HAL_GetREVID>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d819      	bhi.n	8002928 <HAL_RCC_OscConfig+0x28c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d108      	bne.n	800290e <HAL_RCC_OscConfig+0x272>
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002904:	4a07      	ldr	r2, [pc, #28]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290a:	6053      	str	r3, [r2, #4]
 800290c:	e030      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	031b      	lsls	r3, r3, #12
 800291c:	4901      	ldr	r1, [pc, #4]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
 8002922:	e025      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
 8002924:	58024400 	.word	0x58024400
 8002928:	4b9a      	ldr	r3, [pc, #616]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	4997      	ldr	r1, [pc, #604]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
 800293c:	e018      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b95      	ldr	r3, [pc, #596]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a94      	ldr	r2, [pc, #592]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fd1d 	bl	8001388 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe fd19 	bl	8001388 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e2ed      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002964:	4b8b      	ldr	r3, [pc, #556]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a9 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b85      	ldr	r3, [pc, #532]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002986:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002988:	4b82      	ldr	r3, [pc, #520]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d007      	beq.n	80029a4 <HAL_RCC_OscConfig+0x308>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b18      	cmp	r3, #24
 8002998:	d13a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x374>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d135      	bne.n	8002a10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a4:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x320>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e2c1      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029bc:	f7fe fd14 	bl	80013e8 <HAL_GetREVID>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d817      	bhi.n	80029fa <HAL_RCC_OscConfig+0x35e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x348>
 80029d2:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e2:	e075      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e4:	4b6b      	ldr	r3, [pc, #428]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	4968      	ldr	r1, [pc, #416]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029f8:	e06a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fa:	4b66      	ldr	r3, [pc, #408]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	061b      	lsls	r3, r3, #24
 8002a08:	4962      	ldr	r1, [pc, #392]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a0e:	e05f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d042      	beq.n	8002a9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a18:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5d      	ldr	r2, [pc, #372]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fcb0 	bl	8001388 <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fcac 	bl	8001388 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e280      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a3e:	4b55      	ldr	r3, [pc, #340]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a4a:	f7fe fccd 	bl	80013e8 <HAL_GetREVID>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d817      	bhi.n	8002a88 <HAL_RCC_OscConfig+0x3ec>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d108      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3d6>
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a68:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a6e:	6053      	str	r3, [r2, #4]
 8002a70:	e02e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
 8002a72:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	069b      	lsls	r3, r3, #26
 8002a80:	4944      	ldr	r1, [pc, #272]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
 8002a86:	e023      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
 8002a88:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	493f      	ldr	r1, [pc, #252]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a3c      	ldr	r2, [pc, #240]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fc6d 	bl	8001388 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fc69 	bl	8001388 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e23d      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ac4:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d036      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d019      	beq.n	8002b18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7fe fc4a 	bl	8001388 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fe fc46 	bl	8001388 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e21a      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x45c>
 8002b16:	e018      	b.n	8002b4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe fc30 	bl	8001388 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fc2c 	bl	8001388 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e200      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d039      	beq.n	8002bca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fc0d 	bl	8001388 <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b72:	f7fe fc09 	bl	8001388 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e1dd      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4d6>
 8002b90:	e01b      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
 8002b92:	bf00      	nop
 8002b94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b98:	4b9b      	ldr	r3, [pc, #620]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a9a      	ldr	r2, [pc, #616]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fbf0 	bl	8001388 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bac:	f7fe fbec 	bl	8001388 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1c0      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bbe:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8081 	beq.w	8002cda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <HAL_RCC_OscConfig+0x770>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a8b      	ldr	r2, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x770>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be4:	f7fe fbd0 	bl	8001388 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bec:	f7fe fbcc 	bl	8001388 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1a0      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bfe:	4b83      	ldr	r3, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x770>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x584>
 8002c12:	4b7d      	ldr	r3, [pc, #500]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1e:	e02d      	b.n	8002c7c <HAL_RCC_OscConfig+0x5e0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10c      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5a6>
 8002c28:	4b77      	ldr	r3, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a76      	ldr	r2, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a73      	ldr	r2, [pc, #460]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c40:	e01c      	b.n	8002c7c <HAL_RCC_OscConfig+0x5e0>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5c8>
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a6b      	ldr	r2, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0x5e0>
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a64      	ldr	r2, [pc, #400]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c76:	f023 0304 	bic.w	r3, r3, #4
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d015      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fb80 	bl	8001388 <HAL_GetTick>
 8002c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe fb7c 	bl	8001388 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e14e      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ee      	beq.n	8002c8c <HAL_RCC_OscConfig+0x5f0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fb6a 	bl	8001388 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fb66 	bl	8001388 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e138      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cce:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ee      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 812d 	beq.w	8002f3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ce4:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cec:	2b18      	cmp	r3, #24
 8002cee:	f000 80bd 	beq.w	8002e6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	f040 809e 	bne.w	8002e38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a41      	ldr	r2, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fb3e 	bl	8001388 <HAL_GetTick>
 8002d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe fb3a 	bl	8001388 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e10e      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_OscConfig+0x774>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	430a      	orrs	r2, r1
 8002d42:	4931      	ldr	r1, [pc, #196]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	628b      	str	r3, [r1, #40]	; 0x28
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	3b01      	subs	r3, #1
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	3b01      	subs	r3, #1
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d78:	4923      	ldr	r1, [pc, #140]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	4a21      	ldr	r2, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x778>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d96:	00d2      	lsls	r2, r2, #3
 8002d98:	491b      	ldr	r1, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f023 020c 	bic.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4917      	ldr	r1, [pc, #92]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	f023 0202 	bic.w	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	4912      	ldr	r1, [pc, #72]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fac3 	bl	8001388 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e04:	e011      	b.n	8002e2a <HAL_RCC_OscConfig+0x78e>
 8002e06:	bf00      	nop
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	58024800 	.word	0x58024800
 8002e10:	fffffc0c 	.word	0xfffffc0c
 8002e14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fab6 	bl	8001388 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e08a      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x77c>
 8002e36:	e082      	b.n	8002f3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a42      	ldr	r2, [pc, #264]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe faa0 	bl	8001388 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fa9c 	bl	8001388 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e070      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x7b0>
 8002e6a:	e068      	b.n	8002f3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e72:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d031      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d12a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d122      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0a5b      	lsrs	r3, r3, #9
 8002eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	0e1b      	lsrs	r3, r3, #24
 8002ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e02b      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ee8:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	08db      	lsrs	r3, r3, #3
 8002eee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d01f      	beq.n	8002f3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f0a:	f7fe fa3d 	bl	8001388 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f10:	bf00      	nop
 8002f12:	f7fe fa39 	bl	8001388 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d0f9      	beq.n	8002f12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RCC_OscConfig+0x8b0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f2a:	00d2      	lsls	r2, r2, #3
 8002f2c:	4906      	ldr	r1, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3730      	adds	r7, #48	; 0x30
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	ffff0007 	.word	0xffff0007

08002f50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e19c      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b8a      	ldr	r3, [pc, #552]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d910      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b87      	ldr	r3, [pc, #540]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	4985      	ldr	r1, [pc, #532]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b83      	ldr	r3, [pc, #524]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e184      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	4b7b      	ldr	r3, [pc, #492]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d908      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb0:	4b78      	ldr	r3, [pc, #480]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	4975      	ldr	r1, [pc, #468]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d010      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	4b70      	ldr	r3, [pc, #448]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d908      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fde:	4b6d      	ldr	r3, [pc, #436]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	496a      	ldr	r1, [pc, #424]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	4b64      	ldr	r3, [pc, #400]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003008:	429a      	cmp	r2, r3
 800300a:	d908      	bls.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800300c:	4b61      	ldr	r3, [pc, #388]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	495e      	ldr	r1, [pc, #376]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800301a:	4313      	orrs	r3, r2
 800301c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003036:	429a      	cmp	r2, r3
 8003038:	d908      	bls.n	800304c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800303a:	4b56      	ldr	r3, [pc, #344]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4953      	ldr	r1, [pc, #332]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003048:	4313      	orrs	r3, r2
 800304a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	429a      	cmp	r2, r3
 8003066:	d908      	bls.n	800307a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f023 020f 	bic.w	r2, r3, #15
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4947      	ldr	r1, [pc, #284]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003076:	4313      	orrs	r3, r2
 8003078:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d055      	beq.n	8003132 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003086:	4b43      	ldr	r3, [pc, #268]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4940      	ldr	r1, [pc, #256]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003094:	4313      	orrs	r3, r2
 8003096:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a0:	4b3c      	ldr	r3, [pc, #240]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d121      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0f6      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d115      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0ea      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0de      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0d6      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f023 0207 	bic.w	r2, r3, #7
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4925      	ldr	r1, [pc, #148]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003102:	f7fe f941 	bl	8001388 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003108:	e00a      	b.n	8003120 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310a:	f7fe f93d 	bl	8001388 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0be      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003120:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	429a      	cmp	r2, r3
 8003130:	d1eb      	bne.n	800310a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	429a      	cmp	r2, r3
 800314c:	d208      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f023 020f 	bic.w	r2, r3, #15
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	490e      	ldr	r1, [pc, #56]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800315c:	4313      	orrs	r3, r2
 800315e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d214      	bcs.n	8003198 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 020f 	bic.w	r2, r3, #15
 8003176:	4906      	ldr	r1, [pc, #24]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e086      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
 8003190:	52002000 	.word	0x52002000
 8003194:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d208      	bcs.n	80031c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b4:	4b3c      	ldr	r3, [pc, #240]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	4939      	ldr	r1, [pc, #228]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031de:	429a      	cmp	r2, r3
 80031e0:	d208      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	492e      	ldr	r1, [pc, #184]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800320c:	429a      	cmp	r2, r3
 800320e:	d208      	bcs.n	8003222 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4922      	ldr	r1, [pc, #136]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 800321e:	4313      	orrs	r3, r2
 8003220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800323a:	429a      	cmp	r2, r3
 800323c:	d208      	bcs.n	8003250 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800323e:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 800324c:	4313      	orrs	r3, r2
 800324e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003250:	f000 f834 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	4912      	ldr	r1, [pc, #72]	; (80032ac <HAL_RCC_ClockConfig+0x35c>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
 800326c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_RCC_ClockConfig+0x35c>)
 8003278:	5cd3      	ldrb	r3, [r2, r3]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
 8003284:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x360>)
 8003286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x364>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x368>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe f82e 	bl	80012f4 <HAL_InitTick>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	58024400 	.word	0x58024400
 80032ac:	08006660 	.word	0x08006660
 80032b0:	24000004 	.word	0x24000004
 80032b4:	24000000 	.word	0x24000000
 80032b8:	24000008 	.word	0x24000008

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c2:	4bb3      	ldr	r3, [pc, #716]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ca:	2b18      	cmp	r3, #24
 80032cc:	f200 8155 	bhi.w	800357a <HAL_RCC_GetSysClockFreq+0x2be>
 80032d0:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	0800333d 	.word	0x0800333d
 80032dc:	0800357b 	.word	0x0800357b
 80032e0:	0800357b 	.word	0x0800357b
 80032e4:	0800357b 	.word	0x0800357b
 80032e8:	0800357b 	.word	0x0800357b
 80032ec:	0800357b 	.word	0x0800357b
 80032f0:	0800357b 	.word	0x0800357b
 80032f4:	0800357b 	.word	0x0800357b
 80032f8:	08003363 	.word	0x08003363
 80032fc:	0800357b 	.word	0x0800357b
 8003300:	0800357b 	.word	0x0800357b
 8003304:	0800357b 	.word	0x0800357b
 8003308:	0800357b 	.word	0x0800357b
 800330c:	0800357b 	.word	0x0800357b
 8003310:	0800357b 	.word	0x0800357b
 8003314:	0800357b 	.word	0x0800357b
 8003318:	08003369 	.word	0x08003369
 800331c:	0800357b 	.word	0x0800357b
 8003320:	0800357b 	.word	0x0800357b
 8003324:	0800357b 	.word	0x0800357b
 8003328:	0800357b 	.word	0x0800357b
 800332c:	0800357b 	.word	0x0800357b
 8003330:	0800357b 	.word	0x0800357b
 8003334:	0800357b 	.word	0x0800357b
 8003338:	0800336f 	.word	0x0800336f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800333c:	4b94      	ldr	r3, [pc, #592]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003348:	4b91      	ldr	r3, [pc, #580]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	4a90      	ldr	r2, [pc, #576]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800335a:	e111      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800335c:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800335e:	61bb      	str	r3, [r7, #24]
      break;
 8003360:	e10e      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003362:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003364:	61bb      	str	r3, [r7, #24]
      break;
 8003366:	e10b      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003368:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800336a:	61bb      	str	r3, [r7, #24]
      break;
 800336c:	e108      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003378:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003382:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003384:	4b82      	ldr	r3, [pc, #520]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800338e:	4b80      	ldr	r3, [pc, #512]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	08db      	lsrs	r3, r3, #3
 8003394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80e1 	beq.w	8003574 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	f000 8083 	beq.w	80034c0 <HAL_RCC_GetSysClockFreq+0x204>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	f200 80a1 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x248>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x114>
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d056      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x1c0>
 80033ce:	e099      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033d0:	4b6f      	ldr	r3, [pc, #444]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d02d      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033dc:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	4a6b      	ldr	r2, [pc, #428]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b62      	ldr	r3, [pc, #392]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003416:	ed97 6a02 	vldr	s12, [r7, #8]
 800341a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003436:	e087      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	ed97 6a02 	vldr	s12, [r7, #8]
 800345e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347a:	e065      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349e:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034be:	e043      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80034ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003502:	e021      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	ed97 6a02 	vldr	s12, [r7, #8]
 800352a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800352e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003546:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	0a5b      	lsrs	r3, r3, #9
 800354e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003552:	3301      	adds	r3, #1
 8003554:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003560:	edd7 6a07 	vldr	s13, [r7, #28]
 8003564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356c:	ee17 3a90 	vmov	r3, s15
 8003570:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003572:	e005      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
      break;
 8003578:	e002      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800357c:	61bb      	str	r3, [r7, #24]
      break;
 800357e:	bf00      	nop
  }

  return sysclockfreq;
 8003580:	69bb      	ldr	r3, [r7, #24]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	58024400 	.word	0x58024400
 8003594:	03d09000 	.word	0x03d09000
 8003598:	003d0900 	.word	0x003d0900
 800359c:	017d7840 	.word	0x017d7840
 80035a0:	46000000 	.word	0x46000000
 80035a4:	4c742400 	.word	0x4c742400
 80035a8:	4a742400 	.word	0x4a742400
 80035ac:	4bbebc20 	.word	0x4bbebc20

080035b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035b6:	f7ff fe81 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_RCC_GetHCLKFreq+0x50>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	490f      	ldr	r1, [pc, #60]	; (8003604 <HAL_RCC_GetHCLKFreq+0x54>)
 80035c8:	5ccb      	ldrb	r3, [r1, r3]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_RCC_GetHCLKFreq+0x50>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	4a09      	ldr	r2, [pc, #36]	; (8003604 <HAL_RCC_GetHCLKFreq+0x54>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ea:	4a07      	ldr	r2, [pc, #28]	; (8003608 <HAL_RCC_GetHCLKFreq+0x58>)
 80035ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <HAL_RCC_GetHCLKFreq+0x5c>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <HAL_RCC_GetHCLKFreq+0x58>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	58024400 	.word	0x58024400
 8003604:	08006660 	.word	0x08006660
 8003608:	24000004 	.word	0x24000004
 800360c:	24000000 	.word	0x24000000

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003614:	f7ff ffcc 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4904      	ldr	r1, [pc, #16]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	58024400 	.word	0x58024400
 8003638:	08006660 	.word	0x08006660

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003640:	f7ff ffb6 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4904      	ldr	r1, [pc, #16]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	58024400 	.word	0x58024400
 8003664:	08006660 	.word	0x08006660

08003668 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800366c:	b0ca      	sub	sp, #296	; 0x128
 800366e:	af00      	add	r7, sp, #0
 8003670:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367a:	2300      	movs	r3, #0
 800367c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800368c:	2500      	movs	r5, #0
 800368e:	ea54 0305 	orrs.w	r3, r4, r5
 8003692:	d049      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800369e:	d02f      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036a4:	d828      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036aa:	d01a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b0:	d822      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ba:	d007      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036bc:	e01c      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036be:	4bb8      	ldr	r3, [pc, #736]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	4ab7      	ldr	r2, [pc, #732]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ca:	e01a      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	3308      	adds	r3, #8
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fc8f 	bl	8004ff8 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036e0:	e00f      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e6:	3328      	adds	r3, #40	; 0x28
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fd36 	bl	800515c <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036f6:	e004      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800370a:	4ba5      	ldr	r3, [pc, #660]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800370c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003718:	4aa1      	ldr	r2, [pc, #644]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371a:	430b      	orrs	r3, r1
 800371c:	6513      	str	r3, [r2, #80]	; 0x50
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003734:	f04f 0900 	mov.w	r9, #0
 8003738:	ea58 0309 	orrs.w	r3, r8, r9
 800373c:	d047      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	2b04      	cmp	r3, #4
 8003746:	d82a      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003748:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003765 	.word	0x08003765
 8003754:	08003773 	.word	0x08003773
 8003758:	08003789 	.word	0x08003789
 800375c:	080037a7 	.word	0x080037a7
 8003760:	080037a7 	.word	0x080037a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003764:	4b8e      	ldr	r3, [pc, #568]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a8d      	ldr	r2, [pc, #564]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003770:	e01a      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003776:	3308      	adds	r3, #8
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fc3c 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003786:	e00f      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378c:	3328      	adds	r3, #40	; 0x28
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f001 fce3 	bl	800515c <RCCEx_PLL3_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800379c:	e004      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037b0:	4b7b      	ldr	r3, [pc, #492]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	f023 0107 	bic.w	r1, r3, #7
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	4a78      	ldr	r2, [pc, #480]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6513      	str	r3, [r2, #80]	; 0x50
 80037c4:	e003      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80037da:	f04f 0b00 	mov.w	fp, #0
 80037de:	ea5a 030b 	orrs.w	r3, sl, fp
 80037e2:	d04c      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	d030      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f4:	d829      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037f6:	2bc0      	cmp	r3, #192	; 0xc0
 80037f8:	d02d      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037fa:	2bc0      	cmp	r3, #192	; 0xc0
 80037fc:	d825      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d018      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d821      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d007      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800380e:	e01c      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003810:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4a62      	ldr	r2, [pc, #392]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800381c:	e01c      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	3308      	adds	r3, #8
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fbe6 	bl	8004ff8 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003832:	e011      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003838:	3328      	adds	r3, #40	; 0x28
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fc8d 	bl	800515c <RCCEx_PLL3_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003848:	e006      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003850:	e002      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003860:	4b4f      	ldr	r3, [pc, #316]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003870:	430b      	orrs	r3, r1
 8003872:	6513      	str	r3, [r2, #80]	; 0x50
 8003874:	e003      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800387a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800388a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003894:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003898:	460b      	mov	r3, r1
 800389a:	4313      	orrs	r3, r2
 800389c:	d053      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038aa:	d035      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80038ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038b0:	d82e      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038b6:	d031      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80038b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038bc:	d828      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c2:	d01a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80038c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c8:	d822      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80038ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d2:	d007      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80038d4:	e01c      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d6:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	4a31      	ldr	r2, [pc, #196]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038e2:	e01c      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	3308      	adds	r3, #8
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fb83 	bl	8004ff8 <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038f8:	e011      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fe:	3328      	adds	r3, #40	; 0x28
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fc2a 	bl	800515c <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800390e:	e006      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003916:	e002      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800391c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003936:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6593      	str	r3, [r2, #88]	; 0x58
 800393c:	e003      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003942:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003952:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800395c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003960:	460b      	mov	r3, r1
 8003962:	4313      	orrs	r3, r2
 8003964:	d056      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800396e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003972:	d038      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003978:	d831      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800397a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800397e:	d034      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003980:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003984:	d82b      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800398a:	d01d      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800398c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003990:	d825      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003996:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800399c:	e01f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800399e:	bf00      	nop
 80039a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a4:	4ba2      	ldr	r3, [pc, #648]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4aa1      	ldr	r2, [pc, #644]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039b0:	e01c      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b6:	3308      	adds	r3, #8
 80039b8:	2100      	movs	r1, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fb1c 	bl	8004ff8 <RCCEx_PLL2_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039c6:	e011      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039cc:	3328      	adds	r3, #40	; 0x28
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fbc3 	bl	800515c <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039dc:	e006      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039f4:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a04:	4a8a      	ldr	r2, [pc, #552]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a06:	430b      	orrs	r3, r1
 8003a08:	6593      	str	r3, [r2, #88]	; 0x58
 8003a0a:	e003      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4313      	orrs	r3, r2
 8003a32:	d03a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	2b30      	cmp	r3, #48	; 0x30
 8003a3c:	d01f      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a3e:	2b30      	cmp	r3, #48	; 0x30
 8003a40:	d819      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d00c      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d815      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d019      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d111      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a52:	4b77      	ldr	r3, [pc, #476]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4a76      	ldr	r2, [pc, #472]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a5e:	e011      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a64:	3308      	adds	r3, #8
 8003a66:	2102      	movs	r1, #2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 fac5 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a74:	e006      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a7c:	e002      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a8c:	4b68      	ldr	r3, [pc, #416]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	4a65      	ldr	r2, [pc, #404]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aa0:	e003      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003ab6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003aba:	2300      	movs	r3, #0
 8003abc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ac0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	d051      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad4:	d035      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ada:	d82e      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003adc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ae0:	d031      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ae2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ae6:	d828      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d01a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	d822      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afc:	d007      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003afe:	e01c      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b00:	4b4b      	ldr	r3, [pc, #300]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4a4a      	ldr	r2, [pc, #296]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b0c:	e01c      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b12:	3308      	adds	r3, #8
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fa6e 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b22:	e011      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b28:	3328      	adds	r3, #40	; 0x28
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 fb15 	bl	800515c <RCCEx_PLL3_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b38:	e006      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b40:	e002      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b50:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b54:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5e:	4a34      	ldr	r2, [pc, #208]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6513      	str	r3, [r2, #80]	; 0x50
 8003b64:	e003      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d056      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b98:	d033      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b9e:	d82c      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ba0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ba4:	d02f      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ba6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003baa:	d826      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bb0:	d02b      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003bb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bb6:	d820      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bbc:	d012      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc2:	d81a      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d022      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d115      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 fa0e 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003be2:	e015      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be8:	3328      	adds	r3, #40	; 0x28
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 fab5 	bl	800515c <RCCEx_PLL3_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c00:	e006      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c02:	bf00      	nop
 8003c04:	e004      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c26:	4a02      	ldr	r2, [pc, #8]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6513      	str	r3, [r2, #80]	; 0x50
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c2e:	bf00      	nop
 8003c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	d055      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c68:	d033      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6e:	d82c      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d02f      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d826      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c80:	d02b      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c86:	d820      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d012      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c92:	d81a      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d022      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9c:	d115      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 f9a6 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cb2:	e015      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb8:	3328      	adds	r3, #40	; 0x28
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 fa4d 	bl	800515c <RCCEx_PLL3_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cd0:	e006      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e004      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ce8:	4ba3      	ldr	r3, [pc, #652]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cf8:	4a9f      	ldr	r2, [pc, #636]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	d037      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d32:	d00e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d38:	d816      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d42:	d111      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a8b      	ldr	r2, [pc, #556]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d50:	e00f      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d56:	3308      	adds	r3, #8
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 f94c 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d66:	e004      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d7a:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a7b      	ldr	r2, [pc, #492]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6513      	str	r3, [r2, #80]	; 0x50
 8003d8e:	e003      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da8:	2300      	movs	r3, #0
 8003daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003dae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4313      	orrs	r3, r2
 8003db6:	d039      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d81c      	bhi.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003e05 	.word	0x08003e05
 8003dcc:	08003dd9 	.word	0x08003dd9
 8003dd0:	08003de7 	.word	0x08003de7
 8003dd4:	08003e05 	.word	0x08003e05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd8:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a66      	ldr	r2, [pc, #408]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003de4:	e00f      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dea:	3308      	adds	r3, #8
 8003dec:	2102      	movs	r1, #2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 f902 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dfa:	e004      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e02:	e000      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e0e:	4b5a      	ldr	r3, [pc, #360]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	f023 0103 	bic.w	r1, r3, #3
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	4a56      	ldr	r2, [pc, #344]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e22:	e003      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003e46:	460b      	mov	r3, r1
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f000 809f 	beq.w	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e4e:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fa95 	bl	8001388 <HAL_GetTick>
 8003e5e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e62:	e00b      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e64:	f7fd fa90 	bl	8001388 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	; 0x64
 8003e72:	d903      	bls.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e7a:	e005      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ed      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d179      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e90:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e9c:	4053      	eors	r3, r2
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d015      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea6:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a30      	ldr	r2, [pc, #192]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003eca:	4a2b      	ldr	r2, [pc, #172]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ede:	d118      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fa52 	bl	8001388 <HAL_GetTick>
 8003ee4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee8:	e00d      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd fa4d 	bl	8001388 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ef4:	1ad2      	subs	r2, r2, r3
 8003ef6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d903      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003f04:	e005      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0eb      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d129      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2a:	d10e      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f3c:	091a      	lsrs	r2, r3, #4
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6113      	str	r3, [r2, #16]
 8003f48:	e005      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f54:	6113      	str	r3, [r2, #16]
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f66:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6c:	e00e      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003f76:	e009      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	58024800 	.word	0x58024800
 8003f80:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f002 0301 	and.w	r3, r2, #1
 8003f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fa2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f000 8089 	beq.w	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb4:	2b28      	cmp	r3, #40	; 0x28
 8003fb6:	d86b      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08004099 	.word	0x08004099
 8003fc4:	08004091 	.word	0x08004091
 8003fc8:	08004091 	.word	0x08004091
 8003fcc:	08004091 	.word	0x08004091
 8003fd0:	08004091 	.word	0x08004091
 8003fd4:	08004091 	.word	0x08004091
 8003fd8:	08004091 	.word	0x08004091
 8003fdc:	08004091 	.word	0x08004091
 8003fe0:	08004065 	.word	0x08004065
 8003fe4:	08004091 	.word	0x08004091
 8003fe8:	08004091 	.word	0x08004091
 8003fec:	08004091 	.word	0x08004091
 8003ff0:	08004091 	.word	0x08004091
 8003ff4:	08004091 	.word	0x08004091
 8003ff8:	08004091 	.word	0x08004091
 8003ffc:	08004091 	.word	0x08004091
 8004000:	0800407b 	.word	0x0800407b
 8004004:	08004091 	.word	0x08004091
 8004008:	08004091 	.word	0x08004091
 800400c:	08004091 	.word	0x08004091
 8004010:	08004091 	.word	0x08004091
 8004014:	08004091 	.word	0x08004091
 8004018:	08004091 	.word	0x08004091
 800401c:	08004091 	.word	0x08004091
 8004020:	08004099 	.word	0x08004099
 8004024:	08004091 	.word	0x08004091
 8004028:	08004091 	.word	0x08004091
 800402c:	08004091 	.word	0x08004091
 8004030:	08004091 	.word	0x08004091
 8004034:	08004091 	.word	0x08004091
 8004038:	08004091 	.word	0x08004091
 800403c:	08004091 	.word	0x08004091
 8004040:	08004099 	.word	0x08004099
 8004044:	08004091 	.word	0x08004091
 8004048:	08004091 	.word	0x08004091
 800404c:	08004091 	.word	0x08004091
 8004050:	08004091 	.word	0x08004091
 8004054:	08004091 	.word	0x08004091
 8004058:	08004091 	.word	0x08004091
 800405c:	08004091 	.word	0x08004091
 8004060:	08004099 	.word	0x08004099
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004068:	3308      	adds	r3, #8
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f000 ffc3 	bl	8004ff8 <RCCEx_PLL2_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004078:	e00f      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407e:	3328      	adds	r3, #40	; 0x28
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f001 f86a 	bl	800515c <RCCEx_PLL3_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040a2:	4bbf      	ldr	r3, [pc, #764]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b0:	4abb      	ldr	r2, [pc, #748]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b2:	430b      	orrs	r3, r1
 80040b4:	6553      	str	r3, [r2, #84]	; 0x54
 80040b6:	e003      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f002 0302 	and.w	r3, r2, #2
 80040cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80040d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80040da:	460b      	mov	r3, r1
 80040dc:	4313      	orrs	r3, r2
 80040de:	d041      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d824      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80040ea:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	0800413d 	.word	0x0800413d
 80040f4:	08004109 	.word	0x08004109
 80040f8:	0800411f 	.word	0x0800411f
 80040fc:	0800413d 	.word	0x0800413d
 8004100:	0800413d 	.word	0x0800413d
 8004104:	0800413d 	.word	0x0800413d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410c:	3308      	adds	r3, #8
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 ff71 	bl	8004ff8 <RCCEx_PLL2_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800411c:	e00f      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004122:	3328      	adds	r3, #40	; 0x28
 8004124:	2101      	movs	r1, #1
 8004126:	4618      	mov	r0, r3
 8004128:	f001 f818 	bl	800515c <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004132:	e004      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800413c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004146:	4b96      	ldr	r3, [pc, #600]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f023 0107 	bic.w	r1, r3, #7
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004154:	4a92      	ldr	r2, [pc, #584]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004156:	430b      	orrs	r3, r1
 8004158:	6553      	str	r3, [r2, #84]	; 0x54
 800415a:	e003      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f002 0304 	and.w	r3, r2, #4
 8004170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800417a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d044      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418c:	2b05      	cmp	r3, #5
 800418e:	d825      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004190:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041e5 	.word	0x080041e5
 800419c:	080041b1 	.word	0x080041b1
 80041a0:	080041c7 	.word	0x080041c7
 80041a4:	080041e5 	.word	0x080041e5
 80041a8:	080041e5 	.word	0x080041e5
 80041ac:	080041e5 	.word	0x080041e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b4:	3308      	adds	r3, #8
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 ff1d 	bl	8004ff8 <RCCEx_PLL2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041c4:	e00f      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ca:	3328      	adds	r3, #40	; 0x28
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 ffc4 	bl	800515c <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041da:	e004      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80041e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ee:	4b6c      	ldr	r3, [pc, #432]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	f023 0107 	bic.w	r1, r3, #7
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	4a68      	ldr	r2, [pc, #416]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6593      	str	r3, [r2, #88]	; 0x58
 8004204:	e003      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f002 0320 	and.w	r3, r2, #32
 800421a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004228:	460b      	mov	r3, r1
 800422a:	4313      	orrs	r3, r2
 800422c:	d055      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800423a:	d033      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800423c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004240:	d82c      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d02f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d826      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800424e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004252:	d02b      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004254:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004258:	d820      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800425a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800425e:	d012      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004264:	d81a      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d022      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800426a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800426e:	d115      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004274:	3308      	adds	r3, #8
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f000 febd 	bl	8004ff8 <RCCEx_PLL2_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004284:	e015      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428a:	3328      	adds	r3, #40	; 0x28
 800428c:	2102      	movs	r1, #2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 ff64 	bl	800515c <RCCEx_PLL3_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800429a:	e00a      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042a2:	e006      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042a4:	bf00      	nop
 80042a6:	e004      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042a8:	bf00      	nop
 80042aa:	e002      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042ac:	bf00      	nop
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a35      	ldr	r2, [pc, #212]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6553      	str	r3, [r2, #84]	; 0x54
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80042e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80042f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d058      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004302:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004306:	d033      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004308:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800430c:	d82c      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	d02f      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004318:	d826      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800431a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800431e:	d02b      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004324:	d820      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432a:	d012      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800432c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004330:	d81a      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d022      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d115      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	3308      	adds	r3, #8
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fe57 	bl	8004ff8 <RCCEx_PLL2_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004350:	e015      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004356:	3328      	adds	r3, #40	; 0x28
 8004358:	2102      	movs	r1, #2
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fefe 	bl	800515c <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004366:	e00a      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800436e:	e006      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004370:	bf00      	nop
 8004372:	e004      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004374:	bf00      	nop
 8004376:	e002      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800437c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10e      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004396:	4a02      	ldr	r2, [pc, #8]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6593      	str	r3, [r2, #88]	; 0x58
 800439c:	e006      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800439e:	bf00      	nop
 80043a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d055      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043d8:	d033      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80043da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043de:	d82c      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e4:	d02f      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80043e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ea:	d826      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043f0:	d02b      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043f6:	d820      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fc:	d012      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80043fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004402:	d81a      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d022      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440c:	d115      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004412:	3308      	adds	r3, #8
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fdee 	bl	8004ff8 <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004422:	e015      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004428:	3328      	adds	r3, #40	; 0x28
 800442a:	2102      	movs	r1, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fe95 	bl	800515c <RCCEx_PLL3_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004438:	e00a      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004442:	bf00      	nop
 8004444:	e004      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800444e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004458:	4ba1      	ldr	r3, [pc, #644]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004468:	4a9d      	ldr	r2, [pc, #628]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446a:	430b      	orrs	r3, r1
 800446c:	6593      	str	r3, [r2, #88]	; 0x58
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 0308 	and.w	r3, r2, #8
 8004484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800448e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d01e      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044aa:	3328      	adds	r3, #40	; 0x28
 80044ac:	2102      	movs	r1, #2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fe54 	bl	800515c <RCCEx_PLL3_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044c0:	4b87      	ldr	r3, [pc, #540]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d0:	4a83      	ldr	r2, [pc, #524]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d2:	430b      	orrs	r3, r1
 80044d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	f002 0310 	and.w	r3, r2, #16
 80044e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80044f0:	460b      	mov	r3, r1
 80044f2:	4313      	orrs	r3, r2
 80044f4:	d01e      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004502:	d10c      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004508:	3328      	adds	r3, #40	; 0x28
 800450a:	2102      	movs	r1, #2
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fe25 	bl	800515c <RCCEx_PLL3_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800451e:	4b70      	ldr	r3, [pc, #448]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452e:	4a6c      	ldr	r2, [pc, #432]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004530:	430b      	orrs	r3, r1
 8004532:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800454a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d03e      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004558:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800455c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004560:	d022      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004566:	d81b      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d00b      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004572:	e015      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004578:	3308      	adds	r3, #8
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fd3b 	bl	8004ff8 <RCCEx_PLL2_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004588:	e00f      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	3328      	adds	r3, #40	; 0x28
 8004590:	2102      	movs	r1, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fde2 	bl	800515c <RCCEx_PLL3_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800459e:	e004      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80045a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b2:	4b4b      	ldr	r3, [pc, #300]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045c2:	4a47      	ldr	r2, [pc, #284]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6593      	str	r3, [r2, #88]	; 0x58
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80045de:	67bb      	str	r3, [r7, #120]	; 0x78
 80045e0:	2300      	movs	r3, #0
 80045e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d03b      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045fa:	d01f      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80045fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004600:	d818      	bhi.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004606:	d003      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800460c:	d007      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800460e:	e011      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004610:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	4a32      	ldr	r2, [pc, #200]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800461c:	e00f      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004622:	3328      	adds	r3, #40	; 0x28
 8004624:	2101      	movs	r1, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fd98 	bl	800515c <RCCEx_PLL3_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004632:	e004      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800463c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6553      	str	r3, [r2, #84]	; 0x54
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004672:	673b      	str	r3, [r7, #112]	; 0x70
 8004674:	2300      	movs	r3, #0
 8004676:	677b      	str	r3, [r7, #116]	; 0x74
 8004678:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800467c:	460b      	mov	r3, r1
 800467e:	4313      	orrs	r3, r2
 8004680:	d034      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004690:	d007      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004692:	e011      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	4a11      	ldr	r2, [pc, #68]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046a0:	e00e      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a6:	3308      	adds	r3, #8
 80046a8:	2102      	movs	r1, #2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fca4 	bl	8004ff8 <RCCEx_PLL2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10d      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	4a02      	ldr	r2, [pc, #8]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d8:	430b      	orrs	r3, r1
 80046da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046dc:	e006      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80046de:	bf00      	nop
 80046e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80046f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046fa:	2300      	movs	r3, #0
 80046fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004702:	460b      	mov	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	d00c      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470c:	3328      	adds	r3, #40	; 0x28
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fd23 	bl	800515c <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800472e:	663b      	str	r3, [r7, #96]	; 0x60
 8004730:	2300      	movs	r3, #0
 8004732:	667b      	str	r3, [r7, #100]	; 0x64
 8004734:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d038      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800474a:	d018      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800474c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004750:	d811      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004756:	d014      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475c:	d80b      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d011      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004766:	d106      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004768:	4bc3      	ldr	r3, [pc, #780]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	4ac2      	ldr	r2, [pc, #776]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004774:	e008      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800477c:	e004      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800477e:	bf00      	nop
 8004780:	e002      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004782:	bf00      	nop
 8004784:	e000      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10b      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004790:	4bb9      	ldr	r3, [pc, #740]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a0:	4ab5      	ldr	r2, [pc, #724]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a2:	430b      	orrs	r3, r1
 80047a4:	6553      	str	r3, [r2, #84]	; 0x54
 80047a6:	e003      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80047bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80047be:	2300      	movs	r3, #0
 80047c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80047c6:	460b      	mov	r3, r1
 80047c8:	4313      	orrs	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047cc:	4baa      	ldr	r3, [pc, #680]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	4aa7      	ldr	r2, [pc, #668]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047dc:	430b      	orrs	r3, r1
 80047de:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80047ec:	653b      	str	r3, [r7, #80]	; 0x50
 80047ee:	2300      	movs	r3, #0
 80047f0:	657b      	str	r3, [r7, #84]	; 0x54
 80047f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80047f6:	460b      	mov	r3, r1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047fc:	4b9e      	ldr	r3, [pc, #632]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004808:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800480c:	4a9a      	ldr	r2, [pc, #616]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800480e:	430b      	orrs	r3, r1
 8004810:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004820:	2300      	movs	r3, #0
 8004822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004824:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004828:	460b      	mov	r3, r1
 800482a:	4313      	orrs	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800482e:	4b92      	ldr	r3, [pc, #584]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004832:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483c:	4a8e      	ldr	r2, [pc, #568]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483e:	430b      	orrs	r3, r1
 8004840:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800484e:	643b      	str	r3, [r7, #64]	; 0x40
 8004850:	2300      	movs	r3, #0
 8004852:	647b      	str	r3, [r7, #68]	; 0x44
 8004854:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004858:	460b      	mov	r3, r1
 800485a:	4313      	orrs	r3, r2
 800485c:	d00e      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800485e:	4b86      	ldr	r3, [pc, #536]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	4a85      	ldr	r2, [pc, #532]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004864:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004868:	6113      	str	r3, [r2, #16]
 800486a:	4b83      	ldr	r3, [pc, #524]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486c:	6919      	ldr	r1, [r3, #16]
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004876:	4a80      	ldr	r2, [pc, #512]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004878:	430b      	orrs	r3, r1
 800487a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004888:	63bb      	str	r3, [r7, #56]	; 0x38
 800488a:	2300      	movs	r3, #0
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004898:	4b77      	ldr	r3, [pc, #476]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	4a74      	ldr	r2, [pc, #464]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a8:	430b      	orrs	r3, r1
 80048aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ba:	2300      	movs	r3, #0
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
 80048be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048c8:	4b6b      	ldr	r3, [pc, #428]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d8:	4a67      	ldr	r2, [pc, #412]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	2100      	movs	r1, #0
 80048e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d011      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fe:	3308      	adds	r3, #8
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fb78 	bl	8004ff8 <RCCEx_PLL2_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800491a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	2100      	movs	r1, #0
 8004928:	6239      	str	r1, [r7, #32]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
 8004930:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004934:	460b      	mov	r3, r1
 8004936:	4313      	orrs	r3, r2
 8004938:	d011      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493e:	3308      	adds	r3, #8
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fb58 	bl	8004ff8 <RCCEx_PLL2_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	2100      	movs	r1, #0
 8004968:	61b9      	str	r1, [r7, #24]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004974:	460b      	mov	r3, r1
 8004976:	4313      	orrs	r3, r2
 8004978:	d011      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800497e:	3308      	adds	r3, #8
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb38 	bl	8004ff8 <RCCEx_PLL2_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800498e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800499a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	2100      	movs	r1, #0
 80049a8:	6139      	str	r1, [r7, #16]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049b4:	460b      	mov	r3, r1
 80049b6:	4313      	orrs	r3, r2
 80049b8:	d011      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	3328      	adds	r3, #40	; 0x28
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fbca 	bl	800515c <RCCEx_PLL3_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	2100      	movs	r1, #0
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d011      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fe:	3328      	adds	r3, #40	; 0x28
 8004a00:	2101      	movs	r1, #1
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fbaa 	bl	800515c <RCCEx_PLL3_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	2100      	movs	r1, #0
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d011      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	3328      	adds	r3, #40	; 0x28
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fb8a 	bl	800515c <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004a5e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004a72:	46bd      	mov	sp, r7
 8004a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a78:	58024400 	.word	0x58024400

08004a7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a80:	f7fe fd96 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4904      	ldr	r1, [pc, #16]	; (8004aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	08006660 	.word	0x08006660

08004aa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ab0:	4ba1      	ldr	r3, [pc, #644]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004aba:	4b9f      	ldr	r3, [pc, #636]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	0b1b      	lsrs	r3, r3, #12
 8004ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ac6:	4b9c      	ldr	r3, [pc, #624]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ad2:	4b99      	ldr	r3, [pc, #612]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	08db      	lsrs	r3, r3, #3
 8004ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8111 	beq.w	8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	f000 8083 	beq.w	8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	f200 80a1 	bhi.w	8004c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d056      	beq.n	8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b12:	e099      	b.n	8004c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b14:	4b88      	ldr	r3, [pc, #544]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02d      	beq.n	8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b20:	4b85      	ldr	r3, [pc, #532]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	08db      	lsrs	r3, r3, #3
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	4a84      	ldr	r2, [pc, #528]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	ee07 3a90 	vmov	s15, r3
 8004b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b7b      	ldr	r3, [pc, #492]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b7a:	e087      	b.n	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8e:	4b6a      	ldr	r3, [pc, #424]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bbe:	e065      	b.n	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	4b59      	ldr	r3, [pc, #356]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c02:	e043      	b.n	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c16:	4b48      	ldr	r3, [pc, #288]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c46:	e021      	b.n	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b37      	ldr	r3, [pc, #220]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	0a5b      	lsrs	r3, r3, #9
 8004c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb2:	ee17 2a90 	vmov	r2, s15
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004cba:	4b1f      	ldr	r3, [pc, #124]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	0c1b      	lsrs	r3, r3, #16
 8004cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc4:	ee07 3a90 	vmov	s15, r3
 8004cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce0:	ee17 2a90 	vmov	r2, s15
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	0e1b      	lsrs	r3, r3, #24
 8004cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0e:	ee17 2a90 	vmov	r2, s15
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d16:	e008      	b.n	8004d2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
}
 8004d2a:	bf00      	nop
 8004d2c:	3724      	adds	r7, #36	; 0x24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	58024400 	.word	0x58024400
 8004d3c:	03d09000 	.word	0x03d09000
 8004d40:	46000000 	.word	0x46000000
 8004d44:	4c742400 	.word	0x4c742400
 8004d48:	4a742400 	.word	0x4a742400
 8004d4c:	4bbebc20 	.word	0x4bbebc20

08004d50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b089      	sub	sp, #36	; 0x24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d58:	4ba1      	ldr	r3, [pc, #644]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d62:	4b9f      	ldr	r3, [pc, #636]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	0d1b      	lsrs	r3, r3, #20
 8004d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d6e:	4b9c      	ldr	r3, [pc, #624]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d7a:	4b99      	ldr	r3, [pc, #612]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	08db      	lsrs	r3, r3, #3
 8004d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8111 	beq.w	8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	f000 8083 	beq.w	8004eac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	f200 80a1 	bhi.w	8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d056      	beq.n	8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004dba:	e099      	b.n	8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dbc:	4b88      	ldr	r3, [pc, #544]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d02d      	beq.n	8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dc8:	4b85      	ldr	r3, [pc, #532]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	08db      	lsrs	r3, r3, #3
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	4a84      	ldr	r2, [pc, #528]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df2:	4b7b      	ldr	r3, [pc, #492]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e22:	e087      	b.n	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e36:	4b6a      	ldr	r3, [pc, #424]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e66:	e065      	b.n	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7a:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eaa:	e043      	b.n	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebe:	4b48      	ldr	r3, [pc, #288]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eee:	e021      	b.n	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f02:	4b37      	ldr	r3, [pc, #220]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f34:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	0a5b      	lsrs	r3, r3, #9
 8004f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5a:	ee17 2a90 	vmov	r2, s15
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f62:	4b1f      	ldr	r3, [pc, #124]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	0c1b      	lsrs	r3, r3, #16
 8004f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6c:	ee07 3a90 	vmov	s15, r3
 8004f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f88:	ee17 2a90 	vmov	r2, s15
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	0e1b      	lsrs	r3, r3, #24
 8004f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb6:	ee17 2a90 	vmov	r2, s15
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
}
 8004fd2:	bf00      	nop
 8004fd4:	3724      	adds	r7, #36	; 0x24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	03d09000 	.word	0x03d09000
 8004fe8:	46000000 	.word	0x46000000
 8004fec:	4c742400 	.word	0x4c742400
 8004ff0:	4a742400 	.word	0x4a742400
 8004ff4:	4bbebc20 	.word	0x4bbebc20

08004ff8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005006:	4b53      	ldr	r3, [pc, #332]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b03      	cmp	r3, #3
 8005010:	d101      	bne.n	8005016 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e099      	b.n	800514a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005016:	4b4f      	ldr	r3, [pc, #316]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a4e      	ldr	r2, [pc, #312]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800501c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005022:	f7fc f9b1 	bl	8001388 <HAL_GetTick>
 8005026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005028:	e008      	b.n	800503c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800502a:	f7fc f9ad 	bl	8001388 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e086      	b.n	800514a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800503c:	4b45      	ldr	r3, [pc, #276]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005048:	4b42      	ldr	r3, [pc, #264]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	493f      	ldr	r1, [pc, #252]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005058:	4313      	orrs	r3, r2
 800505a:	628b      	str	r3, [r1, #40]	; 0x28
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	3b01      	subs	r3, #1
 8005062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	3b01      	subs	r3, #1
 800506c:	025b      	lsls	r3, r3, #9
 800506e:	b29b      	uxth	r3, r3
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	3b01      	subs	r3, #1
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	3b01      	subs	r3, #1
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800508c:	4931      	ldr	r1, [pc, #196]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005092:	4b30      	ldr	r3, [pc, #192]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	492d      	ldr	r1, [pc, #180]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	f023 0220 	bic.w	r2, r3, #32
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	4928      	ldr	r1, [pc, #160]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050b6:	4b27      	ldr	r3, [pc, #156]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	4a26      	ldr	r2, [pc, #152]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	f023 0310 	bic.w	r3, r3, #16
 80050c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <RCCEx_PLL2_Config+0x160>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	69d2      	ldr	r2, [r2, #28]
 80050ce:	00d2      	lsls	r2, r2, #3
 80050d0:	4920      	ldr	r1, [pc, #128]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050d6:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	f043 0310 	orr.w	r3, r3, #16
 80050e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4a19      	ldr	r2, [pc, #100]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f4:	e00f      	b.n	8005116 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050fc:	4b15      	ldr	r3, [pc, #84]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	4a14      	ldr	r2, [pc, #80]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005108:	e005      	b.n	8005116 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	4a11      	ldr	r2, [pc, #68]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005114:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800511c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fc f931 	bl	8001388 <HAL_GetTick>
 8005126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005128:	e008      	b.n	800513c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800512a:	f7fc f92d 	bl	8001388 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e006      	b.n	800514a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
 8005158:	ffff0007 	.word	0xffff0007

0800515c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800516a:	4b53      	ldr	r3, [pc, #332]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b03      	cmp	r3, #3
 8005174:	d101      	bne.n	800517a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e099      	b.n	80052ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800517a:	4b4f      	ldr	r3, [pc, #316]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a4e      	ldr	r2, [pc, #312]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005186:	f7fc f8ff 	bl	8001388 <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800518c:	e008      	b.n	80051a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800518e:	f7fc f8fb 	bl	8001388 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e086      	b.n	80052ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051a0:	4b45      	ldr	r3, [pc, #276]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051ac:	4b42      	ldr	r3, [pc, #264]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	051b      	lsls	r3, r3, #20
 80051ba:	493f      	ldr	r1, [pc, #252]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	628b      	str	r3, [r1, #40]	; 0x28
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	025b      	lsls	r3, r3, #9
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	3b01      	subs	r3, #1
 80051dc:	041b      	lsls	r3, r3, #16
 80051de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051f0:	4931      	ldr	r1, [pc, #196]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051f6:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	492d      	ldr	r1, [pc, #180]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005204:	4313      	orrs	r3, r2
 8005206:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005208:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	4928      	ldr	r1, [pc, #160]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <RCCEx_PLL3_Config+0x160>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	69d2      	ldr	r2, [r2, #28]
 8005232:	00d2      	lsls	r2, r2, #3
 8005234:	4920      	ldr	r1, [pc, #128]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800523a:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005258:	e00f      	b.n	800527a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d106      	bne.n	800526e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005260:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800526a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800526c:	e005      	b.n	800527a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	4a11      	ldr	r2, [pc, #68]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005278:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005286:	f7fc f87f 	bl	8001388 <HAL_GetTick>
 800528a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800528c:	e008      	b.n	80052a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800528e:	f7fc f87b 	bl	8001388 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	ffff0007 	.word	0xffff0007

080052c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e042      	b.n	8005358 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fb fe85 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2224      	movs	r2, #36	; 0x24
 80052ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8ba 	bl	800547c <UART_SetConfig>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e022      	b.n	8005358 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fe16 	bl	8005f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800532e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800533e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fe9d 	bl	8006090 <UART_CheckIdleState>
 8005356:	4603      	mov	r3, r0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	2b20      	cmp	r3, #32
 8005378:	d17b      	bne.n	8005472 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_UART_Transmit+0x26>
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e074      	b.n	8005474 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2221      	movs	r2, #33	; 0x21
 8005396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800539a:	f7fb fff5 	bl	8001388 <HAL_GetTick>
 800539e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b8:	d108      	bne.n	80053cc <HAL_UART_Transmit+0x6c>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e003      	b.n	80053d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053d4:	e030      	b.n	8005438 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2200      	movs	r2, #0
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 feff 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e03d      	b.n	8005474 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800540c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	3302      	adds	r3, #2
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e007      	b.n	8005426 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	3301      	adds	r3, #1
 8005424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1c8      	bne.n	80053d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2200      	movs	r2, #0
 800544c:	2140      	movs	r1, #64	; 0x40
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fec8 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e006      	b.n	8005474 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
  }
}
 8005474:	4618      	mov	r0, r3
 8005476:	3720      	adds	r7, #32
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800547c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005480:	b092      	sub	sp, #72	; 0x48
 8005482:	af00      	add	r7, sp, #0
 8005484:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	431a      	orrs	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	431a      	orrs	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4bbe      	ldr	r3, [pc, #760]	; (80057a4 <UART_SetConfig+0x328>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4ab3      	ldr	r2, [pc, #716]	; (80057a8 <UART_SetConfig+0x32c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e4:	4313      	orrs	r3, r2
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	4baf      	ldr	r3, [pc, #700]	; (80057ac <UART_SetConfig+0x330>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	f023 010f 	bic.w	r1, r3, #15
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4aa6      	ldr	r2, [pc, #664]	; (80057b0 <UART_SetConfig+0x334>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d177      	bne.n	800560c <UART_SetConfig+0x190>
 800551c:	4ba5      	ldr	r3, [pc, #660]	; (80057b4 <UART_SetConfig+0x338>)
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005524:	2b28      	cmp	r3, #40	; 0x28
 8005526:	d86d      	bhi.n	8005604 <UART_SetConfig+0x188>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0xb4>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	080055d5 	.word	0x080055d5
 8005534:	08005605 	.word	0x08005605
 8005538:	08005605 	.word	0x08005605
 800553c:	08005605 	.word	0x08005605
 8005540:	08005605 	.word	0x08005605
 8005544:	08005605 	.word	0x08005605
 8005548:	08005605 	.word	0x08005605
 800554c:	08005605 	.word	0x08005605
 8005550:	080055dd 	.word	0x080055dd
 8005554:	08005605 	.word	0x08005605
 8005558:	08005605 	.word	0x08005605
 800555c:	08005605 	.word	0x08005605
 8005560:	08005605 	.word	0x08005605
 8005564:	08005605 	.word	0x08005605
 8005568:	08005605 	.word	0x08005605
 800556c:	08005605 	.word	0x08005605
 8005570:	080055e5 	.word	0x080055e5
 8005574:	08005605 	.word	0x08005605
 8005578:	08005605 	.word	0x08005605
 800557c:	08005605 	.word	0x08005605
 8005580:	08005605 	.word	0x08005605
 8005584:	08005605 	.word	0x08005605
 8005588:	08005605 	.word	0x08005605
 800558c:	08005605 	.word	0x08005605
 8005590:	080055ed 	.word	0x080055ed
 8005594:	08005605 	.word	0x08005605
 8005598:	08005605 	.word	0x08005605
 800559c:	08005605 	.word	0x08005605
 80055a0:	08005605 	.word	0x08005605
 80055a4:	08005605 	.word	0x08005605
 80055a8:	08005605 	.word	0x08005605
 80055ac:	08005605 	.word	0x08005605
 80055b0:	080055f5 	.word	0x080055f5
 80055b4:	08005605 	.word	0x08005605
 80055b8:	08005605 	.word	0x08005605
 80055bc:	08005605 	.word	0x08005605
 80055c0:	08005605 	.word	0x08005605
 80055c4:	08005605 	.word	0x08005605
 80055c8:	08005605 	.word	0x08005605
 80055cc:	08005605 	.word	0x08005605
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055da:	e222      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e2:	e21e      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ea:	e21a      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f2:	e216      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80055f4:	2320      	movs	r3, #32
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e212      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e20e      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e20a      	b.n	8005a22 <UART_SetConfig+0x5a6>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a69      	ldr	r2, [pc, #420]	; (80057b8 <UART_SetConfig+0x33c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d130      	bne.n	8005678 <UART_SetConfig+0x1fc>
 8005616:	4b67      	ldr	r3, [pc, #412]	; (80057b4 <UART_SetConfig+0x338>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	2b05      	cmp	r3, #5
 8005620:	d826      	bhi.n	8005670 <UART_SetConfig+0x1f4>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <UART_SetConfig+0x1ac>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005641 	.word	0x08005641
 800562c:	08005649 	.word	0x08005649
 8005630:	08005651 	.word	0x08005651
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005646:	e1ec      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564e:	e1e8      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005656:	e1e4      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e1e0      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005660:	2320      	movs	r3, #32
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e1dc      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e1d8      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e1d4      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a4f      	ldr	r2, [pc, #316]	; (80057bc <UART_SetConfig+0x340>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d130      	bne.n	80056e4 <UART_SetConfig+0x268>
 8005682:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <UART_SetConfig+0x338>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b05      	cmp	r3, #5
 800568c:	d826      	bhi.n	80056dc <UART_SetConfig+0x260>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0x218>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056ad 	.word	0x080056ad
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b2:	e1b6      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e1b2      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80056bc:	2308      	movs	r3, #8
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e1ae      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80056c4:	2310      	movs	r3, #16
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ca:	e1aa      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80056cc:	2320      	movs	r3, #32
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d2:	e1a6      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80056d4:	2340      	movs	r3, #64	; 0x40
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e1a2      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e19e      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a35      	ldr	r2, [pc, #212]	; (80057c0 <UART_SetConfig+0x344>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d130      	bne.n	8005750 <UART_SetConfig+0x2d4>
 80056ee:	4b31      	ldr	r3, [pc, #196]	; (80057b4 <UART_SetConfig+0x338>)
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d826      	bhi.n	8005748 <UART_SetConfig+0x2cc>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <UART_SetConfig+0x284>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005719 	.word	0x08005719
 8005704:	08005721 	.word	0x08005721
 8005708:	08005729 	.word	0x08005729
 800570c:	08005731 	.word	0x08005731
 8005710:	08005739 	.word	0x08005739
 8005714:	08005741 	.word	0x08005741
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571e:	e180      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005726:	e17c      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e178      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e174      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005738:	2320      	movs	r3, #32
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e170      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e16c      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e168      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <UART_SetConfig+0x348>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d142      	bne.n	80057e0 <UART_SetConfig+0x364>
 800575a:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <UART_SetConfig+0x338>)
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	2b05      	cmp	r3, #5
 8005764:	d838      	bhi.n	80057d8 <UART_SetConfig+0x35c>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <UART_SetConfig+0x2f0>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	08005785 	.word	0x08005785
 8005770:	0800578d 	.word	0x0800578d
 8005774:	08005795 	.word	0x08005795
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057c9 	.word	0x080057c9
 8005780:	080057d1 	.word	0x080057d1
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e14a      	b.n	8005a22 <UART_SetConfig+0x5a6>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e146      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e142      	b.n	8005a22 <UART_SetConfig+0x5a6>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e13e      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80057a4:	cfff69f3 	.word	0xcfff69f3
 80057a8:	58000c00 	.word	0x58000c00
 80057ac:	11fff4ff 	.word	0x11fff4ff
 80057b0:	40011000 	.word	0x40011000
 80057b4:	58024400 	.word	0x58024400
 80057b8:	40004400 	.word	0x40004400
 80057bc:	40004800 	.word	0x40004800
 80057c0:	40004c00 	.word	0x40004c00
 80057c4:	40005000 	.word	0x40005000
 80057c8:	2320      	movs	r3, #32
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ce:	e128      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80057d0:	2340      	movs	r3, #64	; 0x40
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d6:	e124      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057de:	e120      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4acb      	ldr	r2, [pc, #812]	; (8005b14 <UART_SetConfig+0x698>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d176      	bne.n	80058d8 <UART_SetConfig+0x45c>
 80057ea:	4bcb      	ldr	r3, [pc, #812]	; (8005b18 <UART_SetConfig+0x69c>)
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f2:	2b28      	cmp	r3, #40	; 0x28
 80057f4:	d86c      	bhi.n	80058d0 <UART_SetConfig+0x454>
 80057f6:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <UART_SetConfig+0x380>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	080058a1 	.word	0x080058a1
 8005800:	080058d1 	.word	0x080058d1
 8005804:	080058d1 	.word	0x080058d1
 8005808:	080058d1 	.word	0x080058d1
 800580c:	080058d1 	.word	0x080058d1
 8005810:	080058d1 	.word	0x080058d1
 8005814:	080058d1 	.word	0x080058d1
 8005818:	080058d1 	.word	0x080058d1
 800581c:	080058a9 	.word	0x080058a9
 8005820:	080058d1 	.word	0x080058d1
 8005824:	080058d1 	.word	0x080058d1
 8005828:	080058d1 	.word	0x080058d1
 800582c:	080058d1 	.word	0x080058d1
 8005830:	080058d1 	.word	0x080058d1
 8005834:	080058d1 	.word	0x080058d1
 8005838:	080058d1 	.word	0x080058d1
 800583c:	080058b1 	.word	0x080058b1
 8005840:	080058d1 	.word	0x080058d1
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058d1 	.word	0x080058d1
 800584c:	080058d1 	.word	0x080058d1
 8005850:	080058d1 	.word	0x080058d1
 8005854:	080058d1 	.word	0x080058d1
 8005858:	080058d1 	.word	0x080058d1
 800585c:	080058b9 	.word	0x080058b9
 8005860:	080058d1 	.word	0x080058d1
 8005864:	080058d1 	.word	0x080058d1
 8005868:	080058d1 	.word	0x080058d1
 800586c:	080058d1 	.word	0x080058d1
 8005870:	080058d1 	.word	0x080058d1
 8005874:	080058d1 	.word	0x080058d1
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058c1 	.word	0x080058c1
 8005880:	080058d1 	.word	0x080058d1
 8005884:	080058d1 	.word	0x080058d1
 8005888:	080058d1 	.word	0x080058d1
 800588c:	080058d1 	.word	0x080058d1
 8005890:	080058d1 	.word	0x080058d1
 8005894:	080058d1 	.word	0x080058d1
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058c9 	.word	0x080058c9
 80058a0:	2301      	movs	r3, #1
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a6:	e0bc      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80058a8:	2304      	movs	r3, #4
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ae:	e0b8      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80058b0:	2308      	movs	r3, #8
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b6:	e0b4      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80058b8:	2310      	movs	r3, #16
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058be:	e0b0      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80058c0:	2320      	movs	r3, #32
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e0ac      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80058c8:	2340      	movs	r3, #64	; 0x40
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e0a8      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e0a4      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a8f      	ldr	r2, [pc, #572]	; (8005b1c <UART_SetConfig+0x6a0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d130      	bne.n	8005944 <UART_SetConfig+0x4c8>
 80058e2:	4b8d      	ldr	r3, [pc, #564]	; (8005b18 <UART_SetConfig+0x69c>)
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d826      	bhi.n	800593c <UART_SetConfig+0x4c0>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x478>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	0800590d 	.word	0x0800590d
 80058f8:	08005915 	.word	0x08005915
 80058fc:	0800591d 	.word	0x0800591d
 8005900:	08005925 	.word	0x08005925
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005935 	.word	0x08005935
 800590c:	2300      	movs	r3, #0
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005912:	e086      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005914:	2304      	movs	r3, #4
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591a:	e082      	b.n	8005a22 <UART_SetConfig+0x5a6>
 800591c:	2308      	movs	r3, #8
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e07e      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005924:	2310      	movs	r3, #16
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e07a      	b.n	8005a22 <UART_SetConfig+0x5a6>
 800592c:	2320      	movs	r3, #32
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e076      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005934:	2340      	movs	r3, #64	; 0x40
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e072      	b.n	8005a22 <UART_SetConfig+0x5a6>
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e06e      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a75      	ldr	r2, [pc, #468]	; (8005b20 <UART_SetConfig+0x6a4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d130      	bne.n	80059b0 <UART_SetConfig+0x534>
 800594e:	4b72      	ldr	r3, [pc, #456]	; (8005b18 <UART_SetConfig+0x69c>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	2b05      	cmp	r3, #5
 8005958:	d826      	bhi.n	80059a8 <UART_SetConfig+0x52c>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <UART_SetConfig+0x4e4>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005979 	.word	0x08005979
 8005964:	08005981 	.word	0x08005981
 8005968:	08005989 	.word	0x08005989
 800596c:	08005991 	.word	0x08005991
 8005970:	08005999 	.word	0x08005999
 8005974:	080059a1 	.word	0x080059a1
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597e:	e050      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005980:	2304      	movs	r3, #4
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005986:	e04c      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005988:	2308      	movs	r3, #8
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598e:	e048      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005990:	2310      	movs	r3, #16
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005996:	e044      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005998:	2320      	movs	r3, #32
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e040      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80059a0:	2340      	movs	r3, #64	; 0x40
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e03c      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80059a8:	2380      	movs	r3, #128	; 0x80
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e038      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a5b      	ldr	r2, [pc, #364]	; (8005b24 <UART_SetConfig+0x6a8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d130      	bne.n	8005a1c <UART_SetConfig+0x5a0>
 80059ba:	4b57      	ldr	r3, [pc, #348]	; (8005b18 <UART_SetConfig+0x69c>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d826      	bhi.n	8005a14 <UART_SetConfig+0x598>
 80059c6:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <UART_SetConfig+0x550>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059e5 	.word	0x080059e5
 80059d0:	080059ed 	.word	0x080059ed
 80059d4:	080059f5 	.word	0x080059f5
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	2302      	movs	r3, #2
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ea:	e01a      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80059ec:	2304      	movs	r3, #4
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f2:	e016      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80059f4:	2308      	movs	r3, #8
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fa:	e012      	b.n	8005a22 <UART_SetConfig+0x5a6>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a02:	e00e      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005a04:	2320      	movs	r3, #32
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e00a      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005a0c:	2340      	movs	r3, #64	; 0x40
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e006      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e002      	b.n	8005a22 <UART_SetConfig+0x5a6>
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a3f      	ldr	r2, [pc, #252]	; (8005b24 <UART_SetConfig+0x6a8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	f040 80f8 	bne.w	8005c1e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	dc46      	bgt.n	8005ac4 <UART_SetConfig+0x648>
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	f2c0 8082 	blt.w	8005b40 <UART_SetConfig+0x6c4>
 8005a3c:	3b02      	subs	r3, #2
 8005a3e:	2b1e      	cmp	r3, #30
 8005a40:	d87e      	bhi.n	8005b40 <UART_SetConfig+0x6c4>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0x5cc>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005acb 	.word	0x08005acb
 8005a4c:	08005b41 	.word	0x08005b41
 8005a50:	08005ad3 	.word	0x08005ad3
 8005a54:	08005b41 	.word	0x08005b41
 8005a58:	08005b41 	.word	0x08005b41
 8005a5c:	08005b41 	.word	0x08005b41
 8005a60:	08005ae3 	.word	0x08005ae3
 8005a64:	08005b41 	.word	0x08005b41
 8005a68:	08005b41 	.word	0x08005b41
 8005a6c:	08005b41 	.word	0x08005b41
 8005a70:	08005b41 	.word	0x08005b41
 8005a74:	08005b41 	.word	0x08005b41
 8005a78:	08005b41 	.word	0x08005b41
 8005a7c:	08005b41 	.word	0x08005b41
 8005a80:	08005af3 	.word	0x08005af3
 8005a84:	08005b41 	.word	0x08005b41
 8005a88:	08005b41 	.word	0x08005b41
 8005a8c:	08005b41 	.word	0x08005b41
 8005a90:	08005b41 	.word	0x08005b41
 8005a94:	08005b41 	.word	0x08005b41
 8005a98:	08005b41 	.word	0x08005b41
 8005a9c:	08005b41 	.word	0x08005b41
 8005aa0:	08005b41 	.word	0x08005b41
 8005aa4:	08005b41 	.word	0x08005b41
 8005aa8:	08005b41 	.word	0x08005b41
 8005aac:	08005b41 	.word	0x08005b41
 8005ab0:	08005b41 	.word	0x08005b41
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b41 	.word	0x08005b41
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005b33 	.word	0x08005b33
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d037      	beq.n	8005b38 <UART_SetConfig+0x6bc>
 8005ac8:	e03a      	b.n	8005b40 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005aca:	f7fe ffd7 	bl	8004a7c <HAL_RCCEx_GetD3PCLK1Freq>
 8005ace:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ad0:	e03c      	b.n	8005b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe ffe6 	bl	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae0:	e034      	b.n	8005b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae2:	f107 0318 	add.w	r3, r7, #24
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff f932 	bl	8004d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af0:	e02c      	b.n	8005b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <UART_SetConfig+0x69c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d016      	beq.n	8005b2c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <UART_SetConfig+0x69c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	08db      	lsrs	r3, r3, #3
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	4a07      	ldr	r2, [pc, #28]	; (8005b28 <UART_SetConfig+0x6ac>)
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b10:	e01c      	b.n	8005b4c <UART_SetConfig+0x6d0>
 8005b12:	bf00      	nop
 8005b14:	40011400 	.word	0x40011400
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	40007800 	.word	0x40007800
 8005b20:	40007c00 	.word	0x40007c00
 8005b24:	58000c00 	.word	0x58000c00
 8005b28:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005b2c:	4b9d      	ldr	r3, [pc, #628]	; (8005da4 <UART_SetConfig+0x928>)
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b30:	e00c      	b.n	8005b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b32:	4b9d      	ldr	r3, [pc, #628]	; (8005da8 <UART_SetConfig+0x92c>)
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b36:	e009      	b.n	8005b4c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b3e:	e005      	b.n	8005b4c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 81de 	beq.w	8005f10 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	4a94      	ldr	r2, [pc, #592]	; (8005dac <UART_SetConfig+0x930>)
 8005b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b66:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d305      	bcc.n	8005b84 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d903      	bls.n	8005b8c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b8a:	e1c1      	b.n	8005f10 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	2200      	movs	r2, #0
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	60fa      	str	r2, [r7, #12]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	4a84      	ldr	r2, [pc, #528]	; (8005dac <UART_SetConfig+0x930>)
 8005b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bae:	f7fa fb93 	bl	80002d8 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	020b      	lsls	r3, r1, #8
 8005bc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bc8:	0202      	lsls	r2, r0, #8
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	6849      	ldr	r1, [r1, #4]
 8005bce:	0849      	lsrs	r1, r1, #1
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	eb12 0804 	adds.w	r8, r2, r4
 8005bda:	eb43 0905 	adc.w	r9, r3, r5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	469a      	mov	sl, r3
 8005be6:	4693      	mov	fp, r2
 8005be8:	4652      	mov	r2, sl
 8005bea:	465b      	mov	r3, fp
 8005bec:	4640      	mov	r0, r8
 8005bee:	4649      	mov	r1, r9
 8005bf0:	f7fa fb72 	bl	80002d8 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c02:	d308      	bcc.n	8005c16 <UART_SetConfig+0x79a>
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0a:	d204      	bcs.n	8005c16 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	e17c      	b.n	8005f10 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c1c:	e178      	b.n	8005f10 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c26:	f040 80c5 	bne.w	8005db4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005c2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	dc48      	bgt.n	8005cc4 <UART_SetConfig+0x848>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	db7b      	blt.n	8005d2e <UART_SetConfig+0x8b2>
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d879      	bhi.n	8005d2e <UART_SetConfig+0x8b2>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <UART_SetConfig+0x7c4>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005ccb 	.word	0x08005ccb
 8005c44:	08005cd3 	.word	0x08005cd3
 8005c48:	08005d2f 	.word	0x08005d2f
 8005c4c:	08005d2f 	.word	0x08005d2f
 8005c50:	08005cdb 	.word	0x08005cdb
 8005c54:	08005d2f 	.word	0x08005d2f
 8005c58:	08005d2f 	.word	0x08005d2f
 8005c5c:	08005d2f 	.word	0x08005d2f
 8005c60:	08005ceb 	.word	0x08005ceb
 8005c64:	08005d2f 	.word	0x08005d2f
 8005c68:	08005d2f 	.word	0x08005d2f
 8005c6c:	08005d2f 	.word	0x08005d2f
 8005c70:	08005d2f 	.word	0x08005d2f
 8005c74:	08005d2f 	.word	0x08005d2f
 8005c78:	08005d2f 	.word	0x08005d2f
 8005c7c:	08005d2f 	.word	0x08005d2f
 8005c80:	08005cfb 	.word	0x08005cfb
 8005c84:	08005d2f 	.word	0x08005d2f
 8005c88:	08005d2f 	.word	0x08005d2f
 8005c8c:	08005d2f 	.word	0x08005d2f
 8005c90:	08005d2f 	.word	0x08005d2f
 8005c94:	08005d2f 	.word	0x08005d2f
 8005c98:	08005d2f 	.word	0x08005d2f
 8005c9c:	08005d2f 	.word	0x08005d2f
 8005ca0:	08005d2f 	.word	0x08005d2f
 8005ca4:	08005d2f 	.word	0x08005d2f
 8005ca8:	08005d2f 	.word	0x08005d2f
 8005cac:	08005d2f 	.word	0x08005d2f
 8005cb0:	08005d2f 	.word	0x08005d2f
 8005cb4:	08005d2f 	.word	0x08005d2f
 8005cb8:	08005d2f 	.word	0x08005d2f
 8005cbc:	08005d2f 	.word	0x08005d2f
 8005cc0:	08005d21 	.word	0x08005d21
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d02e      	beq.n	8005d26 <UART_SetConfig+0x8aa>
 8005cc8:	e031      	b.n	8005d2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cca:	f7fd fca1 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8005cce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cd0:	e033      	b.n	8005d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd2:	f7fd fcb3 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8005cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cd8:	e02f      	b.n	8005d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fee2 	bl	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce8:	e027      	b.n	8005d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cea:	f107 0318 	add.w	r3, r7, #24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff f82e 	bl	8004d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf8:	e01f      	b.n	8005d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cfa:	4b2d      	ldr	r3, [pc, #180]	; (8005db0 <UART_SetConfig+0x934>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d06:	4b2a      	ldr	r3, [pc, #168]	; (8005db0 <UART_SetConfig+0x934>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	08db      	lsrs	r3, r3, #3
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	4a24      	ldr	r2, [pc, #144]	; (8005da4 <UART_SetConfig+0x928>)
 8005d12:	fa22 f303 	lsr.w	r3, r2, r3
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d18:	e00f      	b.n	8005d3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d1a:	4b22      	ldr	r3, [pc, #136]	; (8005da4 <UART_SetConfig+0x928>)
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d1e:	e00c      	b.n	8005d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d20:	4b21      	ldr	r3, [pc, #132]	; (8005da8 <UART_SetConfig+0x92c>)
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d24:	e009      	b.n	8005d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d2c:	e005      	b.n	8005d3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80e7 	beq.w	8005f10 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	4a19      	ldr	r2, [pc, #100]	; (8005dac <UART_SetConfig+0x930>)
 8005d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d54:	005a      	lsls	r2, r3, #1
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	441a      	add	r2, r3
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	2b0f      	cmp	r3, #15
 8005d6c:	d916      	bls.n	8005d9c <UART_SetConfig+0x920>
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d74:	d212      	bcs.n	8005d9c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f023 030f 	bic.w	r3, r3, #15
 8005d7e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	085b      	lsrs	r3, r3, #1
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e0b9      	b.n	8005f10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005da2:	e0b5      	b.n	8005f10 <UART_SetConfig+0xa94>
 8005da4:	03d09000 	.word	0x03d09000
 8005da8:	003d0900 	.word	0x003d0900
 8005dac:	08006680 	.word	0x08006680
 8005db0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005db4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	dc49      	bgt.n	8005e50 <UART_SetConfig+0x9d4>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	db7c      	blt.n	8005eba <UART_SetConfig+0xa3e>
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d87a      	bhi.n	8005eba <UART_SetConfig+0xa3e>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <UART_SetConfig+0x950>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005e57 	.word	0x08005e57
 8005dd0:	08005e5f 	.word	0x08005e5f
 8005dd4:	08005ebb 	.word	0x08005ebb
 8005dd8:	08005ebb 	.word	0x08005ebb
 8005ddc:	08005e67 	.word	0x08005e67
 8005de0:	08005ebb 	.word	0x08005ebb
 8005de4:	08005ebb 	.word	0x08005ebb
 8005de8:	08005ebb 	.word	0x08005ebb
 8005dec:	08005e77 	.word	0x08005e77
 8005df0:	08005ebb 	.word	0x08005ebb
 8005df4:	08005ebb 	.word	0x08005ebb
 8005df8:	08005ebb 	.word	0x08005ebb
 8005dfc:	08005ebb 	.word	0x08005ebb
 8005e00:	08005ebb 	.word	0x08005ebb
 8005e04:	08005ebb 	.word	0x08005ebb
 8005e08:	08005ebb 	.word	0x08005ebb
 8005e0c:	08005e87 	.word	0x08005e87
 8005e10:	08005ebb 	.word	0x08005ebb
 8005e14:	08005ebb 	.word	0x08005ebb
 8005e18:	08005ebb 	.word	0x08005ebb
 8005e1c:	08005ebb 	.word	0x08005ebb
 8005e20:	08005ebb 	.word	0x08005ebb
 8005e24:	08005ebb 	.word	0x08005ebb
 8005e28:	08005ebb 	.word	0x08005ebb
 8005e2c:	08005ebb 	.word	0x08005ebb
 8005e30:	08005ebb 	.word	0x08005ebb
 8005e34:	08005ebb 	.word	0x08005ebb
 8005e38:	08005ebb 	.word	0x08005ebb
 8005e3c:	08005ebb 	.word	0x08005ebb
 8005e40:	08005ebb 	.word	0x08005ebb
 8005e44:	08005ebb 	.word	0x08005ebb
 8005e48:	08005ebb 	.word	0x08005ebb
 8005e4c:	08005ead 	.word	0x08005ead
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d02e      	beq.n	8005eb2 <UART_SetConfig+0xa36>
 8005e54:	e031      	b.n	8005eba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e56:	f7fd fbdb 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8005e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e5c:	e033      	b.n	8005ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e5e:	f7fd fbed 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8005e62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e64:	e02f      	b.n	8005ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe fe1c 	bl	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e74:	e027      	b.n	8005ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e76:	f107 0318 	add.w	r3, r7, #24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe ff68 	bl	8004d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e84:	e01f      	b.n	8005ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e86:	4b2d      	ldr	r3, [pc, #180]	; (8005f3c <UART_SetConfig+0xac0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e92:	4b2a      	ldr	r3, [pc, #168]	; (8005f3c <UART_SetConfig+0xac0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	4a28      	ldr	r2, [pc, #160]	; (8005f40 <UART_SetConfig+0xac4>)
 8005e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ea4:	e00f      	b.n	8005ec6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005ea6:	4b26      	ldr	r3, [pc, #152]	; (8005f40 <UART_SetConfig+0xac4>)
 8005ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eaa:	e00c      	b.n	8005ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <UART_SetConfig+0xac8>)
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eb0:	e009      	b.n	8005ec6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eb8:	e005      	b.n	8005ec6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ec4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d021      	beq.n	8005f10 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <UART_SetConfig+0xacc>)
 8005ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eda:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	441a      	add	r2, r3
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	2b0f      	cmp	r3, #15
 8005ef4:	d909      	bls.n	8005f0a <UART_SetConfig+0xa8e>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	d205      	bcs.n	8005f0a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60da      	str	r2, [r3, #12]
 8005f08:	e002      	b.n	8005f10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2200      	movs	r2, #0
 8005f24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f2c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3748      	adds	r7, #72	; 0x48
 8005f34:	46bd      	mov	sp, r7
 8005f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	03d09000 	.word	0x03d09000
 8005f44:	003d0900 	.word	0x003d0900
 8005f48:	08006680 	.word	0x08006680

08005f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01a      	beq.n	8006062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604a:	d10a      	bne.n	8006062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  }
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b098      	sub	sp, #96	; 0x60
 8006094:	af02      	add	r7, sp, #8
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a0:	f7fb f972 	bl	8001388 <HAL_GetTick>
 80060a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d12f      	bne.n	8006114 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060bc:	2200      	movs	r2, #0
 80060be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f88e 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d022      	beq.n	8006114 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e2:	653b      	str	r3, [r7, #80]	; 0x50
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
 80060ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e063      	b.n	80061dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b04      	cmp	r3, #4
 8006120:	d149      	bne.n	80061b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006122:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612a:	2200      	movs	r2, #0
 800612c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f857 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d03c      	beq.n	80061b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	623b      	str	r3, [r7, #32]
   return(result);
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615a:	633b      	str	r3, [r7, #48]	; 0x30
 800615c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e6      	bne.n	800613c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3308      	adds	r3, #8
 8006174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	60fb      	str	r3, [r7, #12]
   return(result);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	64bb      	str	r3, [r7, #72]	; 0x48
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800618e:	61fa      	str	r2, [r7, #28]
 8006190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	69b9      	ldr	r1, [r7, #24]
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	617b      	str	r3, [r7, #20]
   return(result);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e5      	bne.n	800616e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e012      	b.n	80061dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3758      	adds	r7, #88	; 0x58
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f4:	e049      	b.n	800628a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061fc:	d045      	beq.n	800628a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fe:	f7fb f8c3 	bl	8001388 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <UART_WaitOnFlagUntilTimeout+0x30>
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e048      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d031      	beq.n	800628a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b08      	cmp	r3, #8
 8006232:	d110      	bne.n	8006256 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2208      	movs	r2, #8
 800623a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f839 	bl	80062b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2208      	movs	r2, #8
 8006246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e029      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006264:	d111      	bne.n	800628a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800626e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f81f 	bl	80062b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e00f      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4013      	ands	r3, r2
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	bf0c      	ite	eq
 800629a:	2301      	moveq	r3, #1
 800629c:	2300      	movne	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d0a6      	beq.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b095      	sub	sp, #84	; 0x54
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062da:	643b      	str	r3, [r7, #64]	; 0x40
 80062dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e6      	bne.n	80062bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	4b1e      	ldr	r3, [pc, #120]	; (800637c <UART_EndRxTransfer+0xc8>)
 8006302:	4013      	ands	r3, r2
 8006304:	64bb      	str	r3, [r7, #72]	; 0x48
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800630e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006310:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e5      	bne.n	80062ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006326:	2b01      	cmp	r3, #1
 8006328:	d118      	bne.n	800635c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	60bb      	str	r3, [r7, #8]
   return(result);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f023 0310 	bic.w	r3, r3, #16
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	613b      	str	r3, [r7, #16]
   return(result);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e6      	bne.n	800632a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006370:	bf00      	nop
 8006372:	3754      	adds	r7, #84	; 0x54
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	effffffe 	.word	0xeffffffe

08006380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_UARTEx_DisableFifoMode+0x16>
 8006392:	2302      	movs	r3, #2
 8006394:	e027      	b.n	80063e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2224      	movs	r2, #36	; 0x24
 80063a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006406:	2302      	movs	r3, #2
 8006408:	e02d      	b.n	8006466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2224      	movs	r2, #36	; 0x24
 8006416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0201 	bic.w	r2, r2, #1
 8006430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f850 	bl	80064ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006482:	2302      	movs	r3, #2
 8006484:	e02d      	b.n	80064e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	; 0x24
 8006492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f812 	bl	80064ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d108      	bne.n	800650e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800650c:	e031      	b.n	8006572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800650e:	2310      	movs	r3, #16
 8006510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006512:	2310      	movs	r3, #16
 8006514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	0e5b      	lsrs	r3, r3, #25
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	0f5b      	lsrs	r3, r3, #29
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	7b3a      	ldrb	r2, [r7, #12]
 800653a:	4911      	ldr	r1, [pc, #68]	; (8006580 <UARTEx_SetNbDataToProcess+0x94>)
 800653c:	5c8a      	ldrb	r2, [r1, r2]
 800653e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006542:	7b3a      	ldrb	r2, [r7, #12]
 8006544:	490f      	ldr	r1, [pc, #60]	; (8006584 <UARTEx_SetNbDataToProcess+0x98>)
 8006546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006548:	fb93 f3f2 	sdiv	r3, r3, r2
 800654c:	b29a      	uxth	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	7b7a      	ldrb	r2, [r7, #13]
 8006558:	4909      	ldr	r1, [pc, #36]	; (8006580 <UARTEx_SetNbDataToProcess+0x94>)
 800655a:	5c8a      	ldrb	r2, [r1, r2]
 800655c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006560:	7b7a      	ldrb	r2, [r7, #13]
 8006562:	4908      	ldr	r1, [pc, #32]	; (8006584 <UARTEx_SetNbDataToProcess+0x98>)
 8006564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006566:	fb93 f3f2 	sdiv	r3, r3, r2
 800656a:	b29a      	uxth	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	08006698 	.word	0x08006698
 8006584:	080066a0 	.word	0x080066a0

08006588 <memset>:
 8006588:	4402      	add	r2, r0
 800658a:	4603      	mov	r3, r0
 800658c:	4293      	cmp	r3, r2
 800658e:	d100      	bne.n	8006592 <memset+0xa>
 8006590:	4770      	bx	lr
 8006592:	f803 1b01 	strb.w	r1, [r3], #1
 8006596:	e7f9      	b.n	800658c <memset+0x4>

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4d0d      	ldr	r5, [pc, #52]	; (80065d0 <__libc_init_array+0x38>)
 800659c:	4c0d      	ldr	r4, [pc, #52]	; (80065d4 <__libc_init_array+0x3c>)
 800659e:	1b64      	subs	r4, r4, r5
 80065a0:	10a4      	asrs	r4, r4, #2
 80065a2:	2600      	movs	r6, #0
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	4d0b      	ldr	r5, [pc, #44]	; (80065d8 <__libc_init_array+0x40>)
 80065aa:	4c0c      	ldr	r4, [pc, #48]	; (80065dc <__libc_init_array+0x44>)
 80065ac:	f000 f826 	bl	80065fc <_init>
 80065b0:	1b64      	subs	r4, r4, r5
 80065b2:	10a4      	asrs	r4, r4, #2
 80065b4:	2600      	movs	r6, #0
 80065b6:	42a6      	cmp	r6, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c0:	4798      	blx	r3
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ca:	4798      	blx	r3
 80065cc:	3601      	adds	r6, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	080066b0 	.word	0x080066b0
 80065d4:	080066b0 	.word	0x080066b0
 80065d8:	080066b0 	.word	0x080066b0
 80065dc:	080066b4 	.word	0x080066b4

080065e0 <memcpy>:
 80065e0:	440a      	add	r2, r1
 80065e2:	4291      	cmp	r1, r2
 80065e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065e8:	d100      	bne.n	80065ec <memcpy+0xc>
 80065ea:	4770      	bx	lr
 80065ec:	b510      	push	{r4, lr}
 80065ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f6:	4291      	cmp	r1, r2
 80065f8:	d1f9      	bne.n	80065ee <memcpy+0xe>
 80065fa:	bd10      	pop	{r4, pc}

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
