
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009e8c  08009e8c  00019e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f74  08009f74  00019f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  08009f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  08009fe8  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800a048  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  24000124  0800a0a8  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000b1c  0800a0a8  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020152  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d99b  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea7  00000000  00000000  0003db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  000409d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f26  00000000  00000000  00041d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038c4d  00000000  00000000  00042c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b77  00000000  00000000  0007b8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001692ca  00000000  00000000  00095442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059c8  00000000  00000000  001fe70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  002040d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009e74 	.word	0x08009e74

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	08009e74 	.word	0x08009e74

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f001 f820 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f890 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 fad8 	bl	8000c3c <MX_GPIO_Init>
  MX_ETH_Init();
 800068c:	f000 f90c 	bl	80008a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000690:	f000 fa56 	bl	8000b40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000694:	f000 faa0 	bl	8000bd8 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 8000698:	f000 f952 	bl	8000940 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800069c:	f000 f9d0 	bl	8000a40 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  // Start FDCAN 1 w/ Error Checking
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80006a0:	483a      	ldr	r0, [pc, #232]	; (800078c <main+0x110>)
 80006a2:	f002 fdd1 	bl	8003248 <HAL_FDCAN_Start>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <main+0x34>
	  Error_Handler();
 80006ac:	f000 fc10 	bl	8000ed0 <Error_Handler>
  }

  // Start FDCAN 2 w/ Error Checking
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 80006b0:	4837      	ldr	r0, [pc, #220]	; (8000790 <main+0x114>)
 80006b2:	f002 fdc9 	bl	8003248 <HAL_FDCAN_Start>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <main+0x44>
	  Error_Handler();
 80006bc:	f000 fc08 	bl	8000ed0 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	4831      	ldr	r0, [pc, #196]	; (800078c <main+0x110>)
 80006c6:	f002 ffb3 	bl	8003630 <HAL_FDCAN_ActivateNotification>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <main+0x58>
	  Error_Handler();
 80006d0:	f000 fbfe 	bl	8000ed0 <Error_Handler>
  }


  // Activate the notification for new data in FIFO1 for FDCAN2
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	482d      	ldr	r0, [pc, #180]	; (8000790 <main+0x114>)
 80006da:	f002 ffa9 	bl	8003630 <HAL_FDCAN_ActivateNotification>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <main+0x6c>
	  Error_Handler();
 80006e4:	f000 fbf4 	bl	8000ed0 <Error_Handler>
  }

  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x11; // ID of the Transmitter, which is going to be 0x11 for the FDCAN1
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <main+0x118>)
 80006ea:	2211      	movs	r2, #17
 80006ec:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID; // Type of CAN ID
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <main+0x118>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME; // Implies whether we are sending a Data frame or Remote frame
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <main+0x118>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8; // This is the length of the actual Data we are going to send
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <main+0x118>)
 80006fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000700:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // Will notify us if there is any error in transmission
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <main+0x118>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF; // Using the same bitrate for both Arbitration and Data Fields
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <main+0x118>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN; // Implies whether you want to use the standard CAN or FD CAN
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <main+0x118>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // Not using TXEvent or MessageMarker
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <main+0x118>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <main+0x118>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]


  // Configure TX Header for FDCAN2
  TxHeader2.Identifier = 0x22;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <main+0x11c>)
 8000722:	2222      	movs	r2, #34	; 0x22
 8000724:	601a      	str	r2, [r3, #0]
  TxHeader2.IdType = FDCAN_STANDARD_ID;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <main+0x11c>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <main+0x11c>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <main+0x11c>)
 8000734:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000738:	60da      	str	r2, [r3, #12]
  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0x11c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0x11c>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <main+0x11c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <main+0x11c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  TxHeader2.MessageMarker = 0;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <main+0x11c>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf ((char *)TxData1, "CAN1TX %d", indx++); // Add data to the TX Buffer
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <main+0x120>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	b2d1      	uxtb	r1, r2
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <main+0x120>)
 8000762:	7011      	strb	r1, [r2, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	490e      	ldr	r1, [pc, #56]	; (80007a0 <main+0x124>)
 8000768:	480e      	ldr	r0, [pc, #56]	; (80007a4 <main+0x128>)
 800076a:	f008 fedf 	bl	800952c <siprintf>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK) { // Add the message to the TX Queue and send it
 800076e:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <main+0x128>)
 8000770:	4908      	ldr	r1, [pc, #32]	; (8000794 <main+0x118>)
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <main+0x110>)
 8000774:	f002 fd93 	bl	800329e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <main+0x106>
		  Error_Handler();
 800077e:	f000 fba7 	bl	8000ed0 <Error_Handler>
	  }

	  HAL_Delay (1000);
 8000782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000786:	f001 f82f 	bl	80017e8 <HAL_Delay>
	  sprintf ((char *)TxData1, "CAN1TX %d", indx++); // Add data to the TX Buffer
 800078a:	e7e5      	b.n	8000758 <main+0xdc>
 800078c:	24000228 	.word	0x24000228
 8000790:	240002c8 	.word	0x240002c8
 8000794:	24000908 	.word	0x24000908
 8000798:	24000964 	.word	0x24000964
 800079c:	24000000 	.word	0x24000000
 80007a0:	08009e8c 	.word	0x08009e8c
 80007a4:	24000954 	.word	0x24000954

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	; 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f008 fed8 	bl	800956c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 fed2 	bl	800956c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f003 ffad 	bl	8004728 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <SystemClock_Config+0xf8>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	4a32      	ldr	r2, [pc, #200]	; (80008a0 <SystemClock_Config+0xf8>)
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <SystemClock_Config+0xf8>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SystemClock_Config+0xfc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <SystemClock_Config+0xfc>)
 80007f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <SystemClock_Config+0xfc>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000804:	bf00      	nop
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <SystemClock_Config+0xfc>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000812:	d1f8      	bne.n	8000806 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000814:	2303      	movs	r3, #3
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000818:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800081e:	2301      	movs	r3, #1
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000832:	2318      	movs	r3, #24
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083a:	2304      	movs	r3, #4
 800083c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000842:	230c      	movs	r3, #12
 8000844:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000846:	2300      	movs	r3, #0
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4618      	mov	r0, r3
 8000854:	f003 ffb2 	bl	80047bc <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800085e:	f000 fb37 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	233f      	movs	r3, #63	; 0x3f
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fbf2 	bl	8005070 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000892:	f000 fb1d 	bl	8000ed0 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3770      	adds	r7, #112	; 0x70
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	58000400 	.word	0x58000400
 80008a4:	58024800 	.word	0x58024800

080008a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ETH_Init+0x80>)
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_ETH_Init+0x84>)
 80008b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ETH_Init+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ETH_Init+0x88>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ETH_Init+0x88>)
 80008c0:	22e1      	movs	r2, #225	; 0xe1
 80008c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ETH_Init+0x88>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ETH_Init+0x88>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ETH_Init+0x88>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ETH_Init+0x80>)
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_ETH_Init+0x88>)
 80008da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_ETH_Init+0x80>)
 80008de:	2201      	movs	r2, #1
 80008e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_ETH_Init+0x80>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_ETH_Init+0x8c>)
 80008e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ETH_Init+0x80>)
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_ETH_Init+0x90>)
 80008ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_ETH_Init+0x80>)
 80008f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_ETH_Init+0x80>)
 80008f8:	f001 fe2e 	bl	8002558 <HAL_ETH_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 fae5 	bl	8000ed0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000906:	2238      	movs	r2, #56	; 0x38
 8000908:	2100      	movs	r1, #0
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_ETH_Init+0x94>)
 800090c:	f008 fe2e 	bl	800956c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_ETH_Init+0x94>)
 8000912:	2221      	movs	r2, #33	; 0x21
 8000914:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_ETH_Init+0x94>)
 8000918:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800091c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_ETH_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24000178 	.word	0x24000178
 800092c:	40028000 	.word	0x40028000
 8000930:	240009c0 	.word	0x240009c0
 8000934:	240000c4 	.word	0x240000c4
 8000938:	24000064 	.word	0x24000064
 800093c:	24000140 	.word	0x24000140

08000940 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */

	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800094e:	2302      	movs	r3, #2
 8000950:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; // Send the data to FIFO 0
 8000952:	2301      	movs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x22;
 8000956:	2322      	movs	r3, #34	; 0x22
 8000958:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x22;
 800095a:	2322      	movs	r3, #34	; 0x22
 800095c:	617b      	str	r3, [r7, #20]
	sFilterConfig.RxBufferIndex = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4834      	ldr	r0, [pc, #208]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000968:	f002 fbf8 	bl	800315c <HAL_FDCAN_ConfigFilter>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_FDCAN1_Init+0x36>
		Error_Handler();
 8000972:	f000 faad 	bl	8000ed0 <Error_Handler>
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000978:	4a30      	ldr	r2, [pc, #192]	; (8000a3c <MX_FDCAN1_Init+0xfc>)
 800097a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 800098a:	2201      	movs	r2, #1
 800098c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000990:	2200      	movs	r2, #0
 8000992:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000996:	2200      	movs	r2, #0
 8000998:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 800099c:	2210      	movs	r2, #16
 800099e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009a2:	220d      	movs	r2, #13
 80009a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009b4:	2219      	movs	r2, #25
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009de:	2201      	movs	r2, #1
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009e4:	2204      	movs	r2, #4
 80009e6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 80009fc:	2204      	movs	r2, #4
 80009fe:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_FDCAN1_Init+0xf8>)
 8000a20:	f002 f9be 	bl	8002da0 <HAL_FDCAN_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_FDCAN1_Init+0xee>
  {
    Error_Handler();
 8000a2a:	f000 fa51 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	24000228 	.word	0x24000228
 8000a3c:	4000a000 	.word	0x4000a000

08000a40 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN2_Init 0 */

	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1; // Send the Data to FIFO 1
 8000a52:	2302      	movs	r3, #2
 8000a54:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x11;
 8000a56:	2311      	movs	r3, #17
 8000a58:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x11;
 8000a5a:	2311      	movs	r3, #17
 8000a5c:	617b      	str	r3, [r7, #20]
	sFilterConfig.RxBufferIndex = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	4834      	ldr	r0, [pc, #208]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000a68:	f002 fb78 	bl	800315c <HAL_FDCAN_ConfigFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_FDCAN2_Init+0x36>
	  Error_Handler();
 8000a72:	f000 fa2d 	bl	8000ed0 <Error_Handler>
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000a78:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <MX_FDCAN2_Init+0xfc>)
 8000a7a:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000aa2:	220d      	movs	r2, #13
 8000aa4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000ab4:	2219      	movs	r2, #25
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 10;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000acc:	220a      	movs	r2, #10
 8000ace:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_FDCAN2_Init+0xf8>)
 8000b20:	f002 f93e 	bl	8002da0 <HAL_FDCAN_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_FDCAN2_Init+0xee>
  {
    Error_Handler();
 8000b2a:	f000 f9d1 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	240002c8 	.word	0x240002c8
 8000b3c:	4000a400 	.word	0x4000a400

08000b40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b46:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <MX_USART3_UART_Init+0x94>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b8a:	f006 fc29 	bl	80073e0 <HAL_UART_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b94:	f000 f99c 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000b9c:	f008 f8f2 	bl	8008d84 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ba6:	f000 f993 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000bae:	f008 f927 	bl	8008e00 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb8:	f000 f98a 	bl	8000ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_USART3_UART_Init+0x90>)
 8000bbe:	f008 f8a8 	bl	8008d12 <HAL_UARTEx_DisableFifoMode>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f000 f982 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	24000368 	.word	0x24000368
 8000bd4:	40004800 	.word	0x40004800

08000bd8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bde:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000be0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be4:	2209      	movs	r2, #9
 8000be6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c20:	f003 fc39 	bl	8004496 <HAL_PCD_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c2a:	f000 f951 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	240003fc 	.word	0x240003fc
 8000c38:	40080000 	.word	0x40080000

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b62      	ldr	r3, [pc, #392]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a60      	ldr	r2, [pc, #384]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b5e      	ldr	r3, [pc, #376]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c70:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a59      	ldr	r2, [pc, #356]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b56      	ldr	r3, [pc, #344]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b53      	ldr	r3, [pc, #332]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a51      	ldr	r2, [pc, #324]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b4b      	ldr	r3, [pc, #300]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a4a      	ldr	r2, [pc, #296]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a42      	ldr	r2, [pc, #264]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce8:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a33      	ldr	r2, [pc, #204]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000d0e:	f043 0310 	orr.w	r3, r3, #16
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <MX_GPIO_Init+0x1a0>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d2a:	482d      	ldr	r0, [pc, #180]	; (8000de0 <MX_GPIO_Init+0x1a4>)
 8000d2c:	f003 fb9a 	bl	8004464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d36:	482b      	ldr	r0, [pc, #172]	; (8000de4 <MX_GPIO_Init+0x1a8>)
 8000d38:	f003 fb94 	bl	8004464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2102      	movs	r1, #2
 8000d40:	4829      	ldr	r0, [pc, #164]	; (8000de8 <MX_GPIO_Init+0x1ac>)
 8000d42:	f003 fb8f 	bl	8004464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4824      	ldr	r0, [pc, #144]	; (8000dec <MX_GPIO_Init+0x1b0>)
 8000d5c:	f003 f9d2 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d60:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4819      	ldr	r0, [pc, #100]	; (8000de0 <MX_GPIO_Init+0x1a4>)
 8000d7a:	f003 f9c3 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_GPIO_Init+0x1a8>)
 8000d98:	f003 f9b4 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	480f      	ldr	r0, [pc, #60]	; (8000df0 <MX_GPIO_Init+0x1b4>)
 8000db2:	f003 f9a7 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_GPIO_Init+0x1ac>)
 8000dce:	f003 f999 	bl	8004104 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3730      	adds	r7, #48	; 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020400 	.word	0x58020400
 8000de4:	58020c00 	.word	0x58020c00
 8000de8:	58021000 	.word	0x58021000
 8000dec:	58020800 	.word	0x58020800
 8000df0:	58021800 	.word	0x58021800

08000df4 <HAL_FDCAN_RxFifo1Callback>:

/* USER CODE BEGIN 4 */
// FDCAN2 Callback
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d029      	beq.n	8000e5c <HAL_FDCAN_RxFifo1Callback+0x68>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_FDCAN_RxFifo1Callback+0x70>)
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_FDCAN_RxFifo1Callback+0x74>)
 8000e0c:	2141      	movs	r1, #65	; 0x41
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f002 faa0 	bl	8003354 <HAL_FDCAN_GetRxMessage>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_FDCAN_RxFifo1Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000e1a:	f000 f859 	bl	8000ed0 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2110      	movs	r1, #16
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f002 fc04 	bl	8003630 <HAL_FDCAN_ActivateNotification>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_FDCAN_RxFifo1Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000e2e:	f000 f84f 	bl	8000ed0 <Error_Handler>
    }

	  sprintf ((char *)TxData2, "CAN2TX %d", indx++);
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	b2d1      	uxtb	r1, r2
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000e3c:	7011      	strb	r1, [r2, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	490b      	ldr	r1, [pc, #44]	; (8000e70 <HAL_FDCAN_RxFifo1Callback+0x7c>)
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000e44:	f008 fb72 	bl	800952c <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2)!= HAL_OK)
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000e4a:	490b      	ldr	r1, [pc, #44]	; (8000e78 <HAL_FDCAN_RxFifo1Callback+0x84>)
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <HAL_FDCAN_RxFifo1Callback+0x88>)
 8000e4e:	f002 fa26 	bl	800329e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_FDCAN_RxFifo1Callback+0x68>
	  {
		  Error_Handler();
 8000e58:	f000 f83a 	bl	8000ed0 <Error_Handler>
	  }
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240009b8 	.word	0x240009b8
 8000e68:	24000988 	.word	0x24000988
 8000e6c:	24000000 	.word	0x24000000
 8000e70:	08009e98 	.word	0x08009e98
 8000e74:	240009b0 	.word	0x240009b0
 8000e78:	24000964 	.word	0x24000964
 8000e7c:	240002c8 	.word	0x240002c8

08000e80 <HAL_FDCAN_RxFifo0Callback>:

// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d014      	beq.n	8000ebe <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000e96:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f002 fa5a 	bl	8003354 <HAL_FDCAN_GetRxMessage>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000ea6:	f000 f813 	bl	8000ed0 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2101      	movs	r1, #1
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f002 fbbe 	bl	8003630 <HAL_FDCAN_ActivateNotification>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000eba:	f000 f809 	bl	8000ed0 <Error_Handler>
    }
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2400095c 	.word	0x2400095c
 8000ecc:	2400092c 	.word	0x2400092c

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed6:	b672      	cpsid	i
}
 8000ed8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t eMessage[16];
  sprintf((char*) &eMessage, "Error\n");
 8000eda:	463b      	mov	r3, r7
 8000edc:	4905      	ldr	r1, [pc, #20]	; (8000ef4 <Error_Handler+0x24>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 fb24 	bl	800952c <siprintf>
  HAL_UART_Transmit(&huart3, eMessage, sizeof(eMessage), HAL_MAX_DELAY);
 8000ee4:	4639      	mov	r1, r7
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	2210      	movs	r2, #16
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <Error_Handler+0x28>)
 8000eee:	f006 fac7 	bl	8007480 <HAL_UART_Transmit>
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <Error_Handler+0x22>
 8000ef4:	08009ea4 	.word	0x08009ea4
 8000ef8:	24000368 	.word	0x24000368

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_MspInit+0x30>)
 8000f04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x30>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x30>)
 8000f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a59      	ldr	r2, [pc, #356]	; (80010b4 <HAL_ETH_MspInit+0x184>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	f040 80ab 	bne.w	80010aa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f54:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5a:	4a57      	ldr	r2, [pc, #348]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f64:	4b54      	ldr	r3, [pc, #336]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f72:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f78:	4a4f      	ldr	r2, [pc, #316]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f82:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f96:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa0:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	4a40      	ldr	r2, [pc, #256]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	4a39      	ldr	r2, [pc, #228]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fdc:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	4a2a      	ldr	r2, [pc, #168]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_ETH_MspInit+0x188>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001026:	2332      	movs	r3, #50	; 0x32
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	481e      	ldr	r0, [pc, #120]	; (80010bc <HAL_ETH_MspInit+0x18c>)
 8001042:	f003 f85f 	bl	8004104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001046:	2386      	movs	r3, #134	; 0x86
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001056:	230b      	movs	r3, #11
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4817      	ldr	r0, [pc, #92]	; (80010c0 <HAL_ETH_MspInit+0x190>)
 8001062:	f003 f84f 	bl	8004104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001078:	230b      	movs	r3, #11
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	4810      	ldr	r0, [pc, #64]	; (80010c4 <HAL_ETH_MspInit+0x194>)
 8001084:	f003 f83e 	bl	8004104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001088:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109a:	230b      	movs	r3, #11
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <HAL_ETH_MspInit+0x198>)
 80010a6:	f003 f82d 	bl	8004104 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3738      	adds	r7, #56	; 0x38
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40028000 	.word	0x40028000
 80010b8:	58024400 	.word	0x58024400
 80010bc:	58020800 	.word	0x58020800
 80010c0:	58020000 	.word	0x58020000
 80010c4:	58020400 	.word	0x58020400
 80010c8:	58021800 	.word	0x58021800

080010cc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0bc      	sub	sp, #240	; 0xf0
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	22c0      	movs	r2, #192	; 0xc0
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f008 fa3d 	bl	800956c <memset>
  if(hfdcan->Instance==FDCAN1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a5e      	ldr	r2, [pc, #376]	; (8001270 <HAL_FDCAN_MspInit+0x1a4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d158      	bne.n	80011ae <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800110c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	4618      	mov	r0, r3
 8001116:	f004 fb37 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001120:	f7ff fed6 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001124:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_FDCAN_MspInit+0x1a8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a52      	ldr	r2, [pc, #328]	; (8001274 <HAL_FDCAN_MspInit+0x1a8>)
 800112c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800112e:	4b51      	ldr	r3, [pc, #324]	; (8001274 <HAL_FDCAN_MspInit+0x1a8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10e      	bne.n	8001154 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001136:	4b50      	ldr	r3, [pc, #320]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 8001138:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800113c:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 8001148:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	4b48      	ldr	r3, [pc, #288]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	4a47      	ldr	r2, [pc, #284]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001164:	4b44      	ldr	r3, [pc, #272]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001172:	2303      	movs	r3, #3
 8001174:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800118a:	2309      	movs	r3, #9
 800118c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001194:	4619      	mov	r1, r3
 8001196:	4839      	ldr	r0, [pc, #228]	; (800127c <HAL_FDCAN_MspInit+0x1b0>)
 8001198:	f002 ffb4 	bl	8004104 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2013      	movs	r0, #19
 80011a2:	f000 fc40 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80011a6:	2013      	movs	r0, #19
 80011a8:	f000 fc57 	bl	8001a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80011ac:	e05c      	b.n	8001268 <HAL_FDCAN_MspInit+0x19c>
  else if(hfdcan->Instance==FDCAN2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a33      	ldr	r2, [pc, #204]	; (8001280 <HAL_FDCAN_MspInit+0x1b4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d157      	bne.n	8001268 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fad9 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 80011dc:	f7ff fe78 	bl	8000ed0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_FDCAN_MspInit+0x1a8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a23      	ldr	r2, [pc, #140]	; (8001274 <HAL_FDCAN_MspInit+0x1a8>)
 80011e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_FDCAN_MspInit+0x1a8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d10e      	bne.n	8001210 <HAL_FDCAN_MspInit+0x144>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 80011f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011f8:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 8001204:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_FDCAN_MspInit+0x1ac>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800122e:	2360      	movs	r3, #96	; 0x60
 8001230:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001246:	2309      	movs	r3, #9
 8001248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <HAL_FDCAN_MspInit+0x1b8>)
 8001254:	f002 ff56 	bl	8004104 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2014      	movs	r0, #20
 800125e:	f000 fbe2 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001262:	2014      	movs	r0, #20
 8001264:	f000 fbf9 	bl	8001a5a <HAL_NVIC_EnableIRQ>
}
 8001268:	bf00      	nop
 800126a:	37f0      	adds	r7, #240	; 0xf0
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	4000a000 	.word	0x4000a000
 8001274:	240009c8 	.word	0x240009c8
 8001278:	58024400 	.word	0x58024400
 800127c:	58020c00 	.word	0x58020c00
 8001280:	4000a400 	.word	0x4000a400
 8001284:	58020400 	.word	0x58020400

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ba      	sub	sp, #232	; 0xe8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	22c0      	movs	r2, #192	; 0xc0
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f008 f95f 	bl	800956c <memset>
  if(huart->Instance==USART3)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <HAL_UART_MspInit+0xd8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d14e      	bne.n	8001356 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012b8:	f04f 0202 	mov.w	r2, #2
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 fa5a 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012da:	f7ff fdf9 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_UART_MspInit+0xdc>)
 80012e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e4:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_UART_MspInit+0xdc>)
 80012e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_UART_MspInit+0xdc>)
 80012f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_UART_MspInit+0xdc>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <HAL_UART_MspInit+0xdc>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_UART_MspInit+0xdc>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800131a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001334:	2307      	movs	r3, #7
 8001336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800133e:	4619      	mov	r1, r3
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <HAL_UART_MspInit+0xe0>)
 8001342:	f002 fedf 	bl	8004104 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2027      	movs	r0, #39	; 0x27
 800134c:	f000 fb6b 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001350:	2027      	movs	r0, #39	; 0x27
 8001352:	f000 fb82 	bl	8001a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	37e8      	adds	r7, #232	; 0xe8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40004800 	.word	0x40004800
 8001364:	58024400 	.word	0x58024400
 8001368:	58020c00 	.word	0x58020c00

0800136c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0ba      	sub	sp, #232	; 0xe8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	22c0      	movs	r2, #192	; 0xc0
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f008 f8ed 	bl	800956c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a30      	ldr	r2, [pc, #192]	; (8001458 <HAL_PCD_MspInit+0xec>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d159      	bne.n	8001450 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800139c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 f9e7 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013c0:	f7ff fd86 	bl	8000ed0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013c4:	f003 f9ea 	bl	800479c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_PCD_MspInit+0xf0>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a23      	ldr	r2, [pc, #140]	; (800145c <HAL_PCD_MspInit+0xf0>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_PCD_MspInit+0xf0>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013e6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001400:	230a      	movs	r3, #10
 8001402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800140a:	4619      	mov	r1, r3
 800140c:	4814      	ldr	r0, [pc, #80]	; (8001460 <HAL_PCD_MspInit+0xf4>)
 800140e:	f002 fe79 	bl	8004104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <HAL_PCD_MspInit+0xf4>)
 800142e:	f002 fe69 	bl	8004104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_PCD_MspInit+0xf0>)
 8001434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001438:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_PCD_MspInit+0xf0>)
 800143a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800143e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_PCD_MspInit+0xf0>)
 8001444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	37e8      	adds	r7, #232	; 0xe8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40080000 	.word	0x40080000
 800145c:	58024400 	.word	0x58024400
 8001460:	58020000 	.word	0x58020000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 f97a 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <FDCAN1_IT0_IRQHandler+0x10>)
 80014be:	f002 f931 	bl	8003724 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24000228 	.word	0x24000228

080014cc <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <FDCAN2_IT0_IRQHandler+0x10>)
 80014d2:	f002 f927 	bl	8003724 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	240002c8 	.word	0x240002c8

080014e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <USART3_IRQHandler+0x10>)
 80014e6:	f006 f859 	bl	800759c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	24000368 	.word	0x24000368

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f008 f82a 	bl	800957c <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	24080000 	.word	0x24080000
 8001554:	00000400 	.word	0x00000400
 8001558:	240009cc 	.word	0x240009cc
 800155c:	24000b20 	.word	0x24000b20

08001560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001564:	4b37      	ldr	r3, [pc, #220]	; (8001644 <SystemInit+0xe4>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <SystemInit+0xe4>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <SystemInit+0xe8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	2b06      	cmp	r3, #6
 800157e:	d807      	bhi.n	8001590 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <SystemInit+0xe8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 030f 	bic.w	r3, r3, #15
 8001588:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <SystemInit+0xe8>)
 800158a:	f043 0307 	orr.w	r3, r3, #7
 800158e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <SystemInit+0xec>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2d      	ldr	r2, [pc, #180]	; (800164c <SystemInit+0xec>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <SystemInit+0xec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <SystemInit+0xec>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4929      	ldr	r1, [pc, #164]	; (800164c <SystemInit+0xec>)
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <SystemInit+0xf0>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <SystemInit+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <SystemInit+0xe8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 030f 	bic.w	r3, r3, #15
 80015c2:	4a21      	ldr	r2, [pc, #132]	; (8001648 <SystemInit+0xe8>)
 80015c4:	f043 0307 	orr.w	r3, r3, #7
 80015c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <SystemInit+0xec>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <SystemInit+0xec>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <SystemInit+0xec>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <SystemInit+0xec>)
 80015de:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <SystemInit+0xf4>)
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <SystemInit+0xec>)
 80015e4:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <SystemInit+0xf8>)
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <SystemInit+0xec>)
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <SystemInit+0xfc>)
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <SystemInit+0xec>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <SystemInit+0xec>)
 80015f6:	4a19      	ldr	r2, [pc, #100]	; (800165c <SystemInit+0xfc>)
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <SystemInit+0xec>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <SystemInit+0xec>)
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <SystemInit+0xfc>)
 8001604:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <SystemInit+0xec>)
 8001608:	2200      	movs	r2, #0
 800160a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <SystemInit+0xec>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <SystemInit+0xec>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <SystemInit+0xec>)
 800161a:	2200      	movs	r2, #0
 800161c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <SystemInit+0x100>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <SystemInit+0x104>)
 8001624:	4013      	ands	r3, r2
 8001626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800162a:	d202      	bcs.n	8001632 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <SystemInit+0x108>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <SystemInit+0x10c>)
 8001634:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001638:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	52002000 	.word	0x52002000
 800164c:	58024400 	.word	0x58024400
 8001650:	eaf6ed7f 	.word	0xeaf6ed7f
 8001654:	02020200 	.word	0x02020200
 8001658:	01ff0000 	.word	0x01ff0000
 800165c:	01010280 	.word	0x01010280
 8001660:	5c001000 	.word	0x5c001000
 8001664:	ffff0000 	.word	0xffff0000
 8001668:	51008108 	.word	0x51008108
 800166c:	52004000 	.word	0x52004000

08001670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001674:	f7ff ff74 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800167a:	490d      	ldr	r1, [pc, #52]	; (80016b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001690:	4c0a      	ldr	r4, [pc, #40]	; (80016bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169e:	f007 ff73 	bl	8009588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a2:	f7fe ffeb 	bl	800067c <main>
  bx  lr
 80016a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016b0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80016b4:	08009f84 	.word	0x08009f84
  ldr r2, =_sbss
 80016b8:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80016bc:	24000b1c 	.word	0x24000b1c

080016c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC3_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ca:	2003      	movs	r0, #3
 80016cc:	f000 f9a0 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016d0:	f003 fe84 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_Init+0x68>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	4913      	ldr	r1, [pc, #76]	; (8001730 <HAL_Init+0x6c>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_Init+0x68>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_Init+0x6c>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_Init+0x70>)
 8001706:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_Init+0x74>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f814 	bl	800173c <HAL_InitTick>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e002      	b.n	8001724 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800171e:	f7ff fbed 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	58024400 	.word	0x58024400
 8001730:	08009ef8 	.word	0x08009ef8
 8001734:	24000008 	.word	0x24000008
 8001738:	24000004 	.word	0x24000004

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_InitTick+0x60>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e021      	b.n	8001794 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_InitTick+0x64>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_InitTick+0x60>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f985 	bl	8001a76 <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f94f 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <HAL_InitTick+0x68>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	24000010 	.word	0x24000010
 80017a0:	24000004 	.word	0x24000004
 80017a4:	2400000c 	.word	0x2400000c

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	24000010 	.word	0x24000010
 80017cc:	240009d0 	.word	0x240009d0

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	240009d0 	.word	0x240009d0

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffde 	bl	80017d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000010 	.word	0x24000010

08001830 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetREVID+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0c1b      	lsrs	r3, r3, #16
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	5c001000 	.word	0x5c001000

08001848 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001858:	4904      	ldr	r1, [pc, #16]	; (800186c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	58000400 	.word	0x58000400

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	4313      	orrs	r3, r2
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <__NVIC_SetPriorityGrouping+0x40>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	05fa0000 	.word	0x05fa0000

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff40 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff90 	bl	8001964 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5f 	bl	8001910 <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff33 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffa4 	bl	80019cc <SysTick_Config>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff fe9a 	bl	80017d0 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e2dc      	b.n	8002062 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d008      	beq.n	8001ac6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e2cd      	b.n	8002062 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a76      	ldr	r2, [pc, #472]	; (8001ca4 <HAL_DMA_Abort+0x214>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d04a      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a74      	ldr	r2, [pc, #464]	; (8001ca8 <HAL_DMA_Abort+0x218>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d045      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a73      	ldr	r2, [pc, #460]	; (8001cac <HAL_DMA_Abort+0x21c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d040      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a71      	ldr	r2, [pc, #452]	; (8001cb0 <HAL_DMA_Abort+0x220>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d03b      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a70      	ldr	r2, [pc, #448]	; (8001cb4 <HAL_DMA_Abort+0x224>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d036      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_DMA_Abort+0x228>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d031      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6d      	ldr	r2, [pc, #436]	; (8001cbc <HAL_DMA_Abort+0x22c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d02c      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6b      	ldr	r2, [pc, #428]	; (8001cc0 <HAL_DMA_Abort+0x230>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d027      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6a      	ldr	r2, [pc, #424]	; (8001cc4 <HAL_DMA_Abort+0x234>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d022      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a68      	ldr	r2, [pc, #416]	; (8001cc8 <HAL_DMA_Abort+0x238>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01d      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a67      	ldr	r2, [pc, #412]	; (8001ccc <HAL_DMA_Abort+0x23c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d018      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_DMA_Abort+0x240>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a64      	ldr	r2, [pc, #400]	; (8001cd4 <HAL_DMA_Abort+0x244>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00e      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a62      	ldr	r2, [pc, #392]	; (8001cd8 <HAL_DMA_Abort+0x248>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d009      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a61      	ldr	r2, [pc, #388]	; (8001cdc <HAL_DMA_Abort+0x24c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d004      	beq.n	8001b66 <HAL_DMA_Abort+0xd6>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5f      	ldr	r2, [pc, #380]	; (8001ce0 <HAL_DMA_Abort+0x250>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_DMA_Abort+0xda>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_DMA_Abort+0xdc>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 021e 	bic.w	r2, r2, #30
 8001b7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e00a      	b.n	8001bae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 020e 	bic.w	r2, r2, #14
 8001ba6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a3c      	ldr	r2, [pc, #240]	; (8001ca4 <HAL_DMA_Abort+0x214>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d072      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <HAL_DMA_Abort+0x218>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d06d      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a39      	ldr	r2, [pc, #228]	; (8001cac <HAL_DMA_Abort+0x21c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d068      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <HAL_DMA_Abort+0x220>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d063      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a36      	ldr	r2, [pc, #216]	; (8001cb4 <HAL_DMA_Abort+0x224>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d05e      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <HAL_DMA_Abort+0x228>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d059      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a33      	ldr	r2, [pc, #204]	; (8001cbc <HAL_DMA_Abort+0x22c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d054      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <HAL_DMA_Abort+0x230>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d04f      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a30      	ldr	r2, [pc, #192]	; (8001cc4 <HAL_DMA_Abort+0x234>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d04a      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <HAL_DMA_Abort+0x238>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d045      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <HAL_DMA_Abort+0x23c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d040      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2b      	ldr	r2, [pc, #172]	; (8001cd0 <HAL_DMA_Abort+0x240>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d03b      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a2a      	ldr	r2, [pc, #168]	; (8001cd4 <HAL_DMA_Abort+0x244>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d036      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <HAL_DMA_Abort+0x248>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d031      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <HAL_DMA_Abort+0x24c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d02c      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <HAL_DMA_Abort+0x250>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d027      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_DMA_Abort+0x254>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d022      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a22      	ldr	r2, [pc, #136]	; (8001ce8 <HAL_DMA_Abort+0x258>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01d      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a21      	ldr	r2, [pc, #132]	; (8001cec <HAL_DMA_Abort+0x25c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d018      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_DMA_Abort+0x260>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_DMA_Abort+0x264>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00e      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <HAL_DMA_Abort+0x268>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d009      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_DMA_Abort+0x26c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d004      	beq.n	8001c9e <HAL_DMA_Abort+0x20e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_DMA_Abort+0x270>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d132      	bne.n	8001d04 <HAL_DMA_Abort+0x274>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e031      	b.n	8001d06 <HAL_DMA_Abort+0x276>
 8001ca2:	bf00      	nop
 8001ca4:	40020010 	.word	0x40020010
 8001ca8:	40020028 	.word	0x40020028
 8001cac:	40020040 	.word	0x40020040
 8001cb0:	40020058 	.word	0x40020058
 8001cb4:	40020070 	.word	0x40020070
 8001cb8:	40020088 	.word	0x40020088
 8001cbc:	400200a0 	.word	0x400200a0
 8001cc0:	400200b8 	.word	0x400200b8
 8001cc4:	40020410 	.word	0x40020410
 8001cc8:	40020428 	.word	0x40020428
 8001ccc:	40020440 	.word	0x40020440
 8001cd0:	40020458 	.word	0x40020458
 8001cd4:	40020470 	.word	0x40020470
 8001cd8:	40020488 	.word	0x40020488
 8001cdc:	400204a0 	.word	0x400204a0
 8001ce0:	400204b8 	.word	0x400204b8
 8001ce4:	58025408 	.word	0x58025408
 8001ce8:	5802541c 	.word	0x5802541c
 8001cec:	58025430 	.word	0x58025430
 8001cf0:	58025444 	.word	0x58025444
 8001cf4:	58025458 	.word	0x58025458
 8001cf8:	5802546c 	.word	0x5802546c
 8001cfc:	58025480 	.word	0x58025480
 8001d00:	58025494 	.word	0x58025494
 8001d04:	2300      	movs	r3, #0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6d      	ldr	r2, [pc, #436]	; (8001ed4 <HAL_DMA_Abort+0x444>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d04a      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6b      	ldr	r2, [pc, #428]	; (8001ed8 <HAL_DMA_Abort+0x448>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d045      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <HAL_DMA_Abort+0x44c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d040      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a68      	ldr	r2, [pc, #416]	; (8001ee0 <HAL_DMA_Abort+0x450>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d03b      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a67      	ldr	r2, [pc, #412]	; (8001ee4 <HAL_DMA_Abort+0x454>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d036      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <HAL_DMA_Abort+0x458>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d031      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a64      	ldr	r2, [pc, #400]	; (8001eec <HAL_DMA_Abort+0x45c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d02c      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a62      	ldr	r2, [pc, #392]	; (8001ef0 <HAL_DMA_Abort+0x460>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d027      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a61      	ldr	r2, [pc, #388]	; (8001ef4 <HAL_DMA_Abort+0x464>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d022      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a5f      	ldr	r2, [pc, #380]	; (8001ef8 <HAL_DMA_Abort+0x468>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01d      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a5e      	ldr	r2, [pc, #376]	; (8001efc <HAL_DMA_Abort+0x46c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d018      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a5c      	ldr	r2, [pc, #368]	; (8001f00 <HAL_DMA_Abort+0x470>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5b      	ldr	r2, [pc, #364]	; (8001f04 <HAL_DMA_Abort+0x474>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00e      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a59      	ldr	r2, [pc, #356]	; (8001f08 <HAL_DMA_Abort+0x478>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d009      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <HAL_DMA_Abort+0x47c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d004      	beq.n	8001dba <HAL_DMA_Abort+0x32a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_DMA_Abort+0x480>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d108      	bne.n	8001dcc <HAL_DMA_Abort+0x33c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e007      	b.n	8001ddc <HAL_DMA_Abort+0x34c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ddc:	e013      	b.n	8001e06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dde:	f7ff fcf7 	bl	80017d0 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d90c      	bls.n	8001e06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e12d      	b.n	8002062 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1e5      	bne.n	8001dde <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <HAL_DMA_Abort+0x444>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04a      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <HAL_DMA_Abort+0x448>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d045      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <HAL_DMA_Abort+0x44c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d040      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_DMA_Abort+0x450>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d03b      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <HAL_DMA_Abort+0x454>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d036      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <HAL_DMA_Abort+0x458>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a26      	ldr	r2, [pc, #152]	; (8001eec <HAL_DMA_Abort+0x45c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d02c      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <HAL_DMA_Abort+0x460>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d027      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_DMA_Abort+0x464>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <HAL_DMA_Abort+0x468>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01d      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a20      	ldr	r2, [pc, #128]	; (8001efc <HAL_DMA_Abort+0x46c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d018      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <HAL_DMA_Abort+0x470>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_DMA_Abort+0x474>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_DMA_Abort+0x478>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_DMA_Abort+0x47c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort+0x422>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_DMA_Abort+0x480>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_DMA_Abort+0x426>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_DMA_Abort+0x428>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02b      	beq.n	8001f14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	223f      	movs	r2, #63	; 0x3f
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	e02a      	b.n	8001f2a <HAL_DMA_Abort+0x49a>
 8001ed4:	40020010 	.word	0x40020010
 8001ed8:	40020028 	.word	0x40020028
 8001edc:	40020040 	.word	0x40020040
 8001ee0:	40020058 	.word	0x40020058
 8001ee4:	40020070 	.word	0x40020070
 8001ee8:	40020088 	.word	0x40020088
 8001eec:	400200a0 	.word	0x400200a0
 8001ef0:	400200b8 	.word	0x400200b8
 8001ef4:	40020410 	.word	0x40020410
 8001ef8:	40020428 	.word	0x40020428
 8001efc:	40020440 	.word	0x40020440
 8001f00:	40020458 	.word	0x40020458
 8001f04:	40020470 	.word	0x40020470
 8001f08:	40020488 	.word	0x40020488
 8001f0c:	400204a0 	.word	0x400204a0
 8001f10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2201      	movs	r2, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4f      	ldr	r2, [pc, #316]	; (800206c <HAL_DMA_Abort+0x5dc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d072      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4d      	ldr	r2, [pc, #308]	; (8002070 <HAL_DMA_Abort+0x5e0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d06d      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4c      	ldr	r2, [pc, #304]	; (8002074 <HAL_DMA_Abort+0x5e4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d068      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_DMA_Abort+0x5e8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d063      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a49      	ldr	r2, [pc, #292]	; (800207c <HAL_DMA_Abort+0x5ec>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d05e      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a47      	ldr	r2, [pc, #284]	; (8002080 <HAL_DMA_Abort+0x5f0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d059      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a46      	ldr	r2, [pc, #280]	; (8002084 <HAL_DMA_Abort+0x5f4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d054      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a44      	ldr	r2, [pc, #272]	; (8002088 <HAL_DMA_Abort+0x5f8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04f      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a43      	ldr	r2, [pc, #268]	; (800208c <HAL_DMA_Abort+0x5fc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d04a      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a41      	ldr	r2, [pc, #260]	; (8002090 <HAL_DMA_Abort+0x600>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d045      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a40      	ldr	r2, [pc, #256]	; (8002094 <HAL_DMA_Abort+0x604>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d040      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <HAL_DMA_Abort+0x608>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d03b      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <HAL_DMA_Abort+0x60c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d036      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <HAL_DMA_Abort+0x610>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d031      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a3a      	ldr	r2, [pc, #232]	; (80020a4 <HAL_DMA_Abort+0x614>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d02c      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <HAL_DMA_Abort+0x618>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d027      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a37      	ldr	r2, [pc, #220]	; (80020ac <HAL_DMA_Abort+0x61c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d022      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a35      	ldr	r2, [pc, #212]	; (80020b0 <HAL_DMA_Abort+0x620>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01d      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a34      	ldr	r2, [pc, #208]	; (80020b4 <HAL_DMA_Abort+0x624>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <HAL_DMA_Abort+0x628>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a31      	ldr	r2, [pc, #196]	; (80020bc <HAL_DMA_Abort+0x62c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00e      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <HAL_DMA_Abort+0x630>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2e      	ldr	r2, [pc, #184]	; (80020c4 <HAL_DMA_Abort+0x634>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_DMA_Abort+0x58a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <HAL_DMA_Abort+0x638>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_DMA_Abort+0x58e>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_DMA_Abort+0x590>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800202c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002044:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800204e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40020010 	.word	0x40020010
 8002070:	40020028 	.word	0x40020028
 8002074:	40020040 	.word	0x40020040
 8002078:	40020058 	.word	0x40020058
 800207c:	40020070 	.word	0x40020070
 8002080:	40020088 	.word	0x40020088
 8002084:	400200a0 	.word	0x400200a0
 8002088:	400200b8 	.word	0x400200b8
 800208c:	40020410 	.word	0x40020410
 8002090:	40020428 	.word	0x40020428
 8002094:	40020440 	.word	0x40020440
 8002098:	40020458 	.word	0x40020458
 800209c:	40020470 	.word	0x40020470
 80020a0:	40020488 	.word	0x40020488
 80020a4:	400204a0 	.word	0x400204a0
 80020a8:	400204b8 	.word	0x400204b8
 80020ac:	58025408 	.word	0x58025408
 80020b0:	5802541c 	.word	0x5802541c
 80020b4:	58025430 	.word	0x58025430
 80020b8:	58025444 	.word	0x58025444
 80020bc:	58025458 	.word	0x58025458
 80020c0:	5802546c 	.word	0x5802546c
 80020c4:	58025480 	.word	0x58025480
 80020c8:	58025494 	.word	0x58025494

080020cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e237      	b.n	800254e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d004      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e22c      	b.n	800254e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a5c      	ldr	r2, [pc, #368]	; (800226c <HAL_DMA_Abort_IT+0x1a0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04a      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <HAL_DMA_Abort_IT+0x1a4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d045      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a59      	ldr	r2, [pc, #356]	; (8002274 <HAL_DMA_Abort_IT+0x1a8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d040      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a58      	ldr	r2, [pc, #352]	; (8002278 <HAL_DMA_Abort_IT+0x1ac>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d03b      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a56      	ldr	r2, [pc, #344]	; (800227c <HAL_DMA_Abort_IT+0x1b0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d036      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a55      	ldr	r2, [pc, #340]	; (8002280 <HAL_DMA_Abort_IT+0x1b4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d031      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a53      	ldr	r2, [pc, #332]	; (8002284 <HAL_DMA_Abort_IT+0x1b8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02c      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a52      	ldr	r2, [pc, #328]	; (8002288 <HAL_DMA_Abort_IT+0x1bc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d027      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a50      	ldr	r2, [pc, #320]	; (800228c <HAL_DMA_Abort_IT+0x1c0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d022      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_DMA_Abort_IT+0x1c4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d01d      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a4d      	ldr	r2, [pc, #308]	; (8002294 <HAL_DMA_Abort_IT+0x1c8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_DMA_Abort_IT+0x1cc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a4a      	ldr	r2, [pc, #296]	; (800229c <HAL_DMA_Abort_IT+0x1d0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a49      	ldr	r2, [pc, #292]	; (80022a0 <HAL_DMA_Abort_IT+0x1d4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a47      	ldr	r2, [pc, #284]	; (80022a4 <HAL_DMA_Abort_IT+0x1d8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_DMA_Abort_IT+0xc8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <HAL_DMA_Abort_IT+0x1dc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_DMA_Abort_IT+0xcc>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_DMA_Abort_IT+0xce>
 8002198:	2300      	movs	r3, #0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8086 	beq.w	80022ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2204      	movs	r2, #4
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <HAL_DMA_Abort_IT+0x1a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d04a      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2e      	ldr	r2, [pc, #184]	; (8002270 <HAL_DMA_Abort_IT+0x1a4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d045      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2c      	ldr	r2, [pc, #176]	; (8002274 <HAL_DMA_Abort_IT+0x1a8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d040      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <HAL_DMA_Abort_IT+0x1ac>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d03b      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <HAL_DMA_Abort_IT+0x1b0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d036      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_DMA_Abort_IT+0x1b4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d031      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a26      	ldr	r2, [pc, #152]	; (8002284 <HAL_DMA_Abort_IT+0x1b8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02c      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a25      	ldr	r2, [pc, #148]	; (8002288 <HAL_DMA_Abort_IT+0x1bc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d027      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_DMA_Abort_IT+0x1c0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d022      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_DMA_Abort_IT+0x1c4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01d      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a20      	ldr	r2, [pc, #128]	; (8002294 <HAL_DMA_Abort_IT+0x1c8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d018      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <HAL_DMA_Abort_IT+0x1cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_DMA_Abort_IT+0x1d0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00e      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_DMA_Abort_IT+0x1d4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1a      	ldr	r2, [pc, #104]	; (80022a4 <HAL_DMA_Abort_IT+0x1d8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_DMA_Abort_IT+0x17c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_DMA_Abort_IT+0x1dc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <HAL_DMA_Abort_IT+0x18e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e178      	b.n	800254c <HAL_DMA_Abort_IT+0x480>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e16f      	b.n	800254c <HAL_DMA_Abort_IT+0x480>
 800226c:	40020010 	.word	0x40020010
 8002270:	40020028 	.word	0x40020028
 8002274:	40020040 	.word	0x40020040
 8002278:	40020058 	.word	0x40020058
 800227c:	40020070 	.word	0x40020070
 8002280:	40020088 	.word	0x40020088
 8002284:	400200a0 	.word	0x400200a0
 8002288:	400200b8 	.word	0x400200b8
 800228c:	40020410 	.word	0x40020410
 8002290:	40020428 	.word	0x40020428
 8002294:	40020440 	.word	0x40020440
 8002298:	40020458 	.word	0x40020458
 800229c:	40020470 	.word	0x40020470
 80022a0:	40020488 	.word	0x40020488
 80022a4:	400204a0 	.word	0x400204a0
 80022a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 020e 	bic.w	r2, r2, #14
 80022ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6c      	ldr	r2, [pc, #432]	; (8002474 <HAL_DMA_Abort_IT+0x3a8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d04a      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6b      	ldr	r2, [pc, #428]	; (8002478 <HAL_DMA_Abort_IT+0x3ac>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d045      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a69      	ldr	r2, [pc, #420]	; (800247c <HAL_DMA_Abort_IT+0x3b0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d040      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a68      	ldr	r2, [pc, #416]	; (8002480 <HAL_DMA_Abort_IT+0x3b4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d03b      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a66      	ldr	r2, [pc, #408]	; (8002484 <HAL_DMA_Abort_IT+0x3b8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d036      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a65      	ldr	r2, [pc, #404]	; (8002488 <HAL_DMA_Abort_IT+0x3bc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d031      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a63      	ldr	r2, [pc, #396]	; (800248c <HAL_DMA_Abort_IT+0x3c0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02c      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a62      	ldr	r2, [pc, #392]	; (8002490 <HAL_DMA_Abort_IT+0x3c4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d027      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a60      	ldr	r2, [pc, #384]	; (8002494 <HAL_DMA_Abort_IT+0x3c8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d022      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a5f      	ldr	r2, [pc, #380]	; (8002498 <HAL_DMA_Abort_IT+0x3cc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d01d      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a5d      	ldr	r2, [pc, #372]	; (800249c <HAL_DMA_Abort_IT+0x3d0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d018      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a5c      	ldr	r2, [pc, #368]	; (80024a0 <HAL_DMA_Abort_IT+0x3d4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5a      	ldr	r2, [pc, #360]	; (80024a4 <HAL_DMA_Abort_IT+0x3d8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00e      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a59      	ldr	r2, [pc, #356]	; (80024a8 <HAL_DMA_Abort_IT+0x3dc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a57      	ldr	r2, [pc, #348]	; (80024ac <HAL_DMA_Abort_IT+0x3e0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_DMA_Abort_IT+0x290>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a56      	ldr	r2, [pc, #344]	; (80024b0 <HAL_DMA_Abort_IT+0x3e4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <HAL_DMA_Abort_IT+0x2a2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e007      	b.n	800237e <HAL_DMA_Abort_IT+0x2b2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <HAL_DMA_Abort_IT+0x3a8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d072      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <HAL_DMA_Abort_IT+0x3ac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d06d      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a39      	ldr	r2, [pc, #228]	; (800247c <HAL_DMA_Abort_IT+0x3b0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d068      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a37      	ldr	r2, [pc, #220]	; (8002480 <HAL_DMA_Abort_IT+0x3b4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d063      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a36      	ldr	r2, [pc, #216]	; (8002484 <HAL_DMA_Abort_IT+0x3b8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d05e      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a34      	ldr	r2, [pc, #208]	; (8002488 <HAL_DMA_Abort_IT+0x3bc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d059      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a33      	ldr	r2, [pc, #204]	; (800248c <HAL_DMA_Abort_IT+0x3c0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d054      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a31      	ldr	r2, [pc, #196]	; (8002490 <HAL_DMA_Abort_IT+0x3c4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d04f      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a30      	ldr	r2, [pc, #192]	; (8002494 <HAL_DMA_Abort_IT+0x3c8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d04a      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <HAL_DMA_Abort_IT+0x3cc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d045      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2d      	ldr	r2, [pc, #180]	; (800249c <HAL_DMA_Abort_IT+0x3d0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d040      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <HAL_DMA_Abort_IT+0x3d4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d03b      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <HAL_DMA_Abort_IT+0x3d8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d036      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_DMA_Abort_IT+0x3dc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d031      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_DMA_Abort_IT+0x3e0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d02c      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <HAL_DMA_Abort_IT+0x3e4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d027      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_DMA_Abort_IT+0x3e8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d022      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a22      	ldr	r2, [pc, #136]	; (80024b8 <HAL_DMA_Abort_IT+0x3ec>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01d      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a21      	ldr	r2, [pc, #132]	; (80024bc <HAL_DMA_Abort_IT+0x3f0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d018      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_DMA_Abort_IT+0x3f4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_DMA_Abort_IT+0x3f8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00e      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <HAL_DMA_Abort_IT+0x3fc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <HAL_DMA_Abort_IT+0x400>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d004      	beq.n	800246e <HAL_DMA_Abort_IT+0x3a2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <HAL_DMA_Abort_IT+0x404>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d132      	bne.n	80024d4 <HAL_DMA_Abort_IT+0x408>
 800246e:	2301      	movs	r3, #1
 8002470:	e031      	b.n	80024d6 <HAL_DMA_Abort_IT+0x40a>
 8002472:	bf00      	nop
 8002474:	40020010 	.word	0x40020010
 8002478:	40020028 	.word	0x40020028
 800247c:	40020040 	.word	0x40020040
 8002480:	40020058 	.word	0x40020058
 8002484:	40020070 	.word	0x40020070
 8002488:	40020088 	.word	0x40020088
 800248c:	400200a0 	.word	0x400200a0
 8002490:	400200b8 	.word	0x400200b8
 8002494:	40020410 	.word	0x40020410
 8002498:	40020428 	.word	0x40020428
 800249c:	40020440 	.word	0x40020440
 80024a0:	40020458 	.word	0x40020458
 80024a4:	40020470 	.word	0x40020470
 80024a8:	40020488 	.word	0x40020488
 80024ac:	400204a0 	.word	0x400204a0
 80024b0:	400204b8 	.word	0x400204b8
 80024b4:	58025408 	.word	0x58025408
 80024b8:	5802541c 	.word	0x5802541c
 80024bc:	58025430 	.word	0x58025430
 80024c0:	58025444 	.word	0x58025444
 80024c4:	58025458 	.word	0x58025458
 80024c8:	5802546c 	.word	0x5802546c
 80024cc:	58025480 	.word	0x58025480
 80024d0:	58025494 	.word	0x58025494
 80024d4:	2300      	movs	r3, #0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d028      	beq.n	800252c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2201      	movs	r2, #1
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002508:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00c      	beq.n	800252c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002520:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800252a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop

08002558 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0cf      	b.n	800270a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2223      	movs	r2, #35	; 0x23
 8002578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe fcd7 	bl	8000f30 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b64      	ldr	r3, [pc, #400]	; (8002714 <HAL_ETH_Init+0x1bc>)
 8002584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002588:	4a62      	ldr	r2, [pc, #392]	; (8002714 <HAL_ETH_Init+0x1bc>)
 800258a:	f043 0302 	orr.w	r3, r3, #2
 800258e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002592:	4b60      	ldr	r3, [pc, #384]	; (8002714 <HAL_ETH_Init+0x1bc>)
 8002594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7a1b      	ldrb	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff f94d 	bl	8001848 <HAL_SYSCFG_ETHInterfaceSelect>
 80025ae:	e003      	b.n	80025b8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80025b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80025b4:	f7ff f948 	bl	8001848 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80025b8:	4b57      	ldr	r3, [pc, #348]	; (8002718 <HAL_ETH_Init+0x1c0>)
 80025ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d4:	f7ff f8fc 	bl	80017d0 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80025da:	e011      	b.n	8002600 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025dc:	f7ff f8f8 	bl	80017d0 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025ea:	d909      	bls.n	8002600 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2204      	movs	r2, #4
 80025f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	22e0      	movs	r2, #224	; 0xe0
 80025f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e084      	b.n	800270a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e4      	bne.n	80025dc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f886 	bl	8002724 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002618:	f003 f85a 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 800261c:	4603      	mov	r3, r0
 800261e:	4a3f      	ldr	r2, [pc, #252]	; (800271c <HAL_ETH_Init+0x1c4>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	0c9a      	lsrs	r2, r3, #18
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3a01      	subs	r2, #1
 800262c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fa71 	bl	8002b18 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002642:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800264e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002652:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	22e0      	movs	r2, #224	; 0xe0
 800266e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e049      	b.n	800270a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002682:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_ETH_Init+0x1c8>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6952      	ldr	r2, [r2, #20]
 800268a:	0051      	lsls	r1, r2, #1
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002696:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fad9 	bl	8002c52 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fb1f 	bl	8002ce4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	3305      	adds	r3, #5
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	021a      	lsls	r2, r3, #8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	3303      	adds	r3, #3
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	061a      	lsls	r2, r3, #24
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	3302      	adds	r3, #2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	3301      	adds	r3, #1
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80026f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2210      	movs	r2, #16
 8002704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	58024400 	.word	0x58024400
 8002718:	58000400 	.word	0x58000400
 800271c:	431bde83 	.word	0x431bde83
 8002720:	ffff8001 	.word	0xffff8001

08002724 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002734:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800273c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800273e:	f002 ffc7 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8002742:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d908      	bls.n	800275e <HAL_ETH_SetMDIOClockRange+0x3a>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d804      	bhi.n	800275e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e027      	b.n	80027ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d908      	bls.n	8002778 <HAL_ETH_SetMDIOClockRange+0x54>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d204      	bcs.n	8002778 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e01a      	b.n	80027ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d303      	bcc.n	8002788 <HAL_ETH_SetMDIOClockRange+0x64>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d911      	bls.n	80027ac <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d908      	bls.n	80027a2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d804      	bhi.n	80027a2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e005      	b.n	80027ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e000      	b.n	80027ae <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80027ac:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	01312cff 	.word	0x01312cff
 80027c4:	02160ebf 	.word	0x02160ebf
 80027c8:	03938700 	.word	0x03938700
 80027cc:	05f5e0ff 	.word	0x05f5e0ff
 80027d0:	08f0d17f 	.word	0x08f0d17f

080027d4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80027e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80027ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	7b1b      	ldrb	r3, [r3, #12]
 80027f4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80027f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	7b5b      	ldrb	r3, [r3, #13]
 80027fc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	7b9b      	ldrb	r3, [r3, #14]
 8002804:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	7bdb      	ldrb	r3, [r3, #15]
 800280c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800280e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	7c12      	ldrb	r2, [r2, #16]
 8002814:	2a00      	cmp	r2, #0
 8002816:	d102      	bne.n	800281e <ETH_SetMACConfig+0x4a>
 8002818:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800281c:	e000      	b.n	8002820 <ETH_SetMACConfig+0x4c>
 800281e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002820:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	7c52      	ldrb	r2, [r2, #17]
 8002826:	2a00      	cmp	r2, #0
 8002828:	d102      	bne.n	8002830 <ETH_SetMACConfig+0x5c>
 800282a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800282e:	e000      	b.n	8002832 <ETH_SetMACConfig+0x5e>
 8002830:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002832:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	7c9b      	ldrb	r3, [r3, #18]
 8002838:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800283a:	431a      	orrs	r2, r3
               macconf->Speed |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002840:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	7f1b      	ldrb	r3, [r3, #28]
 800284c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800284e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	7f5b      	ldrb	r3, [r3, #29]
 8002854:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002856:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	7f92      	ldrb	r2, [r2, #30]
 800285c:	2a00      	cmp	r2, #0
 800285e:	d102      	bne.n	8002866 <ETH_SetMACConfig+0x92>
 8002860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002864:	e000      	b.n	8002868 <ETH_SetMACConfig+0x94>
 8002866:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002868:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	7fdb      	ldrb	r3, [r3, #31]
 800286e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002870:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002878:	2a00      	cmp	r2, #0
 800287a:	d102      	bne.n	8002882 <ETH_SetMACConfig+0xae>
 800287c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002880:	e000      	b.n	8002884 <ETH_SetMACConfig+0xb0>
 8002882:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002884:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800288a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002892:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002894:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <ETH_SetMACConfig+0x22c>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028be:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028c8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80028ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028d2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80028d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d102      	bne.n	80028e6 <ETH_SetMACConfig+0x112>
 80028e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028e4:	e000      	b.n	80028e8 <ETH_SetMACConfig+0x114>
 80028e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80028e8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <ETH_SetMACConfig+0x230>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	430b      	orrs	r3, r1
 8002904:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800290c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <ETH_SetMACConfig+0x234>)
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	68f9      	ldr	r1, [r7, #12]
 8002926:	430b      	orrs	r3, r1
 8002928:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002930:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002936:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800293e:	2a00      	cmp	r2, #0
 8002940:	d101      	bne.n	8002946 <ETH_SetMACConfig+0x172>
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	e000      	b.n	8002948 <ETH_SetMACConfig+0x174>
 8002946:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002948:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800295a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800295e:	4013      	ands	r3, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	430b      	orrs	r3, r1
 8002968:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002970:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002978:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	f023 0103 	bic.w	r1, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	430a      	orrs	r2, r1
 8002992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800299e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80029ba:	2a00      	cmp	r2, #0
 80029bc:	d101      	bne.n	80029c2 <ETH_SetMACConfig+0x1ee>
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	e000      	b.n	80029c4 <ETH_SetMACConfig+0x1f0>
 80029c2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80029c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80029cc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80029d6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80029e4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	00048083 	.word	0x00048083
 8002a04:	c0f88000 	.word	0xc0f88000
 8002a08:	fffffef0 	.word	0xfffffef0

08002a0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <ETH_SetDMAConfig+0xf8>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	6811      	ldr	r1, [r2, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a32:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	7b1b      	ldrb	r3, [r3, #12]
 8002a44:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <ETH_SetDMAConfig+0xfc>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a64:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	7b5b      	ldrb	r3, [r3, #13]
 8002a6a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <ETH_SetDMAConfig+0x100>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	68f9      	ldr	r1, [r7, #12]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a90:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	7d1b      	ldrb	r3, [r3, #20]
 8002a9c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	7f5b      	ldrb	r3, [r3, #29]
 8002aa4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <ETH_SetDMAConfig+0x104>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	68f9      	ldr	r1, [r7, #12]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	7f1b      	ldrb	r3, [r3, #28]
 8002ace:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <ETH_SetDMAConfig+0x108>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	430b      	orrs	r3, r1
 8002af0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002af4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	ffff87fd 	.word	0xffff87fd
 8002b08:	ffff2ffe 	.word	0xffff2ffe
 8002b0c:	fffec000 	.word	0xfffec000
 8002b10:	ffc0efef 	.word	0xffc0efef
 8002b14:	7fc0ffff 	.word	0x7fc0ffff

08002b18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a4      	sub	sp, #144	; 0x90
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b26:	2300      	movs	r3, #0
 8002b28:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b70:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002b74:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002b92:	2300      	movs	r3, #0
 8002b94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002bc2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bcc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fde6 	bl	80027d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002c38:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fee1 	bl	8002a0c <ETH_SetDMAConfig>
}
 8002c4a:	bf00      	nop
 8002c4c:	3790      	adds	r7, #144	; 0x90
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e01d      	b.n	8002c9c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68d9      	ldr	r1, [r3, #12]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	3206      	adds	r2, #6
 8002c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d9de      	bls.n	8002c60 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e023      	b.n	8002d3a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6919      	ldr	r1, [r3, #16]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	3212      	adds	r2, #18
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d9d8      	bls.n	8002cf2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d66:	461a      	mov	r2, r3
 8002d68:	2303      	movs	r3, #3
 8002d6a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b098      	sub	sp, #96	; 0x60
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002da8:	4a84      	ldr	r2, [pc, #528]	; (8002fbc <HAL_FDCAN_Init+0x21c>)
 8002daa:	f107 030c 	add.w	r3, r7, #12
 8002dae:	4611      	mov	r1, r2
 8002db0:	224c      	movs	r2, #76	; 0x4c
 8002db2:	4618      	mov	r0, r3
 8002db4:	f006 fc0e 	bl	80095d4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1c6      	b.n	8003150 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a7e      	ldr	r2, [pc, #504]	; (8002fc0 <HAL_FDCAN_Init+0x220>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d106      	bne.n	8002dda <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe f96c 	bl	80010cc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0210 	bic.w	r2, r2, #16
 8002e02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e04:	f7fe fce4 	bl	80017d0 <HAL_GetTick>
 8002e08:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e0a:	e014      	b.n	8002e36 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e0c:	f7fe fce0 	bl	80017d0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b0a      	cmp	r3, #10
 8002e18:	d90d      	bls.n	8002e36 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e18c      	b.n	8003150 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d0e3      	beq.n	8002e0c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e54:	f7fe fcbc 	bl	80017d0 <HAL_GetTick>
 8002e58:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e5a:	e014      	b.n	8002e86 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e5c:	f7fe fcb8 	bl	80017d0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b0a      	cmp	r3, #10
 8002e68:	d90d      	bls.n	8002e86 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e164      	b.n	8003150 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0e3      	beq.n	8002e5c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0202 	orr.w	r2, r2, #2
 8002ea2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7c1b      	ldrb	r3, [r3, #16]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eba:	619a      	str	r2, [r3, #24]
 8002ebc:	e007      	b.n	8002ece <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ecc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7c5b      	ldrb	r3, [r3, #17]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee4:	619a      	str	r2, [r3, #24]
 8002ee6:	e007      	b.n	8002ef8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ef6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7c9b      	ldrb	r3, [r3, #18]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d108      	bne.n	8002f12 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f0e:	619a      	str	r2, [r3, #24]
 8002f10:	e007      	b.n	8002f22 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f20:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002f46:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0210 	bic.w	r2, r2, #16
 8002f56:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d108      	bne.n	8002f72 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0204 	orr.w	r2, r2, #4
 8002f6e:	619a      	str	r2, [r3, #24]
 8002f70:	e030      	b.n	8002fd4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02c      	beq.n	8002fd4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d020      	beq.n	8002fc4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f90:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0210 	orr.w	r2, r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d114      	bne.n	8002fd4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0220 	orr.w	r2, r2, #32
 8002fb8:	619a      	str	r2, [r3, #24]
 8002fba:	e00b      	b.n	8002fd4 <HAL_FDCAN_Init+0x234>
 8002fbc:	08009eac 	.word	0x08009eac
 8002fc0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fe4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002fec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ffc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ffe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003008:	d115      	bne.n	8003036 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	3b01      	subs	r3, #1
 8003016:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003018:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	3b01      	subs	r3, #1
 8003020:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003022:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	3b01      	subs	r3, #1
 800302c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003032:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003034:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305c:	4413      	add	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800306a:	f023 0107 	bic.w	r1, r3, #7
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3360      	adds	r3, #96	; 0x60
 8003076:	443b      	add	r3, r7
 8003078:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d011      	beq.n	80030b2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003096:	f023 0107 	bic.w	r1, r3, #7
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3360      	adds	r3, #96	; 0x60
 80030a2:	443b      	add	r3, r7
 80030a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d012      	beq.n	80030e0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030c2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3360      	adds	r3, #96	; 0x60
 80030ce:	443b      	add	r3, r7
 80030d0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80030d4:	011a      	lsls	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d012      	beq.n	800310e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030f0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	3360      	adds	r3, #96	; 0x60
 80030fc:	443b      	add	r3, r7
 80030fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_FDCAN_Init+0x3b8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d107      	bne.n	8003128 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f022 0203 	bic.w	r2, r2, #3
 8003126:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fddb 	bl	8003cfc <FDCAN_CalcultateRamBlockAddresses>
 8003146:	4603      	mov	r3, r0
 8003148:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800314c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003150:	4618      	mov	r0, r3
 8003152:	3760      	adds	r7, #96	; 0x60
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	4000a000 	.word	0x4000a000

0800315c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800316c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d002      	beq.n	800317a <HAL_FDCAN_ConfigFilter+0x1e>
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d157      	bne.n	800322a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d12b      	bne.n	80031da <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b07      	cmp	r3, #7
 8003188:	d10d      	bne.n	80031a6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003196:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800319c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800319e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e00e      	b.n	80031c4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031b2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80031ba:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e025      	b.n	8003226 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	075a      	lsls	r2, r3, #29
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	d103      	bne.n	80031f8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e006      	b.n	8003206 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	079a      	lsls	r2, r3, #30
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	3304      	adds	r3, #4
 800321e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e008      	b.n	800323c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003230:	f043 0202 	orr.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d111      	bne.n	8003280 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e008      	b.n	8003292 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d141      	bne.n	800333a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032be:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e038      	b.n	800334c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e026      	b.n	800334c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fe77 	bl	8004008 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2101      	movs	r1, #1
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800332a:	2201      	movs	r2, #1
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e008      	b.n	800334c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003340:	f043 0208 	orr.w	r2, r3, #8
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
  }
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003354:	b480      	push	{r7}
 8003356:	b08b      	sub	sp, #44	; 0x2c
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800336c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800336e:	7efb      	ldrb	r3, [r7, #27]
 8003370:	2b02      	cmp	r3, #2
 8003372:	f040 814b 	bne.w	800360c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d14d      	bne.n	8003418 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003384:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e13e      	b.n	800361e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e12c      	b.n	800361e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033cc:	0e1b      	lsrs	r3, r3, #24
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d10b      	bne.n	80033ee <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033de:	0fdb      	lsrs	r3, r3, #31
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e8:	d101      	bne.n	80033ee <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	69f9      	ldr	r1, [r7, #28]
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
 8003416:	e069      	b.n	80034ec <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b41      	cmp	r3, #65	; 0x41
 800341c:	d14d      	bne.n	80034ba <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0ed      	b.n	800361e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800344a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003458:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0db      	b.n	800361e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10b      	bne.n	8003490 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003480:	0fdb      	lsrs	r3, r3, #31
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800348a:	d101      	bne.n	8003490 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800348c:	2301      	movs	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e018      	b.n	80034ec <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d309      	bcc.n	80034d8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0a2      	b.n	800361e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d107      	bne.n	8003510 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0c9b      	lsrs	r3, r3, #18
 8003506:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e005      	b.n	800351c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	3304      	adds	r3, #4
 8003538:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	0e1b      	lsrs	r3, r3, #24
 800356e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0fda      	lsrs	r2, r3, #31
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	3304      	adds	r3, #4
 8003584:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800358a:	2300      	movs	r3, #0
 800358c:	623b      	str	r3, [r7, #32]
 800358e:	e00a      	b.n	80035a6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	441a      	add	r2, r3
 8003596:	6839      	ldr	r1, [r7, #0]
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	440b      	add	r3, r1
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	3301      	adds	r3, #1
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	4a1f      	ldr	r2, [pc, #124]	; (800362c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d3eb      	bcc.n	8003590 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d105      	bne.n	80035ca <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80035c8:	e01e      	b.n	8003608 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b41      	cmp	r3, #65	; 0x41
 80035ce:	d105      	bne.n	80035dc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80035da:	e015      	b.n	8003608 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b1f      	cmp	r3, #31
 80035e0:	d808      	bhi.n	80035f4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80035f2:	e009      	b.n	8003608 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 021f 	and.w	r2, r3, #31
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e008      	b.n	800361e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003612:	f043 0208 	orr.w	r2, r3, #8
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	372c      	adds	r7, #44	; 0x2c
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	08009f08 	.word	0x08009f08

08003630 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003642:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d002      	beq.n	8003650 <HAL_FDCAN_ActivateNotification+0x20>
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d155      	bne.n	80036fc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	65da      	str	r2, [r3, #92]	; 0x5c
 800366e:	e014      	b.n	800369a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4013      	ands	r3, r2
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d108      	bne.n	8003692 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0202 	orr.w	r2, r2, #2
 800368e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003690:	e003      	b.n	800369a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2203      	movs	r2, #3
 8003698:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_FDCAN_ActivateNotification+0xec>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6553      	str	r3, [r2, #84]	; 0x54
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_FDCAN_ActivateNotification+0xf0>)
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	0f9b      	lsrs	r3, r3, #30
 80036f2:	490b      	ldr	r1, [pc, #44]	; (8003720 <HAL_FDCAN_ActivateNotification+0xf0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e008      	b.n	800370e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003702:	f043 0202 	orr.w	r2, r3, #2
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	3fcfffff 	.word	0x3fcfffff
 8003720:	4000a800 	.word	0x4000a800

08003724 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b096      	sub	sp, #88	; 0x58
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800372c:	4b95      	ldr	r3, [pc, #596]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	079b      	lsls	r3, r3, #30
 8003732:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003734:	4b93      	ldr	r3, [pc, #588]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	079b      	lsls	r3, r3, #30
 800373a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800373c:	4013      	ands	r3, r2
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003746:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800374a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003754:	4013      	ands	r3, r2
 8003756:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800376c:	4013      	ands	r3, r2
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003784:	4013      	ands	r3, r2
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003792:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800379c:	4013      	ands	r3, r2
 800379e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b4:	4013      	ands	r3, r2
 80037b6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80037c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00f      	beq.n	80037f2 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e4:	651a      	str	r2, [r3, #80]	; 0x50
 80037e6:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fa39 	bl	8003c64 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01c      	beq.n	8003836 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d017      	beq.n	8003836 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800380e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381a:	4013      	ands	r3, r2
 800381c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003826:	651a      	str	r2, [r3, #80]	; 0x50
 8003828:	4b56      	ldr	r3, [pc, #344]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800382e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f9ee 	bl	8003c12 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003842:	4b51      	ldr	r3, [pc, #324]	; (8003988 <HAL_FDCAN_IRQHandler+0x264>)
 8003844:	400b      	ands	r3, r1
 8003846:	6513      	str	r3, [r2, #80]	; 0x50
 8003848:	4a4e      	ldr	r2, [pc, #312]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 800384a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384c:	0f9b      	lsrs	r3, r3, #30
 800384e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9b2 	bl	8003bbc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003864:	4b48      	ldr	r3, [pc, #288]	; (8003988 <HAL_FDCAN_IRQHandler+0x264>)
 8003866:	400b      	ands	r3, r1
 8003868:	6513      	str	r3, [r2, #80]	; 0x50
 800386a:	4a46      	ldr	r2, [pc, #280]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 800386c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386e:	0f9b      	lsrs	r3, r3, #30
 8003870:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003872:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f9ac 	bl	8003bd2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800387a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00d      	beq.n	800389c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003886:	4b40      	ldr	r3, [pc, #256]	; (8003988 <HAL_FDCAN_IRQHandler+0x264>)
 8003888:	400b      	ands	r3, r1
 800388a:	6513      	str	r3, [r2, #80]	; 0x50
 800388c:	4a3d      	ldr	r2, [pc, #244]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 800388e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003890:	0f9b      	lsrs	r3, r3, #30
 8003892:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003894:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd faf2 	bl	8000e80 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800389c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038a8:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_FDCAN_IRQHandler+0x264>)
 80038aa:	400b      	ands	r3, r1
 80038ac:	6513      	str	r3, [r2, #80]	; 0x50
 80038ae:	4a35      	ldr	r2, [pc, #212]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 80038b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b2:	0f9b      	lsrs	r3, r3, #30
 80038b4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80038b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fd fa9b 	bl	8000df4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00f      	beq.n	80038e8 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038da:	651a      	str	r2, [r3, #80]	; 0x50
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f980 	bl	8003be8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01c      	beq.n	800392c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d017      	beq.n	800392c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800390e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003910:	4013      	ands	r3, r2
 8003912:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391c:	651a      	str	r2, [r3, #80]	; 0x50
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f968 	bl	8003bfc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800392c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00f      	beq.n	8003956 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003948:	651a      	str	r2, [r3, #80]	; 0x50
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 800394c:	2200      	movs	r2, #0
 800394e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f969 	bl	8003c28 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d010      	beq.n	800398c <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003972:	651a      	str	r2, [r3, #80]	; 0x50
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_FDCAN_IRQHandler+0x260>)
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f95e 	bl	8003c3c <HAL_FDCAN_TimestampWraparoundCallback>
 8003980:	e004      	b.n	800398c <HAL_FDCAN_IRQHandler+0x268>
 8003982:	bf00      	nop
 8003984:	4000a800 	.word	0x4000a800
 8003988:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00f      	beq.n	80039b6 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039a8:	651a      	str	r2, [r3, #80]	; 0x50
 80039aa:	4b81      	ldr	r3, [pc, #516]	; (8003bb0 <HAL_FDCAN_IRQHandler+0x48c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f94d 	bl	8003c50 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80039b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d014      	beq.n	80039ea <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00f      	beq.n	80039ea <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039d2:	651a      	str	r2, [r3, #80]	; 0x50
 80039d4:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_FDCAN_IRQHandler+0x48c>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80039ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039f6:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_FDCAN_IRQHandler+0x490>)
 80039f8:	400b      	ands	r3, r1
 80039fa:	6513      	str	r3, [r2, #80]	; 0x50
 80039fc:	4a6c      	ldr	r2, [pc, #432]	; (8003bb0 <HAL_FDCAN_IRQHandler+0x48c>)
 80039fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a00:	0f9b      	lsrs	r3, r3, #30
 8003a02:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f940 	bl	8003c8c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d011      	beq.n	8003a36 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a18:	4b66      	ldr	r3, [pc, #408]	; (8003bb4 <HAL_FDCAN_IRQHandler+0x490>)
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a1e:	4a64      	ldr	r2, [pc, #400]	; (8003bb0 <HAL_FDCAN_IRQHandler+0x48c>)
 8003a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a22:	0f9b      	lsrs	r3, r3, #30
 8003a24:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a5f      	ldr	r2, [pc, #380]	; (8003bb8 <HAL_FDCAN_IRQHandler+0x494>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	f040 80aa 	bne.w	8003b96 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80a2 	beq.w	8003b96 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a66:	4013      	ands	r3, r2
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a7e:	4013      	ands	r3, r2
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	4013      	ands	r3, r2
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003aa4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003abc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8d9 	bl	8003ca2 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f8d9 	bl	8003cb8 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d019      	beq.n	8003b44 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d014      	beq.n	8003b44 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b30:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2240      	movs	r2, #64	; 0x40
 8003b38:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6939      	ldr	r1, [r7, #16]
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8c5 	bl	8003cce <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8c6 	bl	8003ce6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00b      	beq.n	8003b78 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f869 	bl	8003c78 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3758      	adds	r7, #88	; 0x58
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	4000a800 	.word	0x4000a800
 8003bb4:	3fcfffff 	.word	0x3fcfffff
 8003bb8:	4000a000 	.word	0x4000a000

08003bbc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d12:	4ba7      	ldr	r3, [pc, #668]	; (8003fb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	0091      	lsls	r1, r2, #2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	041a      	lsls	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	4413      	add	r3, r2
 8003d48:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d52:	4b97      	ldr	r3, [pc, #604]	; (8003fb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	0091      	lsls	r1, r2, #2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	041a      	lsls	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d94:	4b86      	ldr	r3, [pc, #536]	; (8003fb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	0091      	lsls	r1, r2, #2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	041a      	lsls	r2, r3, #16
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ddc:	4b74      	ldr	r3, [pc, #464]	; (8003fb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	0091      	lsls	r1, r2, #2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003df6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfe:	041a      	lsls	r2, r3, #16
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e24:	4b62      	ldr	r3, [pc, #392]	; (8003fb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	0091      	lsls	r1, r2, #2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4413      	add	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003e50:	4b57      	ldr	r3, [pc, #348]	; (8003fb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	0091      	lsls	r1, r2, #2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e6a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	041a      	lsls	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	4413      	add	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e92:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	0091      	lsls	r1, r2, #2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003eac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	041a      	lsls	r2, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ec8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed0:	061a      	lsls	r2, r3, #24
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee0:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009a      	lsls	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	441a      	add	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	441a      	add	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	441a      	add	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d915      	bls.n	8003fd8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003fac:	e006      	b.n	8003fbc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003fae:	bf00      	nop
 8003fb0:	ffff0003 	.word	0xffff0003
 8003fb4:	10002b00 	.word	0x10002b00
 8003fb8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2203      	movs	r2, #3
 8003fd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e010      	b.n	8003ffa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e005      	b.n	8003fec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3f3      	bcc.n	8003fe0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop

08004008 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004026:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800402e:	4313      	orrs	r3, r2
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e00a      	b.n	800404a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800403c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004042:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004048:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004054:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800405a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004060:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	3304      	adds	r3, #4
 800408a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3304      	adds	r3, #4
 8004096:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e020      	b.n	80040e0 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3303      	adds	r3, #3
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	3302      	adds	r3, #2
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	440b      	add	r3, r1
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80040b6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3301      	adds	r3, #1
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	440b      	add	r3, r1
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80040c4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	440a      	add	r2, r1
 80040cc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80040ce:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	3304      	adds	r3, #4
 80040d8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3304      	adds	r3, #4
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	4a06      	ldr	r2, [pc, #24]	; (8004100 <FDCAN_CopyMessageToRAM+0xf8>)
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
 80040ea:	461a      	mov	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d3d5      	bcc.n	800409e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	3724      	adds	r7, #36	; 0x24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	08009f08 	.word	0x08009f08

08004104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004112:	4b89      	ldr	r3, [pc, #548]	; (8004338 <HAL_GPIO_Init+0x234>)
 8004114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004116:	e194      	b.n	8004442 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	2101      	movs	r1, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8186 	beq.w	800443c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d005      	beq.n	8004148 <HAL_GPIO_Init+0x44>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d130      	bne.n	80041aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	2203      	movs	r2, #3
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800417e:	2201      	movs	r2, #1
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 0201 	and.w	r2, r3, #1
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d017      	beq.n	80041e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d123      	bne.n	800423a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	08da      	lsrs	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3208      	adds	r2, #8
 80041fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	220f      	movs	r2, #15
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	08da      	lsrs	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3208      	adds	r2, #8
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0203 	and.w	r2, r3, #3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80e0 	beq.w	800443c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427c:	4b2f      	ldr	r3, [pc, #188]	; (800433c <HAL_GPIO_Init+0x238>)
 800427e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004282:	4a2e      	ldr	r2, [pc, #184]	; (800433c <HAL_GPIO_Init+0x238>)
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800428c:	4b2b      	ldr	r3, [pc, #172]	; (800433c <HAL_GPIO_Init+0x238>)
 800428e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800429a:	4a29      	ldr	r2, [pc, #164]	; (8004340 <HAL_GPIO_Init+0x23c>)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	089b      	lsrs	r3, r3, #2
 80042a0:	3302      	adds	r3, #2
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	220f      	movs	r2, #15
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a20      	ldr	r2, [pc, #128]	; (8004344 <HAL_GPIO_Init+0x240>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d052      	beq.n	800436c <HAL_GPIO_Init+0x268>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <HAL_GPIO_Init+0x244>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d031      	beq.n	8004332 <HAL_GPIO_Init+0x22e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <HAL_GPIO_Init+0x248>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d02b      	beq.n	800432e <HAL_GPIO_Init+0x22a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_GPIO_Init+0x24c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d025      	beq.n	800432a <HAL_GPIO_Init+0x226>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_GPIO_Init+0x250>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01f      	beq.n	8004326 <HAL_GPIO_Init+0x222>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_GPIO_Init+0x254>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d019      	beq.n	8004322 <HAL_GPIO_Init+0x21e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1a      	ldr	r2, [pc, #104]	; (800435c <HAL_GPIO_Init+0x258>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_GPIO_Init+0x21a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a19      	ldr	r2, [pc, #100]	; (8004360 <HAL_GPIO_Init+0x25c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00d      	beq.n	800431a <HAL_GPIO_Init+0x216>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a18      	ldr	r2, [pc, #96]	; (8004364 <HAL_GPIO_Init+0x260>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x212>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a17      	ldr	r2, [pc, #92]	; (8004368 <HAL_GPIO_Init+0x264>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_GPIO_Init+0x20e>
 800430e:	2309      	movs	r3, #9
 8004310:	e02d      	b.n	800436e <HAL_GPIO_Init+0x26a>
 8004312:	230a      	movs	r3, #10
 8004314:	e02b      	b.n	800436e <HAL_GPIO_Init+0x26a>
 8004316:	2308      	movs	r3, #8
 8004318:	e029      	b.n	800436e <HAL_GPIO_Init+0x26a>
 800431a:	2307      	movs	r3, #7
 800431c:	e027      	b.n	800436e <HAL_GPIO_Init+0x26a>
 800431e:	2306      	movs	r3, #6
 8004320:	e025      	b.n	800436e <HAL_GPIO_Init+0x26a>
 8004322:	2305      	movs	r3, #5
 8004324:	e023      	b.n	800436e <HAL_GPIO_Init+0x26a>
 8004326:	2304      	movs	r3, #4
 8004328:	e021      	b.n	800436e <HAL_GPIO_Init+0x26a>
 800432a:	2303      	movs	r3, #3
 800432c:	e01f      	b.n	800436e <HAL_GPIO_Init+0x26a>
 800432e:	2302      	movs	r3, #2
 8004330:	e01d      	b.n	800436e <HAL_GPIO_Init+0x26a>
 8004332:	2301      	movs	r3, #1
 8004334:	e01b      	b.n	800436e <HAL_GPIO_Init+0x26a>
 8004336:	bf00      	nop
 8004338:	58000080 	.word	0x58000080
 800433c:	58024400 	.word	0x58024400
 8004340:	58000400 	.word	0x58000400
 8004344:	58020000 	.word	0x58020000
 8004348:	58020400 	.word	0x58020400
 800434c:	58020800 	.word	0x58020800
 8004350:	58020c00 	.word	0x58020c00
 8004354:	58021000 	.word	0x58021000
 8004358:	58021400 	.word	0x58021400
 800435c:	58021800 	.word	0x58021800
 8004360:	58021c00 	.word	0x58021c00
 8004364:	58022000 	.word	0x58022000
 8004368:	58022400 	.word	0x58022400
 800436c:	2300      	movs	r3, #0
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	f002 0203 	and.w	r2, r2, #3
 8004374:	0092      	lsls	r2, r2, #2
 8004376:	4093      	lsls	r3, r2
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800437e:	4938      	ldr	r1, [pc, #224]	; (8004460 <HAL_GPIO_Init+0x35c>)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	3302      	adds	r3, #2
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3301      	adds	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	f47f ae63 	bne.w	8004118 <HAL_GPIO_Init+0x14>
  }
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	3724      	adds	r7, #36	; 0x24
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	58000400 	.word	0x58000400

08004464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	807b      	strh	r3, [r7, #2]
 8004470:	4613      	mov	r3, r2
 8004472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004474:	787b      	ldrb	r3, [r7, #1]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004480:	e003      	b.n	800448a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004482:	887b      	ldrh	r3, [r7, #2]
 8004484:	041a      	lsls	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	619a      	str	r2, [r3, #24]
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004496:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004498:	b08f      	sub	sp, #60	; 0x3c
 800449a:	af0a      	add	r7, sp, #40	; 0x28
 800449c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e116      	b.n	80046d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc ff52 	bl	800136c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2203      	movs	r2, #3
 80044cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 fd84 	bl	8008ff4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	687e      	ldr	r6, [r7, #4]
 80044f4:	466d      	mov	r5, sp
 80044f6:	f106 0410 	add.w	r4, r6, #16
 80044fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004506:	e885 0003 	stmia.w	r5, {r0, r1}
 800450a:	1d33      	adds	r3, r6, #4
 800450c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	f004 fd02 	bl	8008f18 <USB_CoreInit>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0d7      	b.n	80046d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f004 fd72 	bl	8009016 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
 8004536:	e04a      	b.n	80045ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	333d      	adds	r3, #61	; 0x3d
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800454c:	7bfa      	ldrb	r2, [r7, #15]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	333c      	adds	r3, #60	; 0x3c
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	b298      	uxth	r0, r3
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	3356      	adds	r3, #86	; 0x56
 8004574:	4602      	mov	r2, r0
 8004576:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	3340      	adds	r3, #64	; 0x40
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3344      	adds	r3, #68	; 0x44
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045a0:	7bfa      	ldrb	r2, [r7, #15]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	3348      	adds	r3, #72	; 0x48
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	334c      	adds	r3, #76	; 0x4c
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	3301      	adds	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d3af      	bcc.n	8004538 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	e044      	b.n	8004668 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045de:	7bfa      	ldrb	r2, [r7, #15]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045f4:	7bfa      	ldrb	r2, [r7, #15]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004636:	7bfa      	ldrb	r2, [r7, #15]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	3301      	adds	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	429a      	cmp	r2, r3
 8004670:	d3b5      	bcc.n	80045de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	687e      	ldr	r6, [r7, #4]
 800467a:	466d      	mov	r5, sp
 800467c:	f106 0410 	add.w	r4, r6, #16
 8004680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800468c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004690:	1d33      	adds	r3, r6, #4
 8004692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004694:	6838      	ldr	r0, [r7, #0]
 8004696:	f004 fd0b 	bl	80090b0 <USB_DevInit>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e014      	b.n	80046d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f80b 	bl	80046e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f004 fec9 	bl	8009466 <USB_DevDisconnect>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_PCDEx_ActivateLPM+0x44>)
 8004710:	4313      	orrs	r3, r2
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	10000003 	.word	0x10000003

08004728 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_PWREx_ConfigSupply+0x70>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d00a      	beq.n	8004752 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800473c:	4b16      	ldr	r3, [pc, #88]	; (8004798 <HAL_PWREx_ConfigSupply+0x70>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d001      	beq.n	800474e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e01f      	b.n	800478e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e01d      	b.n	800478e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_PWREx_ConfigSupply+0x70>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f023 0207 	bic.w	r2, r3, #7
 800475a:	490f      	ldr	r1, [pc, #60]	; (8004798 <HAL_PWREx_ConfigSupply+0x70>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4313      	orrs	r3, r2
 8004760:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004762:	f7fd f835 	bl	80017d0 <HAL_GetTick>
 8004766:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004768:	e009      	b.n	800477e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800476a:	f7fd f831 	bl	80017d0 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004778:	d901      	bls.n	800477e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e007      	b.n	800478e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_PWREx_ConfigSupply+0x70>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478a:	d1ee      	bne.n	800476a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	58024800 	.word	0x58024800

0800479c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047aa:	60d3      	str	r3, [r2, #12]
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	58024800 	.word	0x58024800

080047bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	; 0x30
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f000 bc48 	b.w	8005060 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8088 	beq.w	80048ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047de:	4b99      	ldr	r3, [pc, #612]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047e8:	4b96      	ldr	r3, [pc, #600]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d007      	beq.n	8004804 <HAL_RCC_OscConfig+0x48>
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	2b18      	cmp	r3, #24
 80047f8:	d111      	bne.n	800481e <HAL_RCC_OscConfig+0x62>
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d10c      	bne.n	800481e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004804:	4b8f      	ldr	r3, [pc, #572]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d06d      	beq.n	80048ec <HAL_RCC_OscConfig+0x130>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d169      	bne.n	80048ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f000 bc21 	b.w	8005060 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x7a>
 8004828:	4b86      	ldr	r3, [pc, #536]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a85      	ldr	r2, [pc, #532]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e02e      	b.n	8004894 <HAL_RCC_OscConfig+0xd8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x9c>
 800483e:	4b81      	ldr	r3, [pc, #516]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a80      	ldr	r2, [pc, #512]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	4b7e      	ldr	r3, [pc, #504]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7d      	ldr	r2, [pc, #500]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e01d      	b.n	8004894 <HAL_RCC_OscConfig+0xd8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0xc0>
 8004862:	4b78      	ldr	r3, [pc, #480]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a77      	ldr	r2, [pc, #476]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4b75      	ldr	r3, [pc, #468]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a74      	ldr	r2, [pc, #464]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0xd8>
 800487c:	4b71      	ldr	r3, [pc, #452]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a70      	ldr	r2, [pc, #448]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	4b6e      	ldr	r3, [pc, #440]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a6d      	ldr	r2, [pc, #436]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800488e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fc ff98 	bl	80017d0 <HAL_GetTick>
 80048a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fc ff94 	bl	80017d0 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e3d4      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048b6:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0xe8>
 80048c2:	e014      	b.n	80048ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fc ff84 	bl	80017d0 <HAL_GetTick>
 80048c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fc ff80 	bl	80017d0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	; 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e3c0      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048de:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x110>
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80ca 	beq.w	8004a90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fc:	4b51      	ldr	r3, [pc, #324]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004904:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004906:	4b4f      	ldr	r3, [pc, #316]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_RCC_OscConfig+0x166>
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2b18      	cmp	r3, #24
 8004916:	d156      	bne.n	80049c6 <HAL_RCC_OscConfig+0x20a>
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d151      	bne.n	80049c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004922:	4b48      	ldr	r3, [pc, #288]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_RCC_OscConfig+0x17e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e392      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800493a:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 0219 	bic.w	r2, r3, #25
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	493f      	ldr	r1, [pc, #252]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fc ff40 	bl	80017d0 <HAL_GetTick>
 8004950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004954:	f7fc ff3c 	bl	80017d0 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e37c      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004972:	f7fc ff5d 	bl	8001830 <HAL_GetREVID>
 8004976:	4603      	mov	r3, r0
 8004978:	f241 0203 	movw	r2, #4099	; 0x1003
 800497c:	4293      	cmp	r3, r2
 800497e:	d817      	bhi.n	80049b0 <HAL_RCC_OscConfig+0x1f4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d108      	bne.n	800499a <HAL_RCC_OscConfig+0x1de>
 8004988:	4b2e      	ldr	r3, [pc, #184]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004990:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004996:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004998:	e07a      	b.n	8004a90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499a:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	031b      	lsls	r3, r3, #12
 80049a8:	4926      	ldr	r1, [pc, #152]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ae:	e06f      	b.n	8004a90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b0:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	4921      	ldr	r1, [pc, #132]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049c4:	e064      	b.n	8004a90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d047      	beq.n	8004a5e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 0219 	bic.w	r2, r3, #25
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	491a      	ldr	r1, [pc, #104]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fc fef6 	bl	80017d0 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e8:	f7fc fef2 	bl	80017d0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e332      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	f7fc ff13 	bl	8001830 <HAL_GetREVID>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d819      	bhi.n	8004a48 <HAL_RCC_OscConfig+0x28c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d108      	bne.n	8004a2e <HAL_RCC_OscConfig+0x272>
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a24:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2a:	6053      	str	r3, [r2, #4]
 8004a2c:	e030      	b.n	8004a90 <HAL_RCC_OscConfig+0x2d4>
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	031b      	lsls	r3, r3, #12
 8004a3c:	4901      	ldr	r1, [pc, #4]	; (8004a44 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
 8004a42:	e025      	b.n	8004a90 <HAL_RCC_OscConfig+0x2d4>
 8004a44:	58024400 	.word	0x58024400
 8004a48:	4b9a      	ldr	r3, [pc, #616]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	4997      	ldr	r1, [pc, #604]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
 8004a5c:	e018      	b.n	8004a90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5e:	4b95      	ldr	r3, [pc, #596]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a94      	ldr	r2, [pc, #592]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fc feb1 	bl	80017d0 <HAL_GetTick>
 8004a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a72:	f7fc fead 	bl	80017d0 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e2ed      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a84:	4b8b      	ldr	r3, [pc, #556]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f0      	bne.n	8004a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80a9 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9e:	4b85      	ldr	r3, [pc, #532]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aa6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aa8:	4b82      	ldr	r3, [pc, #520]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d007      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x308>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b18      	cmp	r3, #24
 8004ab8:	d13a      	bne.n	8004b30 <HAL_RCC_OscConfig+0x374>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d135      	bne.n	8004b30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ac4:	4b7b      	ldr	r3, [pc, #492]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_OscConfig+0x320>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e2c1      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004adc:	f7fc fea8 	bl	8001830 <HAL_GetREVID>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d817      	bhi.n	8004b1a <HAL_RCC_OscConfig+0x35e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d108      	bne.n	8004b04 <HAL_RCC_OscConfig+0x348>
 8004af2:	4b70      	ldr	r3, [pc, #448]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004afa:	4a6e      	ldr	r2, [pc, #440]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b00:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b02:	e075      	b.n	8004bf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b04:	4b6b      	ldr	r3, [pc, #428]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	069b      	lsls	r3, r3, #26
 8004b12:	4968      	ldr	r1, [pc, #416]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b18:	e06a      	b.n	8004bf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b1a:	4b66      	ldr	r3, [pc, #408]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	061b      	lsls	r3, r3, #24
 8004b28:	4962      	ldr	r1, [pc, #392]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b2e:	e05f      	b.n	8004bf0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d042      	beq.n	8004bbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b38:	4b5e      	ldr	r3, [pc, #376]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5d      	ldr	r2, [pc, #372]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fc fe44 	bl	80017d0 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b4c:	f7fc fe40 	bl	80017d0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e280      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b5e:	4b55      	ldr	r3, [pc, #340]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b6a:	f7fc fe61 	bl	8001830 <HAL_GetREVID>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d817      	bhi.n	8004ba8 <HAL_RCC_OscConfig+0x3ec>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d108      	bne.n	8004b92 <HAL_RCC_OscConfig+0x3d6>
 8004b80:	4b4c      	ldr	r3, [pc, #304]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b88:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b8e:	6053      	str	r3, [r2, #4]
 8004b90:	e02e      	b.n	8004bf0 <HAL_RCC_OscConfig+0x434>
 8004b92:	4b48      	ldr	r3, [pc, #288]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	069b      	lsls	r3, r3, #26
 8004ba0:	4944      	ldr	r1, [pc, #272]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
 8004ba6:	e023      	b.n	8004bf0 <HAL_RCC_OscConfig+0x434>
 8004ba8:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	493f      	ldr	r1, [pc, #252]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60cb      	str	r3, [r1, #12]
 8004bbc:	e018      	b.n	8004bf0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004bbe:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a3c      	ldr	r2, [pc, #240]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fc fe01 	bl	80017d0 <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bd2:	f7fc fdfd 	bl	80017d0 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e23d      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004be4:	4b33      	ldr	r3, [pc, #204]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d036      	beq.n	8004c6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d019      	beq.n	8004c38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c04:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c08:	4a2a      	ldr	r2, [pc, #168]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fc fdde 	bl	80017d0 <HAL_GetTick>
 8004c14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c18:	f7fc fdda 	bl	80017d0 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e21a      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c2a:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x45c>
 8004c36:	e018      	b.n	8004c6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c38:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fc fdc4 	bl	80017d0 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4c:	f7fc fdc0 	bl	80017d0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e200      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c5e:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d039      	beq.n	8004cea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01c      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c8a:	f7fc fda1 	bl	80017d0 <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c92:	f7fc fd9d 	bl	80017d0 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e1dd      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x4d6>
 8004cb0:	e01b      	b.n	8004cea <HAL_RCC_OscConfig+0x52e>
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cb8:	4b9b      	ldr	r3, [pc, #620]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a9a      	ldr	r2, [pc, #616]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cc4:	f7fc fd84 	bl	80017d0 <HAL_GetTick>
 8004cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ccc:	f7fc fd80 	bl	80017d0 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e1c0      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cde:	4b92      	ldr	r3, [pc, #584]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8081 	beq.w	8004dfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cf8:	4b8c      	ldr	r3, [pc, #560]	; (8004f2c <HAL_RCC_OscConfig+0x770>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a8b      	ldr	r2, [pc, #556]	; (8004f2c <HAL_RCC_OscConfig+0x770>)
 8004cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d04:	f7fc fd64 	bl	80017d0 <HAL_GetTick>
 8004d08:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0c:	f7fc fd60 	bl	80017d0 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b64      	cmp	r3, #100	; 0x64
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e1a0      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d1e:	4b83      	ldr	r3, [pc, #524]	; (8004f2c <HAL_RCC_OscConfig+0x770>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d106      	bne.n	8004d40 <HAL_RCC_OscConfig+0x584>
 8004d32:	4b7d      	ldr	r3, [pc, #500]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a7c      	ldr	r2, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	e02d      	b.n	8004d9c <HAL_RCC_OscConfig+0x5e0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCC_OscConfig+0x5a6>
 8004d48:	4b77      	ldr	r3, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	4a76      	ldr	r2, [pc, #472]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70
 8004d54:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	4a73      	ldr	r2, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d5a:	f023 0304 	bic.w	r3, r3, #4
 8004d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d60:	e01c      	b.n	8004d9c <HAL_RCC_OscConfig+0x5e0>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x5c8>
 8004d6a:	4b6f      	ldr	r3, [pc, #444]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	4a6e      	ldr	r2, [pc, #440]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d70:	f043 0304 	orr.w	r3, r3, #4
 8004d74:	6713      	str	r3, [r2, #112]	; 0x70
 8004d76:	4b6c      	ldr	r3, [pc, #432]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	4a6b      	ldr	r2, [pc, #428]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6713      	str	r3, [r2, #112]	; 0x70
 8004d82:	e00b      	b.n	8004d9c <HAL_RCC_OscConfig+0x5e0>
 8004d84:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d88:	4a67      	ldr	r2, [pc, #412]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d90:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	4a64      	ldr	r2, [pc, #400]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004d96:	f023 0304 	bic.w	r3, r3, #4
 8004d9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d015      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fc fd14 	bl	80017d0 <HAL_GetTick>
 8004da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dac:	f7fc fd10 	bl	80017d0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e14e      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dc2:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0ee      	beq.n	8004dac <HAL_RCC_OscConfig+0x5f0>
 8004dce:	e014      	b.n	8004dfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd0:	f7fc fcfe 	bl	80017d0 <HAL_GetTick>
 8004dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd8:	f7fc fcfa 	bl	80017d0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e138      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dee:	4b4e      	ldr	r3, [pc, #312]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1ee      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 812d 	beq.w	800505e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e04:	4b48      	ldr	r3, [pc, #288]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e0c:	2b18      	cmp	r3, #24
 8004e0e:	f000 80bd 	beq.w	8004f8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	f040 809e 	bne.w	8004f58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1c:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a41      	ldr	r2, [pc, #260]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fc fcd2 	bl	80017d0 <HAL_GetTick>
 8004e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fc fcce 	bl	80017d0 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e10e      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e42:	4b39      	ldr	r3, [pc, #228]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e4e:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e52:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_RCC_OscConfig+0x774>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e5e:	0112      	lsls	r2, r2, #4
 8004e60:	430a      	orrs	r2, r1
 8004e62:	4931      	ldr	r1, [pc, #196]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	628b      	str	r3, [r1, #40]	; 0x28
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e76:	3b01      	subs	r3, #1
 8004e78:	025b      	lsls	r3, r3, #9
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	3b01      	subs	r3, #1
 8004e84:	041b      	lsls	r3, r3, #16
 8004e86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	3b01      	subs	r3, #1
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e98:	4923      	ldr	r1, [pc, #140]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	4a21      	ldr	r2, [pc, #132]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eae:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <HAL_RCC_OscConfig+0x778>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	491b      	ldr	r1, [pc, #108]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ebe:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	f023 020c 	bic.w	r2, r3, #12
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	4917      	ldr	r1, [pc, #92]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f023 0202 	bic.w	r2, r3, #2
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004edc:	4912      	ldr	r1, [pc, #72]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ee2:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	4a07      	ldr	r2, [pc, #28]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a04      	ldr	r2, [pc, #16]	; (8004f28 <HAL_RCC_OscConfig+0x76c>)
 8004f18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fc fc57 	bl	80017d0 <HAL_GetTick>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f24:	e011      	b.n	8004f4a <HAL_RCC_OscConfig+0x78e>
 8004f26:	bf00      	nop
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	58024800 	.word	0x58024800
 8004f30:	fffffc0c 	.word	0xfffffc0c
 8004f34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fc fc4a 	bl	80017d0 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e08a      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f4a:	4b47      	ldr	r3, [pc, #284]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0x77c>
 8004f56:	e082      	b.n	800505e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4b43      	ldr	r3, [pc, #268]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a42      	ldr	r2, [pc, #264]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8004f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fc34 	bl	80017d0 <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fc fc30 	bl	80017d0 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e070      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f7e:	4b3a      	ldr	r3, [pc, #232]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x7b0>
 8004f8a:	e068      	b.n	800505e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f8c:	4b36      	ldr	r3, [pc, #216]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f92:	4b35      	ldr	r3, [pc, #212]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d031      	beq.n	8005004 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0203 	and.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d12a      	bne.n	8005004 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d122      	bne.n	8005004 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d11a      	bne.n	8005004 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	0a5b      	lsrs	r3, r3, #9
 8004fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d111      	bne.n	8005004 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d108      	bne.n	8005004 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0e1b      	lsrs	r3, r3, #24
 8004ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e02b      	b.n	8005060 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005008:	4b17      	ldr	r3, [pc, #92]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005012:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d01f      	beq.n	800505e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	4a11      	ldr	r2, [pc, #68]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800502a:	f7fc fbd1 	bl	80017d0 <HAL_GetTick>
 800502e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005030:	bf00      	nop
 8005032:	f7fc fbcd 	bl	80017d0 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	4293      	cmp	r3, r2
 800503c:	d0f9      	beq.n	8005032 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8005040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005042:	4b0a      	ldr	r3, [pc, #40]	; (800506c <HAL_RCC_OscConfig+0x8b0>)
 8005044:	4013      	ands	r3, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800504a:	00d2      	lsls	r2, r2, #3
 800504c:	4906      	ldr	r1, [pc, #24]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 800504e:	4313      	orrs	r3, r2
 8005050:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	4a04      	ldr	r2, [pc, #16]	; (8005068 <HAL_RCC_OscConfig+0x8ac>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3730      	adds	r7, #48	; 0x30
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	58024400 	.word	0x58024400
 800506c:	ffff0007 	.word	0xffff0007

08005070 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e19c      	b.n	80053be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005084:	4b8a      	ldr	r3, [pc, #552]	; (80052b0 <HAL_RCC_ClockConfig+0x240>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d910      	bls.n	80050b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005092:	4b87      	ldr	r3, [pc, #540]	; (80052b0 <HAL_RCC_ClockConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 020f 	bic.w	r2, r3, #15
 800509a:	4985      	ldr	r1, [pc, #532]	; (80052b0 <HAL_RCC_ClockConfig+0x240>)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	4313      	orrs	r3, r2
 80050a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b83      	ldr	r3, [pc, #524]	; (80052b0 <HAL_RCC_ClockConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e184      	b.n	80053be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d010      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	4b7b      	ldr	r3, [pc, #492]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d908      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050d0:	4b78      	ldr	r3, [pc, #480]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	4975      	ldr	r1, [pc, #468]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d010      	beq.n	8005110 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	4b70      	ldr	r3, [pc, #448]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d908      	bls.n	8005110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050fe:	4b6d      	ldr	r3, [pc, #436]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	496a      	ldr	r1, [pc, #424]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 800510c:	4313      	orrs	r3, r2
 800510e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	d010      	beq.n	800513e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	4b64      	ldr	r3, [pc, #400]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005128:	429a      	cmp	r2, r3
 800512a:	d908      	bls.n	800513e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800512c:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	495e      	ldr	r1, [pc, #376]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 800513a:	4313      	orrs	r3, r2
 800513c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d010      	beq.n	800516c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005156:	429a      	cmp	r2, r3
 8005158:	d908      	bls.n	800516c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800515a:	4b56      	ldr	r3, [pc, #344]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	4953      	ldr	r1, [pc, #332]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005168:	4313      	orrs	r3, r2
 800516a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d010      	beq.n	800519a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	429a      	cmp	r2, r3
 8005186:	d908      	bls.n	800519a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005188:	4b4a      	ldr	r3, [pc, #296]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f023 020f 	bic.w	r2, r3, #15
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4947      	ldr	r1, [pc, #284]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005196:	4313      	orrs	r3, r2
 8005198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d055      	beq.n	8005252 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051a6:	4b43      	ldr	r3, [pc, #268]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	4940      	ldr	r1, [pc, #256]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d107      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051c0:	4b3c      	ldr	r3, [pc, #240]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d121      	bne.n	8005210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0f6      	b.n	80053be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d107      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051d8:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d115      	bne.n	8005210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0ea      	b.n	80053be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051f0:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0de      	b.n	80053be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005200:	4b2c      	ldr	r3, [pc, #176]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0d6      	b.n	80053be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005210:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f023 0207 	bic.w	r2, r3, #7
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4925      	ldr	r1, [pc, #148]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 800521e:	4313      	orrs	r3, r2
 8005220:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005222:	f7fc fad5 	bl	80017d0 <HAL_GetTick>
 8005226:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005228:	e00a      	b.n	8005240 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522a:	f7fc fad1 	bl	80017d0 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f241 3288 	movw	r2, #5000	; 0x1388
 8005238:	4293      	cmp	r3, r2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e0be      	b.n	80053be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005240:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	429a      	cmp	r2, r3
 8005250:	d1eb      	bne.n	800522a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d010      	beq.n	8005280 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	429a      	cmp	r2, r3
 800526c:	d208      	bcs.n	8005280 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f023 020f 	bic.w	r2, r3, #15
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	490e      	ldr	r1, [pc, #56]	; (80052b4 <HAL_RCC_ClockConfig+0x244>)
 800527c:	4313      	orrs	r3, r2
 800527e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_ClockConfig+0x240>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d214      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <HAL_RCC_ClockConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f023 020f 	bic.w	r2, r3, #15
 8005296:	4906      	ldr	r1, [pc, #24]	; (80052b0 <HAL_RCC_ClockConfig+0x240>)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	4313      	orrs	r3, r2
 800529c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529e:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <HAL_RCC_ClockConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e086      	b.n	80053be <HAL_RCC_ClockConfig+0x34e>
 80052b0:	52002000 	.word	0x52002000
 80052b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	4b3f      	ldr	r3, [pc, #252]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d208      	bcs.n	80052e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052d4:	4b3c      	ldr	r3, [pc, #240]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	4939      	ldr	r1, [pc, #228]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d010      	beq.n	8005314 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	4b34      	ldr	r3, [pc, #208]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052fe:	429a      	cmp	r2, r3
 8005300:	d208      	bcs.n	8005314 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005302:	4b31      	ldr	r3, [pc, #196]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	492e      	ldr	r1, [pc, #184]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 8005310:	4313      	orrs	r3, r2
 8005312:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d010      	beq.n	8005342 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	4b28      	ldr	r3, [pc, #160]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800532c:	429a      	cmp	r2, r3
 800532e:	d208      	bcs.n	8005342 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005330:	4b25      	ldr	r3, [pc, #148]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	4922      	ldr	r1, [pc, #136]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 800533e:	4313      	orrs	r3, r2
 8005340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d010      	beq.n	8005370 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800535a:	429a      	cmp	r2, r3
 800535c:	d208      	bcs.n	8005370 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800535e:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	4917      	ldr	r1, [pc, #92]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 800536c:	4313      	orrs	r3, r2
 800536e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005370:	f000 f834 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	4912      	ldr	r1, [pc, #72]	; (80053cc <HAL_RCC_ClockConfig+0x35c>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
 800538c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800538e:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <HAL_RCC_ClockConfig+0x358>)
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	4a0d      	ldr	r2, [pc, #52]	; (80053cc <HAL_RCC_ClockConfig+0x35c>)
 8005398:	5cd3      	ldrb	r3, [r2, r3]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <HAL_RCC_ClockConfig+0x360>)
 80053a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053a8:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <HAL_RCC_ClockConfig+0x364>)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <HAL_RCC_ClockConfig+0x368>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fc f9c2 	bl	800173c <HAL_InitTick>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
 80053cc:	08009ef8 	.word	0x08009ef8
 80053d0:	24000008 	.word	0x24000008
 80053d4:	24000004 	.word	0x24000004
 80053d8:	2400000c 	.word	0x2400000c

080053dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	; 0x24
 80053e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e2:	4bb3      	ldr	r3, [pc, #716]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ea:	2b18      	cmp	r3, #24
 80053ec:	f200 8155 	bhi.w	800569a <HAL_RCC_GetSysClockFreq+0x2be>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800545d 	.word	0x0800545d
 80053fc:	0800569b 	.word	0x0800569b
 8005400:	0800569b 	.word	0x0800569b
 8005404:	0800569b 	.word	0x0800569b
 8005408:	0800569b 	.word	0x0800569b
 800540c:	0800569b 	.word	0x0800569b
 8005410:	0800569b 	.word	0x0800569b
 8005414:	0800569b 	.word	0x0800569b
 8005418:	08005483 	.word	0x08005483
 800541c:	0800569b 	.word	0x0800569b
 8005420:	0800569b 	.word	0x0800569b
 8005424:	0800569b 	.word	0x0800569b
 8005428:	0800569b 	.word	0x0800569b
 800542c:	0800569b 	.word	0x0800569b
 8005430:	0800569b 	.word	0x0800569b
 8005434:	0800569b 	.word	0x0800569b
 8005438:	08005489 	.word	0x08005489
 800543c:	0800569b 	.word	0x0800569b
 8005440:	0800569b 	.word	0x0800569b
 8005444:	0800569b 	.word	0x0800569b
 8005448:	0800569b 	.word	0x0800569b
 800544c:	0800569b 	.word	0x0800569b
 8005450:	0800569b 	.word	0x0800569b
 8005454:	0800569b 	.word	0x0800569b
 8005458:	0800548f 	.word	0x0800548f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800545c:	4b94      	ldr	r3, [pc, #592]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005468:	4b91      	ldr	r3, [pc, #580]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	08db      	lsrs	r3, r3, #3
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	4a90      	ldr	r2, [pc, #576]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
 8005478:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800547a:	e111      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800547c:	4b8d      	ldr	r3, [pc, #564]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800547e:	61bb      	str	r3, [r7, #24]
      break;
 8005480:	e10e      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005482:	4b8d      	ldr	r3, [pc, #564]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005484:	61bb      	str	r3, [r7, #24]
      break;
 8005486:	e10b      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005488:	4b8c      	ldr	r3, [pc, #560]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800548a:	61bb      	str	r3, [r7, #24]
      break;
 800548c:	e108      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800548e:	4b88      	ldr	r3, [pc, #544]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005498:	4b85      	ldr	r3, [pc, #532]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054a4:	4b82      	ldr	r3, [pc, #520]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80054ae:	4b80      	ldr	r3, [pc, #512]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80e1 	beq.w	8005694 <HAL_RCC_GetSysClockFreq+0x2b8>
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	f000 8083 	beq.w	80055e0 <HAL_RCC_GetSysClockFreq+0x204>
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	f200 80a1 	bhi.w	8005624 <HAL_RCC_GetSysClockFreq+0x248>
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x114>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d056      	beq.n	800559c <HAL_RCC_GetSysClockFreq+0x1c0>
 80054ee:	e099      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f0:	4b6f      	ldr	r3, [pc, #444]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02d      	beq.n	8005558 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054fc:	4b6c      	ldr	r3, [pc, #432]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	08db      	lsrs	r3, r3, #3
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	4a6b      	ldr	r2, [pc, #428]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
 800550c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005526:	4b62      	ldr	r3, [pc, #392]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005536:	ed97 6a02 	vldr	s12, [r7, #8]
 800553a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800553e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800554a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005552:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005556:	e087      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005562:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556a:	4b51      	ldr	r3, [pc, #324]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557a:	ed97 6a02 	vldr	s12, [r7, #8]
 800557e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800558e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800559a:	e065      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80056c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ae:	4b40      	ldr	r3, [pc, #256]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055be:	ed97 6a02 	vldr	s12, [r7, #8]
 80055c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055de:	e043      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80055ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f2:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005602:	ed97 6a02 	vldr	s12, [r7, #8]
 8005606:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800560a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005622:	e021      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80056c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a02 	vldr	s12, [r7, #8]
 800564a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005666:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005668:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	0a5b      	lsrs	r3, r3, #9
 800566e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005672:	3301      	adds	r3, #1
 8005674:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005680:	edd7 6a07 	vldr	s13, [r7, #28]
 8005684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568c:	ee17 3a90 	vmov	r3, s15
 8005690:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005692:	e005      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	61bb      	str	r3, [r7, #24]
      break;
 8005698:	e002      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800569a:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800569c:	61bb      	str	r3, [r7, #24]
      break;
 800569e:	bf00      	nop
  }

  return sysclockfreq;
 80056a0:	69bb      	ldr	r3, [r7, #24]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3724      	adds	r7, #36	; 0x24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	58024400 	.word	0x58024400
 80056b4:	03d09000 	.word	0x03d09000
 80056b8:	003d0900 	.word	0x003d0900
 80056bc:	007a1200 	.word	0x007a1200
 80056c0:	46000000 	.word	0x46000000
 80056c4:	4c742400 	.word	0x4c742400
 80056c8:	4a742400 	.word	0x4a742400
 80056cc:	4af42400 	.word	0x4af42400

080056d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056d6:	f7ff fe81 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 80056da:	4602      	mov	r2, r0
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <HAL_RCC_GetHCLKFreq+0x50>)
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	490f      	ldr	r1, [pc, #60]	; (8005724 <HAL_RCC_GetHCLKFreq+0x54>)
 80056e8:	5ccb      	ldrb	r3, [r1, r3]
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	fa22 f303 	lsr.w	r3, r2, r3
 80056f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <HAL_RCC_GetHCLKFreq+0x50>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	4a09      	ldr	r2, [pc, #36]	; (8005724 <HAL_RCC_GetHCLKFreq+0x54>)
 80056fe:	5cd3      	ldrb	r3, [r2, r3]
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	fa22 f303 	lsr.w	r3, r2, r3
 800570a:	4a07      	ldr	r2, [pc, #28]	; (8005728 <HAL_RCC_GetHCLKFreq+0x58>)
 800570c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800570e:	4a07      	ldr	r2, [pc, #28]	; (800572c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <HAL_RCC_GetHCLKFreq+0x58>)
 8005716:	681b      	ldr	r3, [r3, #0]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	58024400 	.word	0x58024400
 8005724:	08009ef8 	.word	0x08009ef8
 8005728:	24000008 	.word	0x24000008
 800572c:	24000004 	.word	0x24000004

08005730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005734:	f7ff ffcc 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	091b      	lsrs	r3, r3, #4
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4904      	ldr	r1, [pc, #16]	; (8005758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	58024400 	.word	0x58024400
 8005758:	08009ef8 	.word	0x08009ef8

0800575c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005760:	f7ff ffb6 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4904      	ldr	r1, [pc, #16]	; (8005784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd80      	pop	{r7, pc}
 8005780:	58024400 	.word	0x58024400
 8005784:	08009ef8 	.word	0x08009ef8

08005788 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800578c:	b0ca      	sub	sp, #296	; 0x128
 800578e:	af00      	add	r7, sp, #0
 8005790:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005794:	2300      	movs	r3, #0
 8005796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80057ac:	2500      	movs	r5, #0
 80057ae:	ea54 0305 	orrs.w	r3, r4, r5
 80057b2:	d049      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057be:	d02f      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80057c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057c4:	d828      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ca:	d01a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d0:	d822      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057da:	d007      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057dc:	e01c      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057de:	4bb8      	ldr	r3, [pc, #736]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4ab7      	ldr	r2, [pc, #732]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057ea:	e01a      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f0:	3308      	adds	r3, #8
 80057f2:	2102      	movs	r1, #2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 fc8f 	bl	8007118 <RCCEx_PLL2_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005800:	e00f      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005806:	3328      	adds	r3, #40	; 0x28
 8005808:	2102      	movs	r1, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fd36 	bl	800727c <RCCEx_PLL3_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005816:	e004      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800581e:	e000      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800582a:	4ba5      	ldr	r3, [pc, #660]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005838:	4aa1      	ldr	r2, [pc, #644]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800583a:	430b      	orrs	r3, r1
 800583c:	6513      	str	r3, [r2, #80]	; 0x50
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005854:	f04f 0900 	mov.w	r9, #0
 8005858:	ea58 0309 	orrs.w	r3, r8, r9
 800585c:	d047      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005864:	2b04      	cmp	r3, #4
 8005866:	d82a      	bhi.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005885 	.word	0x08005885
 8005874:	08005893 	.word	0x08005893
 8005878:	080058a9 	.word	0x080058a9
 800587c:	080058c7 	.word	0x080058c7
 8005880:	080058c7 	.word	0x080058c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005884:	4b8e      	ldr	r3, [pc, #568]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	4a8d      	ldr	r2, [pc, #564]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800588a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005890:	e01a      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005896:	3308      	adds	r3, #8
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fc3c 	bl	8007118 <RCCEx_PLL2_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058a6:	e00f      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ac:	3328      	adds	r3, #40	; 0x28
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 fce3 	bl	800727c <RCCEx_PLL3_Config>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058bc:	e004      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80058c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058d0:	4b7b      	ldr	r3, [pc, #492]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	f023 0107 	bic.w	r1, r3, #7
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	4a78      	ldr	r2, [pc, #480]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6513      	str	r3, [r2, #80]	; 0x50
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80058fa:	f04f 0b00 	mov.w	fp, #0
 80058fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005902:	d04c      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590e:	d030      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005914:	d829      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005916:	2bc0      	cmp	r3, #192	; 0xc0
 8005918:	d02d      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800591a:	2bc0      	cmp	r3, #192	; 0xc0
 800591c:	d825      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d018      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d821      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d007      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800592e:	e01c      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005930:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4a62      	ldr	r2, [pc, #392]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800593c:	e01c      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005942:	3308      	adds	r3, #8
 8005944:	2100      	movs	r1, #0
 8005946:	4618      	mov	r0, r3
 8005948:	f001 fbe6 	bl	8007118 <RCCEx_PLL2_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005952:	e011      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005958:	3328      	adds	r3, #40	; 0x28
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f001 fc8d 	bl	800727c <RCCEx_PLL3_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005980:	4b4f      	ldr	r3, [pc, #316]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005984:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	4a4c      	ldr	r2, [pc, #304]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005990:	430b      	orrs	r3, r1
 8005992:	6513      	str	r3, [r2, #80]	; 0x50
 8005994:	e003      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80059aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059ae:	2300      	movs	r3, #0
 80059b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80059b8:	460b      	mov	r3, r1
 80059ba:	4313      	orrs	r3, r2
 80059bc:	d053      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059ca:	d035      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80059cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059d0:	d82e      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059d6:	d031      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80059d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059dc:	d828      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e2:	d01a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80059e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e8:	d822      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80059ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059f2:	d007      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80059f4:	e01c      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f6:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	4a31      	ldr	r2, [pc, #196]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a02:	e01c      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a08:	3308      	adds	r3, #8
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 fb83 	bl	8007118 <RCCEx_PLL2_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a18:	e011      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1e:	3328      	adds	r3, #40	; 0x28
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fc2a 	bl	800727c <RCCEx_PLL3_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a2e:	e006      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a36:	e002      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a38:	bf00      	nop
 8005a3a:	e000      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a46:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a56:	4a1a      	ldr	r2, [pc, #104]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a5c:	e003      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005a72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a76:	2300      	movs	r3, #0
 8005a78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005a80:	460b      	mov	r3, r1
 8005a82:	4313      	orrs	r3, r2
 8005a84:	d056      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a92:	d038      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a98:	d831      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a9e:	d034      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005aa0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aa4:	d82b      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005aa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aaa:	d01d      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ab0:	d825      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d006      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005ab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005abc:	e01f      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac4:	4ba2      	ldr	r3, [pc, #648]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4aa1      	ldr	r2, [pc, #644]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ad0:	e01c      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 fb1c 	bl	8007118 <RCCEx_PLL2_Config>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ae6:	e011      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aec:	3328      	adds	r3, #40	; 0x28
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fbc3 	bl	800727c <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005afc:	e006      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b04:	e002      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b06:	bf00      	nop
 8005b08:	e000      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10b      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b14:	4b8e      	ldr	r3, [pc, #568]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b24:	4a8a      	ldr	r2, [pc, #552]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b26:	430b      	orrs	r3, r1
 8005b28:	6593      	str	r3, [r2, #88]	; 0x58
 8005b2a:	e003      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	d03a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	2b30      	cmp	r3, #48	; 0x30
 8005b5c:	d01f      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b5e:	2b30      	cmp	r3, #48	; 0x30
 8005b60:	d819      	bhi.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d00c      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d815      	bhi.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d019      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d111      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b72:	4b77      	ldr	r3, [pc, #476]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	4a76      	ldr	r2, [pc, #472]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b7e:	e011      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b84:	3308      	adds	r3, #8
 8005b86:	2102      	movs	r1, #2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fac5 	bl	8007118 <RCCEx_PLL2_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b94:	e006      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bac:	4b68      	ldr	r3, [pc, #416]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	4a65      	ldr	r2, [pc, #404]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bc0:	e003      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005be0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	d051      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf4:	d035      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfa:	d82e      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c00:	d031      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c06:	d828      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0c:	d01a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c12:	d822      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1c:	d007      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005c1e:	e01c      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c20:	4b4b      	ldr	r3, [pc, #300]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	4a4a      	ldr	r2, [pc, #296]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c2c:	e01c      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c32:	3308      	adds	r3, #8
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fa6e 	bl	8007118 <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c42:	e011      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c48:	3328      	adds	r3, #40	; 0x28
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 fb15 	bl	800727c <RCCEx_PLL3_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c58:	e006      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c60:	e002      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c62:	bf00      	nop
 8005c64:	e000      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c70:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7e:	4a34      	ldr	r2, [pc, #208]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6513      	str	r3, [r2, #80]	; 0x50
 8005c84:	e003      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ca4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4313      	orrs	r3, r2
 8005cac:	d056      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb8:	d033      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005cba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cbe:	d82c      	bhi.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cc4:	d02f      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005cc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cca:	d826      	bhi.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ccc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cd0:	d02b      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005cd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cd6:	d820      	bhi.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cdc:	d012      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce2:	d81a      	bhi.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d022      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cec:	d115      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fa0e 	bl	8007118 <RCCEx_PLL2_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d02:	e015      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d08:	3328      	adds	r3, #40	; 0x28
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 fab5 	bl	800727c <RCCEx_PLL3_Config>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d18:	e00a      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d20:	e006      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d22:	bf00      	nop
 8005d24:	e004      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d26:	bf00      	nop
 8005d28:	e002      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d2a:	bf00      	nop
 8005d2c:	e000      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10d      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d46:	4a02      	ldr	r2, [pc, #8]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6513      	str	r3, [r2, #80]	; 0x50
 8005d4c:	e006      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d4e:	bf00      	nop
 8005d50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	d055      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d88:	d033      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d8e:	d82c      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d94:	d02f      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9a:	d826      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da0:	d02b      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005da2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da6:	d820      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dac:	d012      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db2:	d81a      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d022      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbc:	d115      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 f9a6 	bl	8007118 <RCCEx_PLL2_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005dd2:	e015      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd8:	3328      	adds	r3, #40	; 0x28
 8005dda:	2101      	movs	r1, #1
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 fa4d 	bl	800727c <RCCEx_PLL3_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005de8:	e00a      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005df0:	e006      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005df2:	bf00      	nop
 8005df4:	e004      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005df6:	bf00      	nop
 8005df8:	e002      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dfa:	bf00      	nop
 8005dfc:	e000      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e08:	4ba3      	ldr	r3, [pc, #652]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e18:	4a9f      	ldr	r2, [pc, #636]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e1e:	e003      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e42:	460b      	mov	r3, r1
 8005e44:	4313      	orrs	r3, r2
 8005e46:	d037      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e52:	d00e      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e58:	d816      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d018      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e62:	d111      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e64:	4b8c      	ldr	r3, [pc, #560]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a8b      	ldr	r2, [pc, #556]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e70:	e00f      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e76:	3308      	adds	r3, #8
 8005e78:	2101      	movs	r1, #1
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 f94c 	bl	8007118 <RCCEx_PLL2_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e86:	e004      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e8e:	e000      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e9a:	4b7f      	ldr	r3, [pc, #508]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	4a7b      	ldr	r2, [pc, #492]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	6513      	str	r3, [r2, #80]	; 0x50
 8005eae:	e003      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ece:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	d039      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d81c      	bhi.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f25 	.word	0x08005f25
 8005eec:	08005ef9 	.word	0x08005ef9
 8005ef0:	08005f07 	.word	0x08005f07
 8005ef4:	08005f25 	.word	0x08005f25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef8:	4b67      	ldr	r3, [pc, #412]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a66      	ldr	r2, [pc, #408]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f04:	e00f      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	2102      	movs	r1, #2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 f902 	bl	8007118 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f1a:	e004      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f22:	e000      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f2e:	4b5a      	ldr	r3, [pc, #360]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f32:	f023 0103 	bic.w	r1, r3, #3
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3c:	4a56      	ldr	r2, [pc, #344]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f42:	e003      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f66:	460b      	mov	r3, r1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f000 809f 	beq.w	80060ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f6e:	4b4b      	ldr	r3, [pc, #300]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a4a      	ldr	r2, [pc, #296]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f7a:	f7fb fc29 	bl	80017d0 <HAL_GetTick>
 8005f7e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f82:	e00b      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f84:	f7fb fc24 	bl	80017d0 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b64      	cmp	r3, #100	; 0x64
 8005f92:	d903      	bls.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f9a:	e005      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f9c:	4b3f      	ldr	r3, [pc, #252]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0ed      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d179      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fb0:	4b39      	ldr	r3, [pc, #228]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fbc:	4053      	eors	r3, r2
 8005fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d015      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fc6:	4b34      	ldr	r3, [pc, #208]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fd2:	4b31      	ldr	r3, [pc, #196]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	4a30      	ldr	r2, [pc, #192]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fdc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fde:	4b2e      	ldr	r3, [pc, #184]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a2d      	ldr	r2, [pc, #180]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fea:	4a2b      	ldr	r2, [pc, #172]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ff0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffe:	d118      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fb fbe6 	bl	80017d0 <HAL_GetTick>
 8006004:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006008:	e00d      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800600a:	f7fb fbe1 	bl	80017d0 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006014:	1ad2      	subs	r2, r2, r3
 8006016:	f241 3388 	movw	r3, #5000	; 0x1388
 800601a:	429a      	cmp	r2, r3
 800601c:	d903      	bls.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006024:	e005      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006026:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0eb      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006036:	2b00      	cmp	r3, #0
 8006038:	d129      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800604a:	d10e      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800604c:	4b12      	ldr	r3, [pc, #72]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006058:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800605c:	091a      	lsrs	r2, r3, #4
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006060:	4013      	ands	r3, r2
 8006062:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006064:	430b      	orrs	r3, r1
 8006066:	6113      	str	r3, [r2, #16]
 8006068:	e005      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	4a0a      	ldr	r2, [pc, #40]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006070:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006074:	6113      	str	r3, [r2, #16]
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006078:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006086:	4a04      	ldr	r2, [pc, #16]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006088:	430b      	orrs	r3, r1
 800608a:	6713      	str	r3, [r2, #112]	; 0x70
 800608c:	e00e      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800608e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006096:	e009      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006098:	58024400 	.word	0x58024400
 800609c:	58024800 	.word	0x58024800
 80060a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f002 0301 	and.w	r3, r2, #1
 80060b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f000 8089 	beq.w	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d4:	2b28      	cmp	r3, #40	; 0x28
 80060d6:	d86b      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80060d8:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	080061b9 	.word	0x080061b9
 80060e4:	080061b1 	.word	0x080061b1
 80060e8:	080061b1 	.word	0x080061b1
 80060ec:	080061b1 	.word	0x080061b1
 80060f0:	080061b1 	.word	0x080061b1
 80060f4:	080061b1 	.word	0x080061b1
 80060f8:	080061b1 	.word	0x080061b1
 80060fc:	080061b1 	.word	0x080061b1
 8006100:	08006185 	.word	0x08006185
 8006104:	080061b1 	.word	0x080061b1
 8006108:	080061b1 	.word	0x080061b1
 800610c:	080061b1 	.word	0x080061b1
 8006110:	080061b1 	.word	0x080061b1
 8006114:	080061b1 	.word	0x080061b1
 8006118:	080061b1 	.word	0x080061b1
 800611c:	080061b1 	.word	0x080061b1
 8006120:	0800619b 	.word	0x0800619b
 8006124:	080061b1 	.word	0x080061b1
 8006128:	080061b1 	.word	0x080061b1
 800612c:	080061b1 	.word	0x080061b1
 8006130:	080061b1 	.word	0x080061b1
 8006134:	080061b1 	.word	0x080061b1
 8006138:	080061b1 	.word	0x080061b1
 800613c:	080061b1 	.word	0x080061b1
 8006140:	080061b9 	.word	0x080061b9
 8006144:	080061b1 	.word	0x080061b1
 8006148:	080061b1 	.word	0x080061b1
 800614c:	080061b1 	.word	0x080061b1
 8006150:	080061b1 	.word	0x080061b1
 8006154:	080061b1 	.word	0x080061b1
 8006158:	080061b1 	.word	0x080061b1
 800615c:	080061b1 	.word	0x080061b1
 8006160:	080061b9 	.word	0x080061b9
 8006164:	080061b1 	.word	0x080061b1
 8006168:	080061b1 	.word	0x080061b1
 800616c:	080061b1 	.word	0x080061b1
 8006170:	080061b1 	.word	0x080061b1
 8006174:	080061b1 	.word	0x080061b1
 8006178:	080061b1 	.word	0x080061b1
 800617c:	080061b1 	.word	0x080061b1
 8006180:	080061b9 	.word	0x080061b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006188:	3308      	adds	r3, #8
 800618a:	2101      	movs	r1, #1
 800618c:	4618      	mov	r0, r3
 800618e:	f000 ffc3 	bl	8007118 <RCCEx_PLL2_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006198:	e00f      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	3328      	adds	r3, #40	; 0x28
 80061a0:	2101      	movs	r1, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 f86a 	bl	800727c <RCCEx_PLL3_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061ae:	e004      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061b6:	e000      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80061b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061c2:	4bbf      	ldr	r3, [pc, #764]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061d0:	4abb      	ldr	r2, [pc, #748]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6553      	str	r3, [r2, #84]	; 0x54
 80061d6:	e003      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f002 0302 	and.w	r3, r2, #2
 80061ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d041      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006206:	2b05      	cmp	r3, #5
 8006208:	d824      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	0800625d 	.word	0x0800625d
 8006214:	08006229 	.word	0x08006229
 8006218:	0800623f 	.word	0x0800623f
 800621c:	0800625d 	.word	0x0800625d
 8006220:	0800625d 	.word	0x0800625d
 8006224:	0800625d 	.word	0x0800625d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622c:	3308      	adds	r3, #8
 800622e:	2101      	movs	r1, #1
 8006230:	4618      	mov	r0, r3
 8006232:	f000 ff71 	bl	8007118 <RCCEx_PLL2_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800623c:	e00f      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006242:	3328      	adds	r3, #40	; 0x28
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f001 f818 	bl	800727c <RCCEx_PLL3_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006252:	e004      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800625c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006266:	4b96      	ldr	r3, [pc, #600]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	f023 0107 	bic.w	r1, r3, #7
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006274:	4a92      	ldr	r2, [pc, #584]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6553      	str	r3, [r2, #84]	; 0x54
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006280:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f002 0304 	and.w	r3, r2, #4
 8006290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800629a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d044      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	d825      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	08006305 	.word	0x08006305
 80062bc:	080062d1 	.word	0x080062d1
 80062c0:	080062e7 	.word	0x080062e7
 80062c4:	08006305 	.word	0x08006305
 80062c8:	08006305 	.word	0x08006305
 80062cc:	08006305 	.word	0x08006305
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d4:	3308      	adds	r3, #8
 80062d6:	2101      	movs	r1, #1
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 ff1d 	bl	8007118 <RCCEx_PLL2_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062e4:	e00f      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ea:	3328      	adds	r3, #40	; 0x28
 80062ec:	2101      	movs	r1, #1
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 ffc4 	bl	800727c <RCCEx_PLL3_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062fa:	e004      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006302:	e000      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800630e:	4b6c      	ldr	r3, [pc, #432]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	f023 0107 	bic.w	r1, r3, #7
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631e:	4a68      	ldr	r2, [pc, #416]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006320:	430b      	orrs	r3, r1
 8006322:	6593      	str	r3, [r2, #88]	; 0x58
 8006324:	e003      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800632a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f002 0320 	and.w	r3, r2, #32
 800633a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800633e:	2300      	movs	r3, #0
 8006340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006348:	460b      	mov	r3, r1
 800634a:	4313      	orrs	r3, r2
 800634c:	d055      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800635a:	d033      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800635c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006360:	d82c      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006366:	d02f      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636c:	d826      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800636e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006372:	d02b      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006374:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006378:	d820      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800637a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637e:	d012      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006384:	d81a      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d022      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800638a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800638e:	d115      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006394:	3308      	adds	r3, #8
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f000 febd 	bl	8007118 <RCCEx_PLL2_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063a4:	e015      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063aa:	3328      	adds	r3, #40	; 0x28
 80063ac:	2102      	movs	r1, #2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 ff64 	bl	800727c <RCCEx_PLL3_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063ba:	e00a      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063c2:	e006      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063c4:	bf00      	nop
 80063c6:	e004      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063c8:	bf00      	nop
 80063ca:	e002      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063cc:	bf00      	nop
 80063ce:	e000      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063da:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	4a35      	ldr	r2, [pc, #212]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6553      	str	r3, [r2, #84]	; 0x54
 80063f0:	e003      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800640a:	2300      	movs	r3, #0
 800640c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006410:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006414:	460b      	mov	r3, r1
 8006416:	4313      	orrs	r3, r2
 8006418:	d058      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006422:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006426:	d033      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006428:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800642c:	d82c      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	d02f      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006438:	d826      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800643a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800643e:	d02b      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006444:	d820      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644a:	d012      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006450:	d81a      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d022      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645a:	d115      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006460:	3308      	adds	r3, #8
 8006462:	2100      	movs	r1, #0
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fe57 	bl	8007118 <RCCEx_PLL2_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006470:	e015      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006476:	3328      	adds	r3, #40	; 0x28
 8006478:	2102      	movs	r1, #2
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fefe 	bl	800727c <RCCEx_PLL3_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006486:	e00a      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800648e:	e006      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006490:	bf00      	nop
 8006492:	e004      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006494:	bf00      	nop
 8006496:	e002      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006498:	bf00      	nop
 800649a:	e000      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800649c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10e      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80064ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064b6:	4a02      	ldr	r2, [pc, #8]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064b8:	430b      	orrs	r3, r1
 80064ba:	6593      	str	r3, [r2, #88]	; 0x58
 80064bc:	e006      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80064be:	bf00      	nop
 80064c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80064d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d055      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064f8:	d033      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80064fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064fe:	d82c      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006504:	d02f      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650a:	d826      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800650c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006510:	d02b      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006512:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006516:	d820      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651c:	d012      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800651e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006522:	d81a      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d022      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652c:	d115      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006532:	3308      	adds	r3, #8
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fdee 	bl	8007118 <RCCEx_PLL2_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006542:	e015      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006548:	3328      	adds	r3, #40	; 0x28
 800654a:	2102      	movs	r1, #2
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fe95 	bl	800727c <RCCEx_PLL3_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006558:	e00a      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006560:	e006      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006562:	bf00      	nop
 8006564:	e004      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006566:	bf00      	nop
 8006568:	e002      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800656a:	bf00      	nop
 800656c:	e000      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800656e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10b      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006578:	4ba1      	ldr	r3, [pc, #644]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800657a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006588:	4a9d      	ldr	r2, [pc, #628]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800658a:	430b      	orrs	r3, r1
 800658c:	6593      	str	r3, [r2, #88]	; 0x58
 800658e:	e003      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006594:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	f002 0308 	and.w	r3, r2, #8
 80065a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065a8:	2300      	movs	r3, #0
 80065aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80065b2:	460b      	mov	r3, r1
 80065b4:	4313      	orrs	r3, r2
 80065b6:	d01e      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ca:	3328      	adds	r3, #40	; 0x28
 80065cc:	2102      	movs	r1, #2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fe54 	bl	800727c <RCCEx_PLL3_Config>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065e0:	4b87      	ldr	r3, [pc, #540]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f0:	4a83      	ldr	r2, [pc, #524]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f2:	430b      	orrs	r3, r1
 80065f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f002 0310 	and.w	r3, r2, #16
 8006602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006606:	2300      	movs	r3, #0
 8006608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800660c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006610:	460b      	mov	r3, r1
 8006612:	4313      	orrs	r3, r2
 8006614:	d01e      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800661a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800661e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006622:	d10c      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006628:	3328      	adds	r3, #40	; 0x28
 800662a:	2102      	movs	r1, #2
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fe25 	bl	800727c <RCCEx_PLL3_Config>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800663e:	4b70      	ldr	r3, [pc, #448]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800664e:	4a6c      	ldr	r2, [pc, #432]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006650:	430b      	orrs	r3, r1
 8006652:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006664:	2300      	movs	r3, #0
 8006666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800666a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800666e:	460b      	mov	r3, r1
 8006670:	4313      	orrs	r3, r2
 8006672:	d03e      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800667c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006680:	d022      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006686:	d81b      	bhi.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006690:	d00b      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006692:	e015      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006698:	3308      	adds	r3, #8
 800669a:	2100      	movs	r1, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fd3b 	bl	8007118 <RCCEx_PLL2_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066a8:	e00f      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ae:	3328      	adds	r3, #40	; 0x28
 80066b0:	2102      	movs	r1, #2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fde2 	bl	800727c <RCCEx_PLL3_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066be:	e004      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80066c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10b      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066d2:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066e2:	4a47      	ldr	r2, [pc, #284]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6593      	str	r3, [r2, #88]	; 0x58
 80066e8:	e003      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80066fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006700:	2300      	movs	r3, #0
 8006702:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006704:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006708:	460b      	mov	r3, r1
 800670a:	4313      	orrs	r3, r2
 800670c:	d03b      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006716:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800671a:	d01f      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800671c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006720:	d818      	bhi.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006726:	d003      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800672c:	d007      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800672e:	e011      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006730:	4b33      	ldr	r3, [pc, #204]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	4a32      	ldr	r2, [pc, #200]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800673c:	e00f      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006742:	3328      	adds	r3, #40	; 0x28
 8006744:	2101      	movs	r1, #1
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fd98 	bl	800727c <RCCEx_PLL3_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006752:	e004      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800675a:	e000      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800675c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800675e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006766:	4b26      	ldr	r3, [pc, #152]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	4a22      	ldr	r2, [pc, #136]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006778:	430b      	orrs	r3, r1
 800677a:	6553      	str	r3, [r2, #84]	; 0x54
 800677c:	e003      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006792:	673b      	str	r3, [r7, #112]	; 0x70
 8006794:	2300      	movs	r3, #0
 8006796:	677b      	str	r3, [r7, #116]	; 0x74
 8006798:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800679c:	460b      	mov	r3, r1
 800679e:	4313      	orrs	r3, r2
 80067a0:	d034      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b0:	d007      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80067b2:	e011      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	4a11      	ldr	r2, [pc, #68]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067c0:	e00e      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	3308      	adds	r3, #8
 80067c8:	2102      	movs	r1, #2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fca4 	bl	8007118 <RCCEx_PLL2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067d6:	e003      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10d      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f6:	4a02      	ldr	r2, [pc, #8]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067fc:	e006      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80067fe:	bf00      	nop
 8006800:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006808:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006818:	66bb      	str	r3, [r7, #104]	; 0x68
 800681a:	2300      	movs	r3, #0
 800681c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800681e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d00c      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682c:	3328      	adds	r3, #40	; 0x28
 800682e:	2102      	movs	r1, #2
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fd23 	bl	800727c <RCCEx_PLL3_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800684e:	663b      	str	r3, [r7, #96]	; 0x60
 8006850:	2300      	movs	r3, #0
 8006852:	667b      	str	r3, [r7, #100]	; 0x64
 8006854:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006858:	460b      	mov	r3, r1
 800685a:	4313      	orrs	r3, r2
 800685c:	d038      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686a:	d018      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800686c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006870:	d811      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006876:	d014      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d80b      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d011      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	d106      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006888:	4bc3      	ldr	r3, [pc, #780]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4ac2      	ldr	r2, [pc, #776]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800688e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006894:	e008      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800689c:	e004      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800689e:	bf00      	nop
 80068a0:	e002      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068a2:	bf00      	nop
 80068a4:	e000      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068b0:	4bb9      	ldr	r3, [pc, #740]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c0:	4ab5      	ldr	r2, [pc, #724]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068c2:	430b      	orrs	r3, r1
 80068c4:	6553      	str	r3, [r2, #84]	; 0x54
 80068c6:	e003      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80068dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80068de:	2300      	movs	r3, #0
 80068e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80068e6:	460b      	mov	r3, r1
 80068e8:	4313      	orrs	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068ec:	4baa      	ldr	r3, [pc, #680]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fa:	4aa7      	ldr	r2, [pc, #668]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068fc:	430b      	orrs	r3, r1
 80068fe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800690c:	653b      	str	r3, [r7, #80]	; 0x50
 800690e:	2300      	movs	r3, #0
 8006910:	657b      	str	r3, [r7, #84]	; 0x54
 8006912:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006916:	460b      	mov	r3, r1
 8006918:	4313      	orrs	r3, r2
 800691a:	d00a      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800691c:	4b9e      	ldr	r3, [pc, #632]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006928:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800692c:	4a9a      	ldr	r2, [pc, #616]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800692e:	430b      	orrs	r3, r1
 8006930:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800693e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006940:	2300      	movs	r3, #0
 8006942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006944:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006948:	460b      	mov	r3, r1
 800694a:	4313      	orrs	r3, r2
 800694c:	d009      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800694e:	4b92      	ldr	r3, [pc, #584]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006952:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800695a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800695c:	4a8e      	ldr	r2, [pc, #568]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800695e:	430b      	orrs	r3, r1
 8006960:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800696e:	643b      	str	r3, [r7, #64]	; 0x40
 8006970:	2300      	movs	r3, #0
 8006972:	647b      	str	r3, [r7, #68]	; 0x44
 8006974:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006978:	460b      	mov	r3, r1
 800697a:	4313      	orrs	r3, r2
 800697c:	d00e      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800697e:	4b86      	ldr	r3, [pc, #536]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	4a85      	ldr	r2, [pc, #532]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006988:	6113      	str	r3, [r2, #16]
 800698a:	4b83      	ldr	r3, [pc, #524]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800698c:	6919      	ldr	r1, [r3, #16]
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006992:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006996:	4a80      	ldr	r2, [pc, #512]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006998:	430b      	orrs	r3, r1
 800699a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800699c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80069b2:	460b      	mov	r3, r1
 80069b4:	4313      	orrs	r3, r2
 80069b6:	d009      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069b8:	4b77      	ldr	r3, [pc, #476]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069bc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80069c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c6:	4a74      	ldr	r2, [pc, #464]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069c8:	430b      	orrs	r3, r1
 80069ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80069d8:	633b      	str	r3, [r7, #48]	; 0x30
 80069da:	2300      	movs	r3, #0
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
 80069de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d00a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069e8:	4b6b      	ldr	r3, [pc, #428]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80069f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f8:	4a67      	ldr	r2, [pc, #412]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069fa:	430b      	orrs	r3, r1
 80069fc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80069fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	2100      	movs	r1, #0
 8006a08:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006a14:	460b      	mov	r3, r1
 8006a16:	4313      	orrs	r3, r2
 8006a18:	d011      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1e:	3308      	adds	r3, #8
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fb78 	bl	8007118 <RCCEx_PLL2_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	2100      	movs	r1, #0
 8006a48:	6239      	str	r1, [r7, #32]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a54:	460b      	mov	r3, r1
 8006a56:	4313      	orrs	r3, r2
 8006a58:	d011      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5e:	3308      	adds	r3, #8
 8006a60:	2101      	movs	r1, #1
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fb58 	bl	8007118 <RCCEx_PLL2_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	2100      	movs	r1, #0
 8006a88:	61b9      	str	r1, [r7, #24]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	61fb      	str	r3, [r7, #28]
 8006a90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a94:	460b      	mov	r3, r1
 8006a96:	4313      	orrs	r3, r2
 8006a98:	d011      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	2102      	movs	r1, #2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fb38 	bl	8007118 <RCCEx_PLL2_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	6139      	str	r1, [r7, #16]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	d011      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ade:	3328      	adds	r3, #40	; 0x28
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fbca 	bl	800727c <RCCEx_PLL3_Config>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006afa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	2100      	movs	r1, #0
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b14:	460b      	mov	r3, r1
 8006b16:	4313      	orrs	r3, r2
 8006b18:	d011      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1e:	3328      	adds	r3, #40	; 0x28
 8006b20:	2101      	movs	r1, #1
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fbaa 	bl	800727c <RCCEx_PLL3_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	2100      	movs	r1, #0
 8006b48:	6039      	str	r1, [r7, #0]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	607b      	str	r3, [r7, #4]
 8006b50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b54:	460b      	mov	r3, r1
 8006b56:	4313      	orrs	r3, r2
 8006b58:	d011      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5e:	3328      	adds	r3, #40	; 0x28
 8006b60:	2102      	movs	r1, #2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fb8a 	bl	800727c <RCCEx_PLL3_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006b7e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e000      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006b92:	46bd      	mov	sp, r7
 8006b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b98:	58024400 	.word	0x58024400

08006b9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ba0:	f7fe fd96 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	091b      	lsrs	r3, r3, #4
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	4904      	ldr	r1, [pc, #16]	; (8006bc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006bb2:	5ccb      	ldrb	r3, [r1, r3]
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	58024400 	.word	0x58024400
 8006bc4:	08009ef8 	.word	0x08009ef8

08006bc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	; 0x24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bd0:	4ba1      	ldr	r3, [pc, #644]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006bda:	4b9f      	ldr	r3, [pc, #636]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	0b1b      	lsrs	r3, r3, #12
 8006be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006be4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006be6:	4b9c      	ldr	r3, [pc, #624]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	091b      	lsrs	r3, r3, #4
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006bf2:	4b99      	ldr	r3, [pc, #612]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	08db      	lsrs	r3, r3, #3
 8006bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	fb02 f303 	mul.w	r3, r2, r3
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8111 	beq.w	8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	f000 8083 	beq.w	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	f200 80a1 	bhi.w	8006d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d056      	beq.n	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c32:	e099      	b.n	8006d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c34:	4b88      	ldr	r3, [pc, #544]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d02d      	beq.n	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c40:	4b85      	ldr	r3, [pc, #532]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	08db      	lsrs	r3, r3, #3
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	4a84      	ldr	r2, [pc, #528]	; (8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	ee07 3a90 	vmov	s15, r3
 8006c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b7b      	ldr	r3, [pc, #492]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c9a:	e087      	b.n	8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b6a      	ldr	r3, [pc, #424]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cde:	e065      	b.n	8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b59      	ldr	r3, [pc, #356]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d22:	e043      	b.n	8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d36:	4b48      	ldr	r3, [pc, #288]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d66:	e021      	b.n	8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7a:	4b37      	ldr	r3, [pc, #220]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006daa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006dac:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	0a5b      	lsrs	r3, r3, #9
 8006db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd2:	ee17 2a90 	vmov	r2, s15
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006dda:	4b1f      	ldr	r3, [pc, #124]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	0c1b      	lsrs	r3, r3, #16
 8006de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e00:	ee17 2a90 	vmov	r2, s15
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006e08:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	0e1b      	lsrs	r3, r3, #24
 8006e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e2e:	ee17 2a90 	vmov	r2, s15
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e36:	e008      	b.n	8006e4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	609a      	str	r2, [r3, #8]
}
 8006e4a:	bf00      	nop
 8006e4c:	3724      	adds	r7, #36	; 0x24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	03d09000 	.word	0x03d09000
 8006e60:	46000000 	.word	0x46000000
 8006e64:	4c742400 	.word	0x4c742400
 8006e68:	4a742400 	.word	0x4a742400
 8006e6c:	4af42400 	.word	0x4af42400

08006e70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e78:	4ba1      	ldr	r3, [pc, #644]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e82:	4b9f      	ldr	r3, [pc, #636]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	0d1b      	lsrs	r3, r3, #20
 8006e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e8e:	4b9c      	ldr	r3, [pc, #624]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e9a:	4b99      	ldr	r3, [pc, #612]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	08db      	lsrs	r3, r3, #3
 8006ea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8111 	beq.w	80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	f000 8083 	beq.w	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	f200 80a1 	bhi.w	8007010 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d056      	beq.n	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006eda:	e099      	b.n	8007010 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006edc:	4b88      	ldr	r3, [pc, #544]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d02d      	beq.n	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ee8:	4b85      	ldr	r3, [pc, #532]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	08db      	lsrs	r3, r3, #3
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	4a84      	ldr	r2, [pc, #528]	; (8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	ee07 3a90 	vmov	s15, r3
 8006f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b7b      	ldr	r3, [pc, #492]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f42:	e087      	b.n	8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800710c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	4b6a      	ldr	r3, [pc, #424]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f86:	e065      	b.n	8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b59      	ldr	r3, [pc, #356]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fca:	e043      	b.n	8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fde:	4b48      	ldr	r3, [pc, #288]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ff2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800700e:	e021      	b.n	8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800701e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007022:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007032:	ed97 6a03 	vldr	s12, [r7, #12]
 8007036:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800703a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800704a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007052:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007054:	4b2a      	ldr	r3, [pc, #168]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	0a5b      	lsrs	r3, r3, #9
 800705a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800706a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800706e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707a:	ee17 2a90 	vmov	r2, s15
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007082:	4b1f      	ldr	r3, [pc, #124]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708c:	ee07 3a90 	vmov	s15, r3
 8007090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007098:	ee37 7a87 	vadd.f32	s14, s15, s14
 800709c:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a8:	ee17 2a90 	vmov	r2, s15
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80070b0:	4b13      	ldr	r3, [pc, #76]	; (8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	0e1b      	lsrs	r3, r3, #24
 80070b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070d6:	ee17 2a90 	vmov	r2, s15
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070de:	e008      	b.n	80070f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	609a      	str	r2, [r3, #8]
}
 80070f2:	bf00      	nop
 80070f4:	3724      	adds	r7, #36	; 0x24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	58024400 	.word	0x58024400
 8007104:	03d09000 	.word	0x03d09000
 8007108:	46000000 	.word	0x46000000
 800710c:	4c742400 	.word	0x4c742400
 8007110:	4a742400 	.word	0x4a742400
 8007114:	4af42400 	.word	0x4af42400

08007118 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007126:	4b53      	ldr	r3, [pc, #332]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	2b03      	cmp	r3, #3
 8007130:	d101      	bne.n	8007136 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e099      	b.n	800726a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007136:	4b4f      	ldr	r3, [pc, #316]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a4e      	ldr	r2, [pc, #312]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800713c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007142:	f7fa fb45 	bl	80017d0 <HAL_GetTick>
 8007146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007148:	e008      	b.n	800715c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800714a:	f7fa fb41 	bl	80017d0 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d901      	bls.n	800715c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e086      	b.n	800726a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800715c:	4b45      	ldr	r3, [pc, #276]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1f0      	bne.n	800714a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007168:	4b42      	ldr	r3, [pc, #264]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	031b      	lsls	r3, r3, #12
 8007176:	493f      	ldr	r1, [pc, #252]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 8007178:	4313      	orrs	r3, r2
 800717a:	628b      	str	r3, [r1, #40]	; 0x28
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	3b01      	subs	r3, #1
 8007182:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	3b01      	subs	r3, #1
 800718c:	025b      	lsls	r3, r3, #9
 800718e:	b29b      	uxth	r3, r3
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	3b01      	subs	r3, #1
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	061b      	lsls	r3, r3, #24
 80071a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071ac:	4931      	ldr	r1, [pc, #196]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80071b2:	4b30      	ldr	r3, [pc, #192]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	492d      	ldr	r1, [pc, #180]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071c4:	4b2b      	ldr	r3, [pc, #172]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	f023 0220 	bic.w	r2, r3, #32
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	4928      	ldr	r1, [pc, #160]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071d6:	4b27      	ldr	r3, [pc, #156]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	4a26      	ldr	r2, [pc, #152]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071dc:	f023 0310 	bic.w	r3, r3, #16
 80071e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071e2:	4b24      	ldr	r3, [pc, #144]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e6:	4b24      	ldr	r3, [pc, #144]	; (8007278 <RCCEx_PLL2_Config+0x160>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	69d2      	ldr	r2, [r2, #28]
 80071ee:	00d2      	lsls	r2, r2, #3
 80071f0:	4920      	ldr	r1, [pc, #128]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071f6:	4b1f      	ldr	r3, [pc, #124]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	4a1e      	ldr	r2, [pc, #120]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 80071fc:	f043 0310 	orr.w	r3, r3, #16
 8007200:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007208:	4b1a      	ldr	r3, [pc, #104]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	4a19      	ldr	r2, [pc, #100]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800720e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007212:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007214:	e00f      	b.n	8007236 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d106      	bne.n	800722a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800721c:	4b15      	ldr	r3, [pc, #84]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	4a14      	ldr	r2, [pc, #80]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 8007222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007226:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007228:	e005      	b.n	8007236 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800722a:	4b12      	ldr	r3, [pc, #72]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722e:	4a11      	ldr	r2, [pc, #68]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 8007230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007234:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a0e      	ldr	r2, [pc, #56]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800723c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007242:	f7fa fac5 	bl	80017d0 <HAL_GetTick>
 8007246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007248:	e008      	b.n	800725c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800724a:	f7fa fac1 	bl	80017d0 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e006      	b.n	800726a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <RCCEx_PLL2_Config+0x15c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f0      	beq.n	800724a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
 8007278:	ffff0007 	.word	0xffff0007

0800727c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800728a:	4b53      	ldr	r3, [pc, #332]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	2b03      	cmp	r3, #3
 8007294:	d101      	bne.n	800729a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e099      	b.n	80073ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800729a:	4b4f      	ldr	r3, [pc, #316]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a4e      	ldr	r2, [pc, #312]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 80072a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a6:	f7fa fa93 	bl	80017d0 <HAL_GetTick>
 80072aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072ac:	e008      	b.n	80072c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072ae:	f7fa fa8f 	bl	80017d0 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e086      	b.n	80073ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072c0:	4b45      	ldr	r3, [pc, #276]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1f0      	bne.n	80072ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80072cc:	4b42      	ldr	r3, [pc, #264]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	051b      	lsls	r3, r3, #20
 80072da:	493f      	ldr	r1, [pc, #252]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	628b      	str	r3, [r1, #40]	; 0x28
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	025b      	lsls	r3, r3, #9
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	041b      	lsls	r3, r3, #16
 80072fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	3b01      	subs	r3, #1
 800730a:	061b      	lsls	r3, r3, #24
 800730c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007310:	4931      	ldr	r1, [pc, #196]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007312:	4313      	orrs	r3, r2
 8007314:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007316:	4b30      	ldr	r3, [pc, #192]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	492d      	ldr	r1, [pc, #180]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007324:	4313      	orrs	r3, r2
 8007326:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007328:	4b2b      	ldr	r3, [pc, #172]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	4928      	ldr	r1, [pc, #160]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007336:	4313      	orrs	r3, r2
 8007338:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800733a:	4b27      	ldr	r3, [pc, #156]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	4a26      	ldr	r2, [pc, #152]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007346:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <RCCEx_PLL3_Config+0x160>)
 800734c:	4013      	ands	r3, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	69d2      	ldr	r2, [r2, #28]
 8007352:	00d2      	lsls	r2, r2, #3
 8007354:	4920      	ldr	r1, [pc, #128]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007356:	4313      	orrs	r3, r2
 8007358:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800735a:	4b1f      	ldr	r3, [pc, #124]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007364:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800736c:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	4a19      	ldr	r2, [pc, #100]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007372:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007376:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007378:	e00f      	b.n	800739a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d106      	bne.n	800738e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007380:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007386:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800738a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800738c:	e005      	b.n	800739a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 8007394:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007398:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a0e      	ldr	r2, [pc, #56]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 80073a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a6:	f7fa fa13 	bl	80017d0 <HAL_GetTick>
 80073aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073ac:	e008      	b.n	80073c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073ae:	f7fa fa0f 	bl	80017d0 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d901      	bls.n	80073c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e006      	b.n	80073ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <RCCEx_PLL3_Config+0x15c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0f0      	beq.n	80073ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	58024400 	.word	0x58024400
 80073dc:	ffff0007 	.word	0xffff0007

080073e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e042      	b.n	8007478 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7f9 ff3f 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2224      	movs	r2, #36	; 0x24
 800740e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0201 	bic.w	r2, r2, #1
 8007420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fc94 	bl	8007d50 <UART_SetConfig>
 8007428:	4603      	mov	r3, r0
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e022      	b.n	8007478 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 f9f0 	bl	8008820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800744e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800745e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fa77 	bl	8008964 <UART_CheckIdleState>
 8007476:	4603      	mov	r3, r0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007496:	2b20      	cmp	r3, #32
 8007498:	d17b      	bne.n	8007592 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_UART_Transmit+0x26>
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e074      	b.n	8007594 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2221      	movs	r2, #33	; 0x21
 80074b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ba:	f7fa f989 	bl	80017d0 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	88fa      	ldrh	r2, [r7, #6]
 80074c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d8:	d108      	bne.n	80074ec <HAL_UART_Transmit+0x6c>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	e003      	b.n	80074f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074f4:	e030      	b.n	8007558 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2200      	movs	r2, #0
 80074fe:	2180      	movs	r1, #128	; 0x80
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f001 fad9 	bl	8008ab8 <UART_WaitOnFlagUntilTimeout>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e03d      	b.n	8007594 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10b      	bne.n	8007536 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800752c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	3302      	adds	r3, #2
 8007532:	61bb      	str	r3, [r7, #24]
 8007534:	e007      	b.n	8007546 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	3301      	adds	r3, #1
 8007544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1c8      	bne.n	80074f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2200      	movs	r2, #0
 800756c:	2140      	movs	r1, #64	; 0x40
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f001 faa2 	bl	8008ab8 <UART_WaitOnFlagUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e006      	b.n	8007594 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2220      	movs	r2, #32
 800758a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	e000      	b.n	8007594 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007592:	2302      	movs	r3, #2
  }
}
 8007594:	4618      	mov	r0, r3
 8007596:	3720      	adds	r7, #32
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b0ba      	sub	sp, #232	; 0xe8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80075ca:	4013      	ands	r3, r2
 80075cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d11b      	bne.n	8007610 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d015      	beq.n	8007610 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d009      	beq.n	8007610 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8377 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
      }
      return;
 800760e:	e371      	b.n	8007cf4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8123 	beq.w	8007860 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800761a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800761e:	4b8d      	ldr	r3, [pc, #564]	; (8007854 <HAL_UART_IRQHandler+0x2b8>)
 8007620:	4013      	ands	r3, r2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007626:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800762a:	4b8b      	ldr	r3, [pc, #556]	; (8007858 <HAL_UART_IRQHandler+0x2bc>)
 800762c:	4013      	ands	r3, r2
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8116 	beq.w	8007860 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d011      	beq.n	8007664 <HAL_UART_IRQHandler+0xc8>
 8007640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2201      	movs	r2, #1
 8007652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765a:	f043 0201 	orr.w	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d011      	beq.n	8007694 <HAL_UART_IRQHandler+0xf8>
 8007670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2202      	movs	r2, #2
 8007682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768a:	f043 0204 	orr.w	r2, r3, #4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d011      	beq.n	80076c4 <HAL_UART_IRQHandler+0x128>
 80076a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2204      	movs	r2, #4
 80076b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ba:	f043 0202 	orr.w	r2, r3, #2
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076e0:	4b5c      	ldr	r3, [pc, #368]	; (8007854 <HAL_UART_IRQHandler+0x2b8>)
 80076e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2208      	movs	r2, #8
 80076ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f6:	f043 0208 	orr.w	r2, r3, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007708:	2b00      	cmp	r3, #0
 800770a:	d012      	beq.n	8007732 <HAL_UART_IRQHandler+0x196>
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00c      	beq.n	8007732 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007728:	f043 0220 	orr.w	r2, r3, #32
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 82dd 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d013      	beq.n	8007772 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800774a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800775a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d007      	beq.n	8007772 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d005      	beq.n	8007796 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800778a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800778e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007792:	2b00      	cmp	r3, #0
 8007794:	d054      	beq.n	8007840 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 f9f6 	bl	8008b88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d146      	bne.n	8007838 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3308      	adds	r3, #8
 80077d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1d9      	bne.n	80077aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d017      	beq.n	8007830 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007806:	4a15      	ldr	r2, [pc, #84]	; (800785c <HAL_UART_IRQHandler+0x2c0>)
 8007808:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007810:	4618      	mov	r0, r3
 8007812:	f7fa fc5b 	bl	80020cc <HAL_DMA_Abort_IT>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d019      	beq.n	8007850 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800782a:	4610      	mov	r0, r2
 800782c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800782e:	e00f      	b.n	8007850 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa77 	bl	8007d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007836:	e00b      	b.n	8007850 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa73 	bl	8007d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783e:	e007      	b.n	8007850 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fa6f 	bl	8007d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800784e:	e253      	b.n	8007cf8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007850:	bf00      	nop
    return;
 8007852:	e251      	b.n	8007cf8 <HAL_UART_IRQHandler+0x75c>
 8007854:	10000001 	.word	0x10000001
 8007858:	04000120 	.word	0x04000120
 800785c:	08008c55 	.word	0x08008c55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007864:	2b01      	cmp	r3, #1
 8007866:	f040 81e7 	bne.w	8007c38 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786e:	f003 0310 	and.w	r3, r3, #16
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 81e0 	beq.w	8007c38 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 81d9 	beq.w	8007c38 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2210      	movs	r2, #16
 800788c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	f040 8151 	bne.w	8007b40 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a96      	ldr	r2, [pc, #600]	; (8007b00 <HAL_UART_IRQHandler+0x564>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d068      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a93      	ldr	r2, [pc, #588]	; (8007b04 <HAL_UART_IRQHandler+0x568>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d061      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a91      	ldr	r2, [pc, #580]	; (8007b08 <HAL_UART_IRQHandler+0x56c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d05a      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a8e      	ldr	r2, [pc, #568]	; (8007b0c <HAL_UART_IRQHandler+0x570>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d053      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a8c      	ldr	r2, [pc, #560]	; (8007b10 <HAL_UART_IRQHandler+0x574>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d04c      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a89      	ldr	r2, [pc, #548]	; (8007b14 <HAL_UART_IRQHandler+0x578>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d045      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a87      	ldr	r2, [pc, #540]	; (8007b18 <HAL_UART_IRQHandler+0x57c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d03e      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a84      	ldr	r2, [pc, #528]	; (8007b1c <HAL_UART_IRQHandler+0x580>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d037      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a82      	ldr	r2, [pc, #520]	; (8007b20 <HAL_UART_IRQHandler+0x584>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d030      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a7f      	ldr	r2, [pc, #508]	; (8007b24 <HAL_UART_IRQHandler+0x588>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d029      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a7d      	ldr	r2, [pc, #500]	; (8007b28 <HAL_UART_IRQHandler+0x58c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d022      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a7a      	ldr	r2, [pc, #488]	; (8007b2c <HAL_UART_IRQHandler+0x590>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d01b      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a78      	ldr	r2, [pc, #480]	; (8007b30 <HAL_UART_IRQHandler+0x594>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d014      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a75      	ldr	r2, [pc, #468]	; (8007b34 <HAL_UART_IRQHandler+0x598>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00d      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a73      	ldr	r2, [pc, #460]	; (8007b38 <HAL_UART_IRQHandler+0x59c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d006      	beq.n	800797e <HAL_UART_IRQHandler+0x3e2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a70      	ldr	r2, [pc, #448]	; (8007b3c <HAL_UART_IRQHandler+0x5a0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d106      	bne.n	800798c <HAL_UART_IRQHandler+0x3f0>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	b29b      	uxth	r3, r3
 800798a:	e005      	b.n	8007998 <HAL_UART_IRQHandler+0x3fc>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800799c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 81ab 	beq.w	8007cfc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079b0:	429a      	cmp	r2, r3
 80079b2:	f080 81a3 	bcs.w	8007cfc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079cc:	f000 8087 	beq.w	8007ade <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1da      	bne.n	80079d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a2c:	f023 0301 	bic.w	r3, r3, #1
 8007a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e1      	bne.n	8007a1a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e3      	bne.n	8007a56 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aac:	f023 0310 	bic.w	r3, r3, #16
 8007ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007abe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ac0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e4      	bne.n	8007a9c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7f9 ffd9 	bl	8001a90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f91d 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007afe:	e0fd      	b.n	8007cfc <HAL_UART_IRQHandler+0x760>
 8007b00:	40020010 	.word	0x40020010
 8007b04:	40020028 	.word	0x40020028
 8007b08:	40020040 	.word	0x40020040
 8007b0c:	40020058 	.word	0x40020058
 8007b10:	40020070 	.word	0x40020070
 8007b14:	40020088 	.word	0x40020088
 8007b18:	400200a0 	.word	0x400200a0
 8007b1c:	400200b8 	.word	0x400200b8
 8007b20:	40020410 	.word	0x40020410
 8007b24:	40020428 	.word	0x40020428
 8007b28:	40020440 	.word	0x40020440
 8007b2c:	40020458 	.word	0x40020458
 8007b30:	40020470 	.word	0x40020470
 8007b34:	40020488 	.word	0x40020488
 8007b38:	400204a0 	.word	0x400204a0
 8007b3c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80cf 	beq.w	8007d00 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007b62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 80ca 	beq.w	8007d00 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e4      	bne.n	8007b6c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb2:	6a3a      	ldr	r2, [r7, #32]
 8007bb4:	4b55      	ldr	r3, [pc, #340]	; (8007d0c <HAL_UART_IRQHandler+0x770>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bc6:	633a      	str	r2, [r7, #48]	; 0x30
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e3      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0310 	bic.w	r3, r3, #16
 8007c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c10:	61fb      	str	r3, [r7, #28]
 8007c12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	69b9      	ldr	r1, [r7, #24]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e4      	bne.n	8007bee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f881 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c36:	e063      	b.n	8007d00 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00e      	beq.n	8007c62 <HAL_UART_IRQHandler+0x6c6>
 8007c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d008      	beq.n	8007c62 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 f83b 	bl	8008cd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c60:	e051      	b.n	8007d06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d014      	beq.n	8007c98 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d008      	beq.n	8007c98 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d03a      	beq.n	8007d04 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
    }
    return;
 8007c96:	e035      	b.n	8007d04 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d009      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x71c>
 8007ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 ffe5 	bl	8008c80 <UART_EndTransmit_IT>
    return;
 8007cb6:	e026      	b.n	8007d06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d009      	beq.n	8007cd8 <HAL_UART_IRQHandler+0x73c>
 8007cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 f814 	bl	8008cfe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cd6:	e016      	b.n	8007d06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d010      	beq.n	8007d06 <HAL_UART_IRQHandler+0x76a>
 8007ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da0c      	bge.n	8007d06 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fffc 	bl	8008cea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cf2:	e008      	b.n	8007d06 <HAL_UART_IRQHandler+0x76a>
      return;
 8007cf4:	bf00      	nop
 8007cf6:	e006      	b.n	8007d06 <HAL_UART_IRQHandler+0x76a>
    return;
 8007cf8:	bf00      	nop
 8007cfa:	e004      	b.n	8007d06 <HAL_UART_IRQHandler+0x76a>
      return;
 8007cfc:	bf00      	nop
 8007cfe:	e002      	b.n	8007d06 <HAL_UART_IRQHandler+0x76a>
      return;
 8007d00:	bf00      	nop
 8007d02:	e000      	b.n	8007d06 <HAL_UART_IRQHandler+0x76a>
    return;
 8007d04:	bf00      	nop
  }
}
 8007d06:	37e8      	adds	r7, #232	; 0xe8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	effffffe 	.word	0xeffffffe

08007d10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d54:	b092      	sub	sp, #72	; 0x48
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4bbe      	ldr	r3, [pc, #760]	; (8008078 <UART_SetConfig+0x328>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	6812      	ldr	r2, [r2, #0]
 8007d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4ab3      	ldr	r2, [pc, #716]	; (800807c <UART_SetConfig+0x32c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007db8:	4313      	orrs	r3, r2
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	4baf      	ldr	r3, [pc, #700]	; (8008080 <UART_SetConfig+0x330>)
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	f023 010f 	bic.w	r1, r3, #15
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4aa6      	ldr	r2, [pc, #664]	; (8008084 <UART_SetConfig+0x334>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d177      	bne.n	8007ee0 <UART_SetConfig+0x190>
 8007df0:	4ba5      	ldr	r3, [pc, #660]	; (8008088 <UART_SetConfig+0x338>)
 8007df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007df8:	2b28      	cmp	r3, #40	; 0x28
 8007dfa:	d86d      	bhi.n	8007ed8 <UART_SetConfig+0x188>
 8007dfc:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <UART_SetConfig+0xb4>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007ea9 	.word	0x08007ea9
 8007e08:	08007ed9 	.word	0x08007ed9
 8007e0c:	08007ed9 	.word	0x08007ed9
 8007e10:	08007ed9 	.word	0x08007ed9
 8007e14:	08007ed9 	.word	0x08007ed9
 8007e18:	08007ed9 	.word	0x08007ed9
 8007e1c:	08007ed9 	.word	0x08007ed9
 8007e20:	08007ed9 	.word	0x08007ed9
 8007e24:	08007eb1 	.word	0x08007eb1
 8007e28:	08007ed9 	.word	0x08007ed9
 8007e2c:	08007ed9 	.word	0x08007ed9
 8007e30:	08007ed9 	.word	0x08007ed9
 8007e34:	08007ed9 	.word	0x08007ed9
 8007e38:	08007ed9 	.word	0x08007ed9
 8007e3c:	08007ed9 	.word	0x08007ed9
 8007e40:	08007ed9 	.word	0x08007ed9
 8007e44:	08007eb9 	.word	0x08007eb9
 8007e48:	08007ed9 	.word	0x08007ed9
 8007e4c:	08007ed9 	.word	0x08007ed9
 8007e50:	08007ed9 	.word	0x08007ed9
 8007e54:	08007ed9 	.word	0x08007ed9
 8007e58:	08007ed9 	.word	0x08007ed9
 8007e5c:	08007ed9 	.word	0x08007ed9
 8007e60:	08007ed9 	.word	0x08007ed9
 8007e64:	08007ec1 	.word	0x08007ec1
 8007e68:	08007ed9 	.word	0x08007ed9
 8007e6c:	08007ed9 	.word	0x08007ed9
 8007e70:	08007ed9 	.word	0x08007ed9
 8007e74:	08007ed9 	.word	0x08007ed9
 8007e78:	08007ed9 	.word	0x08007ed9
 8007e7c:	08007ed9 	.word	0x08007ed9
 8007e80:	08007ed9 	.word	0x08007ed9
 8007e84:	08007ec9 	.word	0x08007ec9
 8007e88:	08007ed9 	.word	0x08007ed9
 8007e8c:	08007ed9 	.word	0x08007ed9
 8007e90:	08007ed9 	.word	0x08007ed9
 8007e94:	08007ed9 	.word	0x08007ed9
 8007e98:	08007ed9 	.word	0x08007ed9
 8007e9c:	08007ed9 	.word	0x08007ed9
 8007ea0:	08007ed9 	.word	0x08007ed9
 8007ea4:	08007ed1 	.word	0x08007ed1
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eae:	e222      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e21e      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ebe:	e21a      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec6:	e216      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007ec8:	2320      	movs	r3, #32
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e212      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e20e      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e20a      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a69      	ldr	r2, [pc, #420]	; (800808c <UART_SetConfig+0x33c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d130      	bne.n	8007f4c <UART_SetConfig+0x1fc>
 8007eea:	4b67      	ldr	r3, [pc, #412]	; (8008088 <UART_SetConfig+0x338>)
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	2b05      	cmp	r3, #5
 8007ef4:	d826      	bhi.n	8007f44 <UART_SetConfig+0x1f4>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <UART_SetConfig+0x1ac>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f15 	.word	0x08007f15
 8007f00:	08007f1d 	.word	0x08007f1d
 8007f04:	08007f25 	.word	0x08007f25
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f35 	.word	0x08007f35
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	2300      	movs	r3, #0
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e1ec      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e1e8      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f24:	2308      	movs	r3, #8
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e1e4      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e1e0      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f34:	2320      	movs	r3, #32
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e1dc      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e1d8      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e1d4      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a4f      	ldr	r2, [pc, #316]	; (8008090 <UART_SetConfig+0x340>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d130      	bne.n	8007fb8 <UART_SetConfig+0x268>
 8007f56:	4b4c      	ldr	r3, [pc, #304]	; (8008088 <UART_SetConfig+0x338>)
 8007f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	d826      	bhi.n	8007fb0 <UART_SetConfig+0x260>
 8007f62:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <UART_SetConfig+0x218>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f81 	.word	0x08007f81
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	08007f91 	.word	0x08007f91
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fa1 	.word	0x08007fa1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e1b6      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e1b2      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f96:	e1ae      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9e:	e1aa      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa6:	e1a6      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e1a2      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb6:	e19e      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a35      	ldr	r2, [pc, #212]	; (8008094 <UART_SetConfig+0x344>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d130      	bne.n	8008024 <UART_SetConfig+0x2d4>
 8007fc2:	4b31      	ldr	r3, [pc, #196]	; (8008088 <UART_SetConfig+0x338>)
 8007fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d826      	bhi.n	800801c <UART_SetConfig+0x2cc>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <UART_SetConfig+0x284>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007fed 	.word	0x08007fed
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	08007ffd 	.word	0x08007ffd
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	0800800d 	.word	0x0800800d
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	2300      	movs	r3, #0
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e180      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e17c      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e178      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008004:	2310      	movs	r3, #16
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e174      	b.n	80082f6 <UART_SetConfig+0x5a6>
 800800c:	2320      	movs	r3, #32
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e170      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e16c      	b.n	80082f6 <UART_SetConfig+0x5a6>
 800801c:	2380      	movs	r3, #128	; 0x80
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e168      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1b      	ldr	r2, [pc, #108]	; (8008098 <UART_SetConfig+0x348>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d142      	bne.n	80080b4 <UART_SetConfig+0x364>
 800802e:	4b16      	ldr	r3, [pc, #88]	; (8008088 <UART_SetConfig+0x338>)
 8008030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	2b05      	cmp	r3, #5
 8008038:	d838      	bhi.n	80080ac <UART_SetConfig+0x35c>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0x2f0>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008059 	.word	0x08008059
 8008044:	08008061 	.word	0x08008061
 8008048:	08008069 	.word	0x08008069
 800804c:	08008071 	.word	0x08008071
 8008050:	0800809d 	.word	0x0800809d
 8008054:	080080a5 	.word	0x080080a5
 8008058:	2300      	movs	r3, #0
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e14a      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008060:	2304      	movs	r3, #4
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e146      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008068:	2308      	movs	r3, #8
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e142      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008070:	2310      	movs	r3, #16
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e13e      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008078:	cfff69f3 	.word	0xcfff69f3
 800807c:	58000c00 	.word	0x58000c00
 8008080:	11fff4ff 	.word	0x11fff4ff
 8008084:	40011000 	.word	0x40011000
 8008088:	58024400 	.word	0x58024400
 800808c:	40004400 	.word	0x40004400
 8008090:	40004800 	.word	0x40004800
 8008094:	40004c00 	.word	0x40004c00
 8008098:	40005000 	.word	0x40005000
 800809c:	2320      	movs	r3, #32
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e128      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80080a4:	2340      	movs	r3, #64	; 0x40
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e124      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b2:	e120      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4acb      	ldr	r2, [pc, #812]	; (80083e8 <UART_SetConfig+0x698>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d176      	bne.n	80081ac <UART_SetConfig+0x45c>
 80080be:	4bcb      	ldr	r3, [pc, #812]	; (80083ec <UART_SetConfig+0x69c>)
 80080c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080c6:	2b28      	cmp	r3, #40	; 0x28
 80080c8:	d86c      	bhi.n	80081a4 <UART_SetConfig+0x454>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <UART_SetConfig+0x380>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	08008175 	.word	0x08008175
 80080d4:	080081a5 	.word	0x080081a5
 80080d8:	080081a5 	.word	0x080081a5
 80080dc:	080081a5 	.word	0x080081a5
 80080e0:	080081a5 	.word	0x080081a5
 80080e4:	080081a5 	.word	0x080081a5
 80080e8:	080081a5 	.word	0x080081a5
 80080ec:	080081a5 	.word	0x080081a5
 80080f0:	0800817d 	.word	0x0800817d
 80080f4:	080081a5 	.word	0x080081a5
 80080f8:	080081a5 	.word	0x080081a5
 80080fc:	080081a5 	.word	0x080081a5
 8008100:	080081a5 	.word	0x080081a5
 8008104:	080081a5 	.word	0x080081a5
 8008108:	080081a5 	.word	0x080081a5
 800810c:	080081a5 	.word	0x080081a5
 8008110:	08008185 	.word	0x08008185
 8008114:	080081a5 	.word	0x080081a5
 8008118:	080081a5 	.word	0x080081a5
 800811c:	080081a5 	.word	0x080081a5
 8008120:	080081a5 	.word	0x080081a5
 8008124:	080081a5 	.word	0x080081a5
 8008128:	080081a5 	.word	0x080081a5
 800812c:	080081a5 	.word	0x080081a5
 8008130:	0800818d 	.word	0x0800818d
 8008134:	080081a5 	.word	0x080081a5
 8008138:	080081a5 	.word	0x080081a5
 800813c:	080081a5 	.word	0x080081a5
 8008140:	080081a5 	.word	0x080081a5
 8008144:	080081a5 	.word	0x080081a5
 8008148:	080081a5 	.word	0x080081a5
 800814c:	080081a5 	.word	0x080081a5
 8008150:	08008195 	.word	0x08008195
 8008154:	080081a5 	.word	0x080081a5
 8008158:	080081a5 	.word	0x080081a5
 800815c:	080081a5 	.word	0x080081a5
 8008160:	080081a5 	.word	0x080081a5
 8008164:	080081a5 	.word	0x080081a5
 8008168:	080081a5 	.word	0x080081a5
 800816c:	080081a5 	.word	0x080081a5
 8008170:	0800819d 	.word	0x0800819d
 8008174:	2301      	movs	r3, #1
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800817a:	e0bc      	b.n	80082f6 <UART_SetConfig+0x5a6>
 800817c:	2304      	movs	r3, #4
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008182:	e0b8      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008184:	2308      	movs	r3, #8
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800818a:	e0b4      	b.n	80082f6 <UART_SetConfig+0x5a6>
 800818c:	2310      	movs	r3, #16
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008192:	e0b0      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008194:	2320      	movs	r3, #32
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819a:	e0ac      	b.n	80082f6 <UART_SetConfig+0x5a6>
 800819c:	2340      	movs	r3, #64	; 0x40
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a2:	e0a8      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80081a4:	2380      	movs	r3, #128	; 0x80
 80081a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081aa:	e0a4      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a8f      	ldr	r2, [pc, #572]	; (80083f0 <UART_SetConfig+0x6a0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d130      	bne.n	8008218 <UART_SetConfig+0x4c8>
 80081b6:	4b8d      	ldr	r3, [pc, #564]	; (80083ec <UART_SetConfig+0x69c>)
 80081b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	2b05      	cmp	r3, #5
 80081c0:	d826      	bhi.n	8008210 <UART_SetConfig+0x4c0>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <UART_SetConfig+0x478>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080081e1 	.word	0x080081e1
 80081cc:	080081e9 	.word	0x080081e9
 80081d0:	080081f1 	.word	0x080081f1
 80081d4:	080081f9 	.word	0x080081f9
 80081d8:	08008201 	.word	0x08008201
 80081dc:	08008209 	.word	0x08008209
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e6:	e086      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80081e8:	2304      	movs	r3, #4
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ee:	e082      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80081f0:	2308      	movs	r3, #8
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f6:	e07e      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80081f8:	2310      	movs	r3, #16
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fe:	e07a      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008200:	2320      	movs	r3, #32
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008206:	e076      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008208:	2340      	movs	r3, #64	; 0x40
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820e:	e072      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008210:	2380      	movs	r3, #128	; 0x80
 8008212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008216:	e06e      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a75      	ldr	r2, [pc, #468]	; (80083f4 <UART_SetConfig+0x6a4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d130      	bne.n	8008284 <UART_SetConfig+0x534>
 8008222:	4b72      	ldr	r3, [pc, #456]	; (80083ec <UART_SetConfig+0x69c>)
 8008224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b05      	cmp	r3, #5
 800822c:	d826      	bhi.n	800827c <UART_SetConfig+0x52c>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <UART_SetConfig+0x4e4>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	0800824d 	.word	0x0800824d
 8008238:	08008255 	.word	0x08008255
 800823c:	0800825d 	.word	0x0800825d
 8008240:	08008265 	.word	0x08008265
 8008244:	0800826d 	.word	0x0800826d
 8008248:	08008275 	.word	0x08008275
 800824c:	2300      	movs	r3, #0
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008252:	e050      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008254:	2304      	movs	r3, #4
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825a:	e04c      	b.n	80082f6 <UART_SetConfig+0x5a6>
 800825c:	2308      	movs	r3, #8
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008262:	e048      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008264:	2310      	movs	r3, #16
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826a:	e044      	b.n	80082f6 <UART_SetConfig+0x5a6>
 800826c:	2320      	movs	r3, #32
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008272:	e040      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008274:	2340      	movs	r3, #64	; 0x40
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827a:	e03c      	b.n	80082f6 <UART_SetConfig+0x5a6>
 800827c:	2380      	movs	r3, #128	; 0x80
 800827e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008282:	e038      	b.n	80082f6 <UART_SetConfig+0x5a6>
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a5b      	ldr	r2, [pc, #364]	; (80083f8 <UART_SetConfig+0x6a8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d130      	bne.n	80082f0 <UART_SetConfig+0x5a0>
 800828e:	4b57      	ldr	r3, [pc, #348]	; (80083ec <UART_SetConfig+0x69c>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	2b05      	cmp	r3, #5
 8008298:	d826      	bhi.n	80082e8 <UART_SetConfig+0x598>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <UART_SetConfig+0x550>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082b9 	.word	0x080082b9
 80082a4:	080082c1 	.word	0x080082c1
 80082a8:	080082c9 	.word	0x080082c9
 80082ac:	080082d1 	.word	0x080082d1
 80082b0:	080082d9 	.word	0x080082d9
 80082b4:	080082e1 	.word	0x080082e1
 80082b8:	2302      	movs	r3, #2
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e01a      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80082c0:	2304      	movs	r3, #4
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e016      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80082c8:	2308      	movs	r3, #8
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e012      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80082d0:	2310      	movs	r3, #16
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d6:	e00e      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80082d8:	2320      	movs	r3, #32
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e00a      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80082e0:	2340      	movs	r3, #64	; 0x40
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e6:	e006      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80082e8:	2380      	movs	r3, #128	; 0x80
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ee:	e002      	b.n	80082f6 <UART_SetConfig+0x5a6>
 80082f0:	2380      	movs	r3, #128	; 0x80
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3f      	ldr	r2, [pc, #252]	; (80083f8 <UART_SetConfig+0x6a8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	f040 80f8 	bne.w	80084f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008302:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008306:	2b20      	cmp	r3, #32
 8008308:	dc46      	bgt.n	8008398 <UART_SetConfig+0x648>
 800830a:	2b02      	cmp	r3, #2
 800830c:	f2c0 8082 	blt.w	8008414 <UART_SetConfig+0x6c4>
 8008310:	3b02      	subs	r3, #2
 8008312:	2b1e      	cmp	r3, #30
 8008314:	d87e      	bhi.n	8008414 <UART_SetConfig+0x6c4>
 8008316:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0x5cc>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	0800839f 	.word	0x0800839f
 8008320:	08008415 	.word	0x08008415
 8008324:	080083a7 	.word	0x080083a7
 8008328:	08008415 	.word	0x08008415
 800832c:	08008415 	.word	0x08008415
 8008330:	08008415 	.word	0x08008415
 8008334:	080083b7 	.word	0x080083b7
 8008338:	08008415 	.word	0x08008415
 800833c:	08008415 	.word	0x08008415
 8008340:	08008415 	.word	0x08008415
 8008344:	08008415 	.word	0x08008415
 8008348:	08008415 	.word	0x08008415
 800834c:	08008415 	.word	0x08008415
 8008350:	08008415 	.word	0x08008415
 8008354:	080083c7 	.word	0x080083c7
 8008358:	08008415 	.word	0x08008415
 800835c:	08008415 	.word	0x08008415
 8008360:	08008415 	.word	0x08008415
 8008364:	08008415 	.word	0x08008415
 8008368:	08008415 	.word	0x08008415
 800836c:	08008415 	.word	0x08008415
 8008370:	08008415 	.word	0x08008415
 8008374:	08008415 	.word	0x08008415
 8008378:	08008415 	.word	0x08008415
 800837c:	08008415 	.word	0x08008415
 8008380:	08008415 	.word	0x08008415
 8008384:	08008415 	.word	0x08008415
 8008388:	08008415 	.word	0x08008415
 800838c:	08008415 	.word	0x08008415
 8008390:	08008415 	.word	0x08008415
 8008394:	08008407 	.word	0x08008407
 8008398:	2b40      	cmp	r3, #64	; 0x40
 800839a:	d037      	beq.n	800840c <UART_SetConfig+0x6bc>
 800839c:	e03a      	b.n	8008414 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800839e:	f7fe fbfd 	bl	8006b9c <HAL_RCCEx_GetD3PCLK1Freq>
 80083a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083a4:	e03c      	b.n	8008420 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fc0c 	bl	8006bc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083b4:	e034      	b.n	8008420 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b6:	f107 0318 	add.w	r3, r7, #24
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fd58 	bl	8006e70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c4:	e02c      	b.n	8008420 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083c6:	4b09      	ldr	r3, [pc, #36]	; (80083ec <UART_SetConfig+0x69c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d016      	beq.n	8008400 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083d2:	4b06      	ldr	r3, [pc, #24]	; (80083ec <UART_SetConfig+0x69c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	08db      	lsrs	r3, r3, #3
 80083d8:	f003 0303 	and.w	r3, r3, #3
 80083dc:	4a07      	ldr	r2, [pc, #28]	; (80083fc <UART_SetConfig+0x6ac>)
 80083de:	fa22 f303 	lsr.w	r3, r2, r3
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083e4:	e01c      	b.n	8008420 <UART_SetConfig+0x6d0>
 80083e6:	bf00      	nop
 80083e8:	40011400 	.word	0x40011400
 80083ec:	58024400 	.word	0x58024400
 80083f0:	40007800 	.word	0x40007800
 80083f4:	40007c00 	.word	0x40007c00
 80083f8:	58000c00 	.word	0x58000c00
 80083fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008400:	4b9d      	ldr	r3, [pc, #628]	; (8008678 <UART_SetConfig+0x928>)
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008404:	e00c      	b.n	8008420 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008406:	4b9d      	ldr	r3, [pc, #628]	; (800867c <UART_SetConfig+0x92c>)
 8008408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800840a:	e009      	b.n	8008420 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800840c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008412:	e005      	b.n	8008420 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800841e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 81de 	beq.w	80087e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	4a94      	ldr	r2, [pc, #592]	; (8008680 <UART_SetConfig+0x930>)
 800842e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008432:	461a      	mov	r2, r3
 8008434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008436:	fbb3 f3f2 	udiv	r3, r3, r2
 800843a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	4613      	mov	r3, r2
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	4413      	add	r3, r2
 8008446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008448:	429a      	cmp	r2, r3
 800844a:	d305      	bcc.n	8008458 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008454:	429a      	cmp	r2, r3
 8008456:	d903      	bls.n	8008460 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800845e:	e1c1      	b.n	80087e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008462:	2200      	movs	r2, #0
 8008464:	60bb      	str	r3, [r7, #8]
 8008466:	60fa      	str	r2, [r7, #12]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	4a84      	ldr	r2, [pc, #528]	; (8008680 <UART_SetConfig+0x930>)
 800846e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008472:	b29b      	uxth	r3, r3
 8008474:	2200      	movs	r2, #0
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	607a      	str	r2, [r7, #4]
 800847a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800847e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008482:	f7f7 ff7d 	bl	8000380 <__aeabi_uldivmod>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4610      	mov	r0, r2
 800848c:	4619      	mov	r1, r3
 800848e:	f04f 0200 	mov.w	r2, #0
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	020b      	lsls	r3, r1, #8
 8008498:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800849c:	0202      	lsls	r2, r0, #8
 800849e:	6979      	ldr	r1, [r7, #20]
 80084a0:	6849      	ldr	r1, [r1, #4]
 80084a2:	0849      	lsrs	r1, r1, #1
 80084a4:	2000      	movs	r0, #0
 80084a6:	460c      	mov	r4, r1
 80084a8:	4605      	mov	r5, r0
 80084aa:	eb12 0804 	adds.w	r8, r2, r4
 80084ae:	eb43 0905 	adc.w	r9, r3, r5
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	469a      	mov	sl, r3
 80084ba:	4693      	mov	fp, r2
 80084bc:	4652      	mov	r2, sl
 80084be:	465b      	mov	r3, fp
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	f7f7 ff5c 	bl	8000380 <__aeabi_uldivmod>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4613      	mov	r3, r2
 80084ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084d6:	d308      	bcc.n	80084ea <UART_SetConfig+0x79a>
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084de:	d204      	bcs.n	80084ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e6:	60da      	str	r2, [r3, #12]
 80084e8:	e17c      	b.n	80087e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084f0:	e178      	b.n	80087e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084fa:	f040 80c5 	bne.w	8008688 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80084fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008502:	2b20      	cmp	r3, #32
 8008504:	dc48      	bgt.n	8008598 <UART_SetConfig+0x848>
 8008506:	2b00      	cmp	r3, #0
 8008508:	db7b      	blt.n	8008602 <UART_SetConfig+0x8b2>
 800850a:	2b20      	cmp	r3, #32
 800850c:	d879      	bhi.n	8008602 <UART_SetConfig+0x8b2>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <UART_SetConfig+0x7c4>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	0800859f 	.word	0x0800859f
 8008518:	080085a7 	.word	0x080085a7
 800851c:	08008603 	.word	0x08008603
 8008520:	08008603 	.word	0x08008603
 8008524:	080085af 	.word	0x080085af
 8008528:	08008603 	.word	0x08008603
 800852c:	08008603 	.word	0x08008603
 8008530:	08008603 	.word	0x08008603
 8008534:	080085bf 	.word	0x080085bf
 8008538:	08008603 	.word	0x08008603
 800853c:	08008603 	.word	0x08008603
 8008540:	08008603 	.word	0x08008603
 8008544:	08008603 	.word	0x08008603
 8008548:	08008603 	.word	0x08008603
 800854c:	08008603 	.word	0x08008603
 8008550:	08008603 	.word	0x08008603
 8008554:	080085cf 	.word	0x080085cf
 8008558:	08008603 	.word	0x08008603
 800855c:	08008603 	.word	0x08008603
 8008560:	08008603 	.word	0x08008603
 8008564:	08008603 	.word	0x08008603
 8008568:	08008603 	.word	0x08008603
 800856c:	08008603 	.word	0x08008603
 8008570:	08008603 	.word	0x08008603
 8008574:	08008603 	.word	0x08008603
 8008578:	08008603 	.word	0x08008603
 800857c:	08008603 	.word	0x08008603
 8008580:	08008603 	.word	0x08008603
 8008584:	08008603 	.word	0x08008603
 8008588:	08008603 	.word	0x08008603
 800858c:	08008603 	.word	0x08008603
 8008590:	08008603 	.word	0x08008603
 8008594:	080085f5 	.word	0x080085f5
 8008598:	2b40      	cmp	r3, #64	; 0x40
 800859a:	d02e      	beq.n	80085fa <UART_SetConfig+0x8aa>
 800859c:	e031      	b.n	8008602 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800859e:	f7fd f8c7 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 80085a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085a4:	e033      	b.n	800860e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085a6:	f7fd f8d9 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 80085aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085ac:	e02f      	b.n	800860e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fb08 	bl	8006bc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085bc:	e027      	b.n	800860e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085be:	f107 0318 	add.w	r3, r7, #24
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fc54 	bl	8006e70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085cc:	e01f      	b.n	800860e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ce:	4b2d      	ldr	r3, [pc, #180]	; (8008684 <UART_SetConfig+0x934>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d009      	beq.n	80085ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085da:	4b2a      	ldr	r3, [pc, #168]	; (8008684 <UART_SetConfig+0x934>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	08db      	lsrs	r3, r3, #3
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	4a24      	ldr	r2, [pc, #144]	; (8008678 <UART_SetConfig+0x928>)
 80085e6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085ec:	e00f      	b.n	800860e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80085ee:	4b22      	ldr	r3, [pc, #136]	; (8008678 <UART_SetConfig+0x928>)
 80085f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f2:	e00c      	b.n	800860e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085f4:	4b21      	ldr	r3, [pc, #132]	; (800867c <UART_SetConfig+0x92c>)
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f8:	e009      	b.n	800860e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008600:	e005      	b.n	800860e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800860c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800860e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80e7 	beq.w	80087e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	4a19      	ldr	r2, [pc, #100]	; (8008680 <UART_SetConfig+0x930>)
 800861c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008620:	461a      	mov	r2, r3
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	fbb3 f3f2 	udiv	r3, r3, r2
 8008628:	005a      	lsls	r2, r3, #1
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	085b      	lsrs	r3, r3, #1
 8008630:	441a      	add	r2, r3
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	fbb2 f3f3 	udiv	r3, r2, r3
 800863a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	2b0f      	cmp	r3, #15
 8008640:	d916      	bls.n	8008670 <UART_SetConfig+0x920>
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008648:	d212      	bcs.n	8008670 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	b29b      	uxth	r3, r3
 800864e:	f023 030f 	bic.w	r3, r3, #15
 8008652:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	085b      	lsrs	r3, r3, #1
 8008658:	b29b      	uxth	r3, r3
 800865a:	f003 0307 	and.w	r3, r3, #7
 800865e:	b29a      	uxth	r2, r3
 8008660:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008662:	4313      	orrs	r3, r2
 8008664:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800866c:	60da      	str	r2, [r3, #12]
 800866e:	e0b9      	b.n	80087e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008676:	e0b5      	b.n	80087e4 <UART_SetConfig+0xa94>
 8008678:	03d09000 	.word	0x03d09000
 800867c:	003d0900 	.word	0x003d0900
 8008680:	08009f18 	.word	0x08009f18
 8008684:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008688:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800868c:	2b20      	cmp	r3, #32
 800868e:	dc49      	bgt.n	8008724 <UART_SetConfig+0x9d4>
 8008690:	2b00      	cmp	r3, #0
 8008692:	db7c      	blt.n	800878e <UART_SetConfig+0xa3e>
 8008694:	2b20      	cmp	r3, #32
 8008696:	d87a      	bhi.n	800878e <UART_SetConfig+0xa3e>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <UART_SetConfig+0x950>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	0800872b 	.word	0x0800872b
 80086a4:	08008733 	.word	0x08008733
 80086a8:	0800878f 	.word	0x0800878f
 80086ac:	0800878f 	.word	0x0800878f
 80086b0:	0800873b 	.word	0x0800873b
 80086b4:	0800878f 	.word	0x0800878f
 80086b8:	0800878f 	.word	0x0800878f
 80086bc:	0800878f 	.word	0x0800878f
 80086c0:	0800874b 	.word	0x0800874b
 80086c4:	0800878f 	.word	0x0800878f
 80086c8:	0800878f 	.word	0x0800878f
 80086cc:	0800878f 	.word	0x0800878f
 80086d0:	0800878f 	.word	0x0800878f
 80086d4:	0800878f 	.word	0x0800878f
 80086d8:	0800878f 	.word	0x0800878f
 80086dc:	0800878f 	.word	0x0800878f
 80086e0:	0800875b 	.word	0x0800875b
 80086e4:	0800878f 	.word	0x0800878f
 80086e8:	0800878f 	.word	0x0800878f
 80086ec:	0800878f 	.word	0x0800878f
 80086f0:	0800878f 	.word	0x0800878f
 80086f4:	0800878f 	.word	0x0800878f
 80086f8:	0800878f 	.word	0x0800878f
 80086fc:	0800878f 	.word	0x0800878f
 8008700:	0800878f 	.word	0x0800878f
 8008704:	0800878f 	.word	0x0800878f
 8008708:	0800878f 	.word	0x0800878f
 800870c:	0800878f 	.word	0x0800878f
 8008710:	0800878f 	.word	0x0800878f
 8008714:	0800878f 	.word	0x0800878f
 8008718:	0800878f 	.word	0x0800878f
 800871c:	0800878f 	.word	0x0800878f
 8008720:	08008781 	.word	0x08008781
 8008724:	2b40      	cmp	r3, #64	; 0x40
 8008726:	d02e      	beq.n	8008786 <UART_SetConfig+0xa36>
 8008728:	e031      	b.n	800878e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800872a:	f7fd f801 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 800872e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008730:	e033      	b.n	800879a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008732:	f7fd f813 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 8008736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008738:	e02f      	b.n	800879a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fa42 	bl	8006bc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008748:	e027      	b.n	800879a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800874a:	f107 0318 	add.w	r3, r7, #24
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fb8e 	bl	8006e70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008758:	e01f      	b.n	800879a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800875a:	4b2d      	ldr	r3, [pc, #180]	; (8008810 <UART_SetConfig+0xac0>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008766:	4b2a      	ldr	r3, [pc, #168]	; (8008810 <UART_SetConfig+0xac0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	08db      	lsrs	r3, r3, #3
 800876c:	f003 0303 	and.w	r3, r3, #3
 8008770:	4a28      	ldr	r2, [pc, #160]	; (8008814 <UART_SetConfig+0xac4>)
 8008772:	fa22 f303 	lsr.w	r3, r2, r3
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008778:	e00f      	b.n	800879a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800877a:	4b26      	ldr	r3, [pc, #152]	; (8008814 <UART_SetConfig+0xac4>)
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800877e:	e00c      	b.n	800879a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008780:	4b25      	ldr	r3, [pc, #148]	; (8008818 <UART_SetConfig+0xac8>)
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008784:	e009      	b.n	800879a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800878c:	e005      	b.n	800879a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008798:	bf00      	nop
    }

    if (pclk != 0U)
 800879a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d021      	beq.n	80087e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	4a1d      	ldr	r2, [pc, #116]	; (800881c <UART_SetConfig+0xacc>)
 80087a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	441a      	add	r2, r3
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	2b0f      	cmp	r3, #15
 80087c8:	d909      	bls.n	80087de <UART_SetConfig+0xa8e>
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d0:	d205      	bcs.n	80087de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60da      	str	r2, [r3, #12]
 80087dc:	e002      	b.n	80087e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2200      	movs	r2, #0
 80087f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2200      	movs	r2, #0
 80087fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008800:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008804:	4618      	mov	r0, r3
 8008806:	3748      	adds	r7, #72	; 0x48
 8008808:	46bd      	mov	sp, r7
 800880a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800880e:	bf00      	nop
 8008810:	58024400 	.word	0x58024400
 8008814:	03d09000 	.word	0x03d09000
 8008818:	003d0900 	.word	0x003d0900
 800881c:	08009f18 	.word	0x08009f18

08008820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01a      	beq.n	8008936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800891e:	d10a      	bne.n	8008936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	605a      	str	r2, [r3, #4]
  }
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b098      	sub	sp, #96	; 0x60
 8008968:	af02      	add	r7, sp, #8
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008974:	f7f8 ff2c 	bl	80017d0 <HAL_GetTick>
 8008978:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b08      	cmp	r3, #8
 8008986:	d12f      	bne.n	80089e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008990:	2200      	movs	r2, #0
 8008992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f88e 	bl	8008ab8 <UART_WaitOnFlagUntilTimeout>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d022      	beq.n	80089e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089b6:	653b      	str	r3, [r7, #80]	; 0x50
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	461a      	mov	r2, r3
 80089be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c0:	647b      	str	r3, [r7, #68]	; 0x44
 80089c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e6      	bne.n	80089a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e063      	b.n	8008ab0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d149      	bne.n	8008a8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089fe:	2200      	movs	r2, #0
 8008a00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f857 	bl	8008ab8 <UART_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d03c      	beq.n	8008a8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a30:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e6      	bne.n	8008a10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3308      	adds	r3, #8
 8008a48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f023 0301 	bic.w	r3, r3, #1
 8008a58:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a62:	61fa      	str	r2, [r7, #28]
 8008a64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	69b9      	ldr	r1, [r7, #24]
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	617b      	str	r3, [r7, #20]
   return(result);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e5      	bne.n	8008a42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e012      	b.n	8008ab0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3758      	adds	r7, #88	; 0x58
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac8:	e049      	b.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	d045      	beq.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad2:	f7f8 fe7d 	bl	80017d0 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d302      	bcc.n	8008ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e048      	b.n	8008b7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0304 	and.w	r3, r3, #4
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d031      	beq.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d110      	bne.n	8008b2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f839 	bl	8008b88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2208      	movs	r2, #8
 8008b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e029      	b.n	8008b7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b38:	d111      	bne.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 f81f 	bl	8008b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e00f      	b.n	8008b7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	69da      	ldr	r2, [r3, #28]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4013      	ands	r3, r2
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	bf0c      	ite	eq
 8008b6e:	2301      	moveq	r3, #1
 8008b70:	2300      	movne	r3, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	461a      	mov	r2, r3
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d0a6      	beq.n	8008aca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b095      	sub	sp, #84	; 0x54
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bae:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	4b1e      	ldr	r3, [pc, #120]	; (8008c50 <UART_EndRxTransfer+0xc8>)
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e5      	bne.n	8008bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d118      	bne.n	8008c30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f023 0310 	bic.w	r3, r3, #16
 8008c12:	647b      	str	r3, [r7, #68]	; 0x44
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c1c:	61bb      	str	r3, [r7, #24]
 8008c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c20:	6979      	ldr	r1, [r7, #20]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	e841 2300 	strex	r3, r2, [r1]
 8008c28:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e6      	bne.n	8008bfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c44:	bf00      	nop
 8008c46:	3754      	adds	r7, #84	; 0x54
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	effffffe 	.word	0xeffffffe

08008c54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff f856 	bl	8007d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	61bb      	str	r3, [r7, #24]
 8008ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	6979      	ldr	r1, [r7, #20]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e6      	bne.n	8008c88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff f821 	bl	8007d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cce:	bf00      	nop
 8008cd0:	3720      	adds	r7, #32
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008cde:	bf00      	nop
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b085      	sub	sp, #20
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e027      	b.n	8008d78 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2224      	movs	r2, #36	; 0x24
 8008d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0201 	bic.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e02d      	b.n	8008df8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2224      	movs	r2, #36	; 0x24
 8008da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 0201 	bic.w	r2, r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f84f 	bl	8008e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e02d      	b.n	8008e74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2224      	movs	r2, #36	; 0x24
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0201 	bic.w	r2, r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f811 	bl	8008e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d108      	bne.n	8008e9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e9c:	e031      	b.n	8008f02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e9e:	2310      	movs	r3, #16
 8008ea0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ea2:	2310      	movs	r3, #16
 8008ea4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	0e5b      	lsrs	r3, r3, #25
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	0f5b      	lsrs	r3, r3, #29
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	f003 0307 	and.w	r3, r3, #7
 8008ec4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	7b3a      	ldrb	r2, [r7, #12]
 8008eca:	4911      	ldr	r1, [pc, #68]	; (8008f10 <UARTEx_SetNbDataToProcess+0x94>)
 8008ecc:	5c8a      	ldrb	r2, [r1, r2]
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ed2:	7b3a      	ldrb	r2, [r7, #12]
 8008ed4:	490f      	ldr	r1, [pc, #60]	; (8008f14 <UARTEx_SetNbDataToProcess+0x98>)
 8008ed6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ed8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	7b7a      	ldrb	r2, [r7, #13]
 8008ee8:	4909      	ldr	r1, [pc, #36]	; (8008f10 <UARTEx_SetNbDataToProcess+0x94>)
 8008eea:	5c8a      	ldrb	r2, [r1, r2]
 8008eec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ef0:	7b7a      	ldrb	r2, [r7, #13]
 8008ef2:	4908      	ldr	r1, [pc, #32]	; (8008f14 <UARTEx_SetNbDataToProcess+0x98>)
 8008ef4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ef6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f02:	bf00      	nop
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	08009f30 	.word	0x08009f30
 8008f14:	08009f38 	.word	0x08009f38

08008f18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f18:	b084      	sub	sp, #16
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	f107 001c 	add.w	r0, r7, #28
 8008f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d120      	bne.n	8008f72 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <USB_CoreInit+0xd4>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d105      	bne.n	8008f66 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 faac 	bl	80094c4 <USB_CoreReset>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
 8008f70:	e01a      	b.n	8008fa8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 faa0 	bl	80094c4 <USB_CoreReset>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	639a      	str	r2, [r3, #56]	; 0x38
 8008f9a:	e005      	b.n	8008fa8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d116      	bne.n	8008fdc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fbc:	4b0c      	ldr	r3, [pc, #48]	; (8008ff0 <USB_CoreInit+0xd8>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f043 0206 	orr.w	r2, r3, #6
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f043 0220 	orr.w	r2, r3, #32
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fe8:	b004      	add	sp, #16
 8008fea:	4770      	bx	lr
 8008fec:	ffbdffbf 	.word	0xffbdffbf
 8008ff0:	03ee0000 	.word	0x03ee0000

08008ff4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f023 0201 	bic.w	r2, r3, #1
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d115      	bne.n	8009064 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009044:	2001      	movs	r0, #1
 8009046:	f7f8 fbcf 	bl	80017e8 <HAL_Delay>
      ms++;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3301      	adds	r3, #1
 800904e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fa29 	bl	80094a8 <USB_GetMode>
 8009056:	4603      	mov	r3, r0
 8009058:	2b01      	cmp	r3, #1
 800905a:	d01e      	beq.n	800909a <USB_SetCurrentMode+0x84>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b31      	cmp	r3, #49	; 0x31
 8009060:	d9f0      	bls.n	8009044 <USB_SetCurrentMode+0x2e>
 8009062:	e01a      	b.n	800909a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d115      	bne.n	8009096 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009076:	2001      	movs	r0, #1
 8009078:	f7f8 fbb6 	bl	80017e8 <HAL_Delay>
      ms++;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3301      	adds	r3, #1
 8009080:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fa10 	bl	80094a8 <USB_GetMode>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <USB_SetCurrentMode+0x84>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b31      	cmp	r3, #49	; 0x31
 8009092:	d9f0      	bls.n	8009076 <USB_SetCurrentMode+0x60>
 8009094:	e001      	b.n	800909a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e005      	b.n	80090a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b32      	cmp	r3, #50	; 0x32
 800909e:	d101      	bne.n	80090a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090b0:	b084      	sub	sp, #16
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090ca:	2300      	movs	r3, #0
 80090cc:	613b      	str	r3, [r7, #16]
 80090ce:	e009      	b.n	80090e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	3340      	adds	r3, #64	; 0x40
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	2200      	movs	r2, #0
 80090dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3301      	adds	r3, #1
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	2b0e      	cmp	r3, #14
 80090e8:	d9f2      	bls.n	80090d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d11c      	bne.n	800912a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090fe:	f043 0302 	orr.w	r3, r3, #2
 8009102:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	e005      	b.n	8009136 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800913c:	461a      	mov	r2, r3
 800913e:	2300      	movs	r3, #0
 8009140:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009148:	4619      	mov	r1, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009150:	461a      	mov	r2, r3
 8009152:	680b      	ldr	r3, [r1, #0]
 8009154:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	2b01      	cmp	r3, #1
 800915a:	d10c      	bne.n	8009176 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	2b00      	cmp	r3, #0
 8009160:	d104      	bne.n	800916c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009162:	2100      	movs	r1, #0
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f965 	bl	8009434 <USB_SetDevSpeed>
 800916a:	e008      	b.n	800917e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800916c:	2101      	movs	r1, #1
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f960 	bl	8009434 <USB_SetDevSpeed>
 8009174:	e003      	b.n	800917e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009176:	2103      	movs	r1, #3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f95b 	bl	8009434 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800917e:	2110      	movs	r1, #16
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f8f3 	bl	800936c <USB_FlushTxFifo>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f91f 	bl	80093d4 <USB_FlushRxFifo>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a6:	461a      	mov	r2, r3
 80091a8:	2300      	movs	r3, #0
 80091aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b2:	461a      	mov	r2, r3
 80091b4:	2300      	movs	r3, #0
 80091b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091be:	461a      	mov	r2, r3
 80091c0:	2300      	movs	r3, #0
 80091c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091c4:	2300      	movs	r3, #0
 80091c6:	613b      	str	r3, [r7, #16]
 80091c8:	e043      	b.n	8009252 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e0:	d118      	bne.n	8009214 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	461a      	mov	r2, r3
 80091f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	e013      	b.n	8009226 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920a:	461a      	mov	r2, r3
 800920c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	e008      	b.n	8009226 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009220:	461a      	mov	r2, r3
 8009222:	2300      	movs	r3, #0
 8009224:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009232:	461a      	mov	r2, r3
 8009234:	2300      	movs	r3, #0
 8009236:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	461a      	mov	r2, r3
 8009246:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800924a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	3301      	adds	r3, #1
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	429a      	cmp	r2, r3
 8009258:	d3b7      	bcc.n	80091ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800925a:	2300      	movs	r3, #0
 800925c:	613b      	str	r3, [r7, #16]
 800925e:	e043      	b.n	80092e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009276:	d118      	bne.n	80092aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928a:	461a      	mov	r2, r3
 800928c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	e013      	b.n	80092bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a0:	461a      	mov	r2, r3
 80092a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	e008      	b.n	80092bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	461a      	mov	r2, r3
 80092b8:	2300      	movs	r3, #0
 80092ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c8:	461a      	mov	r2, r3
 80092ca:	2300      	movs	r3, #0
 80092cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092da:	461a      	mov	r2, r3
 80092dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	3301      	adds	r3, #1
 80092e6:	613b      	str	r3, [r7, #16]
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d3b7      	bcc.n	8009260 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009302:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009310:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d105      	bne.n	8009324 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	f043 0210 	orr.w	r2, r3, #16
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	699a      	ldr	r2, [r3, #24]
 8009328:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <USB_DevInit+0x2b4>)
 800932a:	4313      	orrs	r3, r2
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d005      	beq.n	8009342 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	f043 0208 	orr.w	r2, r3, #8
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009344:	2b01      	cmp	r3, #1
 8009346:	d105      	bne.n	8009354 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	699a      	ldr	r2, [r3, #24]
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <USB_DevInit+0x2b8>)
 800934e:	4313      	orrs	r3, r2
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009354:	7dfb      	ldrb	r3, [r7, #23]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009360:	b004      	add	sp, #16
 8009362:	4770      	bx	lr
 8009364:	803c3800 	.word	0x803c3800
 8009368:	40000004 	.word	0x40000004

0800936c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4a13      	ldr	r2, [pc, #76]	; (80093d0 <USB_FlushTxFifo+0x64>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d901      	bls.n	800938c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e01b      	b.n	80093c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	daf2      	bge.n	800937a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	019b      	lsls	r3, r3, #6
 800939c:	f043 0220 	orr.w	r2, r3, #32
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3301      	adds	r3, #1
 80093a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4a08      	ldr	r2, [pc, #32]	; (80093d0 <USB_FlushTxFifo+0x64>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d901      	bls.n	80093b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e006      	b.n	80093c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0320 	and.w	r3, r3, #32
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d0f0      	beq.n	80093a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	00030d40 	.word	0x00030d40

080093d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3301      	adds	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4a11      	ldr	r2, [pc, #68]	; (8009430 <USB_FlushRxFifo+0x5c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d901      	bls.n	80093f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e018      	b.n	8009424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	daf2      	bge.n	80093e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2210      	movs	r2, #16
 8009402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4a08      	ldr	r2, [pc, #32]	; (8009430 <USB_FlushRxFifo+0x5c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d901      	bls.n	8009416 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e006      	b.n	8009424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	2b10      	cmp	r3, #16
 8009420:	d0f0      	beq.n	8009404 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	00030d40 	.word	0x00030d40

08009434 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009454:	4313      	orrs	r3, r2
 8009456:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009466:	b480      	push	{r7}
 8009468:	b085      	sub	sp, #20
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009480:	f023 0303 	bic.w	r3, r3, #3
 8009484:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009494:	f043 0302 	orr.w	r3, r3, #2
 8009498:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	f003 0301 	and.w	r3, r3, #1
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4a13      	ldr	r2, [pc, #76]	; (8009528 <USB_CoreReset+0x64>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d901      	bls.n	80094e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e01b      	b.n	800951a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	daf2      	bge.n	80094d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	f043 0201 	orr.w	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3301      	adds	r3, #1
 80094fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4a09      	ldr	r2, [pc, #36]	; (8009528 <USB_CoreReset+0x64>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d901      	bls.n	800950c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e006      	b.n	800951a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b01      	cmp	r3, #1
 8009516:	d0f0      	beq.n	80094fa <USB_CoreReset+0x36>

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	00030d40 	.word	0x00030d40

0800952c <siprintf>:
 800952c:	b40e      	push	{r1, r2, r3}
 800952e:	b500      	push	{lr}
 8009530:	b09c      	sub	sp, #112	; 0x70
 8009532:	ab1d      	add	r3, sp, #116	; 0x74
 8009534:	9002      	str	r0, [sp, #8]
 8009536:	9006      	str	r0, [sp, #24]
 8009538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800953c:	4809      	ldr	r0, [pc, #36]	; (8009564 <siprintf+0x38>)
 800953e:	9107      	str	r1, [sp, #28]
 8009540:	9104      	str	r1, [sp, #16]
 8009542:	4909      	ldr	r1, [pc, #36]	; (8009568 <siprintf+0x3c>)
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	9105      	str	r1, [sp, #20]
 800954a:	6800      	ldr	r0, [r0, #0]
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	a902      	add	r1, sp, #8
 8009550:	f000 f9a0 	bl	8009894 <_svfiprintf_r>
 8009554:	9b02      	ldr	r3, [sp, #8]
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	b01c      	add	sp, #112	; 0x70
 800955c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009560:	b003      	add	sp, #12
 8009562:	4770      	bx	lr
 8009564:	24000060 	.word	0x24000060
 8009568:	ffff0208 	.word	0xffff0208

0800956c <memset>:
 800956c:	4402      	add	r2, r0
 800956e:	4603      	mov	r3, r0
 8009570:	4293      	cmp	r3, r2
 8009572:	d100      	bne.n	8009576 <memset+0xa>
 8009574:	4770      	bx	lr
 8009576:	f803 1b01 	strb.w	r1, [r3], #1
 800957a:	e7f9      	b.n	8009570 <memset+0x4>

0800957c <__errno>:
 800957c:	4b01      	ldr	r3, [pc, #4]	; (8009584 <__errno+0x8>)
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	24000060 	.word	0x24000060

08009588 <__libc_init_array>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	4d0d      	ldr	r5, [pc, #52]	; (80095c0 <__libc_init_array+0x38>)
 800958c:	4c0d      	ldr	r4, [pc, #52]	; (80095c4 <__libc_init_array+0x3c>)
 800958e:	1b64      	subs	r4, r4, r5
 8009590:	10a4      	asrs	r4, r4, #2
 8009592:	2600      	movs	r6, #0
 8009594:	42a6      	cmp	r6, r4
 8009596:	d109      	bne.n	80095ac <__libc_init_array+0x24>
 8009598:	4d0b      	ldr	r5, [pc, #44]	; (80095c8 <__libc_init_array+0x40>)
 800959a:	4c0c      	ldr	r4, [pc, #48]	; (80095cc <__libc_init_array+0x44>)
 800959c:	f000 fc6a 	bl	8009e74 <_init>
 80095a0:	1b64      	subs	r4, r4, r5
 80095a2:	10a4      	asrs	r4, r4, #2
 80095a4:	2600      	movs	r6, #0
 80095a6:	42a6      	cmp	r6, r4
 80095a8:	d105      	bne.n	80095b6 <__libc_init_array+0x2e>
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b0:	4798      	blx	r3
 80095b2:	3601      	adds	r6, #1
 80095b4:	e7ee      	b.n	8009594 <__libc_init_array+0xc>
 80095b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ba:	4798      	blx	r3
 80095bc:	3601      	adds	r6, #1
 80095be:	e7f2      	b.n	80095a6 <__libc_init_array+0x1e>
 80095c0:	08009f7c 	.word	0x08009f7c
 80095c4:	08009f7c 	.word	0x08009f7c
 80095c8:	08009f7c 	.word	0x08009f7c
 80095cc:	08009f80 	.word	0x08009f80

080095d0 <__retarget_lock_acquire_recursive>:
 80095d0:	4770      	bx	lr

080095d2 <__retarget_lock_release_recursive>:
 80095d2:	4770      	bx	lr

080095d4 <memcpy>:
 80095d4:	440a      	add	r2, r1
 80095d6:	4291      	cmp	r1, r2
 80095d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095dc:	d100      	bne.n	80095e0 <memcpy+0xc>
 80095de:	4770      	bx	lr
 80095e0:	b510      	push	{r4, lr}
 80095e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ea:	4291      	cmp	r1, r2
 80095ec:	d1f9      	bne.n	80095e2 <memcpy+0xe>
 80095ee:	bd10      	pop	{r4, pc}

080095f0 <_free_r>:
 80095f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095f2:	2900      	cmp	r1, #0
 80095f4:	d044      	beq.n	8009680 <_free_r+0x90>
 80095f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095fa:	9001      	str	r0, [sp, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009602:	bfb8      	it	lt
 8009604:	18e4      	addlt	r4, r4, r3
 8009606:	f000 f8df 	bl	80097c8 <__malloc_lock>
 800960a:	4a1e      	ldr	r2, [pc, #120]	; (8009684 <_free_r+0x94>)
 800960c:	9801      	ldr	r0, [sp, #4]
 800960e:	6813      	ldr	r3, [r2, #0]
 8009610:	b933      	cbnz	r3, 8009620 <_free_r+0x30>
 8009612:	6063      	str	r3, [r4, #4]
 8009614:	6014      	str	r4, [r2, #0]
 8009616:	b003      	add	sp, #12
 8009618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800961c:	f000 b8da 	b.w	80097d4 <__malloc_unlock>
 8009620:	42a3      	cmp	r3, r4
 8009622:	d908      	bls.n	8009636 <_free_r+0x46>
 8009624:	6825      	ldr	r5, [r4, #0]
 8009626:	1961      	adds	r1, r4, r5
 8009628:	428b      	cmp	r3, r1
 800962a:	bf01      	itttt	eq
 800962c:	6819      	ldreq	r1, [r3, #0]
 800962e:	685b      	ldreq	r3, [r3, #4]
 8009630:	1949      	addeq	r1, r1, r5
 8009632:	6021      	streq	r1, [r4, #0]
 8009634:	e7ed      	b.n	8009612 <_free_r+0x22>
 8009636:	461a      	mov	r2, r3
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	b10b      	cbz	r3, 8009640 <_free_r+0x50>
 800963c:	42a3      	cmp	r3, r4
 800963e:	d9fa      	bls.n	8009636 <_free_r+0x46>
 8009640:	6811      	ldr	r1, [r2, #0]
 8009642:	1855      	adds	r5, r2, r1
 8009644:	42a5      	cmp	r5, r4
 8009646:	d10b      	bne.n	8009660 <_free_r+0x70>
 8009648:	6824      	ldr	r4, [r4, #0]
 800964a:	4421      	add	r1, r4
 800964c:	1854      	adds	r4, r2, r1
 800964e:	42a3      	cmp	r3, r4
 8009650:	6011      	str	r1, [r2, #0]
 8009652:	d1e0      	bne.n	8009616 <_free_r+0x26>
 8009654:	681c      	ldr	r4, [r3, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	6053      	str	r3, [r2, #4]
 800965a:	440c      	add	r4, r1
 800965c:	6014      	str	r4, [r2, #0]
 800965e:	e7da      	b.n	8009616 <_free_r+0x26>
 8009660:	d902      	bls.n	8009668 <_free_r+0x78>
 8009662:	230c      	movs	r3, #12
 8009664:	6003      	str	r3, [r0, #0]
 8009666:	e7d6      	b.n	8009616 <_free_r+0x26>
 8009668:	6825      	ldr	r5, [r4, #0]
 800966a:	1961      	adds	r1, r4, r5
 800966c:	428b      	cmp	r3, r1
 800966e:	bf04      	itt	eq
 8009670:	6819      	ldreq	r1, [r3, #0]
 8009672:	685b      	ldreq	r3, [r3, #4]
 8009674:	6063      	str	r3, [r4, #4]
 8009676:	bf04      	itt	eq
 8009678:	1949      	addeq	r1, r1, r5
 800967a:	6021      	streq	r1, [r4, #0]
 800967c:	6054      	str	r4, [r2, #4]
 800967e:	e7ca      	b.n	8009616 <_free_r+0x26>
 8009680:	b003      	add	sp, #12
 8009682:	bd30      	pop	{r4, r5, pc}
 8009684:	24000b14 	.word	0x24000b14

08009688 <sbrk_aligned>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	4e0e      	ldr	r6, [pc, #56]	; (80096c4 <sbrk_aligned+0x3c>)
 800968c:	460c      	mov	r4, r1
 800968e:	6831      	ldr	r1, [r6, #0]
 8009690:	4605      	mov	r5, r0
 8009692:	b911      	cbnz	r1, 800969a <sbrk_aligned+0x12>
 8009694:	f000 fba6 	bl	8009de4 <_sbrk_r>
 8009698:	6030      	str	r0, [r6, #0]
 800969a:	4621      	mov	r1, r4
 800969c:	4628      	mov	r0, r5
 800969e:	f000 fba1 	bl	8009de4 <_sbrk_r>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	d00a      	beq.n	80096bc <sbrk_aligned+0x34>
 80096a6:	1cc4      	adds	r4, r0, #3
 80096a8:	f024 0403 	bic.w	r4, r4, #3
 80096ac:	42a0      	cmp	r0, r4
 80096ae:	d007      	beq.n	80096c0 <sbrk_aligned+0x38>
 80096b0:	1a21      	subs	r1, r4, r0
 80096b2:	4628      	mov	r0, r5
 80096b4:	f000 fb96 	bl	8009de4 <_sbrk_r>
 80096b8:	3001      	adds	r0, #1
 80096ba:	d101      	bne.n	80096c0 <sbrk_aligned+0x38>
 80096bc:	f04f 34ff 	mov.w	r4, #4294967295
 80096c0:	4620      	mov	r0, r4
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
 80096c4:	24000b18 	.word	0x24000b18

080096c8 <_malloc_r>:
 80096c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096cc:	1ccd      	adds	r5, r1, #3
 80096ce:	f025 0503 	bic.w	r5, r5, #3
 80096d2:	3508      	adds	r5, #8
 80096d4:	2d0c      	cmp	r5, #12
 80096d6:	bf38      	it	cc
 80096d8:	250c      	movcc	r5, #12
 80096da:	2d00      	cmp	r5, #0
 80096dc:	4607      	mov	r7, r0
 80096de:	db01      	blt.n	80096e4 <_malloc_r+0x1c>
 80096e0:	42a9      	cmp	r1, r5
 80096e2:	d905      	bls.n	80096f0 <_malloc_r+0x28>
 80096e4:	230c      	movs	r3, #12
 80096e6:	603b      	str	r3, [r7, #0]
 80096e8:	2600      	movs	r6, #0
 80096ea:	4630      	mov	r0, r6
 80096ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097c4 <_malloc_r+0xfc>
 80096f4:	f000 f868 	bl	80097c8 <__malloc_lock>
 80096f8:	f8d8 3000 	ldr.w	r3, [r8]
 80096fc:	461c      	mov	r4, r3
 80096fe:	bb5c      	cbnz	r4, 8009758 <_malloc_r+0x90>
 8009700:	4629      	mov	r1, r5
 8009702:	4638      	mov	r0, r7
 8009704:	f7ff ffc0 	bl	8009688 <sbrk_aligned>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	4604      	mov	r4, r0
 800970c:	d155      	bne.n	80097ba <_malloc_r+0xf2>
 800970e:	f8d8 4000 	ldr.w	r4, [r8]
 8009712:	4626      	mov	r6, r4
 8009714:	2e00      	cmp	r6, #0
 8009716:	d145      	bne.n	80097a4 <_malloc_r+0xdc>
 8009718:	2c00      	cmp	r4, #0
 800971a:	d048      	beq.n	80097ae <_malloc_r+0xe6>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	4631      	mov	r1, r6
 8009720:	4638      	mov	r0, r7
 8009722:	eb04 0903 	add.w	r9, r4, r3
 8009726:	f000 fb5d 	bl	8009de4 <_sbrk_r>
 800972a:	4581      	cmp	r9, r0
 800972c:	d13f      	bne.n	80097ae <_malloc_r+0xe6>
 800972e:	6821      	ldr	r1, [r4, #0]
 8009730:	1a6d      	subs	r5, r5, r1
 8009732:	4629      	mov	r1, r5
 8009734:	4638      	mov	r0, r7
 8009736:	f7ff ffa7 	bl	8009688 <sbrk_aligned>
 800973a:	3001      	adds	r0, #1
 800973c:	d037      	beq.n	80097ae <_malloc_r+0xe6>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	442b      	add	r3, r5
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	f8d8 3000 	ldr.w	r3, [r8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d038      	beq.n	80097be <_malloc_r+0xf6>
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	42a2      	cmp	r2, r4
 8009750:	d12b      	bne.n	80097aa <_malloc_r+0xe2>
 8009752:	2200      	movs	r2, #0
 8009754:	605a      	str	r2, [r3, #4]
 8009756:	e00f      	b.n	8009778 <_malloc_r+0xb0>
 8009758:	6822      	ldr	r2, [r4, #0]
 800975a:	1b52      	subs	r2, r2, r5
 800975c:	d41f      	bmi.n	800979e <_malloc_r+0xd6>
 800975e:	2a0b      	cmp	r2, #11
 8009760:	d917      	bls.n	8009792 <_malloc_r+0xca>
 8009762:	1961      	adds	r1, r4, r5
 8009764:	42a3      	cmp	r3, r4
 8009766:	6025      	str	r5, [r4, #0]
 8009768:	bf18      	it	ne
 800976a:	6059      	strne	r1, [r3, #4]
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	bf08      	it	eq
 8009770:	f8c8 1000 	streq.w	r1, [r8]
 8009774:	5162      	str	r2, [r4, r5]
 8009776:	604b      	str	r3, [r1, #4]
 8009778:	4638      	mov	r0, r7
 800977a:	f104 060b 	add.w	r6, r4, #11
 800977e:	f000 f829 	bl	80097d4 <__malloc_unlock>
 8009782:	f026 0607 	bic.w	r6, r6, #7
 8009786:	1d23      	adds	r3, r4, #4
 8009788:	1af2      	subs	r2, r6, r3
 800978a:	d0ae      	beq.n	80096ea <_malloc_r+0x22>
 800978c:	1b9b      	subs	r3, r3, r6
 800978e:	50a3      	str	r3, [r4, r2]
 8009790:	e7ab      	b.n	80096ea <_malloc_r+0x22>
 8009792:	42a3      	cmp	r3, r4
 8009794:	6862      	ldr	r2, [r4, #4]
 8009796:	d1dd      	bne.n	8009754 <_malloc_r+0x8c>
 8009798:	f8c8 2000 	str.w	r2, [r8]
 800979c:	e7ec      	b.n	8009778 <_malloc_r+0xb0>
 800979e:	4623      	mov	r3, r4
 80097a0:	6864      	ldr	r4, [r4, #4]
 80097a2:	e7ac      	b.n	80096fe <_malloc_r+0x36>
 80097a4:	4634      	mov	r4, r6
 80097a6:	6876      	ldr	r6, [r6, #4]
 80097a8:	e7b4      	b.n	8009714 <_malloc_r+0x4c>
 80097aa:	4613      	mov	r3, r2
 80097ac:	e7cc      	b.n	8009748 <_malloc_r+0x80>
 80097ae:	230c      	movs	r3, #12
 80097b0:	603b      	str	r3, [r7, #0]
 80097b2:	4638      	mov	r0, r7
 80097b4:	f000 f80e 	bl	80097d4 <__malloc_unlock>
 80097b8:	e797      	b.n	80096ea <_malloc_r+0x22>
 80097ba:	6025      	str	r5, [r4, #0]
 80097bc:	e7dc      	b.n	8009778 <_malloc_r+0xb0>
 80097be:	605b      	str	r3, [r3, #4]
 80097c0:	deff      	udf	#255	; 0xff
 80097c2:	bf00      	nop
 80097c4:	24000b14 	.word	0x24000b14

080097c8 <__malloc_lock>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__malloc_lock+0x8>)
 80097ca:	f7ff bf01 	b.w	80095d0 <__retarget_lock_acquire_recursive>
 80097ce:	bf00      	nop
 80097d0:	24000b10 	.word	0x24000b10

080097d4 <__malloc_unlock>:
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__malloc_unlock+0x8>)
 80097d6:	f7ff befc 	b.w	80095d2 <__retarget_lock_release_recursive>
 80097da:	bf00      	nop
 80097dc:	24000b10 	.word	0x24000b10

080097e0 <__ssputs_r>:
 80097e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e4:	688e      	ldr	r6, [r1, #8]
 80097e6:	461f      	mov	r7, r3
 80097e8:	42be      	cmp	r6, r7
 80097ea:	680b      	ldr	r3, [r1, #0]
 80097ec:	4682      	mov	sl, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	4690      	mov	r8, r2
 80097f2:	d82c      	bhi.n	800984e <__ssputs_r+0x6e>
 80097f4:	898a      	ldrh	r2, [r1, #12]
 80097f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097fa:	d026      	beq.n	800984a <__ssputs_r+0x6a>
 80097fc:	6965      	ldr	r5, [r4, #20]
 80097fe:	6909      	ldr	r1, [r1, #16]
 8009800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009804:	eba3 0901 	sub.w	r9, r3, r1
 8009808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800980c:	1c7b      	adds	r3, r7, #1
 800980e:	444b      	add	r3, r9
 8009810:	106d      	asrs	r5, r5, #1
 8009812:	429d      	cmp	r5, r3
 8009814:	bf38      	it	cc
 8009816:	461d      	movcc	r5, r3
 8009818:	0553      	lsls	r3, r2, #21
 800981a:	d527      	bpl.n	800986c <__ssputs_r+0x8c>
 800981c:	4629      	mov	r1, r5
 800981e:	f7ff ff53 	bl	80096c8 <_malloc_r>
 8009822:	4606      	mov	r6, r0
 8009824:	b360      	cbz	r0, 8009880 <__ssputs_r+0xa0>
 8009826:	6921      	ldr	r1, [r4, #16]
 8009828:	464a      	mov	r2, r9
 800982a:	f7ff fed3 	bl	80095d4 <memcpy>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	6126      	str	r6, [r4, #16]
 800983c:	6165      	str	r5, [r4, #20]
 800983e:	444e      	add	r6, r9
 8009840:	eba5 0509 	sub.w	r5, r5, r9
 8009844:	6026      	str	r6, [r4, #0]
 8009846:	60a5      	str	r5, [r4, #8]
 8009848:	463e      	mov	r6, r7
 800984a:	42be      	cmp	r6, r7
 800984c:	d900      	bls.n	8009850 <__ssputs_r+0x70>
 800984e:	463e      	mov	r6, r7
 8009850:	6820      	ldr	r0, [r4, #0]
 8009852:	4632      	mov	r2, r6
 8009854:	4641      	mov	r1, r8
 8009856:	f000 faab 	bl	8009db0 <memmove>
 800985a:	68a3      	ldr	r3, [r4, #8]
 800985c:	1b9b      	subs	r3, r3, r6
 800985e:	60a3      	str	r3, [r4, #8]
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	4433      	add	r3, r6
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	2000      	movs	r0, #0
 8009868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986c:	462a      	mov	r2, r5
 800986e:	f000 fac9 	bl	8009e04 <_realloc_r>
 8009872:	4606      	mov	r6, r0
 8009874:	2800      	cmp	r0, #0
 8009876:	d1e0      	bne.n	800983a <__ssputs_r+0x5a>
 8009878:	6921      	ldr	r1, [r4, #16]
 800987a:	4650      	mov	r0, sl
 800987c:	f7ff feb8 	bl	80095f0 <_free_r>
 8009880:	230c      	movs	r3, #12
 8009882:	f8ca 3000 	str.w	r3, [sl]
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	f04f 30ff 	mov.w	r0, #4294967295
 8009892:	e7e9      	b.n	8009868 <__ssputs_r+0x88>

08009894 <_svfiprintf_r>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	4698      	mov	r8, r3
 800989a:	898b      	ldrh	r3, [r1, #12]
 800989c:	061b      	lsls	r3, r3, #24
 800989e:	b09d      	sub	sp, #116	; 0x74
 80098a0:	4607      	mov	r7, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	4614      	mov	r4, r2
 80098a6:	d50e      	bpl.n	80098c6 <_svfiprintf_r+0x32>
 80098a8:	690b      	ldr	r3, [r1, #16]
 80098aa:	b963      	cbnz	r3, 80098c6 <_svfiprintf_r+0x32>
 80098ac:	2140      	movs	r1, #64	; 0x40
 80098ae:	f7ff ff0b 	bl	80096c8 <_malloc_r>
 80098b2:	6028      	str	r0, [r5, #0]
 80098b4:	6128      	str	r0, [r5, #16]
 80098b6:	b920      	cbnz	r0, 80098c2 <_svfiprintf_r+0x2e>
 80098b8:	230c      	movs	r3, #12
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	e0d0      	b.n	8009a64 <_svfiprintf_r+0x1d0>
 80098c2:	2340      	movs	r3, #64	; 0x40
 80098c4:	616b      	str	r3, [r5, #20]
 80098c6:	2300      	movs	r3, #0
 80098c8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ca:	2320      	movs	r3, #32
 80098cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098d4:	2330      	movs	r3, #48	; 0x30
 80098d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a7c <_svfiprintf_r+0x1e8>
 80098da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098de:	f04f 0901 	mov.w	r9, #1
 80098e2:	4623      	mov	r3, r4
 80098e4:	469a      	mov	sl, r3
 80098e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ea:	b10a      	cbz	r2, 80098f0 <_svfiprintf_r+0x5c>
 80098ec:	2a25      	cmp	r2, #37	; 0x25
 80098ee:	d1f9      	bne.n	80098e4 <_svfiprintf_r+0x50>
 80098f0:	ebba 0b04 	subs.w	fp, sl, r4
 80098f4:	d00b      	beq.n	800990e <_svfiprintf_r+0x7a>
 80098f6:	465b      	mov	r3, fp
 80098f8:	4622      	mov	r2, r4
 80098fa:	4629      	mov	r1, r5
 80098fc:	4638      	mov	r0, r7
 80098fe:	f7ff ff6f 	bl	80097e0 <__ssputs_r>
 8009902:	3001      	adds	r0, #1
 8009904:	f000 80a9 	beq.w	8009a5a <_svfiprintf_r+0x1c6>
 8009908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800990a:	445a      	add	r2, fp
 800990c:	9209      	str	r2, [sp, #36]	; 0x24
 800990e:	f89a 3000 	ldrb.w	r3, [sl]
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 80a1 	beq.w	8009a5a <_svfiprintf_r+0x1c6>
 8009918:	2300      	movs	r3, #0
 800991a:	f04f 32ff 	mov.w	r2, #4294967295
 800991e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009922:	f10a 0a01 	add.w	sl, sl, #1
 8009926:	9304      	str	r3, [sp, #16]
 8009928:	9307      	str	r3, [sp, #28]
 800992a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800992e:	931a      	str	r3, [sp, #104]	; 0x68
 8009930:	4654      	mov	r4, sl
 8009932:	2205      	movs	r2, #5
 8009934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009938:	4850      	ldr	r0, [pc, #320]	; (8009a7c <_svfiprintf_r+0x1e8>)
 800993a:	f7f6 fcd1 	bl	80002e0 <memchr>
 800993e:	9a04      	ldr	r2, [sp, #16]
 8009940:	b9d8      	cbnz	r0, 800997a <_svfiprintf_r+0xe6>
 8009942:	06d0      	lsls	r0, r2, #27
 8009944:	bf44      	itt	mi
 8009946:	2320      	movmi	r3, #32
 8009948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800994c:	0711      	lsls	r1, r2, #28
 800994e:	bf44      	itt	mi
 8009950:	232b      	movmi	r3, #43	; 0x2b
 8009952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009956:	f89a 3000 	ldrb.w	r3, [sl]
 800995a:	2b2a      	cmp	r3, #42	; 0x2a
 800995c:	d015      	beq.n	800998a <_svfiprintf_r+0xf6>
 800995e:	9a07      	ldr	r2, [sp, #28]
 8009960:	4654      	mov	r4, sl
 8009962:	2000      	movs	r0, #0
 8009964:	f04f 0c0a 	mov.w	ip, #10
 8009968:	4621      	mov	r1, r4
 800996a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800996e:	3b30      	subs	r3, #48	; 0x30
 8009970:	2b09      	cmp	r3, #9
 8009972:	d94d      	bls.n	8009a10 <_svfiprintf_r+0x17c>
 8009974:	b1b0      	cbz	r0, 80099a4 <_svfiprintf_r+0x110>
 8009976:	9207      	str	r2, [sp, #28]
 8009978:	e014      	b.n	80099a4 <_svfiprintf_r+0x110>
 800997a:	eba0 0308 	sub.w	r3, r0, r8
 800997e:	fa09 f303 	lsl.w	r3, r9, r3
 8009982:	4313      	orrs	r3, r2
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	46a2      	mov	sl, r4
 8009988:	e7d2      	b.n	8009930 <_svfiprintf_r+0x9c>
 800998a:	9b03      	ldr	r3, [sp, #12]
 800998c:	1d19      	adds	r1, r3, #4
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	9103      	str	r1, [sp, #12]
 8009992:	2b00      	cmp	r3, #0
 8009994:	bfbb      	ittet	lt
 8009996:	425b      	neglt	r3, r3
 8009998:	f042 0202 	orrlt.w	r2, r2, #2
 800999c:	9307      	strge	r3, [sp, #28]
 800999e:	9307      	strlt	r3, [sp, #28]
 80099a0:	bfb8      	it	lt
 80099a2:	9204      	strlt	r2, [sp, #16]
 80099a4:	7823      	ldrb	r3, [r4, #0]
 80099a6:	2b2e      	cmp	r3, #46	; 0x2e
 80099a8:	d10c      	bne.n	80099c4 <_svfiprintf_r+0x130>
 80099aa:	7863      	ldrb	r3, [r4, #1]
 80099ac:	2b2a      	cmp	r3, #42	; 0x2a
 80099ae:	d134      	bne.n	8009a1a <_svfiprintf_r+0x186>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d1a      	adds	r2, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9203      	str	r2, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfb8      	it	lt
 80099bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80099c0:	3402      	adds	r4, #2
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a8c <_svfiprintf_r+0x1f8>
 80099c8:	7821      	ldrb	r1, [r4, #0]
 80099ca:	2203      	movs	r2, #3
 80099cc:	4650      	mov	r0, sl
 80099ce:	f7f6 fc87 	bl	80002e0 <memchr>
 80099d2:	b138      	cbz	r0, 80099e4 <_svfiprintf_r+0x150>
 80099d4:	9b04      	ldr	r3, [sp, #16]
 80099d6:	eba0 000a 	sub.w	r0, r0, sl
 80099da:	2240      	movs	r2, #64	; 0x40
 80099dc:	4082      	lsls	r2, r0
 80099de:	4313      	orrs	r3, r2
 80099e0:	3401      	adds	r4, #1
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e8:	4825      	ldr	r0, [pc, #148]	; (8009a80 <_svfiprintf_r+0x1ec>)
 80099ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099ee:	2206      	movs	r2, #6
 80099f0:	f7f6 fc76 	bl	80002e0 <memchr>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d038      	beq.n	8009a6a <_svfiprintf_r+0x1d6>
 80099f8:	4b22      	ldr	r3, [pc, #136]	; (8009a84 <_svfiprintf_r+0x1f0>)
 80099fa:	bb1b      	cbnz	r3, 8009a44 <_svfiprintf_r+0x1b0>
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	3307      	adds	r3, #7
 8009a00:	f023 0307 	bic.w	r3, r3, #7
 8009a04:	3308      	adds	r3, #8
 8009a06:	9303      	str	r3, [sp, #12]
 8009a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0a:	4433      	add	r3, r6
 8009a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a0e:	e768      	b.n	80098e2 <_svfiprintf_r+0x4e>
 8009a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a14:	460c      	mov	r4, r1
 8009a16:	2001      	movs	r0, #1
 8009a18:	e7a6      	b.n	8009968 <_svfiprintf_r+0xd4>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	3401      	adds	r4, #1
 8009a1e:	9305      	str	r3, [sp, #20]
 8009a20:	4619      	mov	r1, r3
 8009a22:	f04f 0c0a 	mov.w	ip, #10
 8009a26:	4620      	mov	r0, r4
 8009a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a2c:	3a30      	subs	r2, #48	; 0x30
 8009a2e:	2a09      	cmp	r2, #9
 8009a30:	d903      	bls.n	8009a3a <_svfiprintf_r+0x1a6>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0c6      	beq.n	80099c4 <_svfiprintf_r+0x130>
 8009a36:	9105      	str	r1, [sp, #20]
 8009a38:	e7c4      	b.n	80099c4 <_svfiprintf_r+0x130>
 8009a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a3e:	4604      	mov	r4, r0
 8009a40:	2301      	movs	r3, #1
 8009a42:	e7f0      	b.n	8009a26 <_svfiprintf_r+0x192>
 8009a44:	ab03      	add	r3, sp, #12
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	462a      	mov	r2, r5
 8009a4a:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <_svfiprintf_r+0x1f4>)
 8009a4c:	a904      	add	r1, sp, #16
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f3af 8000 	nop.w
 8009a54:	1c42      	adds	r2, r0, #1
 8009a56:	4606      	mov	r6, r0
 8009a58:	d1d6      	bne.n	8009a08 <_svfiprintf_r+0x174>
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	065b      	lsls	r3, r3, #25
 8009a5e:	f53f af2d 	bmi.w	80098bc <_svfiprintf_r+0x28>
 8009a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a64:	b01d      	add	sp, #116	; 0x74
 8009a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6a:	ab03      	add	r3, sp, #12
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	462a      	mov	r2, r5
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <_svfiprintf_r+0x1f4>)
 8009a72:	a904      	add	r1, sp, #16
 8009a74:	4638      	mov	r0, r7
 8009a76:	f000 f879 	bl	8009b6c <_printf_i>
 8009a7a:	e7eb      	b.n	8009a54 <_svfiprintf_r+0x1c0>
 8009a7c:	08009f40 	.word	0x08009f40
 8009a80:	08009f4a 	.word	0x08009f4a
 8009a84:	00000000 	.word	0x00000000
 8009a88:	080097e1 	.word	0x080097e1
 8009a8c:	08009f46 	.word	0x08009f46

08009a90 <_printf_common>:
 8009a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a94:	4616      	mov	r6, r2
 8009a96:	4699      	mov	r9, r3
 8009a98:	688a      	ldr	r2, [r1, #8]
 8009a9a:	690b      	ldr	r3, [r1, #16]
 8009a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	bfb8      	it	lt
 8009aa4:	4613      	movlt	r3, r2
 8009aa6:	6033      	str	r3, [r6, #0]
 8009aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009aac:	4607      	mov	r7, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	b10a      	cbz	r2, 8009ab6 <_printf_common+0x26>
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	6033      	str	r3, [r6, #0]
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	0699      	lsls	r1, r3, #26
 8009aba:	bf42      	ittt	mi
 8009abc:	6833      	ldrmi	r3, [r6, #0]
 8009abe:	3302      	addmi	r3, #2
 8009ac0:	6033      	strmi	r3, [r6, #0]
 8009ac2:	6825      	ldr	r5, [r4, #0]
 8009ac4:	f015 0506 	ands.w	r5, r5, #6
 8009ac8:	d106      	bne.n	8009ad8 <_printf_common+0x48>
 8009aca:	f104 0a19 	add.w	sl, r4, #25
 8009ace:	68e3      	ldr	r3, [r4, #12]
 8009ad0:	6832      	ldr	r2, [r6, #0]
 8009ad2:	1a9b      	subs	r3, r3, r2
 8009ad4:	42ab      	cmp	r3, r5
 8009ad6:	dc26      	bgt.n	8009b26 <_printf_common+0x96>
 8009ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009adc:	1e13      	subs	r3, r2, #0
 8009ade:	6822      	ldr	r2, [r4, #0]
 8009ae0:	bf18      	it	ne
 8009ae2:	2301      	movne	r3, #1
 8009ae4:	0692      	lsls	r2, r2, #26
 8009ae6:	d42b      	bmi.n	8009b40 <_printf_common+0xb0>
 8009ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009aec:	4649      	mov	r1, r9
 8009aee:	4638      	mov	r0, r7
 8009af0:	47c0      	blx	r8
 8009af2:	3001      	adds	r0, #1
 8009af4:	d01e      	beq.n	8009b34 <_printf_common+0xa4>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	6922      	ldr	r2, [r4, #16]
 8009afa:	f003 0306 	and.w	r3, r3, #6
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	bf02      	ittt	eq
 8009b02:	68e5      	ldreq	r5, [r4, #12]
 8009b04:	6833      	ldreq	r3, [r6, #0]
 8009b06:	1aed      	subeq	r5, r5, r3
 8009b08:	68a3      	ldr	r3, [r4, #8]
 8009b0a:	bf0c      	ite	eq
 8009b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b10:	2500      	movne	r5, #0
 8009b12:	4293      	cmp	r3, r2
 8009b14:	bfc4      	itt	gt
 8009b16:	1a9b      	subgt	r3, r3, r2
 8009b18:	18ed      	addgt	r5, r5, r3
 8009b1a:	2600      	movs	r6, #0
 8009b1c:	341a      	adds	r4, #26
 8009b1e:	42b5      	cmp	r5, r6
 8009b20:	d11a      	bne.n	8009b58 <_printf_common+0xc8>
 8009b22:	2000      	movs	r0, #0
 8009b24:	e008      	b.n	8009b38 <_printf_common+0xa8>
 8009b26:	2301      	movs	r3, #1
 8009b28:	4652      	mov	r2, sl
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	47c0      	blx	r8
 8009b30:	3001      	adds	r0, #1
 8009b32:	d103      	bne.n	8009b3c <_printf_common+0xac>
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3c:	3501      	adds	r5, #1
 8009b3e:	e7c6      	b.n	8009ace <_printf_common+0x3e>
 8009b40:	18e1      	adds	r1, r4, r3
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	2030      	movs	r0, #48	; 0x30
 8009b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b4a:	4422      	add	r2, r4
 8009b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b54:	3302      	adds	r3, #2
 8009b56:	e7c7      	b.n	8009ae8 <_printf_common+0x58>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	4638      	mov	r0, r7
 8009b60:	47c0      	blx	r8
 8009b62:	3001      	adds	r0, #1
 8009b64:	d0e6      	beq.n	8009b34 <_printf_common+0xa4>
 8009b66:	3601      	adds	r6, #1
 8009b68:	e7d9      	b.n	8009b1e <_printf_common+0x8e>
	...

08009b6c <_printf_i>:
 8009b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b70:	7e0f      	ldrb	r7, [r1, #24]
 8009b72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b74:	2f78      	cmp	r7, #120	; 0x78
 8009b76:	4691      	mov	r9, r2
 8009b78:	4680      	mov	r8, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	469a      	mov	sl, r3
 8009b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b82:	d807      	bhi.n	8009b94 <_printf_i+0x28>
 8009b84:	2f62      	cmp	r7, #98	; 0x62
 8009b86:	d80a      	bhi.n	8009b9e <_printf_i+0x32>
 8009b88:	2f00      	cmp	r7, #0
 8009b8a:	f000 80d4 	beq.w	8009d36 <_printf_i+0x1ca>
 8009b8e:	2f58      	cmp	r7, #88	; 0x58
 8009b90:	f000 80c0 	beq.w	8009d14 <_printf_i+0x1a8>
 8009b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b9c:	e03a      	b.n	8009c14 <_printf_i+0xa8>
 8009b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ba2:	2b15      	cmp	r3, #21
 8009ba4:	d8f6      	bhi.n	8009b94 <_printf_i+0x28>
 8009ba6:	a101      	add	r1, pc, #4	; (adr r1, 8009bac <_printf_i+0x40>)
 8009ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bac:	08009c05 	.word	0x08009c05
 8009bb0:	08009c19 	.word	0x08009c19
 8009bb4:	08009b95 	.word	0x08009b95
 8009bb8:	08009b95 	.word	0x08009b95
 8009bbc:	08009b95 	.word	0x08009b95
 8009bc0:	08009b95 	.word	0x08009b95
 8009bc4:	08009c19 	.word	0x08009c19
 8009bc8:	08009b95 	.word	0x08009b95
 8009bcc:	08009b95 	.word	0x08009b95
 8009bd0:	08009b95 	.word	0x08009b95
 8009bd4:	08009b95 	.word	0x08009b95
 8009bd8:	08009d1d 	.word	0x08009d1d
 8009bdc:	08009c45 	.word	0x08009c45
 8009be0:	08009cd7 	.word	0x08009cd7
 8009be4:	08009b95 	.word	0x08009b95
 8009be8:	08009b95 	.word	0x08009b95
 8009bec:	08009d3f 	.word	0x08009d3f
 8009bf0:	08009b95 	.word	0x08009b95
 8009bf4:	08009c45 	.word	0x08009c45
 8009bf8:	08009b95 	.word	0x08009b95
 8009bfc:	08009b95 	.word	0x08009b95
 8009c00:	08009cdf 	.word	0x08009cdf
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	1d1a      	adds	r2, r3, #4
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	602a      	str	r2, [r5, #0]
 8009c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c14:	2301      	movs	r3, #1
 8009c16:	e09f      	b.n	8009d58 <_printf_i+0x1ec>
 8009c18:	6820      	ldr	r0, [r4, #0]
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	0607      	lsls	r7, r0, #24
 8009c1e:	f103 0104 	add.w	r1, r3, #4
 8009c22:	6029      	str	r1, [r5, #0]
 8009c24:	d501      	bpl.n	8009c2a <_printf_i+0xbe>
 8009c26:	681e      	ldr	r6, [r3, #0]
 8009c28:	e003      	b.n	8009c32 <_printf_i+0xc6>
 8009c2a:	0646      	lsls	r6, r0, #25
 8009c2c:	d5fb      	bpl.n	8009c26 <_printf_i+0xba>
 8009c2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c32:	2e00      	cmp	r6, #0
 8009c34:	da03      	bge.n	8009c3e <_printf_i+0xd2>
 8009c36:	232d      	movs	r3, #45	; 0x2d
 8009c38:	4276      	negs	r6, r6
 8009c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c3e:	485a      	ldr	r0, [pc, #360]	; (8009da8 <_printf_i+0x23c>)
 8009c40:	230a      	movs	r3, #10
 8009c42:	e012      	b.n	8009c6a <_printf_i+0xfe>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	6820      	ldr	r0, [r4, #0]
 8009c48:	1d19      	adds	r1, r3, #4
 8009c4a:	6029      	str	r1, [r5, #0]
 8009c4c:	0605      	lsls	r5, r0, #24
 8009c4e:	d501      	bpl.n	8009c54 <_printf_i+0xe8>
 8009c50:	681e      	ldr	r6, [r3, #0]
 8009c52:	e002      	b.n	8009c5a <_printf_i+0xee>
 8009c54:	0641      	lsls	r1, r0, #25
 8009c56:	d5fb      	bpl.n	8009c50 <_printf_i+0xe4>
 8009c58:	881e      	ldrh	r6, [r3, #0]
 8009c5a:	4853      	ldr	r0, [pc, #332]	; (8009da8 <_printf_i+0x23c>)
 8009c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c5e:	bf0c      	ite	eq
 8009c60:	2308      	moveq	r3, #8
 8009c62:	230a      	movne	r3, #10
 8009c64:	2100      	movs	r1, #0
 8009c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c6a:	6865      	ldr	r5, [r4, #4]
 8009c6c:	60a5      	str	r5, [r4, #8]
 8009c6e:	2d00      	cmp	r5, #0
 8009c70:	bfa2      	ittt	ge
 8009c72:	6821      	ldrge	r1, [r4, #0]
 8009c74:	f021 0104 	bicge.w	r1, r1, #4
 8009c78:	6021      	strge	r1, [r4, #0]
 8009c7a:	b90e      	cbnz	r6, 8009c80 <_printf_i+0x114>
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	d04b      	beq.n	8009d18 <_printf_i+0x1ac>
 8009c80:	4615      	mov	r5, r2
 8009c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c86:	fb03 6711 	mls	r7, r3, r1, r6
 8009c8a:	5dc7      	ldrb	r7, [r0, r7]
 8009c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c90:	4637      	mov	r7, r6
 8009c92:	42bb      	cmp	r3, r7
 8009c94:	460e      	mov	r6, r1
 8009c96:	d9f4      	bls.n	8009c82 <_printf_i+0x116>
 8009c98:	2b08      	cmp	r3, #8
 8009c9a:	d10b      	bne.n	8009cb4 <_printf_i+0x148>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	07de      	lsls	r6, r3, #31
 8009ca0:	d508      	bpl.n	8009cb4 <_printf_i+0x148>
 8009ca2:	6923      	ldr	r3, [r4, #16]
 8009ca4:	6861      	ldr	r1, [r4, #4]
 8009ca6:	4299      	cmp	r1, r3
 8009ca8:	bfde      	ittt	le
 8009caa:	2330      	movle	r3, #48	; 0x30
 8009cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cb4:	1b52      	subs	r2, r2, r5
 8009cb6:	6122      	str	r2, [r4, #16]
 8009cb8:	f8cd a000 	str.w	sl, [sp]
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	aa03      	add	r2, sp, #12
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f7ff fee4 	bl	8009a90 <_printf_common>
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d14a      	bne.n	8009d62 <_printf_i+0x1f6>
 8009ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd0:	b004      	add	sp, #16
 8009cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	f043 0320 	orr.w	r3, r3, #32
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	4833      	ldr	r0, [pc, #204]	; (8009dac <_printf_i+0x240>)
 8009ce0:	2778      	movs	r7, #120	; 0x78
 8009ce2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	6829      	ldr	r1, [r5, #0]
 8009cea:	061f      	lsls	r7, r3, #24
 8009cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cf0:	d402      	bmi.n	8009cf8 <_printf_i+0x18c>
 8009cf2:	065f      	lsls	r7, r3, #25
 8009cf4:	bf48      	it	mi
 8009cf6:	b2b6      	uxthmi	r6, r6
 8009cf8:	07df      	lsls	r7, r3, #31
 8009cfa:	bf48      	it	mi
 8009cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8009d00:	6029      	str	r1, [r5, #0]
 8009d02:	bf48      	it	mi
 8009d04:	6023      	strmi	r3, [r4, #0]
 8009d06:	b91e      	cbnz	r6, 8009d10 <_printf_i+0x1a4>
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	f023 0320 	bic.w	r3, r3, #32
 8009d0e:	6023      	str	r3, [r4, #0]
 8009d10:	2310      	movs	r3, #16
 8009d12:	e7a7      	b.n	8009c64 <_printf_i+0xf8>
 8009d14:	4824      	ldr	r0, [pc, #144]	; (8009da8 <_printf_i+0x23c>)
 8009d16:	e7e4      	b.n	8009ce2 <_printf_i+0x176>
 8009d18:	4615      	mov	r5, r2
 8009d1a:	e7bd      	b.n	8009c98 <_printf_i+0x12c>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	6826      	ldr	r6, [r4, #0]
 8009d20:	6961      	ldr	r1, [r4, #20]
 8009d22:	1d18      	adds	r0, r3, #4
 8009d24:	6028      	str	r0, [r5, #0]
 8009d26:	0635      	lsls	r5, r6, #24
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	d501      	bpl.n	8009d30 <_printf_i+0x1c4>
 8009d2c:	6019      	str	r1, [r3, #0]
 8009d2e:	e002      	b.n	8009d36 <_printf_i+0x1ca>
 8009d30:	0670      	lsls	r0, r6, #25
 8009d32:	d5fb      	bpl.n	8009d2c <_printf_i+0x1c0>
 8009d34:	8019      	strh	r1, [r3, #0]
 8009d36:	2300      	movs	r3, #0
 8009d38:	6123      	str	r3, [r4, #16]
 8009d3a:	4615      	mov	r5, r2
 8009d3c:	e7bc      	b.n	8009cb8 <_printf_i+0x14c>
 8009d3e:	682b      	ldr	r3, [r5, #0]
 8009d40:	1d1a      	adds	r2, r3, #4
 8009d42:	602a      	str	r2, [r5, #0]
 8009d44:	681d      	ldr	r5, [r3, #0]
 8009d46:	6862      	ldr	r2, [r4, #4]
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f7f6 fac8 	bl	80002e0 <memchr>
 8009d50:	b108      	cbz	r0, 8009d56 <_printf_i+0x1ea>
 8009d52:	1b40      	subs	r0, r0, r5
 8009d54:	6060      	str	r0, [r4, #4]
 8009d56:	6863      	ldr	r3, [r4, #4]
 8009d58:	6123      	str	r3, [r4, #16]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d60:	e7aa      	b.n	8009cb8 <_printf_i+0x14c>
 8009d62:	6923      	ldr	r3, [r4, #16]
 8009d64:	462a      	mov	r2, r5
 8009d66:	4649      	mov	r1, r9
 8009d68:	4640      	mov	r0, r8
 8009d6a:	47d0      	blx	sl
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d0ad      	beq.n	8009ccc <_printf_i+0x160>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	079b      	lsls	r3, r3, #30
 8009d74:	d413      	bmi.n	8009d9e <_printf_i+0x232>
 8009d76:	68e0      	ldr	r0, [r4, #12]
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	4298      	cmp	r0, r3
 8009d7c:	bfb8      	it	lt
 8009d7e:	4618      	movlt	r0, r3
 8009d80:	e7a6      	b.n	8009cd0 <_printf_i+0x164>
 8009d82:	2301      	movs	r3, #1
 8009d84:	4632      	mov	r2, r6
 8009d86:	4649      	mov	r1, r9
 8009d88:	4640      	mov	r0, r8
 8009d8a:	47d0      	blx	sl
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d09d      	beq.n	8009ccc <_printf_i+0x160>
 8009d90:	3501      	adds	r5, #1
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	9903      	ldr	r1, [sp, #12]
 8009d96:	1a5b      	subs	r3, r3, r1
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	dcf2      	bgt.n	8009d82 <_printf_i+0x216>
 8009d9c:	e7eb      	b.n	8009d76 <_printf_i+0x20a>
 8009d9e:	2500      	movs	r5, #0
 8009da0:	f104 0619 	add.w	r6, r4, #25
 8009da4:	e7f5      	b.n	8009d92 <_printf_i+0x226>
 8009da6:	bf00      	nop
 8009da8:	08009f51 	.word	0x08009f51
 8009dac:	08009f62 	.word	0x08009f62

08009db0 <memmove>:
 8009db0:	4288      	cmp	r0, r1
 8009db2:	b510      	push	{r4, lr}
 8009db4:	eb01 0402 	add.w	r4, r1, r2
 8009db8:	d902      	bls.n	8009dc0 <memmove+0x10>
 8009dba:	4284      	cmp	r4, r0
 8009dbc:	4623      	mov	r3, r4
 8009dbe:	d807      	bhi.n	8009dd0 <memmove+0x20>
 8009dc0:	1e43      	subs	r3, r0, #1
 8009dc2:	42a1      	cmp	r1, r4
 8009dc4:	d008      	beq.n	8009dd8 <memmove+0x28>
 8009dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dce:	e7f8      	b.n	8009dc2 <memmove+0x12>
 8009dd0:	4402      	add	r2, r0
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	428a      	cmp	r2, r1
 8009dd6:	d100      	bne.n	8009dda <memmove+0x2a>
 8009dd8:	bd10      	pop	{r4, pc}
 8009dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009de2:	e7f7      	b.n	8009dd4 <memmove+0x24>

08009de4 <_sbrk_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d06      	ldr	r5, [pc, #24]	; (8009e00 <_sbrk_r+0x1c>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	602b      	str	r3, [r5, #0]
 8009df0:	f7f7 fb80 	bl	80014f4 <_sbrk>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_sbrk_r+0x1a>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_sbrk_r+0x1a>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	24000b0c 	.word	0x24000b0c

08009e04 <_realloc_r>:
 8009e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e08:	4680      	mov	r8, r0
 8009e0a:	4614      	mov	r4, r2
 8009e0c:	460e      	mov	r6, r1
 8009e0e:	b921      	cbnz	r1, 8009e1a <_realloc_r+0x16>
 8009e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e14:	4611      	mov	r1, r2
 8009e16:	f7ff bc57 	b.w	80096c8 <_malloc_r>
 8009e1a:	b92a      	cbnz	r2, 8009e28 <_realloc_r+0x24>
 8009e1c:	f7ff fbe8 	bl	80095f0 <_free_r>
 8009e20:	4625      	mov	r5, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	f000 f81b 	bl	8009e62 <_malloc_usable_size_r>
 8009e2c:	4284      	cmp	r4, r0
 8009e2e:	4607      	mov	r7, r0
 8009e30:	d802      	bhi.n	8009e38 <_realloc_r+0x34>
 8009e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e36:	d812      	bhi.n	8009e5e <_realloc_r+0x5a>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	f7ff fc44 	bl	80096c8 <_malloc_r>
 8009e40:	4605      	mov	r5, r0
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0ed      	beq.n	8009e22 <_realloc_r+0x1e>
 8009e46:	42bc      	cmp	r4, r7
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	bf28      	it	cs
 8009e4e:	463a      	movcs	r2, r7
 8009e50:	f7ff fbc0 	bl	80095d4 <memcpy>
 8009e54:	4631      	mov	r1, r6
 8009e56:	4640      	mov	r0, r8
 8009e58:	f7ff fbca 	bl	80095f0 <_free_r>
 8009e5c:	e7e1      	b.n	8009e22 <_realloc_r+0x1e>
 8009e5e:	4635      	mov	r5, r6
 8009e60:	e7df      	b.n	8009e22 <_realloc_r+0x1e>

08009e62 <_malloc_usable_size_r>:
 8009e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e66:	1f18      	subs	r0, r3, #4
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bfbc      	itt	lt
 8009e6c:	580b      	ldrlt	r3, [r1, r0]
 8009e6e:	18c0      	addlt	r0, r0, r3
 8009e70:	4770      	bx	lr
	...

08009e74 <_init>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	bf00      	nop
 8009e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7a:	bc08      	pop	{r3}
 8009e7c:	469e      	mov	lr, r3
 8009e7e:	4770      	bx	lr

08009e80 <_fini>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	bf00      	nop
 8009e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e86:	bc08      	pop	{r3}
 8009e88:	469e      	mov	lr, r3
 8009e8a:	4770      	bx	lr
